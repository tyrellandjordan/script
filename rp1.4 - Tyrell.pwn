/******************************************************************************/
/* @Author: Terence Jefferies (TJ) (TTJJ) (NINTHTJ) 						  */
/* @Remarks: Please do not remove any credits to myself (TJ/TTJJ/NINTHTJ)     */
/* Where possible, there are notes in this script crediting mappers/coders    */
/* from whom I have taken code                                                */
/******************************************************************************/
/* @License: Creative Commons - Attribution-NonCommercial 3.0 Unported        */
/* http://creativecommons.org/licenses/by-nc/3.0/                             */
/******************************************************************************/
/* DISCLAIMER 					 										      */
/* This script was an ENORMOUS learning curve for me, although I have 		  */
/* programmed SAMP roleplay servers in the past, this still presented a   	  */
/* particular challenge for me. Parts may be inconsistent or poorly optimised */
/* this is simply a warning about that scenario                               */
/******************************************************************************/
/* This script was a project undertaken by myself and members of the          */
/* 101st Division clan, although we enjoyed making and testing it, we lacked  */
/* the capability to run it for prolongued periods due to lack of interest.   */
/* For that reason, we are releasing it. For me, personally, the enjoyment    */
/* came from the creation of this project, so all I ask is that you keep this */
/* portion of the script, as a form of recognission of my work. I hope you    */
/* enjoy it.                                                                  */
/******************************************************************************/


#include <a_samp>
#include <a_mysql>
#include <strlib>
#include <utils>
#include <a_http>
#include <dini>
#include <multilines>
#include <audio>
#include <F_Streamer>
#include <zones>
#include <progress>
#include <neon>
#include <zcmd>
#include <regex>
#include <opjv>

#define SERVER_VERSION "v1.4" //Use this from now on when changing server versions.

#define COLOR_TIMEOUT 0x000000e2
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0xFFA500AA
#define COLOR_OOC 0xE0FFFFAA
#define OBJECTIVE_COLOR 0x64000064
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_JOB_COLOR 0xFFB6C1AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x8D8DFF00
#define COLOR_ADD 0x63FF60AA
#define TEAM_GROVE_COLOR 0x00D900C8
#define TEAM_VAGOS_COLOR 0xFFC801C8
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_ORANGE_COLOR 0xFF830000
#define TEAM_COR_COLOR 0x39393900
#define TEAM_BAR_COLOR 0x00D90000
#define TEAM_TAT_COLOR 0xB8860BAA
#define TEAM_CUN_COLOR 0xD900D300
#define TEAM_STR_COLOR 0x01FCFF00
#define TEAM_ADMIN_COLOR 0x00808000
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200
#define COLOR_FACTION 0x46e7ffff

#define CLOTHING_PLAYER 1
#define CLOTHING_WEAPON 2
#define CLOTHING_PHONE 3
#define CLOTHING_MISC 4
#define CLOTHING_HIDEWEAPON 5
#define CLOTHING_HIDEWEAPONTWO 6

#define CTYPE_MASK 0
#define CTYPE_WATCH 1
#define CTYPE_HAT 2
#define CTYPE_GLASSES 3

#define CHEAT_SPEEDHACK 1
#define CHEAT_JETPACK 2
#define CHEAT_WEAPONS 3
#define CHEAT_AMMO 4

#define MAX_RP_VEHICLES 500
#define MAX_HOUSES 500
#define MAX_BIZES 250
#define MAX_FACTIONS 25
#define MAX_MAIL 16
#define MAX_INTERIORS 250
#define MAX_COMPANIES 50
#define MAX_SPIKESTRIPS 15
#define MAX_STOCK 7
#define MAX_COOLDOWNS 10
#define MAX_HOUSE_UPGRADES 5
#define MAX_HOUSE_INVENTORY 50
#define MAX_BOOMBOXES 25
#define MAX_PLAYERCLOTHING 5
#define MAX_CELLS 28

#define HOUSE_UPGRADE_BED 0
#define HOUSE_UPGRADE_STORAGE 1
#define HOUSE_UPGRADE_FRIDGE 2
#define HOUSE_UPGRADE_PHONE 3
#define HOUSE_UPGRADE_ALARM 4

#define LANGUAGE_SPANISH 1
#define LANGUAGE_ITALIAN 2
#define LANGUAGE_CHINESE 3
#define LANGUAGE_GERMAN 4
#define LANGUAGE_FRENCH 5

#define QUERY_LOGIN_USER 1
#define QUERY_LOGIN_SEND 2
#define QUERY_LOGIN_STATS 3
#define QUERY_LOGIN_CHARS 4
#define QUERY_LOGIN_MAIL 5
#define QUERY_FIND_MAIL 6
#define QUERY_SEND_MAIL 7
#define QUERY_SEND_CRIME 8
#define QUERY_LOGIN_BANCHECK 9
#define QUERY_CHECKCLOTHES 10
#define QUERY_LOGIN_NOTES 11
#define QUERY_LOGIN_INVENTORY 12
#define QUERY_CREATE_INVENTORY 13
#define QUERY_CREATE_VINVENTORY 14
#define QUERY_SAVE_VINVENTORY 15
#define QUERY_CREATE_ACCOUNT 16
#define QUERY_CREATE_CHAR 17
#define QUERY_REQCALLS 18
#define QUERY_WARRANTS 19
#define QUERY_GETCALL 20
#define QUERY_EQUIPCLOTHING 21
#define QUERY_AMMEND_LIST 22
#define QUERY_DELETE_INVENTORY 23
#define QUERY_REQ_STATIONS 24
#define QUERY_SET_STATION 25
#define QUERY_LOAD_INVENTORY 26
#define QUERY_SEND_CHEQUE 27
#define QUERY_CASH_CHEQUE 28
#define QUERY_VIEW_CHEQUES 29
#define QUERY_TENANTS 30
#define QUERY_EVICT 31
#define QUERY_APB 32
#define QUERY_APB_READ 33
#define QUERY_APB_CREATE 34
#define QUERY_SAVE_FACTIONS 35
#define QUERY_LOAD_COMPANIES 36
#define QUERY_SAVE_COMPANY 37
#define QUERY_WORK_LOG 38
#define QUERY_WORKLOGS 39
#define QUERY_LOG_CON 40
#define QUERY_SAVE_RIGS 41
#define QUERY_LOAD_RIGS 42
#define QUERY_BUY_STOCK 43
#define QUERY_STOCK_LIST 44
#define QUERY_SELL_STOCK 45
#define QUERY_COMPMEMBERS 46
#define QUERY_LOAD_RINGTONE 47
#define QUERY_RINGTONES 48
#define QUERY_LISTEN_RINGTONE 49
#define QUERY_SET_RINGTONE 50
#define QUERY_PURCHASE_VEHICLE 51
#define QUERY_SIGN 52
#define QUERY_TUNE_BOOMBOX 53
#define QUERY_UNBAN 54
#define QUERY_COMPLETE_UNBAN 55
#define QUERY_REQAMMEND 56
#define QUERY_DRESS_PLAYER 57
#define QUERY_LOAD_PRISON 58
#define QUERY_FETCH_TICKETS 59
#define QUERY_VIEW_TICKETS 60
#define QUERY_PAY_TICKET 61
#define QUERY_MDC_FINE 62
#define QUERY_SAVE_PRISON 63

#define QUERY_VEHICLE_DEATH 50001

#define QUERY_LOAD_VEHICLES 1001
#define QUERY_LOAD_HOUSES 1002
#define QUERY_LOAD_BIZES 1003
#define QUERY_LOAD_MODELS 1004
#define QUERY_LOAD_FACTIONS 1005
#define QUERY_LOAD_INTERIORS 1006
#define QUERY_LOAD_RADIO 1007
#define QUERY_LOAD_DRUGS 1008
#define QUERY_LOAD_VINVENTORY 1009
#define QUERY_DELETE_VINVENTORY 1010

#define QUERY_HOUSE_SAVE 2000
#define QUERY_BIZ_SAVE 2001
#define QUERY_VEHICLES_SAVE 2002
#define QUERY_RADIO_SAVE 2003
#define QUERY_RADIO_CREATE 2004
#define QUERY_SAVE_INTERIORS 2005
#define QUERY_SAVE_PLAYER 2006
#define QUERY_SAVE_NOTE 2007
#define QUERY_CREATE_NOTE 2008
#define QUERY_SAVE_INVENTORY 2009
#define QUERY_DRUG_SAVE 2010

#define DIALOG_HOUSE 2
#define CONFIRM_TYPE_SELLHOUSE 3
#define DIALOG_FOOD 4
#define DIALOG_FUEL 5
#define DIALOG_BUY 6
#define DIALOG_BUY_GUN 7
#define DIALOG_BIZ 8
#define DIALOG_SELLBIZ 9
#define DIALOG_INSURANCE 10
#define DIALOG_LOCK 11
#define DIALOG_MAIL 12
#define DIALOG_PASSGUN 13
#define DIALOG_DRINK 14
#define DIALOG_BUYFAC 15
#define DIALOG_REG1 16
#define DIALOG_REG2 17
#define DIALOG_REG3 18
#define DIALOG_REG4 19
#define DIALOG_LANGUAGE 20
#define DIALOG_BLANK 21
#define DIALOG_PAINTPLATE 22
#define DIALOG_SELLCAR 23
#define DIALOG_SCRAPCAR 24
#define DIALOG_TAKESAVE 25
#define DIALOG_TOUR 26
#define DIALOG_HOTEL 27
#define DIALOG_CLOTHINGBOT 28
#define DIALOG_RACES 29
#define DIALOG_CONFIRMHP 30
#define DIALOG_GPS 31
#define DIALOG_FUELCOMPANY 32
#define DIALOG_BUYRIG 33
#define DIALOG_CHOOSERIG 34
#define DIALOG_ACCEPTRIG 35
#define DIALOG_GATE 36
#define DIALOG_COMPREPAIR 37
#define DIALOG_BUYNEON 38
#define DIALOG_SELLSTOCK 39
#define DIALOG_HOUSEUPGRADE 40
#define DIALOG_GUNRUN 41
#define CONFIRM_TYPE_LEARNSKILL 42
#define DIALOG_VAUCTION 43
#define DIALOG_CLOTHINGTOP 44
#define CONFIRM_TYPE_BUYCLOTHES 45
#define DIALOG_NAMECLOTHES 46
#define DIALOG_AMMENDMENU 47
#define DIALOG_BUYPHONE 48
#define DIALOG_MARKET 49
#define DIALOG_MARKET2 50
#define DIALOG_MARKET3 51
#define DIALOG_REG5 52
#define DIALOG_ARMORY 53

#define BIZ_TYPE_VEHICLE 1
#define BIZ_TYPE_BOAT 2
#define BIZ_TYPE_PLANE 3
#define BIZ_TYPE_FOOD 4
#define BIZ_TYPE_FUEL 5
#define BIZ_TYPE_GEN 6
#define BIZ_TYPE_GUN 7
#define BIZ_TYPE_VUPGRADE 8
#define BIZ_TYPE_MAIL 9
#define BIZ_TYPE_BANK 10
#define BIZ_TYPE_DRINK 11
#define BIZ_TYPE_SPRAY 12
#define BIZ_TYPE_AD 13
#define BIZ_TYPE_HOTEL 14
#define BIZ_TYPE_CLOTHES 15
#define BIZ_TYPE_TRANS 16
#define BIZ_TYPE_WHEELS 17
#define BIZ_TYPE_LOCO 18
#define BIZ_TYPE_RACES 19
#define BIZ_TYPE_GYM 20
#define BIZ_TYPE_FLYSCHOOL 21
#define BIZ_TYPE_STOCK 22
#define BIZ_TYPE_LIB 23
#define BIZ_TYPE_VAUCTION 24

#define MOD_TYPE_TRANS 1
#define MOD_TYPE_LOCO 2
#define MOD_TYPE_WHEELS 3

#define VEHICLE_MODEL_TYPE_CAR 1
#define VEHICLE_MODEL_TYPE_BOAT 2
#define VEHICLE_MODEL_TYPE_PLANE 3

#define VIRTUAL_WORLD_CARCHOOSE 9191
#define VIRTUAL_WORLD_INTERIORS 2000000

#define JOB_DELIVER 1
#define JOB_POSTMAN 2
#define JOB_MECHANIC 3
#define JOB_TAXI 4
#define JOB_RUBBISH 5
#define JOB_FISH 6
#define JOB_BUS 7
#define JOB_BAGS 8
#define JOB_ENG 9
#define JOB_GARBAGE 10
#define JOB_TRUCKER 11
#define JOB_PIZZA 12
#define JOB_SWEEPER 13
#define JOB_DEALER 14
#define JOB_SMUGGLE 15
#define JOB_FARMER 16

#define SKILL_MINER 1
#define SKILL_MANUFACTER 2
#define SKILL_MECHANIC 3
#define SKILL_FISHER 4

#define FAC_PERM_LEAD 1
#define FAC_PERM_SUPER 2
#define FAC_PERM_MEMBER 3

#define FAC_TYPE_LAW 1
#define FAC_TYPE_GENERAL 2
#define FAC_TYPE_NEWS 3
#define FAC_TYPE_MEDIC 4
#define FAC_TYPE_GOV 5

#define LIC_TYPE_NORM 1.0
#define LIC_TYPE_LEFT 2.0
#define LIC_TYPE_RIGHT 3.0
#define LIC_TYPE_RESULT 4.0
#define LIC_TYPE_REVSTART 5.0
#define LIC_TYPE_REVEND 6.0

#define COOK_TYPE_EGG 1
#define COOK_TYPE_BREAD 2
#define COOK_TYPE_MEAT 3
#define COOK_TYPE_CHEESE 4
#define COOK_TYPE_RICE 5
#define COOK_TYPE_CHILLI 6
#define COOK_TYPE_DOUGH 7

#define ADMIN_LVL_TRAIN 1
#define ADMIN_LVL_ADMIN 2
#define ADMIN_LVL_SUPER 3
#define ADMIN_LVL_LEAD 4

#define DUTY_TYPE_NORM 1
#define DUTY_TYPE_SWAT 2
#define DUTY_TYPE_CSI 3
#define DUTY_TYPE_MEDIC 4
#define DUTY_TYPE_FIRE 5
#define DUTY_TYPE_PRISON 6

#define INVENTORY_TYPE_PLAYER 1
#define INVENTORY_TYPE_VEHICLE 2

#define INVENTORY_RADIO 1
#define INVENTORY_DEAGLEPACK 2
#define INVENTORY_MP5PACK 3
#define INVENTORY_AK47PACK 4
#define INVENTORY_TEC9PACK 5
#define INVENTORY_SPAZ12PACK 6
#define INVENTORY_MAC10PACK 7
#define INVENTORY_RIFLEPACK 8
#define INVENTORY_SHOTGUN 9
#define INVENTORY_WEEDSEED 10
#define INVENTORY_HEROINSEED 11
#define INVENTORY_COKESEED 12
#define INVENTORY_WEED 13
#define INVENTORY_COKE 14
#define INVENTORY_HEROIN 15
#define INVENTORY_CANDY 16
#define INVENTORY_MATS 17
#define INVENTORY_SNIPER 18
#define INVENTORY_GASCAN 19
#define INVENTORY_BOOMBOX 20
#define INVENTORY_METAL 21
#define INVENTORY_CARPART 22
#define INVENTORY_FISHROD 23
#define INVENTORY_FISH 24

#define DRUG_WEED 1
#define DRUG_COKE 2
#define DRUG_HEROIN 3

#define QUESTEVENT_START 1
#define QUESTEVENT_UPDATE 2

#define CALL_TYPE_PD 1
#define CALL_TYPE_MEDIC 2

#define MAX_RADIO 1000
#define MAX_NOTES 10
#define MAX_INVENTORY 10
#define MAX_INVENTORY_SLOT 10
#define MAX_DRUGS 250
#define MAX_ROADBLOCKS 50
#define AFK_TIME 1200
#define MAX_VEH_WEAPONS 10

#define MAX_HOUSE_WEAPONS 10

#define RACE_ENTRIES 10

#define HP_INSURANCE_BASEPRICE 3824

#define MAX_NASCAR_LAPS 7

#define chrtoupper(%1) \
        (((%1) > 0x60 && (%1) <= 0x7A) ? ((%1) ^ 0x20) : (%1))

#undef MAX_PLAYERS
#define MAX_PLAYERS 108

#define COMP_PERMS_LEADER 3
#define COMP_PERMS_SUPER 2
#define COMP_PERMS_MEMBER 1

#define COMP_TYPE_AIRLINE 1
#define COMP_TYPE_TRUCK 2
#define COMP_TYPE_OIL 3

#define PROGRESS_BAR_INVALID -1
#define PROGRESS_BAR_AIRLINEJOB 1
#define PROGRESS_BAR_DELJOB 2
#define PROGRESS_BAR_CHOP 3
#define PROGRESS_BAR_ENG 4
#define PROGRESS_BAR_DEL 5
#define PROGRESS_BAR_BUS 6
#define PROGRESS_BAR_TOWCAR 7
#define PROGRESS_BAR_OILJOB 8
#define PROGRESS_BAR_FIX 9
#define PROGRESS_BAR_TRUCK 10
#define PROGRESS_BAR_LANGUAGE 11
#define PROGRESS_BAR_LEARNSKILL 12
#define PROGRESS_BAR_MINE 13
#define PROGRESS_BAR_METAL 14
#define PROGRESS_BAR_REPAIR 15
#define PROGRESS_BAR_VUPGRADE 16
#define PROGRESS_BAR_FISH 17

#define STOCK_VEHICLE 0
#define STOCK_FOOD 1
#define STOCK_MOD 2
#define STOCK_STORE 3
#define STOCK_DRINK 4
#define STOCK_AD 5
#define STOCK_BANK 6

#define COOLDOWN_STOCK 0
#define COOLDOWN_COMPMEMBERS 1
#define COOLDOWN_RINGTONE 2
#define COOLDOWN_RADIOSTATIONS 3
#define COOLDOWN_BOOMBOX 4
#define COOLDOWN_MINE 5
#define COOLDOWN_MANUFACTER 6
#define COOLDOWN_HOTWIRE 7
#define COOLDOWN_CLOTHES 8
#define COOLDOWN_GARBAGE 9

#define URL_CHECK_PURCHASE "ucp.countrysidegaming.com/resources/checkwallet.php"
#define URL_MAKE_PURCHASE "ucp.countrysidegaming.com/resources/makepurchase.php"

#define PURCHASE_CHECK 1
#define PURCHASE_VALIDATION 2
#define PURCHASE_ERROR 3
#define PURCHASE_FINAL 4

#define ENVIROMENT_DEV 1
#define ENVIROMENT_LIVE 2

#define IsValidRpName(%1) \
    regex_match(%1, "([A-Z]{1,1})[a-z]{2,9}+_([A-Z]{1,1})[a-z]{2,9}")

native WP_Hash(buffer[], len, const str[]);

forward OnQueryFinish( query[], resultid, extraid, connectionHandle );
forward RemoveMiscClothing(playerid);
forward cl_OnEditAmmendClothes(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
forward cl_OnEditShowroomClothes(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
forward BlowUpGasStation();
forward qs_ResetQuestObjects(playerid);
forward HttpPlateReciever(index, response_code, data[]);
forward HttpPlateFinaliseReciever(index, response_code, data[]);
forward HttpNeonReciever(index, response_code, data[]);
forward HttpNeonFinaliseReciever(index, response_code, data[]);
forward HidePayment(playerid);
forward HttpVehicleFinaliseReciever(index, response_code, data[]);
forward RunNextScreenSaver(playerid,lastscreen);
forward IsPlayerConnectedEx(playerid);
forward QuickListener();
forward ResetRaceCheck(playerid);
forward ResetCrash(playerid);
forward VerifyInteriorPos(playerid);
forward RaceListener();
forward AccountExists(name[],playerid);
forward ResetStats(playerid);
forward ProcessSpawn(playerid);
forward LoadStats(playerid);
forward RefreshCharSelection(playerid,offset);
forward NumberOfCharacters(playerid);
forward CreateTextDraws();
forward StartTimers();
forward CreatePlayerTextDraws(playerid);
forward DestroyPlayerTextDraws(playerid);
forward SaveStats(playerid);
forward InitTime();
forward ConfigPlayer(playerid);
forward GeneralListener();
forward GetCharacterName(playerid,formatme[]);
forward SendLocalOOCMessage(playerid,str[]);
forward SendLocalICMessage(playerid,str[],Float:distance);
forward LoadVehicles();
forward CreateVehicles();
forward LoadHouses();
forward CreateHouses();
forward GetClosestHouse(playerid);
forward Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1);
forward Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
forward IsHouseOwner(playerid,houseid);
forward SaveHouses();
forward IsRentingHouse(playerid,houseid);
forward SendConfirmationMsg(playerid,msg[],type,extra);
forward LoadBizes();
forward CreateBizes();
forward LoadVehicleModels();
forward CreateBuyVehicles();
forward PutPlayerInShowroom(playerid,type);
forward RefreshPlayerShowroomPosition(playerid);
forward Float:GetPosInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance);
forward FetchNextVehiclePosition(playerid,type);
forward FetchPrevVehiclePosition(playerid,type);
forward GetClosestBiz(playerid);
forward ResetCharacters(playerid);
forward OnPlayerEnterBusiness(playerid,bizid);
forward OnPlayerExitBusiness(playerid,bizid);
forward CreateBuyBoats();
forward CreateBuyPlanes();
forward IsAtGasStation(playerid);
forward GetVehicleSlot(vehicleid);
forward IsInStore(playerid);
forward RefreshMaskStatus(playerid,togglefor);
forward IsInGunShop(playerid);
forward IsBusinessOwner(playerid,biz);
forward ShowBusinessFinance(playerid,biz);
forward SendEmote(playerid,emote[]);
forward SendDoEmote(playerid,emote[]);
forward Float:GetDistanceBetweenPlayers(playerid,playerid2);
forward NumberOfVehicles(playerid);
forward FetchNextVehicleSlot();
forward GetPlayerSpeed(playerid,bool:kmm);
forward GetPlayerMileage(playerid,bool:kmm);
forward IsAtUpgradeShop(playerid);
forward FetchVehicleInsurancePrice(model);
forward SendServerEmote(emote[],Float:X, Float:Y, Float:Z, Float:dis, world);
forward GetClosestVehicle(playerid);
forward ShowVehicleList(playerid,forplayer);
forward LoadFactions();
forward GiveCellPhone(playerid);
forward BeginCall(playerid,phonenumber);
forward ConnectCall(playerid);
forward HangupCall(playerid);
forward SendSMS(playerid,number,msg[]);
forward LoadMail(playerid);
forward SaveMail(playerid,mailid);
forward IsInMailRoom(playerid);
forward ProcessMailStage(playerid,text[]);
forward SendMail(characterto,subject[],message[],sender[],thread);
forward RefreshCharacterMail(character);
forward GetCharacterID(playerid);
forward ShowLetter(playerid,offset);
forward ListMail(playerid,forplayer);
forward HideLetter(playerid);
forward Refresh();
forward Weather();
forward AddJobVehicles();
forward GiveSavedWeapons(playerid);
forward SendTransferWeaponsScreen(playerid,other);
forward IsInBank(playerid);
forward AddJobs();
forward InDeliveryVan(playerid);
forward RefreshDeliveryStage(playerid);
forward InTaxi(playerid);
forward DisconnectTaxi(playerid);
forward LeaveTaxi(playerid);
forward SendTaxiMission(playerid);
forward RefreshFareStage(playerid);
forward RefreshBusStage(playerid);
forward InBus(playerid);
forward IsInPub(playerid);
forward StartEngine(vehicleid);
forward StopEngine(vehicleid);
forward IsEngineOn(vehicleid);
forward VehicleListener();
forward FuelCheck(vehicleid);
forward RefreshVehicleColorScreen(playerid);
forward InGarbage(playerid);
forward OnPlayerPickupGarbage(playerid);
forward OnPlayerDropGarbage(playerid);
forward RefreshGarbageStage(playerid);
forward OnPlayerStartGarbage(playerid);
forward OnPlayerEndGarbage(playerid);
forward InFish(playerid);
forward OnStartFishing(playerid);
forward OnFishRefresh(playerid);
forward OnEndFishing(playerid,givepay);
forward GetFactionName(factionid,name[]);
forward GetFactionSlot(factionid);
forward SendFactionMessage(factionid,msg[]);
forward CanBuyVehicle(playerid);
forward IsLaw(playerid);
forward IsFactionVehicle(factionid,vehicleslot);
forward IsAnyPlayerInVehicle(vehicleid);
forward TowFactionVehicles(factionid);
forward ToggleDuty(playerid,type);
forward ArrestPlayer(playerid,time,reason[],officer,bail);
forward ShowPlayerWeapons(playerid,forplayer);
forward TazePlayer(shooter,target);
forward SendNewsBroadcast(playerid,news[]);
forward InNewsVan(playerid);
forward IsNews(playerid);
forward SendMegaphone(playerid,str[]);
forward InCopCar(playerid);
forward OnPlayerEnterVehicleTest(playerid);
forward OnPlayerFinishDrivingTest(playerid);
forward OnRefreshVehicleTest(playerid);
forward TriggerPayday(playerid);
forward ProcessCooking(playerid,text[]);
forward FetchNextCookingSlot(playerid);
forward PrepareMeal(playerid);
forward FetchCookingElements(offset);
forward LoadInteriors();
forward CreateInteriors();
forward GetClosestInterior(playerid);
forward OnPlayerEnterInterior(playerid,inter);
forward OnPlayerExitInterior(playerid);
forward FetchCookingIngreedients(playerid);
forward LogAdminAction(action[],reason[],admin,target);
forward SendActionReport(action[],playerid,sender,reason[]);
forward KickPlayer(target,sender,reason[]);
forward BanPlayer(target,sender,reason[]);
forward BanCheck(playerid);
forward AjailPlayer(target,sender,reason[],time);
forward LogPM(sender[],reciever[],msg[],senderid);
forward SaveBizes();
forward SaveVehicles();
forward HttpVehicleReciever(index, response_code, data[]);
forward SendAdminBroadcast(text[]);
forward StartAlarm(vehicleid);
forward StopAlarm(vehicleid);
forward TowPlayerVehicle(playerid,offset);
forward InRentCar(playerid);
forward AcceptVehicleCharge(playerid,offset);
forward FetchVehiclePrice(model);
forward AddObjects();
forward RefreshEmerCallStage(playerid,text[]);
forward SendEmerCall(playerid);
forward BizListener();
forward BillBiz(biz);
forward IsRentCar(vehicleid);
forward GetConnectedVehicleOwnerID(vehicleid);
forward FetchHouseSlot(houseid);
forward RefreshPlayerTutorial(playerid);
forward OfferSellCar(playerid,other,offset,price);
forward SendMissionIntro(playerid,mission);
forward StartMission(playerid,mission);
forward CheckMissionComplete(playerid,mission);
forward SetMissionComplete(playerid,missionid);
forward InAdShop(playerid);
forward SendAd(playerid,text[]);
forward LoadRadios();
forward ConnectRadio(playerid,channel);
forward SaveInteriors();
forward ResetSpawnStuff(playerid);
forward AddGates();
forward OnPlayerCreateNote(playerid,text[]);
forward ShowNoteList(playerid);
forward StopTalk(playerid);
forward SetDeathAnim(playerid);
forward OnPlayerGiveup(playerid);
forward LoadDrugs();
forward SaveDrugs();
forward RefreshHeroinStage(playerid);
forward OnPlayerStartTrucking(playerid);
forward UpdateTruckerStage(playerid);
forward LoadVehicleInventory();
forward CrashListener();
forward HideCrash(playerid);
forward AddSpeedCameras();
forward CreateMenus();
forward Float:GetPosInFrontOfCoord(&Float:x, &Float:y, Float:r, Float:distance);
forward Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance);
forward SendEmerCalls(playerid,type);
forward CheatListener();
forward SendMsg(playerid, color,const str[], define);
forward SendStrMsg(playerid,color,const str[], define[]);
//forward OnPlayerWeaponsChange(playerid,weaponid);

/*********TEXT DRAWS********/

new Text:logintxt;
new Text:charchoosetxt[MAX_PLAYERS];
new Text:timetxt;
new Text:infotxt[MAX_PLAYERS];
new Text:mailmsg;
new Text:mailtxt[MAX_PLAYERS];
new Text:mailhelp;
new Text:mailnav;
new Text:jail_timeleft[MAX_PLAYERS];
new Text:ucp_txt;
new Text:crash_screen;
new Text:errormsg[MAX_PLAYERS];
new Text:logo;
new Text:speedo_txt[MAX_PLAYERS];
new Text:announcetxt;
new Bar:progress_bar[MAX_PLAYERS];
new Text:stocktitle;
new Text:stockcontent;
new Text:payment_text[MAX_PLAYERS];

/********END TEXT DRAWS******/

/********Player Vars********/

new prisoner[MAX_PLAYERS];
new playing_prison_alarm[MAX_PLAYERS];
new reg_sex[MAX_PLAYERS][32];
new vu_upgrading[MAX_PLAYERS];
new vu_upgradelevel[MAX_PLAYERS];
new spraying_vehicle[MAX_PLAYERS];
new spraying_vehicle_color[MAX_PLAYERS];
new last_caller[MAX_PLAYERS];
new farming[MAX_PLAYERS];
new farming_stage[MAX_PLAYERS];
new cheat_weapons[MAX_PLAYERS][13];
new cheat_ammo[MAX_PLAYERS][13];
new cuffed[MAX_PLAYERS];
new purchase_plate_cmd[MAX_PLAYERS][256];
new buying_plate_ignoredonator[MAX_PLAYERS];
new buying_neon[MAX_PLAYERS];
new mining[MAX_PLAYERS];
new learning_skill[MAX_PLAYERS];
new faction_gunrun_cooldowns[MAX_FACTIONS];
new gunrun[MAX_PLAYERS];
new unbanning_player[MAX_PLAYERS][MAX_PLAYER_NAME];
new learning_language[MAX_PLAYERS];
new active_language[MAX_PLAYERS];
new streaming_boombox[MAX_PLAYERS];
new donator_vehicle_purchasing[MAX_PLAYERS];
new purchasing_vehicle[MAX_PLAYERS];
new screen_saver_timer[MAX_PLAYERS];
new screen_saver[MAX_PLAYERS];
new intro_music[MAX_PLAYERS];
new listen_ringtone[MAX_PLAYERS];
new ringtone_sys_stream[MAX_PLAYERS][256];
new Float:fire_sys_pos[30][3];
new fire_sys_object[30];
new fire_sys_objects[30];
new afk_movement[MAX_PLAYERS];
new armor_display_tog[MAX_PLAYERS];
new armor_display_enabled[MAX_PLAYERS];
new displaying_stock[MAX_PLAYERS];
new selling_stock_slot[MAX_PLAYERS];
new sell_stock_price[MAX_PLAYERS];
new buying_stock[MAX_PLAYERS];
new buying_stock_amount[MAX_PLAYERS];
new cooldowns[MAX_PLAYERS][MAX_COOLDOWNS];
new cooldowns_expire[MAX_PLAYERS][MAX_COOLDOWNS];
new oil_offer[MAX_PLAYERS];
new oil_offer_rig[MAX_PLAYERS];
new oil_offer_price[MAX_PLAYERS];
new carrying_oil[MAX_PLAYERS];
new last_text[MAX_PLAYERS];
new phone_bill[MAX_PLAYERS];
new company_work_load[MAX_PLAYERS];
new progress_wait[MAX_PLAYERS];
new progress_wait_max[MAX_PLAYERS];
new progress_wait_type[MAX_PLAYERS];
new company_work_stage[MAX_PLAYERS];
new fly_school_step[MAX_PLAYERS];
new in_fly_school[MAX_PLAYERS];
new fly_school_countdown[MAX_PLAYERS];
new fly_school_stage[MAX_PLAYERS];
new in_fly_school_veh[MAX_PLAYERS];
new company_work[MAX_PLAYERS];
new company_inviter[MAX_PLAYERS];
new buy_forcompany[MAX_PLAYERS];
new togtp[MAX_PLAYERS];
new ac_cooldown[MAX_PLAYERS];
new tog_derby[MAX_PLAYERS];
new gps_cooldown[MAX_PLAYERS];
new gps[MAX_PLAYERS];
new find_cooldown[MAX_PLAYERS];
new tog_con[MAX_PLAYERS];
new calling_san[MAX_PLAYERS];
new crash_detection_disabled[MAX_PLAYERS];
new smuggle_sys_run[MAX_PLAYERS];
new cp_target[MAX_PLAYERS];
new tog_nascar[MAX_PLAYERS];
new house_offer[MAX_PLAYERS];
new house_offer_house[MAX_PLAYERS];
new house_offer_price[MAX_PLAYERS];
new biz_editingentrance[MAX_PLAYERS];
new calling_nonpolice[MAX_PLAYERS];
new evicting_tenant[MAX_PLAYERS];
new dice[MAX_PLAYERS];
new requesting_cheque[MAX_PLAYERS];
new registered[MAX_PLAYERS];
new player_threads[MAX_PLAYERS];
new player_save_threads[MAX_PLAYERS];
new player_thread_inuse[MAX_PLAYERS];
new logged[MAX_PLAYERS];
new character_chosen[MAX_PLAYERS];
new choosing_character[MAX_PLAYERS];
new character_offset[MAX_PLAYERS];
new active_character[MAX_PLAYERS];
new timetxt_expire[MAX_PLAYERS];
new infotxt_expire[MAX_PLAYERS];
new in_house[MAX_PLAYERS];
new confirm_dialog_extra[MAX_PLAYERS];
new vehicle_showroom_position[MAX_PLAYERS];
new in_biz[MAX_PLAYERS];
new vehicle_showroom_type[MAX_PLAYERS];
new mask[MAX_PLAYERS];
new mask_on[MAX_PLAYERS];
new setting_fuel_price[MAX_PLAYERS];
new hunger_set_expire[MAX_PLAYERS];
new phone_ringing[MAX_PLAYERS];
new phone_caller[MAX_PLAYERS];
new phone_calling[MAX_PLAYERS];
new phone_incall[MAX_PLAYERS];
new composing_mail[MAX_PLAYERS];
new composing_mail_to[MAX_PLAYERS];
new composing_subject[MAX_PLAYERS][64];
new mail_reading[MAX_PLAYERS];
new active_weather_expire = 0;
new active_weather_queue = 0;
new drug_effect[MAX_PLAYERS];
new weapontransfer_other[MAX_PLAYERS];
new delivery_active[MAX_PLAYERS];
new delivery_stage[MAX_PLAYERS];
new fare_time[MAX_PLAYERS];
new fare_filler[MAX_PLAYERS];
new fare_cooldown[MAX_PLAYERS];
new fare_passenger[MAX_PLAYERS];
new fare_increment[MAX_PLAYERS];
new fare_pmission[MAX_PLAYERS];
new fare_filler_stage[MAX_PLAYERS];
new bus_active[MAX_PLAYERS];
new bus_stage[MAX_PLAYERS];
new biz_editname[MAX_PLAYERS];
new hotwire_cooldown[MAX_PLAYERS];
new carchoose_color[MAX_PLAYERS];
new tmp_carcolor1[MAX_PLAYERS];
new tmp_carcolor2[MAX_PLAYERS];
new	garbage_run[MAX_PLAYERS];
new garbage_run_stage[MAX_PLAYERS];
new garbage_run_state[MAX_PLAYERS];
new garbage_object[MAX_PLAYERS];
new garbage_run_vehicle[MAX_PLAYERS];
new fish_run[MAX_PLAYERS];
new fish_stage[MAX_PLAYERS];
new fish_state[MAX_PLAYERS];
new faction_invite[MAX_PLAYERS];
new buy_forfaction[MAX_PLAYERS];
new vehicle_select_cooldown[MAX_PLAYERS];
new duty[MAX_PLAYERS];
new taze_time[MAX_PLAYERS];
new tazer_out[MAX_PLAYERS];
new ticket_price[MAX_PLAYERS];
new ticket_sender[MAX_PLAYERS];
new driving_test[MAX_PLAYERS];
new driving_test_stage[MAX_PLAYERS];
new driving_test_reversing[MAX_PLAYERS];
new driving_test_failed[MAX_PLAYERS];
new tmp_pickup[MAX_PLAYERS];
new sellgun_sender[MAX_PLAYERS];
new sellgun_sendgun[MAX_PLAYERS];
new sellgun_price[MAX_PLAYERS];
new cooking_eggs[MAX_PLAYERS];
new cooking_bread[MAX_PLAYERS];
new cooking_meat[MAX_PLAYERS];
new cooking_cheese[MAX_PLAYERS];
new cooking_rice[MAX_PLAYERS];
new cooking_chilli[MAX_PLAYERS];
new cooking_dough[MAX_PLAYERS];
new cooking[MAX_PLAYERS];
new cooking_contents[MAX_PLAYERS][10];
new in_interior[MAX_PLAYERS];
new player_threads_alt[MAX_PLAYERS];
new aduty[MAX_PLAYERS];
new spectating[MAX_PLAYERS];
new spectate_type[MAX_PLAYERS];
new activate_code[MAX_PLAYERS][256];
new activate_email[MAX_PLAYERS][256];
new speedo_active[MAX_PLAYERS];
new toolkit[MAX_PLAYERS];
new vehicle_towing[MAX_PLAYERS];
new renting_car[MAX_PLAYERS];
new taxi_send_cooldown[MAX_PLAYERS];
new	in_911[MAX_PLAYERS];
new in_911_stage[MAX_PLAYERS];
new in_911_problem[MAX_PLAYERS][256];
new in_911_location[MAX_PLAYERS][256];
new audio_countdown[MAX_PLAYERS];
new leave_spray[MAX_PLAYERS];
new biz_withdraw[MAX_PLAYERS];
new tutorial_stage[MAX_PLAYERS];
new tutorial_skip[MAX_PLAYERS];
new block_pm[MAX_PLAYERS];
new	vehicle_sell_offer[MAX_PLAYERS];
new	vehicle_sell_sender[MAX_PLAYERS];
new	vehicle_sell_price[MAX_PLAYERS];
new going_to_scrap[MAX_PLAYERS];
new rope[MAX_PLAYERS];
new tied[MAX_PLAYERS];
new house_withdraw[MAX_PLAYERS];
new house_settingrent[MAX_PLAYERS];
new Float:mark[MAX_PLAYERS][10][5];
new audio_ringtone[MAX_PLAYERS];
new duty_expire[MAX_PLAYERS];
new news_expire[MAX_PLAYERS];
new calling_taxi[MAX_PLAYERS];
new declare_fare_cooldown[MAX_PLAYERS];
new riot_shield[MAX_PLAYERS];
new note_cmd_cooldown[MAX_PLAYERS];
new creating_note[MAX_PLAYERS];
new player_threads_inventory[MAX_PLAYERS];
new adding_inventory[MAX_PLAYERS];
new Float:old_pos[MAX_PLAYERS][3];
new afk_reset[MAX_PLAYERS];
new repair_sender[MAX_PLAYERS];
new repair_price[MAX_PLAYERS];
new in_repair[MAX_PLAYERS];
new in_repair_time[MAX_PLAYERS];
new respray_sender[MAX_PLAYERS];
new respray_price[MAX_PLAYERS];
new in_respray[MAX_PLAYERS];
new in_respray_time[MAX_PLAYERS];
new in_respray_col1[MAX_PLAYERS];
new in_respray_col2[MAX_PLAYERS];
new death_mode[MAX_PLAYERS];
new Float:death_pos[MAX_PLAYERS][4];
new death_stats[MAX_PLAYERS][3];
new death_cooldown[MAX_PLAYERS];
new death_respawn_time[MAX_PLAYERS];
new cpr_cooldown[MAX_PLAYERS];
new death_hploss[MAX_PLAYERS];
new defib_cooldown[MAX_PLAYERS];
new in_911_type[MAX_PLAYERS];
new weed[MAX_PLAYERS];
new heroin[MAX_PLAYERS];
new heroin_stage[MAX_PLAYERS];
new heroin_expire[MAX_PLAYERS];
new addiction_runtime[MAX_PLAYERS];
new trucking[MAX_PLAYERS] = 0;
new	trucking_mission[MAX_PLAYERS] = 0;
new trucking_stage[MAX_PLAYERS] = 0;
new unlock_cooldown[MAX_PLAYERS];
new in_anim[MAX_PLAYERS];
new temp_pickup[MAX_PLAYERS];
new Float:SpeedPos[MAX_PLAYERS][6];
new Float:player_vehicle_speed[MAX_PLAYERS];
new tmp_account_id[MAX_PLAYERS];
new clean_save_name[MAX_PLAYERS][MAX_PLAYER_NAME];
new accent[MAX_PLAYERS][16];
new using_tour[MAX_PLAYERS];
new speedcamera_cooldown[MAX_PLAYERS];
new globaltmpo[MAX_PLAYERS][10][64];
new drinking[MAX_PLAYERS];
new callreq_cooldown[MAX_PLAYERS];
new filling[MAX_PLAYERS];
new filling_amount[MAX_PLAYERS];
new filling_biz[MAX_PLAYERS];
new filling_started[MAX_PLAYERS];
new interview[MAX_PLAYERS];
new interview_offer[MAX_PLAYERS];
new tog_ooc[MAX_PLAYERS];
new tog_news[MAX_PLAYERS];
new tog_phone[MAX_PLAYERS];
new sleeping[MAX_PLAYERS];
new in_modshop[MAX_PLAYERS];
new cloth_cooldown[MAX_PLAYERS];
new old_action[MAX_PLAYERS];
new dancing[MAX_PLAYERS];
new seatbelt[MAX_PLAYERS];
new calling_mechanic[MAX_PLAYERS];
new radio_cooldown[MAX_PLAYERS];
new radio_handle[MAX_PLAYERS];
new radio_volume[MAX_PLAYERS];
new old_vehicle[MAX_PLAYERS];
new player_radio[MAX_PLAYERS][256];
new old_veh_seat[MAX_PLAYERS];
new radio_id[MAX_PLAYERS];
new reply_to[MAX_PLAYERS];
new pizza_mission[MAX_PLAYERS];
new pizza_mission_time[MAX_PLAYERS];
new Float:pizza_mission_distance[MAX_PLAYERS];
new pizza_mission_num[MAX_PLAYERS];
new trick_treat_cooldown[MAX_PLAYERS];
new in_train[MAX_PLAYERS];
new tenant_cooldown[MAX_PLAYERS];
new trace_cooldown[MAX_PLAYERS];

/**********SERVER VARS***********/

new server_enviroment = 0;
new Float:vpos[MAX_VEHICLES][4];
new prison_alarm = 0;
new mask_salt = 1000;
new used_vehicle_offset[MAX_BIZES];
new used_vehicle_slots[MAX_BIZES][5];
new used_vehicle_pickups[MAX_BIZES][5];
new vehicle_siren_object[MAX_VEHICLES];
new vehicle_siren_state[MAX_VEHICLES];
new boom_box_handle[MAX_PLAYERS];
new changing_boombox[MAX_PLAYERS];
new sign_object_text;
new stock_value_oldchange[MAX_BIZES];
new stock_sys_oldbank[MAX_BIZES];
new stock_value[MAX_STOCK];
new stock_oldvalue[MAX_STOCK];
new timers[9];
new reloading_companies = 0;
new active_rig_save = 0;
new oil_price = 300;
new airport_timeout = 0;
new airport_gate1 = -1;
new airport_gate2 = -1;
new in_shamal[MAX_PLAYERS];
new worklog_cooldown[MAX_PLAYERS];
new tog_callerid[MAX_PLAYERS];
new active_weather_stage = 0;
new active_company_save = 0;
new active_players = 0;
new job_pickup_farmer = -1;
new job_pickup_getwep = -1;
new job_pickup_dealer = -1;
new job_pickup_smuggle = -1;
new job_pickup_market = -1;
new active_faction_save = 0;
new job_pickup_eng = -1;
new job_pickup_sweeper = -1;
new job_pickup_impound = -1;
new job_pickup_chop = -1;
new active_hour = 0;
new vehicle_creating = 0;
new job_pickup_deliver = -1;
new delivery_vans[4];
new taxi_vehicles[4];
new job_pickup_taxi = -1;
new job_pickup_bus = -1;
new bus_vehicles[4];
new fuel_interval[MAX_VEHICLES];
new job_pickup_garbage = -1;
new garbage_vehicles[4];
new job_pickup_fish = -1;
new fish_vehicles[2];
new dmv_vehicles[2];
new job_pickup_dmv = -1;
new ooc_status = 1;
new active_house_save = 0;
new active_biz_save = 0;
new active_vehicle_save = 0;
new vehicle_alarm_time[MAX_VEHICLES];
new rent_vehicles[8];
new ad_cooldown = 0;
new active_interior_save = 0;
new saved_vars = 0;
new server_restarting = 0;
new active_player_saves = 0;
new sync_engine_off[MAX_VEHICLES];
new job_pickup_mechanic = -1;
new vehicle_repairing[MAX_VEHICLES];
new vehicle_respraying[MAX_VEHICLES];
new job_pickup_drug = 0;
new active_drug_save = 0;
new server_weather = 10;
new roadblock[MAX_ROADBLOCKS];
new Float:roadblock_pos[MAX_ROADBLOCKS][3];
new trucks[3];
new job_pickup_truck = 0;
new adding_vinventory[MAX_RP_VEHICLES];
new Float:crash_vhp[MAX_VEHICLES];
new speed_camera_stats[6];
new speed_camera_flash[6];
new sync_attribs[MAX_VEHICLES];
new startup_delay[MAX_VEHICLES];
new startup_delay_sender[MAX_VEHICLES];
new vehicle_radioid[MAX_VEHICLES];
new announcetxt_expire = 0;
new pizzaboy[3];
new job_pickup_pizza = 0;
new sweeper[3];
new pickup_armory = -1;

new vehicle_weapons[MAX_RP_VEHICLES][MAX_VEH_WEAPONS];
new vehicle_weapon_ammo[MAX_RP_VEHICLES][MAX_VEH_WEAPONS];

new house_weapons[MAX_HOUSES][MAX_HOUSE_WEAPONS];
new house_weapon_ammo[MAX_HOUSES][MAX_HOUSE_WEAPONS];

new vehicle_radio[MAX_VEHICLES][256];
new vehicle_radio_volume[MAX_VEHICLES];

new racing_sys_odds[RACE_ENTRIES][2];
new racing_sys_names[RACE_ENTRIES][32];
new racing_sys_ticket[MAX_PLAYERS];
new racing_sys_stake[MAX_PLAYERS];
new racing_sys_namesused[33];
new racing_sys_writing[MAX_PLAYERS];

new sweeper_sys_run[MAX_PLAYERS];
new sweeper_sys_stage[MAX_PLAYERS];

new legalmods[48][22] = {
	{400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
	{404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
	{492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
	{500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
	{518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
	{527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
	{534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
	{535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
	{536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
	{540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
	{542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
	{547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
	{550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
	{551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
	{558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
	{559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
	{560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
	{561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
	{562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
	{565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
	{567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
	{575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
	{600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

/*new card_sys_deck[MAX_PLAYERS];
new card_sys_cards[MAX_PLAYERS][256];
new card_sys_dealt[MAX_PLAYERS][256];

new card_sys_suites[4][32] = {

	"H",
	"S",
	"C",
	"D"

};

new card_sys_names[14][32] = {

	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	"10",
	"King",
	"Queen",
	"Jack",
	"Ace"

};*/

/*Quest Vars*/

#define MAX_QUESTS 4

new qs_npc_ids[MAX_QUESTS];
new Text3D:qs_npc_labels[MAX_QUESTS];
new qs_inquest[MAX_PLAYERS];
new qs_queststage[MAX_PLAYERS];
new qs_tmp_objects[MAX_PLAYERS][5];
new qs_npc_processed[MAX_QUESTS];
new qs_npc_assigned[MAX_PLAYERS];

new qs_finalmsg[MAX_QUESTS][128] = {

	"Wow man, I'm gonna make so much off tips now! Thanks! Here, take this.",
	"Thanks dude, now uhh.. Get lost, yeah?",
	"Man, your a life-saver.. Here take this..",
	"Thanks deary.. Here is some money for your trouble"

};

new qs_rewards[MAX_QUESTS] = {

	5000,
	4500,
	6500,
	20

};

new Float:qs_targets[MAX_QUESTS][2][3] = {

	{{2114.8650,919.2989,10.8203},{2243.7795,-58.9620,26.4487}},
	{{2362.8853,-1644.1415,13.5336},{2280.5022,-9.9020,26.5627}},
	{{2809.4382,-2564.2908,13.6328},{2315.7485,33.4858,27.4740}},
	{{2249.5376,52.7101,26.6671},{2515.1248,126.9635,27.6756}}

};

new qs_start_msgs[MAX_QUESTS][128] = {

	"Go to the Las Venturas Gas Station to deal with Bobs package",
	"Go to the House in Grove Street",
	"Go to Ocean Docks to dump off the packages",
	"Go pickup Margets milk"

};

new qs_intro_text[MAX_QUESTS][232] = {

	"Dude, these Gas Sations in Las Venturas are killing our customer numbers.. Say.. Could you take this and... Deal.. With them?",
	"Hey, whats going on? Anyway.. I got a.. Friend.. Who needs to be taught the meaning of the word dangerous.. Wanna take care of this for me?",
	"Hey.. HEY! Dude.. Can you do me a favour.. I have something that needs to be disposed of.. Can you just dump these packages off in Ocean Docks for me?",
	"Could you do me a favour deary.. I need some milk.. Here is $10 can you just pop down to the store and grab some for me?"

};

new qs_npc_skins[MAX_QUESTS] = {

	50,
	286,
	272,
	10

};

new qs_npc_names[MAX_QUESTS][64] = {

	"Bob the Gas Station Attendant",
	"Agent Johnson",
	"Alfonso The Thief",
	"Margret The Nanny"

};

new Float:qs_npc_locations[MAX_QUESTS][4] = {

	{2243.7795,-58.9620,26.4487,0.0},
	{2280.5022,-9.9020,26.5627,180.6316},
	{2315.7485,33.4858,27.4740,184.5829},
	{2515.1248,126.9635,27.6756,270.6917}

};

/*End Quest Vars*/

new Float:used_veh_pos[5][4] = {

	{1297.4662,-42.3625,1000.736,0.0},
	{1287.4662,-42.3625,1000.736,0.0},
	{1277.4662,-42.3625,1000.736,0.0},
	{1267.4662,-42.3625,1000.736,0.0},
	{1257.4662,-42.3625,1000.736,0.0}

};

new Float:farming_pos[11][3] = {

	{1998.7047,230.0464,28.2960}, // point 1
	{1995.9128,188.0365,30.6490}, // point 2
	{1972.5394,185.1603,33.6268}, // point 3
	{1975.4340,214.7303,28.9896}, // point 4
	{1961.2008,238.5823,29.0356}, // point 5
	{1941.0724,223.0568,29.9158}, // point 6
	{1938.2644,206.1035,32.4224}, // point 7
	{1936.5095,195.5143,34.4919}, // point 8
	{1924.3627,187.7433,36.4173}, // point 9
	{1917.3450,211.8154,32.0325}, // point 10
	{1920.5229,234.2369,29.8579} // point 11

};

new Float:mining_pos[15][3] = {

	{-436.0900,1433.6857,20.8594},
	{-434.3051,1418.4620,19.5098},
	{-426.0622,1400.8959,16.7831},
	{-424.0424,1372.2825,13.2859},
	{-411.2381,1350.2368,13.0335},
	{-409.5089,1322.8727,12.5139},
	{-399.7850,1304.2103,10.9241},
	{-400.0207,1281.7327,8.7088},
	{-393.7963,1263.4419,7.2153},
	{-396.7829,1247.8101,6.7007},
	{-386.3192,1224.3470,15.6409},
	{-393.1238,1218.0292,12.1755},
	{-395.1808,1209.4303,11.0716},
	{-393.8098,1190.2881,12.9581},
	{-379.2475,1220.1254,19.5176}

};

new fire_sys_objectids[3] = {

	18690,
	18691,
	18692

};

#define PLAYER_GATES 2
new player_gates_state[PLAYER_GATES];
new player_gates_object[PLAYER_GATES];
new Float:player_gates[PLAYER_GATES][6] = {

	{2449.07, 118.89, 25.62, 0.00, 0.00, 270.11},//Garage (Front)
	{2444.75, 153.19, 27.76, 0.00, 0.00, 90.00}//Garage (Back)

};

new Float:player_gates_open[PLAYER_GATES][6] = {

    {2449.07, 125.83, 25.62, 0.00, 0.00, 270.11},//Garage (Front)
	{2444.73, 156.01, 29.48, 0.00, -270.00, 90.00}//Garage (Back)

};

new player_gates_objects[PLAYER_GATES] = {

	976,
	3294

};

new player_gates_anim[PLAYER_GATES] = {

	0,
	0

};

new player_gates_perms[PLAYER_GATES][32] = {

	"1597",//Garage (Front)
	"1597"//Garage (Back)

};

new oil_rig_cooldown[9];
new oil_rig_objects[9];
new oil_rig_owners[9];
new oil_rig_levels[9];
new Float:oil_rigs[9][3] = {

	{-767.8171,-2126.1619,25.1040}, // oil rig 1
	{-1275.2341,-2059.0454,22.2066}, // oil rig 2
	{-2741.8132,-2529.2856,2.7813}, // oil 3
	{-1988.1870,-2819.5139,3.3382}, // oil 4
	{-2905.3674,230.1315,2.9422}, // oil 5
	{-2906.2739,-304.6505,3.0034}, // oil 6
	{1158.8754,2581.6909,10.6515}, // oil 7
	{995.5266,2640.8965,10.6036}, // oil 8
	{2631.0840,659.3547,10.6011} // oil 9

};

new derby_sys_open = 0;
new derby_sys_started = 0;
new derby_sys_driver[MAX_PLAYERS];
new derby_sys_respawn[MAX_PLAYERS];
new derby_sys_entrants = 0;
new derby_sys_countdown = 0;

new Float:derby_sys_spawns[10][4] = {

	{-1375.9565,1270.8274,1039.6600,143.9337}, // bloodring 1
	{-1394.3536,1279.3210,1039.6595,178.4253}, // bloodring 2
	{-1416.9385,1274.5039,1039.6595,216.7302}, // bloodring 3
	{-1430.2858,1255.7959,1039.6595,253.2218}, // bloodring 4
	{-1429.1506,1233.1157,1039.6599,290.6077}, // bloodring 5
	{-1415.1262,1215.8981,1039.6595,326.0020}, // bloodring 6
	{-1391.8126,1210.7319,1039.6594,3.5491}, // bloodring 7
	{-1374.5323,1218.2344,1039.6595,37.3684}, // bloodring 8
	{-1362.9530,1237.6747,1039.6613,73.3341}, // bloodring 9
	{-1362.0841,1253.2953,1039.6647,106.9029} // bloodring 10

};


new nascar_sys_open = 0;
new nascar_sys_started = 0;
new nascar_sys_driver[MAX_PLAYERS];
new nascar_sys_stage[MAX_PLAYERS];
new nascar_sys_laps[MAX_PLAYERS];
new nascar_sys_respawn[MAX_PLAYERS];
new nascar_sys_countdown = 0;
new nascar_sys_place = 1;
new nascar_sys_entrants = 0;
new Float:nascar_sys_stages[9][3] = {

	{-1398.4287,-190.6884,1043.0831}, // Finish line
    {-1422.2704,-134.5341,1044.8240}, // Stop 1
	{-1524.2845,-172.3106,1050.6625}, // stop 2
	{-1518.5107,-249.2249,1050.4944}, // stop 3
	{-1422.2185,-278.9121,1051.1144}, // stop 4
	{-1385.3456,-145.8161,1051.0024}, // stop 5
	{-1269.6964,-175.1839,1050.5643}, // stop 6
	{-1284.6118,-257.7430,1049.7185}, // stop 7
	{-1380.5513,-273.4105,1044.3640} // stop 8

};

new Float:nascar_sys_spawns[6][4] = {

	{-1394.7327,-192.7439,1043.0627,3.2063},
	{-1400.2004,-193.0499,1043.0568,0.7341},
	{-1400.2029,-203.4130,1042.9966,0.9583},
	{-1394.2806,-202.9497,1043.0422,0.9994},
	{-1400.0284,-213.1297,1043.0397,0.9999},
	{-1393.7773,-211.9524,1043.0067,0.9935}

};

new engineer_sys_object[MAX_PLAYERS];
new engineer_sys_run[MAX_PLAYERS];
new Float:engineer_sys_stops[29][3] = {

	{2848.9927,-1666.9799,10.8684},
	{2654.2883,-1662.9113,10.8966}, // point 2
	{2634.2227,-1742.6447,10.8915}, // point 3
	{2519.0823,-1726.3511,13.5469}, // point 4
	{2419.5137,-1942.3907,13.5469}, // point 5
	{2328.5029,-1966.9548,13.5356}, // point 6
	{2087.4321,-1904.5496,13.5469}, // point 7
	{1684.0557,-1746.2262,13.5460}, // point 7
	{1722.1705,-1721.8499,13.5508}, // poit 9
	{1463.2662,-1292.1753,13.5469},
	{1447.7765,-1233.0406,13.5457},
	{1475.2075,-1043.2148,23.8281},
	{1344.3966,-1041.9209,26.6484},
	{1046.3478,-1135.7693,23.8281},
	{1048.7095,-1229.9152,16.7410},
	{923.3749,-1336.4427,13.5469},
	{907.8221,-1411.3767,13.3927},
	{787.8566,-1389.8666,13.6477},
	{638.0265,-1229.1335,18.0736},
	{248.6064,-1447.4441,13.6007}, // point 20
	{150.4437,-1543.3146,10.2950}, // point 21
	{637.7015,-1752.7686,13.3238}, // point 22
	{928.3286,-1768.4979,13.5712}, // point 23
	{1071.7391,-1847.0593,13.5469}, // point 24
	{1410.5865,-1877.7549,13.5469}, // point 25
	{1835.0021,-2157.9993,13.5469}, // point 26
	{2195.7112,-2176.8640,13.5391}, // point 27
	{2286.5354,-2069.0886,13.5391}, // point 28
	{2724.5010,-2043.3187,13.5445} // point 29

};

new Float:sweeper_sys_runs[3][15][3] = {

	{

		{1377.5087,283.9819,19.4063}, // cleaner 1
		{1390.3719,236.0832,19.4063}, // cleaner 2
		{1348.5588,225.4421,19.4063}, // cleaner 3
		{1303.3260,245.3742,19.4088}, // cleaner 4
		{1269.7799,210.6609,19.4063}, // cleaner 5
		{1226.4583,203.2390,19.4063}, // cleaner 6
		{1239.4647,253.3881,19.4076}, // cleaner 7
		{1214.8456,284.9127,19.4063}, // cleaner 8
		{1213.2588,317.4173,19.4063}, // cleaner 9
		{1250.0874,340.6178,19.4063}, // cleaner 10
		{1282.4127,350.7150,19.4063}, // cleaner 11
		{1303.3856,371.5541,19.4063}, // cleaner 12
		{1329.9757,346.9615,19.4063}, // cleaner 13
		{1317.3068,315.0315,19.4063}, // cleaner 14
		{1332.2941,304.0804,19.4084} // cleaner 15

	},
	{

	    {1355.8315,282.6210,19.4092}, //
		{1339.5925,306.1853,19.4118}, //
		{1328.4723,330.1904,19.4063}, // 2 3
		{1328.5013,365.5668,19.4042}, // 2 4
		{1295.7731,378.2753,19.4063}, // 2 5
		{1282.7227,363.6721,19.4063}, // 2 6
		{1257.2489,342.7835,19.4063}, // 2 7
		{1218.9640,343.1028,19.4063}, // 2 8
		{1207.3044,316.7579,19.4063}, // 2 9
		{1211.9634,280.9738,19.4063}, // 2 10
		{1231.5336,248.0131,19.4063}, // 2 11
		{1247.8950,188.4127,19.4073}, // 2 12
		{1275.1740,210.4795,19.4063}, // 2 13
		{1304.1394,240.1735,19.4063}, // 2 14
		{1346.1885,247.8133,19.4063} // 2 15

	},
	{

	    {1360.0642,279.5997,19.4087}, // 1
		{1388.6697,278.5841,19.4063}, // 2
		{1397.8865,253.3193,19.4063}, // 3
		{1361.5891,219.4488,19.4063}, // 4
		{1309.3221,242.9408,19.4108}, // 5
		{1275.2681,258.1803,19.4081}, // 6
		{1215.3282,284.7114,19.4063}, // 7
		{1213.0778,316.8231,19.4063}, // 8
		{1231.0593,347.2375,19.4063}, // 9
		{1265.3442,333.6681,19.4063}, // 10
		{1282.7311,351.8492,19.4063}, // 11
		{1311.0663,368.0721,19.4063}, // 12
		{1397.8865,253.3193,19.4063}, // 13
		{1388.6697,278.5841,19.4063}, // 14
		{1360.0642,279.5997,19.4087} // 15

	}

};

new racing_sys_randnames[33][32] = {

	"Amy",
	"Amigo",
	"American Pie",
	"Dante",
	"Dandelion",
	"Dirty Harry",
	"Dopey",
	"Dutchess",
	"Encore",
	"Fantasy",
	"Flurry",
	"Gayle",
	"Gallagher",
	"Gypsy",
	"Hugo",
	"Ivy",
	"Jester",
	"Jasper",
	"Kingston",
	"Knight",
	"Little Lady",
	"Lucky",
	"Maggie",
	"Nemo",
	"Orion",
	"Onyx",
	"Pippi",
	"Pride N Joy",
	"Princess",
	"Shorty",
	"Skye",
	"Sub Zero",
	"Tyson"

};

new banned_weapons[7] = {

    36,
    38,
    35,
    39,
    40,
    16

};

new Float:cam_screens[4][9] = {

	{2233.2874,100.6446,26.4766,2233.2874,100.6446,16.4766,2257.2537,83.5274,36.4844},
	{2319.5054,16.8546,26.4766,2319.5054,16.8546,16.4766,2319.2332,53.2310,26.4845},
	{2345.8389,92.5071,26.3345,2345.8389,92.5071,16.3345,2334.6006,56.2571,31.4839},
	{2075.9290,49.2802,26.1226,2075.9290,49.2802,16.1226,2125.7222,95.1712,35.5235}

};

new mod_restrictions[][2] = {

    {400,1},
	{401,1},
	{402,1},
	{403,0},
	{404,1},
	{405,1},
	{406,0},
	{407,0},
	{408,0},
	{409,1},
	{410,1},
	{411,1},
	{412,2},
	{413,0},
	{414,0},
	{415,1},
	{416,0},
	{417,0},
	{418,1},
	{419,1},
	{420,1},
	{421,1},
	{422,1},
	{423,0},
	{424,1},
	{425,0},
	{426,1},
	{427,0},
	{428,0},
	{429,1},
	{430,0},
	{431,0},
	{432,0},
	{433,0},
	{434,0},
	{435,0},
	{436,1},
	{437,0},
	{438,1},
	{439,1},
	{440,0},
	{441,0},
	{442,1},
	{443,0},
	{444,0},
	{445,1},
	{446,0},
	{447,0},
	{448,0},
	{449,0},
	{450,0},
	{451,1},
	{452,0},
	{453,0},
	{454,0},
	{455,0},
	{456,0},
	{457,0},
	{458,1},
	{459,0},
	{460,0},
	{461,0},
	{462,0},
	{463,0},
	{464,0},
	{465,0},
	{466,1},
	{467,1},
	{468,0},
	{469,0},
	{470,0},
	{471,0},
	{472,0},
	{473,0},
	{474,1},
	{475,1},
	{476,0},
	{477,1},
	{478,1},
	{479,1},
	{480,1},
	{481,0},
	{482,0},
	{483,0},
	{484,0},
	{485,0},
	{486,0},
	{487,0},
	{488,0},
	{489,1},
	{490,0},
	{491,1},
	{492,1},
	{493,0},
	{494,0},
	{495,0},
	{496,1},
	{497,0},
	{498,0},
	{499,0},
	{500,1},
	{501,0},
	{502,0},
	{503,0},
	{504,0},
	{505,1},
	{506,1},
	{507,1},
	{508,0},
	{509,0},
	{510,0},
	{511,0},
	{512,0},
	{513,0},
	{514,0},
	{515,0},
	{516,1},
	{517,1},
	{518,1},
	{519,0},
	{520,0},
	{521,0},
	{522,0},
	{523,0},
	{524,0},
	{525,0},
	{526,1},
	{527,1},
	{528,0},
	{529,1},
	{530,0},
	{531,0},
	{532,0},
	{533,1},
	{534,2},
	{535,2},
	{536,2},
	{537,0},
	{538,0},
	{539,0},
	{540,1},
	{541,1},
	{542,1},
	{543,0},
	{544,0},
	{545,1},
	{546,1},
	{547,1},
	{548,0},
	{549,1},
	{550,1},
	{551,1},
	{552,0},
	{553,0},
	{554,0},
	{555,1},
	{556,0},
	{557,0},
	{558,3},
	{559,3},
	{560,3},
	{561,3},
	{562,3},
	{563,0},
	{564,0},
	{565,3},
	{566,2},
	{567,2},
	{568,0},
	{569,0},
	{570,0},
	{571,0},
	{572,0},
	{573,0},
	{574,0},
	{575,1},
	{576,2},
	{577,0},
	{578,0},
	{579,1},
	{580,1},
	{581,0},
	{582,0},
	{583,0},
	{584,0},
	{585,1},
	{586,0},
	{587,1},
	{588,0},
	{589,1},
	{590,0},
	{591,0},
	{592,0},
	{593,0},
	{594,0},
	{595,0},
	{596,0},
	{597,0},
	{598,0},
	{599,0},
	{600,1},
	{601,0},
	{602,1},
	{603,1},
	{604,0},
	{605,0},
	{606,0},
	{607,0},
	{608,0},
	{609,0},
	{610,0},
	{611,0}

};

new Float:speed_cameras[6][4] = {

	{2129.3538,47.9363,24.3727,269.9077},
	{2071.1833,35.6386,24.4050,92.1038},
	{2500.4312,36.1927,24.4844,91.0611},
	{2367.1240,-33.9987,24.4844,90.3152},
	{2338.3381,234.8155,24.4844,0.4694},
	{2262.5012,208.8174,16.4574,86.2772}

};

new trucker_stats[18] = {

	150,
	200,
	200,
	50,
	50,
	200,
	200,
	175,
	200,
	200,
	175,
	200,
	175,
	150,
	200,
	150,
	175,
	200

};

new Float:trucker_pos[18][3] = {

	{-1733.2437,130.1329,4.1406},
	{125.2387,1100.7192,14.2091},
	{1904.6304,955.6579,11.4166},
	{2305.6675,-1655.9767,15.0376},
	{1209.8951,-1320.8090,13.2298},
	{-1601.1978,724.3405,10.5767},
	{-2631.7549,1358.7920,6.6473},
	{-2447.8879,733.4746,34.5545},
	{-2663.8093,589.6924,13.9928},
	{-710.8187,960.6473,11.9312},
	{346.6295,877.9549,19.9459},
	{804.5600,1688.7196,4.8209},
	{1517.2040,2233.0217,10.3600},
	{2093.2788,2076.7563,10.3594},
	{-1989.4639,135.8704,28.1303},
	{-2670.5203,231.7064,4.9350},
	{-1970.5750,1118.8130,53.7165},
	{-1708.4907,955.8124,25.3202}

};


new trucker_msg[18][256] = {

	"Deliver some Golf Clubs to San Fierro Docks",
	"Deliver some Popcorn to the Drive-In cinema~n~in Bone County",
	"Deliver some Betting Chips to Four Dragons",
	"Deliver some Beer to 10 Green Bottles",
	"Deliver some Medicine to All Saints Hospital",
	"Deliver some Handcuffs to the SFPD",
	"Deliver some Edible Underwear to Jizzys",
	"Deliver some Watches to Supa Save",
	"Deliver some Blankets to SF Hospital",
	"Deliver some Horses to the Torino Ranch",
	"Deliver some Rocks to the quarry",
	"Deliver some Targets to the LV Firing Range",
	"Deliver some Balls to the Bandits Stadium",
	"Deliver some Dildos to the Sex Shop on the~n~LV Strip",
	"Deliver some Train Tracks to Cranberry Station",
	"Deliver some Chicken Bones to the SF Clukin Bell",
	"Deliver some Crusafixes to the SF Church",
	"Deliver some Ripped T-Shirts to the SF Victim"

};

new heroin_stages[8] = {

	45,
	67,
	85,
	86,
	110,
	113,
	114,
	-66

};

new Float:cooking_profile_benefit[5] = {

	25.0,
	50.0,
	75.0,
	75.0,
	75.0

};

new cooking_profile_result[5][128] = {

	"makes and eats an Ommlette.",
	"makes and eats a Burger.",
	"makes and eats a Cheese Burger.",
	"makes and eats a Chilli.",
	"makes and eats a Pizza."
};

new cooking_profiles[5][10] = {

	{1,1,0,0,0,0,0,0,0,0},//Ommlette
	{2,1,3,0,0,0,0,0,0,0},//Burger
	{2,1,3,4,0,0,0,0,0,0},//Cheese Burger
	{5,3,6,0,0,0,0,0,0,0},//Chilli
	{7,4,3,0,0,0,0,0,0,0}//Pizza

};

new Float:driving_test_points[23][4] = {

	{2466.9839,-19.5150,26.2116,LIC_TYPE_RIGHT}, // veh exit
	{2536.4463,28.6696,26.2096,LIC_TYPE_RIGHT}, // next left
	{2658.3972,39.7621,25.9429,LIC_TYPE_RIGHT}, // after left
	{2866.2720,-1118.2814,10.7499,LIC_TYPE_RIGHT}, // next right
	{2380.1216,-1151.9434,27.3658,LIC_TYPE_LEFT}, // after right
	{2368.2041,-1286.9841,23.7110,LIC_TYPE_RIGHT}, // next left
	{2318.5212,-1299.1147,23.9483,LIC_TYPE_RIGHT}, // after left
	{2306.5864,-1163.1548,26.5764,LIC_TYPE_LEFT}, // next right
	{2087.0544,-1094.1394,24.7914,LIC_TYPE_LEFT}, // after right
	{2066.6909,-1124.0958,23.6797,LIC_TYPE_RIGHT}, // next left
	{1879.9198,-1133.7114,23.6849,LIC_TYPE_LEFT}, // after left
	{1369.0150,-1138.4617,23.5288,LIC_TYPE_RIGHT}, // next left
	{1370.8031,-1054.9839,26.4858,LIC_TYPE_NORM}, // after left
	{1379.4768,-956.7271,34.0276,LIC_TYPE_RIGHT}, // next right
	{1436.9092,-952.0486,35.9984,LIC_TYPE_RIGHT}, // after right
	{1521.0771,-991.5352,40.1294,LIC_TYPE_LEFT}, // rev unity
	{1706.2548,-781.2816,54.0453,LIC_TYPE_RIGHT}, // rev unity stop
	{1637.2877,176.5322,33.5100,LIC_TYPE_RIGHT}, // after unity rev
	{2238.5229,310.3578,32.5375,LIC_TYPE_RIGHT}, // next right
	{2332.9246,280.4901,26.2061,LIC_TYPE_RIGHT}, // after right
	{2341.2437,101.6294,26.2101,LIC_TYPE_NORM}, // next right
	{2341.3723,-15.5023,26.2123,LIC_TYPE_LEFT}, // after right
	{2445.4795,-30.8355,26.2108,LIC_TYPE_RESULT}// rev end depot

};

new Float:fishing_profiles[3][20][3] = {

	{

		{1869.2686,-43.2333,-0.3674}, // fish chain 1 stop 1
		{1746.1570,-22.1932,-0.3856}, // fish chain 1 stop 2
		{1632.3866,-20.6827,-0.3707}, // fish chain 1 stop 3
		{1575.1245,-166.3589,-0.3428}, // fish chain 1 stop 4
		{1436.6558,-248.2130,-0.3541}, // fish chain 1 stop 5
		{1297.8768,-218.3764,-0.3759}, // fish chain 1 stop 6
		{1196.1938,-128.7580,-0.3355}, // fish chain 1 stop 7
		{1084.7578,-109.3115,-0.3337}, // fish chain 1 stop 8
		{972.7164,-118.2509,-0.3542}, // fish chain 1 stop 9
		{857.5370,-129.0251,-0.3704}, // fish chain 1 stop 10
		{746.1611,-196.5769,-0.3821}, // fish chain 1 stop 11
		{559.6484,-239.5730,-0.3535}, // fish chain 1 stop 12
		{410.4885,-275.5748,-0.3061}, // fish chain 1 stop 13
		{326.7980,-326.7754,-0.3222}, // fish chain 1 stop 14
		{229.4518,-404.6766,-0.3475}, // fish chain 1 stop 15
		{92.3245,-461.2862,-0.3539}, // fish chain 1 stop 16
		{9.0381,-557.6544,-0.3547}, // fish chain 1 stop 17
		{-90.8266,-656.0576,-0.3737}, // fish chain 1 stop 18
		{-151.0444,-756.6197,-0.3192}, // fish chain 1 stop 19
		{-235.7980,-647.8503,-0.3256} // fish chain 1 stop 20

	},
	{

		{2102.533203,3.622081,-0.356991},
		{2153.754394,177.028396,-0.345714},
		{2155.398437,371.291168,-0.300658},
		{2000.165771,486.882812,-0.521328},
		{1821.550048,512.967407,-0.162924},
		{1643.035278,532.656921,-0.429256},
		{1478.650024,566.807861,-0.336787},
		{1245.011108,607.572143,-0.306342},
		{1160.053222,622.708435,-0.414135},
		{1070.158691,626.491638,-0.449169},
		{960.354797,599.939880,-0.301734},
		{860.022521,577.002441,-0.441204},
		{721.139770,549.603271,-0.344844},
		{585.754882,519.140930,-0.311597},
		{423.975830,465.747802,-0.363593},
		{331.500854,432.083923,-0.389229},
		{218.280731,401.443420,-0.357093},
		{155.808670,385.384643,-0.335215},
		{82.942581,369.673980,-0.331975},
		{-57.899707,352.390594,-0.381815}

	},
	{

		{2108.006835,28.173742,-0.337524},
		{2165.244873,201.272201,-0.375929},
		{2206.961181,354.390106,-0.260589},
		{2373.408691,467.273010,-0.485231},
		{2606.458251,467.854644,-0.377824},
		{2727.556640,454.426177,-0.285986},
		{2862.095947,443.034729,-0.213993},
		{3000.490966,443.404815,-0.298167},
		{3062.564697,581.702697,-0.330789},
		{3058.739990,691.251708,0.115773},
		{3054.570068,920.889404,-0.008910},
		{3051.929687,1044.391967,-0.560451},
		{3046.044921,1207.162231,-0.799199},
		{3120.570068,1263.185913,-0.496803},
		{3169.697509,1151.971557,-0.749554},
		{3166.285156,1029.104614,-0.311613},
		{3146.475097,914.782531,-0.319347},
		{3129.160156,799.599731,-0.626231},
		{3123.419189,667.449157,-0.018864},
		{3019.628662,514.248168,0.015848}

	}

};

new Float:garbage_profiles[3][10][3] = {

	{

	    {2399.5994,101.5042,26.4699}, // Chain 1 Rub 1
		{2352.7573,126.6234,26.4760}, // Chain 1 Rub 2
		{2352.5701,147.4454,26.4709}, // Chain 1 Rub 3
		{2352.9731,183.5563,26.4621}, // Chain 1 Rub 3
		{2336.6599,194.3663,26.4930}, // Chain 1 Rub 5
		{2335.2163,153.6141,26.4844}, // Chain 1 Rub 6
		{2335.0886,131.1712,26.4844}, // Chain 1 Rub 7
		{2334.5979,120.5210,26.4844}, // Chain 1 Rub 8
		{2259.8130,100.5955,26.4844}, // Chain 1 Rub 9
		{2214.5215,59.0455,26.4844} // Chain 1 Rub 10

	},
	{

	    {2385.3083,72.3893,26.4844}, // Chain 2 Rub 1
		{2454.6399,14.4286,26.4844}, // Chain 2 Rub 3
		{2481.3086,-16.6260,26.4844}, // Chain 2 Rub 3
		{2542.9348,16.4201,26.4844}, // Chain 2 Rub 4
		{2525.8081,120.8333,26.4766}, // Chain 2 Rub 5
		{2500.4863,120.8483,26.4844}, // Chain 2 Rub 6
		{2455.1162,90.0786,26.4844}, // Chain 2 Rub 7
		{2456.2241,26.1740,26.4844}, // Chain 2 Rub 8
		{2402.4539,-13.0188,26.4844}, // Chain 2 Rub 9
		{2402.8813,18.5291,26.4844} // Chain 2 Rub 10

	},
	{

		{2286.2881,62.4235,26.4844}, // Chain 3 Rub 1
		{2214.0662,50.8324,26.4844}, // Chain 3 Rub 2
		{1361.5179,231.4211,19.5669}, // Chain 3 Rub 3
		{1320.9563,299.0807,19.5547}, // Chain 3 Rub 4
		{1289.9043,388.3632,19.5547}, // Chain 3 Rub 5
		{1273.5649,358.3152,19.5547}, // Chain 3 Rub 6
		{1204.3049,277.6028,19.55474}, // Chain 3 Rub 7
		{1258.6704,251.0989,19.5547}, // Chain 3 Rub 8
		{1240.3735,215.3230,19.5547}, // Chain 3 Rub 9
		{1203.1818,178.0992,20.5133} // Chain 3 Rub 10

	}

};

new Float:bus_profiles[3][6][3] = {

	{
		{602.8273,-1318.3574,13.6168}, // line 1 stop 1
		{559.4518,-1673.2288,18.3951}, // line 1 stop 2
		{808.9518,-1787.7583,13.5774}, // line 1 stop 3
		{920.9701,-1450.3085,13.4801}, // line 1 stop 4
		{1159.2614,-1409.5934,13.5806}, // line 1 stop 5
		{890.2525,-1222.2706,17.0765} // line 1 stop 6
	},
	{
		{1104.2067,-1152.4210,23.7493}, // line 2 stop 1
		{1826.1356,-1183.4648,23.7321}, // line 2 stop 2
		{1497.8488,-1589.2167,13.4792}, // line 2 stop 3
		{1263.5466,-1309.2230,13.3393}, // line 2 stop 4
		{1080.4902,-1277.8392,13.4895}, // line 2 stop 5
		{886.5533,-1221.0620,17.0798} // line 2 stop 6
	},
	{

		{1512.0143,-1164.1802,23.9976}, // line 3 stop 1
		{2238.9277,-1141.9819,25.7961}, // line 3 stop 2
		{2298.1143,-1656.0796,14.7371}, // line 3 stop 3
		{1877.8810,-1748.9365,13.4806}, // line 3 stop 4
		{1477.2894,-1729.4370,13.4781}, // line 3 stop 5
		{892.6907,-1222.3127,17.0778} // line 3 stop 6

	}

};

new Float:taxi_profiles[4][2][3] = {

	{{372.9676,-2033.0634,7.4499},{1314.7521,-920.3168,37.8390}},
	{{1191.8425,-1324.9685,13.1785},{2402.2620,-1727.2228,13.2440}},
	{{2223.1558,-1137.8208,25.4047},{921.3489,-1352.7181,12.9768}},
	{{1648.9384,-2250.3621,-3.0671},{1932.9849,-1131.0900,24.9980}}

};

new WeatherProfiles[10][2] = {

	{10,3600},//Clear
	{2,1800},//Clear
	{12,1800},//Overcast
	{20,1800},//Dark Skies, Overcast
	{18,1800},//Dull Skies, cold
	{20,300},//Foggy
	{11,3600},//Very Hot
	{18,600},//Cloudy
	{9,600},//Fog
	{8,300}//Rain

};

new WeatherNames[10][64] = {

	"Clear Skies, Warm and Sunny",
	"Clear Skies, mild",
	"Overcast, mild",
	"Dark Skies, Overcast, Cold",
	"Cloudy, Cold",
	"Foggy, Very Cold",
	"Heatwave, very hot",
	"Cloudy",
	"Foggy",
	"Heavy Rain"

};

new VehicleNames[213][256] = {
   "Landstalker",
   "Bravura",
   "Buffalo",
   "Linerunner",
   "Pereniel",
   "Sentinel",
   "Dumper",
   "Firetruck",
   "Trashmaster",
   "Stretch",
   "Manana",
   "Infernus",
   "Voodoo",
   "Pony",
   "Mule",
   "Cheetah",
   "Ambulance",
   "Leviathan",
   "Moonbeam",
   "Esperanto",
   "Taxi",
   "Washington",
   "Bobcat",
   "Mr Whoopee",
   "BF Injection",
   "Hunter",
   "Premier",
   "Enforcer",
   "Securicar",
   "Banshee",
   "Predator",
   "Bus",
   "Rhino",
   "Barracks",
   "Hotknife",
   "Trailer", //artict1
   "Previon",
   "Coach",
   "Cabbie",
   "Stallion",
   "Rumpo",
   "RC Bandit",
   "Romero",
   "Packer",
   "Monster",
   "Admiral",
   "Squalo",
   "Seasparrow",
   "Pizzaboy",
   "Tram",
   "Trailer", //artict2
   "Turismo",
   "Speeder",
   "Reefer",
   "Tropic",
   "Flatbed",
   "Yankee",
   "Caddy",
   "Solair",
   "Berkley's RC Van",
   "Skimmer",
   "PCJ-600",
   "Faggio",
   "Freeway",
   "RC Baron",
   "RC Raider",
   "Glendale",
   "Oceanic",
   "Sanchez",
   "Sparrow",
   "Patriot",
   "Quad",
   "Coastguard",
   "Dinghy",
   "Hermes",
   "Sabre",
   "Rustler",
   "ZR3 50",
   "Walton",
   "Regina",
   "Comet",
   "BMX",
   "Burrito",
   "Camper",
   "Marquis",
   "Baggage",
   "Dozer",
   "Maverick",
   "News Chopper",
   "Rancher",
   "FBI Rancher",
   "Virgo",
   "Greenwood",
   "Jetmax",
   "Hotring",
   "Sandking",
   "Blista Compact",
   "Police Maverick",
   "Boxville",
   "Benson",
   "Mesa",
   "RC Goblin",
   "Hotring Racer", //hotrina
   "Hotring Racer", //hotrinb
   "Bloodring Banger",
   "Rancher",
   "Super GT",
   "Elegant",
   "Journey",
   "Bike",
   "Mountain Bike",
   "Beagle",
   "Cropdust",
   "Stunt",
   "Tanker", //petro
   "RoadTrain",
   "Nebula",
   "Majestic",
   "Buccaneer",
   "Shamal",
   "Hydra",
   "FCR-900",
   "NRG-500",
   "HPV1000",
   "Cement Truck",
   "Tow Truck",
   "Fortune",
   "Cadrona",
   "FBI Truck",
   "Willard",
   "Forklift",
   "Tractor",
   "Combine",
   "Feltzer",
   "Remington",
   "Slamvan",
   "Blade",
   "Freight",
   "Streak",
   "Vortex",
   "Vincent",
   "Bullet",
   "Clover",
   "Sadler",
   "Firetruck", //firela
   "Hustler",
   "Intruder",
   "Primo",
   "Cargobob",
   "Tampa",
   "Sunrise",
   "Merit",
   "Utility",
   "Nevada",
   "Yosemite",
   "Windsor",
   "Monster", //monstera
   "Monster", //monsterb
   "Uranus",
   "Jester",
   "Sultan",
   "Stratum",
   "Elegy",
   "Raindance",
   "RC Tiger",
   "Flash",
   "Tahoma",
   "Savanna",
   "Bandito",
   "Freight", //freiflat
   "Trailer", //streakc
   "Kart",
   "Mower",
   "Duneride",
   "Sweeper",
   "Broadway",
   "Tornado",
   "AT-400",
   "DFT-30",
   "Huntley",
   "Stafford",
   "BF-400",
   "Newsvan",
   "Tug",
   "Trailer", //petrotr
   "Emperor",
   "Wayfarer",
   "Euros",
   "Hotdog",
   "Club",
   "Trailer", //freibox
   "Trailer", //artict3
   "Andromada",
   "Dodo",
   "RC Cam",
   "Launch",
   "Police Cruiser",//LSPD
   "Police Cruiser",//SFPD
   "Police Cruiser",//LVPD
   "Police Ranger",
   "Picador",
   "S.W.A.T. Van",
   "Alpha",
   "Phoenix",
   "Glendale",
   "Sadler",
   "Luggage Trailer", //bagboxa
   "Luggage Trailer", //bagboxb
   "Stair Trailer", //tugstair
   "Boxville",
   "Farm Plow", //farmtr1
   "Utility Trailer", //utiltr1
   "Invalid Vehicle" //just to return if the modelid is invalid
};

new Float:delivery_profiles[5][3][3] = {

	{{1354.3013,243.1565,19.2692},{753.7128,306.3651,19.9430},{219.5093,24.6085,2.2833}},
	{{186.6427,-319.6463,1.2858},{667.3513,-470.6907,16.0426},{1056.5095,-309.1675,73.6971}},
	{{1932.7817,170.8444,36.9839},{1382.4510,462.2460,19.8327},{349.0359,-96.9555,1.0467}},
	{{2245.0098,45.8009,26.4503},{1019.4842,-319.8369,74.1125},{799.2541,-608.8345,16.4562}},
	{{717.7450,-569.3655,16.3012},{202.9508,-176.7265,1.6904},{-181.2764,-277.0652,1.5462}}

};

new Float:buy_plane_spawns[12][4] = {

	{-1349.1178,-233.7980,15.8722,134.4665},
	{-1282.9340,-34.9735,15.8700,80.7517},
	{-1300.4365,18.3428,15.8761,44.5982},
	{-1477.2631,-153.5915,15.8769,56.3853},
	{-1629.2350,-308.1971,15.8757,24.8126},
	{-1248.8698,-100.9738,15.8681,134.2121},//
	{-1207.1122,-146.1646,15.8748,135.1135},
	{-1466.9948,-191.8265,15.8714,165.8899},
	{-1168.8738,-406.2197,15.8767,4.9604},
	{-1234.6577,-363.8690,15.8787,275.7355},
	{-1119.5964,-205.3742,15.8735,93.3988},
	{-1628.7646,-197.6260,15.8687,149.5583}

};

new Float:buy_boat_spawns[10][4] = {

    {-2228.9761,2390.2180,1.2321,48.9645},
	{-2262.8154,2423.7034,1.0142,225.5103},
	{-2221.2515,2396.9126,1.0316,45.6232},
	{-2252.9753,2429.3323,1.2152,225.2571},
	{-2211.4402,2412.6257,1.2100,54.6139},
	{-2239.0271,2440.0845,1.1844,225.9748},
	{-2202.4387,2418.7532,1.1157,50.0404},
	{-2235.9797,2452.2510,1.1376,232.0496},
	{-2277.3333,2451.1465,1.2145,12.5088},
	{-2256.3296,2469.9094,1.1333,13.0154}

};

new object_data_status[37];

new object_data_instance[37];

new object_data_id[37][2] = {

	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{2930,1},
	{1495,1},
	{1495,1},
	{1495,1},
	{1495,1},
	{1495,1},
	{1495,1},
	{968,1},
	{968,1},
	{1501,1}

};

new object_anim[37] = {

	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0

};

new Float:object_data[37][7] = {//X,Y,Z,RX,RY,RZ,RADIUS

	{1801.79, -1552.41, 5702.06,   0.00, 0.00, 0.48, 3.5},//Start Cells
	{1801.77, -1557.14, 5702.06,   0.00, 0.00, 0.48, 3.5},
	{1801.84, -1561.87, 5702.06,   0.00, 0.00, 0.48, 3.5},
	{1801.94, -1566.64, 5702.06,   0.00, 0.00, 0.48, 3.5},
	{1801.94, -1571.29, 5702.06,   0.00, 0.00, 0.48, 3.5},
	{1801.91, -1576.06, 5702.06,   0.00, 0.00, 0.48, 3.5},
	{1801.95, -1580.82, 5702.06,   0.00, 0.00, 0.48, 3.5},
	{1801.95, -1580.82, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1801.93, -1576.08, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1801.92, -1571.31, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1801.91, -1566.64, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1801.83, -1561.85, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1801.78, -1557.14, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1801.77, -1552.40, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1817.90, -1552.16, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1817.90, -1556.90, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1817.98, -1561.66, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1818.01, -1566.41, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1818.07, -1571.15, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1818.05, -1575.87, 5705.55,   0.00, 0.00, 0.48, 3.5},
	{1818.10, -1580.66, 5705.54,   0.00, 0.00, 0.48, 3.5},
	{1818.10, -1580.66, 5702.04,   0.00, 0.00, 0.48, 3.5},
	{1818.05, -1575.90, 5702.04,   0.00, 0.00, 0.48, 3.5},
	{1818.05, -1571.16, 5702.04,   0.00, 0.00, 0.48, 3.5},
	{1818.04, -1566.39, 5702.04,   0.00, 0.00, 0.48, 3.5},
	{1817.97, -1561.65, 5702.04,   0.00, 0.00, 0.48, 3.5},
	{1817.89, -1556.90, 5702.04,   0.00, 0.00, 0.48, 3.5},
	{1817.90, -1552.18, 5702.04,   0.00, 0.00, 0.48, 3.5},//End Cells
	{1797.01, -1525.15, 5699.42,   0.00, 0.00, 180.00, 1.5},
	{1794.01, -1525.19, 5699.42,   0.00, 0.00, 360.00, 1.5},
	{1808.76, -1547.63, 5699.42,   0.00, 0.00, 0.00, 1.5},
	{1811.76, -1547.61, 5699.42,   0.00, 0.00, 180.00, 1.5},
	{1811.74, -1545.83, 5699.42,   0.00, 0.00, 180.00, 1.5},
	{1808.73, -1545.87, 5699.42,   0.00, 0.00, 0.00, 1.5},
	{289.81, 1418.25, 9.99,   0.00, 90.00, 270.00, 7.5},
	{289.82, 1402.46, 9.99,   0.00, 90.00, 90.00, 7.5},
	{245.83, 72.40, 1002.64,   0.00, 0.00, 0.00,2.0}

};

//new gate_reset[sizeof(object_data)];

new Float:object_open_data[37][6] = {

	{1801.79, -1552.41, 5702.06,   0.00, 0.00, 90.00},//Start Cells
	{1801.77, -1557.14, 5702.06,   0.00, 0.00, 90.00},
	{1801.84, -1561.87, 5702.06,   0.00, 0.00, 90.00},
	{1801.94, -1566.64, 5702.06,   0.00, 0.00, 90.00},
	{1801.94, -1571.29, 5702.06,   0.00, 0.00, 90.00},
	{1801.91, -1576.06, 5702.06,   0.00, 0.00, 90.00},
	{1801.95, -1580.82, 5702.06,   0.00, 0.00, 90.00},
	{1801.95, -1580.82, 5705.55,   0.00, 0.00, 90.00},
	{1801.93, -1576.08, 5705.55,   0.00, 0.00, 90.00},
	{1801.92, -1571.31, 5705.55,   0.00, 0.00, 90.00},
	{1801.91, -1566.64, 5705.55,   0.00, 0.00, 90.00},
	{1801.83, -1561.85, 5705.55,   0.00, 0.00, 90.00},
	{1801.78, -1557.14, 5705.55,   0.00, 0.00, 90.00},
	{1801.77, -1552.40, 5705.55,   0.00, 0.00, 90.00},
	{1817.90, -1552.16, 5705.55,   0.00, 0.00, 270.0},
	{1817.90, -1556.90, 5705.55,   0.00, 0.00, 270.0},
	{1817.98, -1561.66, 5705.55,   0.00, 0.00, 270.0},
	{1818.01, -1566.41, 5705.55,   0.00, 0.00, 270.0},
	{1818.07, -1571.15, 5705.55,   0.00, 0.00, 270.0},
	{1818.05, -1575.87, 5705.55,   0.00, 0.00, 270.0},
	{1818.10, -1580.66, 5705.54,   0.00, 0.00, 270.0},
	{1818.10, -1580.66, 5702.04,   0.00, 0.00, 270.0},
	{1818.05, -1575.90, 5702.04,   0.00, 0.00, 270.0},
	{1818.05, -1571.16, 5702.04,   0.00, 0.00, 270.0},
	{1818.04, -1566.39, 5702.04,   0.00, 0.00, 270.0},
	{1817.97, -1561.65, 5702.04,   0.00, 0.00, 270.0},
	{1817.89, -1556.90, 5702.04,   0.00, 0.00, 270.0},
	{1817.90, -1552.18, 5702.04,   0.00, 0.00, 270.0},//End Cells
	{1798.37, -1525.15, 5699.42,   0.00, 0.00, 180.00},
 	{1792.67, -1525.21, 5699.42,   0.00, 0.00, 360.00},
 	{1807.36, -1547.63, 5699.42,   0.00, 0.00, 0.00},
 	{1813.12, -1547.61, 5699.42,   0.00, 0.00, 180.00},
 	{1813.08, -1545.83, 5699.42,   0.00, 0.00, 180.00},
 	{1807.33, -1545.87, 5699.42,   0.00, 0.00, 0.00},
 	{289.81, 1418.25, 9.99,   0.00, 0.00, 270.0},
 	{289.82, 1402.46, 9.99,   0.00, 0.00, 90.00},
 	{245.83, 72.40, 1002.64,   0.00, 0.00, 90.00}

};

new Float:airline_stop_points[8][3] = {

	{1660.9916,-2438.8469,14.2830}, // LS Airline 1
	{1744.5448,-2440.6587,14.2854}, // LS Airline 2
	{1563.1335,1356.2117,11.5963}, // LV Airline 1
	{1565.1416,1537.9965,11.5584}, // LV Airline 2
	{-1332.7584,-260.6133,14.8756}, // SF Airline 1
	{-1369.5518,-220.0946,14.8730}, // SF Airline 2
	{366.6911,2544.5547,17.2771}, // AB 1
	{1403.5326,348.1117,20.4459}

};

new airline_stop_names[7][128] = {

	"Los Santos International",
	"Los Santos International",
	"Las Venturas International",
	"Las Venturas International",
	"San Fierro International",
	"San Fierro International",
	"Bone County International"

};

new Float:del_stop_points[77][3] = {

	{-2068.9067,-83.0750,35.2512}, // SF 1
	{-1989.1672,137.9587,27.6230}, // SF 2
	{-1904.6282,824.4699,35.0926}, // SF 3
	{-1971.6167,1117.4487,53.4820}, // SF 4
	{-1774.6317,1203.6798,25.2041}, // SF 5
	{-1647.5966,1219.4370,7.1892}, // SF 6
	{-2623.0759,1376.5868,7.1991}, // SF 7
	{-2512.3784,1207.3363,37.4926}, // SF 8
	{-2648.2793,-42.7752,4.4061}, // SF 9
	{-2728.3682,-313.4174,7.1167}, // SF 10
	{1505.6311,-1346.7943,14.0503}, // Stationary SAN TOWER
	{2095.2598,-1797.2408,13.4719}, // PizzaStack Pizza
	{1127.5991,-1551.4049,14.2927}, // Back of mall
	{1029.0188,-1365.4435,13.6565}, // StickyDonught
	{1351.3982,-1773.4408,13.5553}, // 24/7 comerce
	{1877.5243,-1739.7104,13.5323}, // Alhambra
	{2261.2837,-1690.5699,13.7874}, // Ganton Gym
	{2434.8958,-1205.5978,33.3073}, // PigPen
	{2498.7188,-2560.7136,13.7387}, // Docks
	{2323.8726,-22.9210,26.2380}, // Del stop
	{1278.0055,259.6397,19.3072}, // Del stop
	{1219.7616,190.3907,19.6408}, // Del stop
	{362.1178,-94.3130,1.1991}, // Del stop
	{318.4228,-54.5349,1.4051}, // Del stop
	{248.4007,31.4194,2.3475}, // Del stop
	{-83.4006,1080.8566,19.5700}, // Del stop
	{-197.7910,1216.6698,19.5762}, // Del stop
	{-90.4179,1357.9635,10.1027}, // Del stop
	{-774.6527,2754.8650,45.5452}, // Del stop
	{-1400.1785,2644.2659,55.5212}, // Del stop
	{-1360.7458,2068.7827,52.2802}, // Del stop
	{-1206.5283,1820.4692,41.5492}, // Del stop
	{-807.3749,1436.0765,13.6236}, // Del stop
	{1076.3300,1923.2216,10.6496}, // Del stop
	{1127.7576,2088.8320,10.6545}, // Del stop
	{1595.4033,2198.6748,10.6487}, // Del stop
	{1631.7809,2324.5083,10.6488}, // Del stop
	{2178.4912,1993.7922,10.6511}, // Del stop
	{2178.1235,913.7718,10.6560}, // Del stop
	{2478.5791,922.2238,10.6544}, // Del stop
	{2705.7051,842.9250,9.6816}, // del stop
	{2840.4478,898.0311,10.5919}, // del stop
	{2467.5320,1999.9646,10.6480}, // del stop
	{2371.7791,2535.8982,10.6474}, // del stop
	{1419.5024,1052.4100,10.6507}, // del stop
	{-2271.3738,2299.3247,5.2574}, // Bayside 1
	{-2485.3926,2536.4517,18.5014}, //
	{1015.5343,-1357.8521,13.0978},
	{526.5052,-1510.3386,14.1166},
	{785.1763,-1610.0610,13.1143},
	{1348.1135,-1752.2422,13.0863},
	{1779.2487,-1698.8187,13.2143},
	{1938.8451,-1790.7037,13.1071},
	{2116.0640,-1781.5851,13.1121},
	{2395.2314,-1921.1187,13.1058},
	{2391.4717,-1487.7490,23.5557},
	{2418.0037,-1234.8279,24.0060},
	{2327.6990,86.8066,26.1287},
	{2288.4775,-59.2241,26.1337},
	{2348.4504,-52.9397,26.1351},
	{1354.1949,244.1194,19.2827},
	{1337.3263,324.8913,19.7033},
	{1248.6918,338.3441,19.1987},
	{220.9659,31.9781,2.3027},
	{167.3200,-22.0417,1.3036},
	{111.3901,-164.0555,1.3858},
	{189.3132,-319.9756,1.3046},
	{-7.7723,1219.6077,19.0785},
	{271.6838,1412.3353,10.1773},
	{691.6577,1946.6897,5.2656},
	{1082.8116,1917.2288,10.5431},
	{1145.9847,2040.0909,10.5452},
	{1610.2744,2232.0266,10.5459},
	{2096.1331,2218.6677,10.5459},
	{2443.9070,2027.7322,10.5435},
	{2221.8145,1836.3439,10.5464},
	{2122.8816,951.8904,10.5392}

};

new Float:checkride_points[32][3] = {

	{418.4599,2506.9543,16.9433}, // point 1
	{348.7121,2507.5776,17.0477}, // point 1
	{236.9930,2505.3406,30.2131}, // point 1
	{103.3956,2504.6631,64.4515}, // point 1
	{-13.7595,2504.7178,87.9311}, // point 1
	{-156.9942,2504.9929,117.7415}, // point 1
	{-292.5300,2505.3298,144.0712}, // point 1
	{-426.1181,2505.6709,169.1986}, // point 1
	{-787.7262,2314.9426,173.2994}, // point 1
	{-1136.1160,1956.8782,155.0054}, // point 1
	{-1366.0785,1493.8104,160.4713}, // point 1
	{-1378.0247,1064.7192,151.3216}, // point 1
	{-1013.7502,729.0494,139.3328}, // point 1
	{-613.2695,541.9918,149.3870}, // point 1
	{87.6244,211.4804,149.6289}, // point 1
	{868.1344,492.8678,141.6362}, // point 1
	{1456.4678,650.1947,137.0326}, // point 1
	{1922.9943,1343.0188,128.0642}, // point 1
	{2075.6802,1905.1682,119.2531}, // point 1
	{2668.8071,2047.3270,117.8899}, // point 1
	{2641.4121,2561.0029,171.0650}, // point 1
	{2214.4128,2758.3608,153.1468}, // point 1
	{1531.4277,2581.6177,147.7256}, // point 1
	{1122.9321,2525.0991,142.9173}, // point 1
	{893.2096,2518.3074,132.8771}, // point 1
	{763.9785,2514.7312,108.4138}, // point 1
	{664.7056,2512.1440,82.3836}, // point 1
	{537.3564,2508.9177,54.3558}, // point 1
	{426.2729,2506.1299,32.3593}, // point 1
	{325.0778,2503.6013,20.5917}, // point 1
	{245.5571,2501.6208,17.0068}, // poin;amd
	{156.2601,2499.4045,16.9474} // final

};

new load_names[22][64] = {

	"Old Video Games",
	"Newspapers",
	"TVs",
	"Steering Wheels",
	"Empty Pizza Boxes",
	"Used Wallets",
	"Dirty Laundry",
	"Pillowcases",
	"Broken Cellphones",
	"Used Tissues",
	"Computer Parts",
	"Fish Bones",
	"Chicken Bones",
	"Picture Frames",
	"Car Parts",
	"Old Wedding Dresses",
	"Empty Cerial Boxes",
	"Sunglasses",
	"Shaving Cream",
	"Broken Computers",
	"Empty Beer Bottles",
	"Potato Salad"

};

enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};

new SpikeInfo[MAX_SPIKESTRIPS][sInfo];

enum ciInfo{

	ciID,
	ciName[64],
	ciJobsComplete,
	ciBank,
	ciType,
	ciPayRate,
	ciJobMoney

};

new CompanyInfo[MAX_COMPANIES][ciInfo];

enum eInfo{

	eMsg[80],
	eExpire

}

new ErrorInfo[MAX_PLAYERS][3][eInfo];

enum dInfo{

	dID,
	dType,
	dTime,
	Float:dSpawnX,
	Float:dSpawnY,
	Float:dSpawnZ,
	dObject

}

new DrugInfo[MAX_DRUGS][dInfo];

enum vinInfo{

    vinID,
	vinOwner,
	vinItem,
	vinAmount

}

new VehicleInventory[MAX_VEHICLES][MAX_INVENTORY][vinInfo];

enum inInfo{

	inID,
	inOwner,
	inItem,
	inAmount

}

new InventoryInfo[MAX_PLAYERS][MAX_INVENTORY][inInfo];

enum nInfo{

	nID,
	nText[256],
	nActive

}

new NoteInfo[MAX_PLAYERS][MAX_NOTES][nInfo];

enum rInfo{

	rID,
	rChannel,
	rOwner,
	rPassword[16]

}

new RadioInfo[MAX_RADIO][rInfo];

enum iInfo{

	iID,
	Float:iSpawnX,
	Float:iSpawnY,
	Float:iSpawnZ,
	Float:iInteriorX,
	Float:iInteriorY,
	Float:iInteriorZ,
	iInterior,
	iPickup,
	iFaction,
	iLock

}

new InteriorInfo[MAX_INTERIORS][iInfo];

enum mInfo{

	mID,
	mOwner,
	mSender[MAX_PLAYER_NAME],
	mSubject[64],
	mMsg[256],
	mActive,
	mRead

}

new MailInfo[MAX_PLAYERS][MAX_MAIL][mInfo];

enum fInfo{

	fID,
	fName[256],
	fShortName[256],
	fBank,
	fType

}

new FactionInfo[MAX_FACTIONS][fInfo];

enum vmInfo{

	vmModel,
	vmName[256],
	vmPrice,
	vmEmerVeh,
	Float:vmDonatorVeh,
	vmType,
	vmVehicle,
	vmInsurancePrice,
	vmNews,
	vmFuelInterval

}

new VehicleModelInfo[300][vmInfo];

enum boInfo{

	boUsed,
	Float:boX,
	Float:boY,
	Float:boZ,
	boObject,
	boPlacer,
	boStream[256]

}

new BoomBoxInfo[MAX_BOOMBOXES][boInfo];

enum bInfo{

	bID,
	bOwner,
	bOwnerName[256],
	bPrice,
	Float:bSpawnX,
	Float:bSpawnY,
	Float:bSpawnZ,
	Float:bInteriorX,
	Float:bInteriorY,
	Float:bInteriorZ,
	bInterior,
	Text3D: bPickup,
	bOpen,
	bType,
	Float:bVX,
	Float:bVY,
	Float:bVZ,
	Float:bVR,
	bBank,
	bFuelPrice,
	bName[256],
	bBillTime,
	bEntranceFee,
	bLevel,
	bStream[256]

}

new BizInfo[MAX_BIZES][bInfo];

enum hiInfo{

	hiID,
	hiItem,
	hiAmount

}

new HouseInventoryInfo[MAX_HOUSES][MAX_HOUSE_INVENTORY][hiInfo];

enum hInfo{

	hID,
	hOwner,
	hOwnerName[256],
	hPrice,
	Float:hSpawnX,
	Float:hSpawnY,
	Float:hSpawnZ,
	Float:hInteriorX,
	Float:hInteriorY,
	Float:hInteriorZ,
	Float:hInteriorR,
	hInterior,
	Text3D: hPickup,
	hLocked,
	hRentPrice,
	hBank,
	hInventory[256],
	hUpgrades[MAX_HOUSE_UPGRADES],
	hRentable,
	hLevel

}

new HouseInfo[MAX_HOUSES][hInfo];

enum vInfo{

	vID,
	vModel,
	Float:vSpawnX,
	Float:vSpawnY,
	Float:vSpawnZ,
	Float:vSpawnR,
	vColor1,
	vColor2,
	vOwner,
	vVehicle,
	vFuel,
	vMileage,
	vInsurance,
	vLock,
	vLocked,
	vDestroyed,
	vEngine,
	vFaction,
	vOwnerName[64],
	vDeathTime,
	vPlate[256],
	vMods[128],
	vPaintjob,
	vImpounded,
	vGps,
	vCompany,
	vDamage[4],
	Float:vHealth,
	vNeon,
	vNeonState,
	vImmob,
	vSelling,
	vSellingPrice,
	vSellingExpire

}

new VehicleInfo[MAX_RP_VEHICLES][vInfo];

/**Prison System Vars**/

new Float:prison_positions[MAX_CELLS][4] = {

    {1800.3252,-1552.9213,5700.4302,271.1083}, // cell1
	{1799.9548,-1557.4860,5700.4302,263.8781}, // cell2
	{1800.4984,-1562.2004,5700.4302,267.6381}, // cell3
	{1800.0597,-1566.9635,5700.4302,267.3013}, // cell4
	{1799.6322,-1571.6249,5700.4302,262.1195}, // cell5
	{1799.7345,-1576.3470,5700.4302,265.5662}, // cell6
	{1800.1141,-1580.9152,5700.4302,274.9663}, // cell7
	{1821.1276,-1582.3191,5700.4302,79.7812}, // cell8
	{1820.6246,-1577.5569,5700.4302,92.2913}, // cell9
	{1820.7362,-1572.9268,5700.4302,83.8311}, // cell10
	{1820.0883,-1567.9366,5700.4302,83.8075}, // cell11
	{1820.2123,-1563.3329,5700.4302,86.6041}, // cell12
	{1820.6000,-1558.6089,5700.4302,96.3175}, // cell13
	{1820.1963,-1553.6199,5700.4302,94.7507}, // cell15
	{1799.4484,-1552.6442,5703.9155,269.9058}, // cell15
	{1799.8485,-1557.3568,5703.9131,270.8458}, // cell16
	{1799.8579,-1562.1329,5703.9131,271.4725}, // cell17
	{1800.2123,-1566.8158,5703.9155,270.5325}, // cell18
	{1799.8169,-1571.7711,5703.9155,266.1458}, // cell19
	{1799.9747,-1576.2933,5703.9155,273.0392}, // cell20
	{1799.9915,-1580.9050,5703.9155,270.5325}, // cell21
	{1820.5928,-1582.3309,5703.9209,86.0010}, // cell22
	{1820.6989,-1577.4349,5703.9146,80.9875}, // cell23
	{1820.3925,-1572.8759,5703.9146,86.0007}, // cell24
	{1819.8973,-1568.3136,5703.9146,87.8807}, // cell25
	{1820.4596,-1563.3579,5703.9146,91.9540}, // cell26
	{1820.4523,-1558.3401,5703.9146,93.8339}, // cell27
	{1820.3110,-1553.7837,5703.9146,89.1337} // cell28

};

enum pInfo{

	pID,
	pOwner,
	pExpire

}

new PrisonInfo[MAX_CELLS][pInfo];

/**Market System Vars**/

new mk_menulevel[MAX_PLAYERS];
new mk_menudirection[MAX_PLAYERS];
new mk_selling[MAX_PLAYERS];

#define MAX_MARKETPRICES 3

#define MARKETPRICE_METAL 0
#define MARKETPRICE_CARPART 1
#define MARKETPRICE_FISH 2

new mk_prices[MAX_MARKETPRICES];

/**Clothing System Vars**/

new Float:cl_phoneoffset[6] = {0.100000,0.000000,0.000000,90.000000,180.000000,0.000000};

new cl_equipping[MAX_PLAYERS];
new cl_menulevel[MAX_PLAYERS];
new cl_menutype[MAX_PLAYERS];
new cl_buyingitem[MAX_PLAYERS];
new cl_editcallback[MAX_PLAYERS][256];
new cl_editingitem[MAX_PLAYERS];
new cl_editinguid[MAX_PLAYERS];
new cl_clothingslots[MAX_PLAYERS][MAX_PLAYERCLOTHING];

new Float:cl_tmpplacement_pos[MAX_PLAYERS][9];
new cl_tmpplacement_data[MAX_PLAYERS][2];

new Float:cl_clothing_cams[4][3] = {

	{0.0,0.0,0.7},//Masks
	{0.0,-0.5,0.0},//Watches
	{0.0,0.0,0.7},//Hats
	{0.0,0.0,0.7}//Glasses

};

new cl_clothingitems[55][4] = {//Object ID, Object Bone, Object Type, Price

	/**Sunglasses**/
	{19006,2,CTYPE_GLASSES,250},
	{19007,2,CTYPE_GLASSES,350},
	{19008,2,CTYPE_GLASSES,550},
	{19009,2,CTYPE_GLASSES,250},
	{19010,2,CTYPE_GLASSES,125},
	{19012,2,CTYPE_GLASSES,200},
	/**Hats**/
	{18639,2,CTYPE_HAT,500},
	{18926,2,CTYPE_HAT,750},
	{18927,2,CTYPE_HAT,500},
	{18928,2,CTYPE_HAT,650},
	{18929,2,CTYPE_HAT,425},
	{18930,2,CTYPE_HAT,585},
	{18931,2,CTYPE_HAT,800},
	{18932,2,CTYPE_HAT,725},
	{18933,2,CTYPE_HAT,645},
	{18934,2,CTYPE_HAT,855},
	{18935,2,CTYPE_HAT,545},
	{18921,2,CTYPE_HAT,675},
	{18922,2,CTYPE_HAT,875},
	{18923,2,CTYPE_HAT,500},
	{19095,2,CTYPE_HAT,655},
	{19096,2,CTYPE_HAT,455},
	{19097,2,CTYPE_HAT,655},
	{19098,2,CTYPE_HAT,545},
	{18969,2,CTYPE_HAT,755},
	{18970,2,CTYPE_HAT,735},
	{18971,2,CTYPE_HAT,700},
	{18939,2,CTYPE_HAT,805},
	{18940,2,CTYPE_HAT,900},
	{18941,2,CTYPE_HAT,545},
	{18942,2,CTYPE_HAT,500},
	{18943,2,CTYPE_HAT,900},
	{18977,2,CTYPE_HAT,1055},
	{18978,2,CTYPE_HAT,555},
	{18979,2,CTYPE_HAT,505},
	{18645,2,CTYPE_HAT,455},
	/**Masks**/
	{18911,2,CTYPE_MASK,500},
	{18912,2,CTYPE_MASK,350},
	{18913,2,CTYPE_MASK,545},
	{18914,2,CTYPE_MASK,700},
	{18915,2,CTYPE_MASK,545},
	{18916,2,CTYPE_MASK,255},
	{18917,2,CTYPE_MASK,545},
	{18918,2,CTYPE_MASK,375},
	{18919,2,CTYPE_MASK,200},
	{18920,2,CTYPE_MASK,155},
	/**Watches**/
	{19039,5,CTYPE_WATCH,50},
	{19040,5,CTYPE_WATCH,45},
	{19041,5,CTYPE_WATCH,55},
	{19042,5,CTYPE_WATCH,100},
	{19043,5,CTYPE_WATCH,75},
	{19044,5,CTYPE_WATCH,25},
	{19045,5,CTYPE_WATCH,150},
	{19046,5,CTYPE_WATCH,50},
	{19047,5,CTYPE_WATCH,105}

};

/**End Clothing System Vars**/

enum cInfo{

	cID,
	cName[MAX_PLAYER_NAME],
	cMoney,
	cSkin,
	Float:cSpawnX,
	Float:cSpawnY,
	Float:cSpawnZ,
	Float:cSpawnR,
	cSpawnI,
	cRenting,
	cFaction,
	cPhone,
	cDrugs,
	cWeapons[256],
	cBank,
	cJob,
	cPayday,
	cFactionPermissions,
	cRankName[64],
	cJailTime,
	cCarLic,
	cWeaponPack,
	cWeaponPackAmount,
	cWepLic,
	cPayTime,
	cLevel,
	cExp,
	cSpawnWorld,
	cRadio,
	cRadioChannel,
	cRadioAuth[16],
	cJobCooldown,
	cAddiction,
	cAddictionLevel,
	cSavings,
	cFlyLic,
	cDutySkin,
	Float:cHealth,
	Float:cArmor,
	cDuplicate,
	cEmployed,
	cHotel,
	cCarLicWarnings,
	cDob[32],
	cBadge,
	cChopCooldown,
	cDeaths,
	cHealthInsurance,
	cFstyle,
	cCompany,
	cCompanyPerms,
	cCompanyRank[32],
	cAccent[16],
	cLanguage,
	cSkill,
	cSkillLevel,
	cPhoneModel,
	cBail

}

new CharacterInfo[MAX_PLAYERS][25][cInfo];

enum aInfo{

	aID,
	aMaxChars,
	aName[MAX_PLAYER_NAME],
	aAdmin,
	aJailTime,
	aTutorial,
	aAssistant,
	aConnectionID,
	aBikePerm

}

new AccountInfo[MAX_PLAYERS][aInfo];

main()
{
	print("\n----------------------------------");
	print(" RP Script By TJ (SAMP Forums: TTJJ)");
	print(" This script comes AS IS, I offer NO support or assistance in its operation");
	print(" Please do not remove credits or claim this script was made by yourself");
	print("----------------------------------\n");
	WasteDeAMXersTime();
}

public OnGameModeInit()
{
	setEnviroment();
	mysql_debug(false);
	print("Connecting to MySQL server..");
	connectToMysql();
	SetGameModeText("CS-G "SERVER_VERSION);
	ShowPlayerMarkers(false);
	DisableInteriorEnterExits();
	AddPlayerClass(177, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);
	StartTimers();
	CreateTextDraws();
	CreateMenus();
	InitTime();
	EnableStuntBonusForAll(false);
	SetNameTagDrawDistance(30.0);
	ResetVehicles();
	RunNextRace();
	qs_ConnectQuests();

	mask_salt = (random(8999) + 1000);

	AddJobVehicles();
	AddJobs();
	AddObjects();
	AddGates();
	AddSpeedCameras();

	LoadHouses();
	LoadBizes();
	LoadVehicles();
	LoadVehicleModels();
	LoadFactions();
	LoadInteriors();
	LoadRadios();
	LoadDrugs();
	LoadCompanies();
	LoadRigs();
	LoadPrisons();

	CreatePlayerGates();

	RefreshPopulation();

	RefreshMarketPrices();

	WasteDeAMXersTime();

	return 1;
}

public CreateMenus()
{

	print("Menus Created.");

}

public AddSpeedCameras()
{

	new count = 0;
	for(new i = 0; i < sizeof(speed_cameras); i ++)
	{

	    F_CreateObject(18880,speed_cameras[i][0],speed_cameras[i][1],speed_cameras[i][2],0.0,0.0,speed_cameras[i][3]);
	    speed_camera_stats[i] = -1;
	    count ++;

	}
	printf("%d Speed Cameras Added",count);

}

public AddGates()
{

	new count = 0;
	for(new i = 0; i < sizeof(object_data); i ++)
	{

	    object_data_instance[i] = CreateObject(object_data_id[i][0],object_data[i][0],object_data[i][1],object_data[i][2],object_data[i][3],object_data[i][4],object_data[i][5]);
	    object_data_status[i] = 0;
	    count ++;

	}
	printf("%d Gates Added",count);

}

public LoadRadios()
{

	mysql_query("SELECT * FROM rp_radio",QUERY_LOAD_RADIO,QUERY_LOAD_RADIO);

}

public AddObjects()
{
	/************************Prison Resteraunt********************/

	F_CreateObject(19507, 154.89, 1433.04, 12.67,   0.00, 0.00, 270.00);
	F_CreateObject(19508, 154.89, 1433.04, 12.67,   0.00, 0.00, 270.00);
	F_CreateObject(1968, 160.42, 1430.70, 10.94,   0.00, 0.00, 90.00);
	F_CreateObject(1968, 160.42, 1433.64, 10.94,   0.00, 0.00, 90.00);
	F_CreateObject(1968, 160.42, 1436.72, 10.94,   0.00, 0.00, 90.00);
	F_CreateObject(16151, 149.98, 1431.42, 10.76,   0.00, 0.00, 180.00);
	F_CreateObject(984, 148.62, 1444.77, 10.59,   0.00, 0.00, 0.00);
	F_CreateObject(1968, 160.00, 1441.12, 10.58,   0.00, 0.00, 90.00);
	F_CreateObject(1968, 160.08, 1446.01, 10.58,   0.00, 0.00, 90.00);
	F_CreateObject(1968, 156.10, 1446.01, 10.58,   0.00, 0.00, 90.00);
	F_CreateObject(1968, 152.42, 1446.01, 10.58,   0.00, 0.00, 90.00);
	F_CreateObject(1968, 152.42, 1441.55, 10.58,   0.00, 0.00, 90.00);

	/************************Prison Exterior**********************/

	F_CreateObject(17513, 134.55, 1375.94, 4.48,   0.00, 0.00, 0.18);
	F_CreateObject(8419, 213.75, 1416.34, 21.30,   0.00, 0.00, 0.00);
	F_CreateObject(9825, 272.53, 1372.18, 9.61,   0.00, 0.00, -87.66);
	F_CreateObject(18753, 113.02, 1403.36, -33.02,   90.00, 0.00, 90.00);
	F_CreateObject(18753, 113.03, 1418.63, -33.02,   90.00, 0.00, 90.00);
	F_CreateObject(18753, 175.04, 1341.40, -33.02,   90.00, 0.00, 0.00);
	F_CreateObject(18753, 175.02, 1480.64, -33.02,   90.00, 0.00, 0.00);
	F_CreateObject(18753, 190.20, 1403.61, -33.02,   90.00, 0.00, 90.00);
	F_CreateObject(5871, 185.16, 1432.41, 12.92,   0.00, 0.00, 0.00);
	F_CreateObject(19378, 258.14, 1434.62, 6.47,   0.00, 0.00, 0.00);
	F_CreateObject(19378, 258.14, 1444.24, 6.47,   0.00, 0.00, 0.00);
	F_CreateObject(19378, 258.14, 1453.88, 7.39,   0.00, 0.00, 0.00);
	F_CreateObject(19378, 258.14, 1463.52, 9.53,   0.00, 0.00, 0.00);
	F_CreateObject(19378, 258.14, 1464.86, 9.73,   0.00, 0.00, 0.00);
	F_CreateObject(2395, 258.23, 1469.74, 12.75,   0.00, 90.00, 180.00);
	F_CreateObject(2395, 258.23, 1469.74, 14.65,   0.00, 90.00, 180.00);
	F_CreateObject(2395, 255.49, 1469.74, 12.75,   0.00, 90.00, 180.00);
	F_CreateObject(2395, 252.75, 1469.74, 12.75,   0.00, 90.00, 180.00);
	F_CreateObject(2395, 255.49, 1469.74, 13.53,   0.00, 90.00, 180.00);
	F_CreateObject(2395, 250.01, 1469.74, 12.47,   0.00, 90.00, 180.00);
	F_CreateObject(2395, 247.27, 1469.74, 12.47,   0.00, 90.00, 180.00);
	F_CreateObject(2395, 244.53, 1469.74, 12.47,   0.00, 90.00, 180.00);
	F_CreateObject(2395, 242.33, 1469.74, 12.47,   0.00, 90.00, 180.00);
	F_CreateObject(18774, 240.94, 1406.72, 11.01,   0.00, 0.00, 90.00);
	F_CreateObject(9623, 284.79, 1410.76, 11.72,   0.00, 0.00, 90.00);
	F_CreateObject(1557, 238.47, 1405.99, 9.81,   0.00, 0.00, 90.00);
	F_CreateObject(946, 136.29, 1359.88, 14.61,   0.00, 0.00, 1.38);
	F_CreateObject(946, 136.38, 1387.05, 14.61,   0.00, 0.00, 180.00);
	F_CreateObject(946, 162.56, 1387.30, 13.07,   0.00, 0.00, 180.00);
	F_CreateObject(946, 162.64, 1360.05, 13.07,   0.00, 0.00, 0.00);
	F_CreateObject(19313, 166.55, 1453.90, 16.33,   0.00, 0.00, 0.00);
	F_CreateObject(19313, 152.55, 1453.93, 16.33,   0.00, 0.00, 0.00);
	F_CreateObject(19313, 146.65, 1453.93, 16.33,   0.00, 0.00, 0.00);
	F_CreateObject(19313, 121.94, 1454.32, 15.92,   0.00, 0.00, 7.38);
	F_CreateObject(19313, 180.53, 1453.90, 13.25,   0.00, 0.00, 0.00);
	F_CreateObject(19313, 185.19, 1453.90, 16.33,   0.00, 0.00, 0.00);
	F_CreateObject(19313, 180.53, 1453.90, 16.33,   0.00, 0.00, 0.00);
	F_CreateObject(19313, 185.19, 1453.90, 13.19,   0.00, 0.00, 0.00);
	F_CreateObject(19313, 135.85, 1454.46, 16.33,   0.00, 0.00, -5.40);
	F_CreateObject(19313, 135.85, 1454.46, 10.67,   0.00, 0.00, -5.40);
	F_CreateObject(19313, 119.54, 1454.07, 15.82,   0.00, 0.00, 7.38);
	F_CreateObject(18753, 237.06, 1403.44, -33.02,   90.00, 0.00, 90.00);
	F_CreateObject(18753, 237.02, 1418.61, -33.02,   90.00, 0.00, 90.00);
	F_CreateObject(3279, 165.95, 1461.11, 9.56,   0.00, 0.00, 0.00);
	F_CreateObject(3279, 144.72, 1463.45, 9.56,   0.00, 0.00, 0.00);
	F_CreateObject(3279, 122.55, 1462.45, 9.56,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 179.93, 1427.53, 12.52,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 179.97, 1419.80, 12.52,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 173.48, 1419.61, 12.52,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 173.71, 1427.64, 12.52,   0.00, 0.00, 0.00);
	F_CreateObject(1290, 148.95, 1393.13, 17.93,   0.00, 0.00, 0.00);
	F_CreateObject(1290, 137.90, 1393.16, 17.93,   0.00, 0.00, 0.00);
	F_CreateObject(2629, 182.52, 1362.54, 9.60,   0.00, 0.00, 0.00);
	F_CreateObject(2628, 184.88, 1362.56, 9.58,   0.00, 0.00, 0.00);
	F_CreateObject(2631, 183.75, 1362.64, 9.56,   0.00, 0.00, 0.00);
	F_CreateObject(14787, 182.64, 1363.92, 9.60,   0.00, 0.00, 0.00);
	F_CreateObject(1557, 188.87, 1424.62, 10.07,   0.00, 0.00, 270.00);
	F_CreateObject(1557, 188.87, 1421.60, 10.07,   0.00, 0.00, 90.00);
	F_CreateObject(9825, 273.16, 1454.35, 9.61,   0.00, 0.00, -87.66);
	F_CreateObject(9825, 260.22, 1366.47, 9.61,   0.00, 0.00, 92.64);
	F_CreateObject(1368, 168.07, 1426.13, 10.70,   0.00, 0.00, 0.00);
	F_CreateObject(1368, 161.99, 1426.08, 10.70,   0.00, 0.00, 0.00);
	F_CreateObject(1368, 161.86, 1420.52, 10.70,   0.00, 0.00, 180.00);
	F_CreateObject(1368, 168.28, 1420.57, 10.70,   0.00, 0.00, 180.00);
	F_CreateObject(1616, 187.01, 1426.14, 19.85,   0.00, 0.00, 28.74);
	F_CreateObject(1616, 185.89, 1456.50, 25.04,   0.00, 0.00, 92.28);
	F_CreateObject(1616, 185.62, 1375.69, 25.04,   0.00, 0.00, 0.18);
	F_CreateObject(1616, 185.61, 1369.09, 25.04,   0.00, 0.00, 40.80);
	F_CreateObject(1616, 187.80, 1367.15, 25.04,   0.00, 0.00, 104.04);
	F_CreateObject(1616, 289.24, 1411.28, 13.70,   0.00, 0.00, 245.46);
	F_CreateObject(1616, 289.61, 1410.35, 13.70,   0.00, 0.00, 135.90);
	F_CreateObject(966, 289.78, 1402.47, 9.35,   0.00, 0.00, 270.00);
	F_CreateObject(966, 289.77, 1418.29, 9.35,   0.00, 0.00, 90.00);

	/*************************Prison******************************/

	CreateObject(8419, 1796.80, -1548.17, 5687.70,   0.00, 0.00, 0.00);
	F_CreateObject(2395, 240.21, 1469.74, 12.47,   0.00, 90.00, 180.00);
	F_CreateObject(3944, 1821.80, -1557.97, 5698.93,   0.00, 0.00, 270.25);
	F_CreateObject(3944, 1821.87, -1575.95, 5698.93,   0.00, 0.00, 270.25);
	F_CreateObject(3944, 1824.87, -1585.85, 5698.93,   0.00, 0.00, 0.25);
	F_CreateObject(3944, 1824.87, -1582.13, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1806.79, -1584.22, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1795.26, -1586.01, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1795.25, -1582.25, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1798.66, -1574.10, 5698.93,   0.00, 0.00, 90.48);
	F_CreateObject(14437, 1801.85, -1581.60, 5700.90,   0.00, 0.00, 270.50);
	F_CreateObject(8661, 1808.55, -1576.14, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(8661, 1835.80, -1573.08, 5702.92,   0.00, 359.98, 0.10);
	F_CreateObject(3944, 1821.87, -1575.95, 5702.40,   0.00, 0.00, 270.25);
	F_CreateObject(3944, 1824.81, -1582.13, 5702.40,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1806.78, -1584.22, 5702.41,   0.00, 0.00, 180.24);
	F_CreateObject(8661, 1816.45, -1575.28, 5706.35,   0.00, 179.99, 0.00);
	F_CreateObject(14437, 1801.85, -1581.60, 5704.89,   0.00, 0.00, 270.49);
	F_CreateObject(3944, 1793.48, -1581.34, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.46, -1577.59, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1793.46, -1577.59, 5702.43,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1793.48, -1581.34, 5702.42,   0.00, 0.00, 0.49);
	F_CreateObject(8661, 1784.27, -1559.68, 5702.61,   0.00, 179.99, 0.10);
	F_CreateObject(8661, 1784.25, -1573.11, 5702.91,   0.00, 359.98, 0.00);
	F_CreateObject(3944, 1798.66, -1574.10, 5702.41,   0.00, 0.00, 90.48);
	F_CreateObject(14437, 1801.80, -1576.83, 5704.88,   0.00, 0.00, 270.49);
	F_CreateObject(14437, 1801.80, -1576.85, 5700.90,   0.00, 0.00, 270.49);
	F_CreateObject(3944, 1793.52, -1576.59, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.52, -1576.59, 5702.42,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.51, -1572.83, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1793.51, -1572.83, 5702.42,   0.00, 0.00, 180.24);
	F_CreateObject(14437, 1801.80, -1572.09, 5700.90,   0.00, 0.00, 270.49);
	F_CreateObject(14437, 1801.80, -1572.09, 5704.89,   0.00, 0.00, 270.49);
	F_CreateObject(8661, 1835.76, -1553.13, 5702.92,   0.00, 359.98, 0.00);
	F_CreateObject(8661, 1835.82, -1553.19, 5702.61,   0.00, 179.98, 0.19);
	F_CreateObject(8661, 1808.52, -1556.15, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(3944, 1821.80, -1557.92, 5702.40,   0.00, 0.00, 270.25);
	F_CreateObject(14437, 1801.78, -1567.41, 5700.90,   0.00, 0.00, 270.74);
	F_CreateObject(14437, 1801.78, -1567.41, 5704.89,   0.00, 0.00, 270.74);
	F_CreateObject(8661, 1816.48, -1555.30, 5706.35,   0.00, 179.99, 0.00);
	F_CreateObject(3944, 1793.52, -1571.82, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.52, -1571.82, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.51, -1568.07, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1793.50, -1568.07, 5702.42,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1798.51, -1556.09, 5698.93,   0.00, 0.00, 90.47);
	F_CreateObject(3944, 1798.51, -1556.09, 5702.40,   0.00, 0.00, 90.48);
	F_CreateObject(8661, 1784.23, -1553.14, 5702.91,   0.00, 359.99, 0.00);
	F_CreateObject(3944, 1793.48, -1567.14, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.48, -1567.14, 5702.39,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.47, -1563.39, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1793.47, -1563.39, 5702.39,   0.00, 0.00, 180.24);
	F_CreateObject(16101, 1816.01, -1579.17, 5702.91,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1816.02, -1569.75, 5702.91,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1804.05, -1579.33, 5702.91,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1804.09, -1570.02, 5702.92,   0.00, 179.99, 0.00);
	F_CreateObject(3944, 1795.25, -1582.25, 5702.40,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1795.26, -1586.01, 5702.42,   0.00, 0.00, 0.49);
	F_CreateObject(14437, 1801.73, -1562.65, 5704.89,   0.00, 0.00, 270.74);
	F_CreateObject(14437, 1801.73, -1562.65, 5700.89,   0.00, 0.00, 270.74);
	F_CreateObject(3944, 1793.45, -1562.39, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.45, -1562.39, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.44, -1558.63, 5702.39,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1793.44, -1558.63, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(14437, 1801.65, -1557.92, 5704.89,   0.00, 0.00, 270.74);
	F_CreateObject(3944, 1793.39, -1557.65, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(14437, 1801.65, -1557.92, 5700.89,   0.00, 0.00, 270.74);
	F_CreateObject(3944, 1793.37, -1553.90, 5702.39,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1793.39, -1553.86, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(14437, 1801.66, -1553.18, 5704.89,   0.00, 0.00, 270.74);
	F_CreateObject(3944, 1793.39, -1552.91, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.39, -1549.15, 5702.39,   0.00, 0.00, 180.24);
	F_CreateObject(14437, 1801.65, -1553.18, 5700.89,   0.00, 0.00, 270.74);
	F_CreateObject(3944, 1793.39, -1552.91, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1793.39, -1549.15, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.20, -1553.61, 5702.43,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.21, -1558.38, 5702.43,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.29, -1563.12, 5702.43,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.35, -1567.87, 5702.43,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.35, -1572.61, 5702.43,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.34, -1577.36, 5702.43,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.34, -1577.36, 5698.95,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.35, -1572.61, 5698.93,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.35, -1567.87, 5698.91,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.29, -1563.12, 5698.94,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.21, -1558.38, 5698.94,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.20, -1557.29, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.20, -1553.61, 5698.95,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.20, -1557.29, 5698.92,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.21, -1562.06, 5698.92,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.21, -1562.06, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.28, -1566.79, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.28, -1566.79, 5698.92,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.36, -1571.54, 5698.92,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.36, -1571.54, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.34, -1576.28, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.34, -1576.28, 5698.90,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.33, -1581.04, 5698.90,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.33, -1581.04, 5702.42,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.20, -1552.56, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.20, -1552.56, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1826.19, -1548.88, 5698.95,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1826.19, -1548.88, 5702.43,   0.00, 0.00, 180.24);
	F_CreateObject(16101, 1815.97, -1560.17, 5702.91,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1815.98, -1550.83, 5702.91,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1803.94, -1560.45, 5702.91,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1803.96, -1551.03, 5702.91,   0.00, 179.99, 0.00);
	F_CreateObject(3944, 1814.26, -1540.88, 5698.93,   0.00, 0.00, 270.25);
	F_CreateObject(3944, 1799.70, -1548.70, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1796.12, -1550.86, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1796.10, -1548.85, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1796.12, -1550.86, 5702.42,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1796.10, -1548.85, 5702.42,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1799.68, -1544.95, 5698.95,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1799.69, -1548.68, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1799.68, -1544.95, 5702.43,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1816.79, -1544.88, 5701.42,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1820.79, -1544.86, 5698.91,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1820.79, -1548.54, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1820.78, -1548.53, 5702.43,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1803.00, -1548.67, 5701.42,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1820.78, -1544.85, 5702.41,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1803.20, -1548.66, 5702.41,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1817.29, -1544.84, 5702.41,   0.00, 0.00, 180.24);
	F_CreateObject(2774, 1810.42, -1557.34, 5711.90,   0.00, 0.00, 0.00);
	F_CreateObject(2774, 1810.28, -1570.87, 5711.90,   0.00, 0.00, 0.00);
	F_CreateObject(9339, 1803.56, -1570.55, 5702.76,   0.00, 90.00, 359.99);
	F_CreateObject(3944, 1793.40, -1557.61, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(9339, 1803.55, -1559.57, 5702.76,   0.00, 90.00, 359.98);
	F_CreateObject(8661, 1784.28, -1579.66, 5702.61,   0.00, 179.99, 0.09);
	F_CreateObject(9339, 1816.52, -1562.73, 5702.76,   0.00, 90.00, 180.07);
	F_CreateObject(9339, 1816.53, -1570.88, 5702.76,   0.00, 90.00, 180.07);
	F_CreateObject(8661, 1835.86, -1573.16, 5702.61,   0.00, 179.98, 0.19);
	F_CreateObject(9339, 1803.06, -1582.35, 5702.76,   0.00, 90.00, 90.08);
	F_CreateObject(8661, 1817.84, -1591.59, 5702.92,   0.00, 359.98, 0.09);
	F_CreateObject(8661, 1810.61, -1591.62, 5702.60,   0.00, 179.99, 0.09);
	F_CreateObject(3944, 1814.26, -1540.88, 5702.42,   0.00, 0.00, 270.25);
	F_CreateObject(9339, 1805.77, -1552.08, 5702.76,   0.00, 90.00, 270.38);
	F_CreateObject(8661, 1817.09, -1542.72, 5702.61,   0.00, 179.98, 0.36);
	F_CreateObject(8661, 1812.47, -1542.77, 5702.92,   0.00, 359.98, 0.29);
	F_CreateObject(14414, 1810.03, -1579.82, 5699.69,   0.00, 0.00, 0.00);
	F_CreateObject(14414, 1810.01, -1574.51, 5699.53,   359.94, 179.95, 180.11);
	F_CreateObject(8661, 1808.04, -1586.85, 5682.89,   0.00, 269.98, 0.00);
	F_CreateObject(9339, 1808.18, -1589.92, 5699.73,   0.00, 0.00, 0.00);
	F_CreateObject(8661, 1812.05, -1586.81, 5682.88,   0.00, 269.98, 179.99);
	F_CreateObject(970, 1804.20, -1579.58, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1804.20, -1575.43, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1804.20, -1571.36, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1804.19, -1554.68, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1804.19, -1558.84, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1804.20, -1563.01, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1804.20, -1567.19, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1806.31, -1552.65, 5703.25,   0.00, 179.99, 180.29);
	F_CreateObject(970, 1809.72, -1552.63, 5703.25,   0.00, 179.99, 180.29);
	F_CreateObject(970, 1813.80, -1552.61, 5703.25,   0.00, 179.99, 180.29);
	F_CreateObject(970, 1806.26, -1581.69, 5703.25,   0.00, 179.99, 180.29);
	F_CreateObject(970, 1815.87, -1554.68, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1815.89, -1558.81, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1815.88, -1562.94, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1815.88, -1567.06, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1815.87, -1571.19, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1815.87, -1575.31, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1815.87, -1579.58, 5703.25,   0.00, 179.99, 270.00);
	F_CreateObject(970, 1813.82, -1581.66, 5703.25,   0.00, 179.99, 180.29);
	F_CreateObject(9339, 1808.18, -1589.92, 5701.13,   0.00, 0.00, 0.00);
	F_CreateObject(9339, 1808.18, -1589.92, 5702.20,   0.00, 0.00, 0.00);
	F_CreateObject(9339, 1811.90, -1589.92, 5699.73,   0.00, 0.00, 0.00);
	F_CreateObject(9339, 1811.90, -1589.92, 5701.13,   0.00, 0.00, 0.00);
	F_CreateObject(9339, 1811.90, -1589.92, 5702.19,   0.00, 0.00, 0.00);
	F_CreateObject(8661, 1808.32, -1586.82, 5682.89,   0.00, 269.98, 180.00);
	F_CreateObject(8661, 1811.76, -1586.86, 5682.89,   0.00, 269.98, 0.00);
	F_CreateObject(1886, 1815.45, -1584.50, 5702.72,   32.00, 0.00, 212.67);
	F_CreateObject(1886, 1815.45, -1584.50, 5706.44,   20.17, 359.18, 212.95);
	F_CreateObject(1886, 1804.73, -1584.75, 5706.44,   20.17, 359.18, 149.03);
	F_CreateObject(1886, 1811.34, -1570.87, 5706.44,   40.93, 359.05, 157.45);
	F_CreateObject(1886, 1809.10, -1571.59, 5706.44,   40.93, 359.04, 346.49);
	F_CreateObject(1886, 1809.33, -1557.48, 5706.44,   40.92, 359.04, 346.48);
	F_CreateObject(1886, 1802.71, -1550.58, 5702.68,   4.93, 359.28, 25.84);
	F_CreateObject(1886, 1814.60, -1549.30, 5702.90,   20.93, 359.23, 259.74);
	F_CreateObject(1886, 1802.40, -1523.70, 5702.80,   20.92, 359.22, 135.73);
	F_CreateObject(1432, 1812.47, -1561.34, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(1432, 1807.21, -1559.40, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(1432, 1808.27, -1563.35, 5699.43,   0.00, 0.00, 324.00);
	F_CreateObject(2964, 1810.37, -1567.13, 5699.43,   0.00, 0.00, 1.53);
	F_CreateObject(3001, 1810.49, -1567.13, 5700.36,   0.00, 0.00, 288.00);
	F_CreateObject(3002, 1810.78, -1566.84, 5700.36,   0.00, 0.00, 0.00);
	F_CreateObject(3004, 1809.68, -1567.60, 5700.32,   0.00, 0.00, 280.00);
	F_CreateObject(2999, 1810.81, -1567.15, 5700.36,   0.00, 0.00, 0.00);
	F_CreateObject(3000, 1810.68, -1566.78, 5700.36,   0.00, 0.00, 0.00);
	F_CreateObject(3100, 1810.70, -1566.99, 5700.36,   0.00, 0.00, 0.00);
	F_CreateObject(1771, 1799.18, -1553.92, 5700.06,   0.00, 0.00, 267.99);
	F_CreateObject(1771, 1799.14, -1558.71, 5700.06,   0.00, 0.00, 267.99);
	F_CreateObject(1771, 1799.14, -1563.46, 5700.06,   0.00, 0.00, 267.99);
	F_CreateObject(1771, 1799.21, -1568.12, 5700.06,   0.00, 0.00, 267.99);
	F_CreateObject(1771, 1799.20, -1572.91, 5700.06,   0.00, 0.00, 267.99);
	F_CreateObject(1771, 1799.41, -1577.63, 5700.06,   0.00, 0.00, 267.99);
	F_CreateObject(1771, 1799.37, -1582.30, 5700.06,   0.00, 0.00, 267.99);
	F_CreateObject(1771, 1799.37, -1582.30, 5703.53,   0.00, 0.00, 267.99);
	F_CreateObject(1771, 1799.17, -1577.67, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1799.15, -1572.91, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1799.09, -1568.09, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1799.04, -1563.55, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1798.97, -1558.71, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1798.96, -1553.99, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.29, -1552.52, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.30, -1557.25, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.36, -1561.95, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.38, -1566.76, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.35, -1571.39, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.37, -1576.12, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.36, -1580.90, 5703.53,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.30, -1580.98, 5699.96,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1820.92, -1576.26, 5699.96,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.20, -1571.42, 5699.96,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.33, -1566.69, 5699.96,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.04, -1561.91, 5699.96,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1821.28, -1557.21, 5699.96,   0.00, 0.00, 268.57);
	F_CreateObject(1771, 1820.88, -1552.50, 5699.96,   0.00, 0.00, 268.56);
	F_CreateObject(8661, 1795.27, -1536.16, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(8661, 1815.89, -1523.48, 5702.61,   0.00, 179.98, 0.36);
	F_CreateObject(3944, 1799.74, -1536.44, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1799.67, -1546.69, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1799.65, -1544.68, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1799.64, -1540.93, 5698.95,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1799.72, -1532.69, 5698.95,   0.00, 0.00, 180.24);
	F_CreateObject(3944, 1814.19, -1520.82, 5698.93,   0.00, 0.00, 270.25);
	F_CreateObject(8661, 1835.26, -1536.17, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(3944, 1817.83, -1540.93, 5698.91,   0.00, 0.00, 89.36);
	F_CreateObject(3944, 1806.06, -1527.03, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(8661, 1795.68, -1516.18, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(3944, 1781.64, -1532.78, 5698.95,   0.00, 0.00, 180.24);
	F_CreateObject(8661, 1776.05, -1523.71, 5702.60,   0.00, 179.98, 0.36);
	F_CreateObject(3944, 1791.42, -1526.25, 5698.93,   0.00, 0.00, 90.47);
	F_CreateObject(3944, 1797.77, -1537.70, 5698.93,   0.00, 0.00, 270.25);
	F_CreateObject(3944, 1806.04, -1523.33, 5698.95,   0.00, 0.00, 180.43);
	F_CreateObject(3944, 1826.11, -1530.64, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1791.44, -1508.18, 5698.93,   0.00, 0.00, 89.36);
	F_CreateObject(3944, 1795.85, -1514.73, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1813.94, -1514.57, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1828.83, -1537.07, 5698.93,   0.00, 0.00, 270.25);
	F_CreateObject(2774, 1823.34, -1538.48, 5711.90,   0.00, 0.00, 358.08);
	F_CreateObject(2774, 1809.00, -1518.70, 5711.90,   0.00, 0.00, 0.00);
	F_CreateObject(2165, 1808.19, -1540.04, 5699.43,   0.00, 0.00, 270.00);
	F_CreateObject(2166, 1807.18, -1537.88, 5699.43,   0.00, 0.00, 270.00);
	F_CreateObject(2774, 1810.47, -1529.66, 5711.90,   0.00, 0.00, 0.00);
	F_CreateObject(2165, 1803.94, -1540.14, 5699.43,   0.00, 0.00, 270.00);
	F_CreateObject(1715, 1806.70, -1540.58, 5699.43,   0.00, 0.00, 90.00);
	F_CreateObject(1715, 1802.52, -1540.81, 5699.43,   0.00, 0.00, 90.00);
	F_CreateObject(2186, 1803.03, -1536.04, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(1893, 1802.16, -1537.94, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1806.50, -1537.82, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1811.82, -1541.88, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1811.57, -1533.78, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1813.63, -1524.57, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1805.00, -1531.40, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1794.45, -1529.83, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1744, 1806.09, -1535.55, 5700.99,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1805.78, -1536.04, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1806.77, -1536.03, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(2606, 1800.97, -1538.12, 5701.24,   0.00, 0.00, 90.47);
	F_CreateObject(2606, 1800.97, -1538.12, 5702.10,   0.00, 0.00, 90.47);
	F_CreateObject(2606, 1800.97, -1538.12, 5701.67,   0.00, 0.00, 90.48);
	F_CreateObject(2737, 1805.57, -1541.71, 5701.09,   0.00, 0.00, 180.29);
	F_CreateObject(2608, 1800.91, -1538.16, 5700.03,   0.00, 0.00, 90.40);
	F_CreateObject(2922, 1812.06, -1545.75, 5700.74,   0.00, 0.00, 0.00);
	F_CreateObject(3944, 1785.00, -1527.21, 5698.93,   0.00, 0.00, 0.49);
	F_CreateObject(3944, 1784.99, -1523.48, 5698.95,   0.00, 0.00, 180.43);
	F_CreateObject(3944, 1803.03, -1523.35, 5701.44,   0.00, 0.00, 180.43);
	F_CreateObject(3944, 1802.78, -1527.06, 5701.42,   0.00, 0.00, 0.49);
	F_CreateObject(2922, 1793.60, -1524.29, 5701.02,   0.00, 0.00, 0.00);
	F_CreateObject(2922, 1797.37, -1526.25, 5701.02,   0.00, 0.00, 181.02);
	F_CreateObject(2137, 1817.43, -1543.30, 5699.43,   0.00, 0.00, 90.00);
	F_CreateObject(2137, 1817.43, -1544.27, 5699.43,   0.00, 0.00, 90.00);
	F_CreateObject(2140, 1817.43, -1542.32, 5699.43,   0.00, 359.90, 89.92);
	F_CreateObject(2305, 1817.44, -1545.23, 5699.43,   0.00, 0.00, 180.00);
	F_CreateObject(2137, 1818.43, -1545.23, 5699.43,   0.00, 0.00, 179.73);
	F_CreateObject(2137, 1819.39, -1545.24, 5699.43,   0.00, 0.00, 179.73);
	F_CreateObject(2136, 1823.30, -1545.25, 5699.44,   0.00, 0.00, 180.05);
	F_CreateObject(2135, 1820.35, -1545.25, 5699.43,   0.00, 0.00, 179.81);
	F_CreateObject(2139, 1821.33, -1545.23, 5699.43,   0.00, 0.00, 179.99);
	F_CreateObject(2986, 1809.75, -1562.58, 5706.32,   0.00, 180.00, 0.00);
	F_CreateObject(1811, 1821.19, -1540.96, 5700.04,   0.00, 0.00, 88.66);
	F_CreateObject(2357, 1822.64, -1542.22, 5699.82,   0.00, 0.00, 0.00);
	F_CreateObject(1811, 1822.22, -1540.97, 5700.04,   0.00, 0.00, 88.65);
	F_CreateObject(1811, 1823.22, -1541.00, 5700.04,   0.00, 0.00, 88.65);
	F_CreateObject(1811, 1824.24, -1541.01, 5700.04,   0.00, 0.00, 88.65);
	F_CreateObject(1811, 1824.11, -1543.47, 5700.04,   0.00, 0.00, 269.65);
	F_CreateObject(1811, 1823.16, -1543.44, 5700.04,   0.00, 0.00, 269.35);
	F_CreateObject(1811, 1822.23, -1543.42, 5700.04,   0.00, 0.00, 269.35);
	F_CreateObject(1811, 1821.21, -1543.42, 5700.04,   0.00, 0.00, 269.35);
	F_CreateObject(2290, 1827.59, -1534.86, 5699.43,   0.00, 0.00, 178.82);
	F_CreateObject(2290, 1829.13, -1531.40, 5699.43,   0.00, 0.00, 269.77);
	F_CreateObject(2239, 1828.80, -1534.67, 5699.43,   0.00, 0.00, 170.00);
	F_CreateObject(1754, 1824.05, -1533.54, 5699.43,   0.00, 0.00, 120.00);
	F_CreateObject(1814, 1826.23, -1533.08, 5699.43,   0.00, 0.00, 0.00);
	F_CreateObject(1778, 1817.25, -1541.88, 5699.43,   0.00, 0.00, 190.00);
	F_CreateObject(2297, 1826.00, -1530.09, 5699.43,   0.00, 0.00, 315.47);
	F_CreateObject(2964, 1820.30, -1534.50, 5699.40,   0.00, 0.00, 88.47);
	F_CreateObject(3004, 1820.20, -1535.20, 5700.30,   0.00, 0.00, 343.99);
	F_CreateObject(3106, 1820.20, -1534.40, 5700.40,   0.00, 0.00, 0.00);
	F_CreateObject(3105, 1820.70, -1534.10, 5700.40,   0.00, 0.00, 0.00);
	F_CreateObject(3103, 1819.84, -1534.58, 5700.18,   0.00, 0.00, 0.00);
	F_CreateObject(3102, 1819.87, -1534.58, 5700.21,   0.00, 0.00, 0.00);
	F_CreateObject(3042, 1810.28, -1570.03, 5705.46,   0.00, 0.00, 0.00);
	F_CreateObject(2611, 1829.67, -1542.43, 5701.15,   0.00, 0.00, 270.19);
	F_CreateObject(2612, 1829.56, -1537.86, 5701.13,   0.00, 0.00, 270.19);
	F_CreateObject(1615, 1810.41, -1547.75, 5705.97,   0.00, 0.00, 90.00);
	F_CreateObject(18070, 1799.44, -1520.61, 5699.91,   0.00, 0.00, 90.00);
	F_CreateObject(18070, 1799.37, -1511.50, 5699.91,   0.00, 0.00, 90.49);
	F_CreateObject(1892, 1801.56, -1515.51, 5699.43,   0.00, 0.00, 270.00);
	F_CreateObject(2422, 1799.87, -1517.94, 5700.42,   0.00, 0.00, 180.00);
	F_CreateObject(2422, 1798.67, -1517.96, 5700.42,   0.00, 0.00, 179.99);
	F_CreateObject(18070, 1799.44, -1520.61, 5702.12,   0.00, 179.98, 90.49);
	F_CreateObject(18070, 1799.37, -1511.50, 5702.13,   0.00, 179.89, 90.49);
	F_CreateObject(3857, 1801.51, -1520.96, 5703.30,   0.00, 0.00, 315.14);
	F_CreateObject(16101, 1801.50, -1524.14, 5702.74,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1801.50, -1517.30, 5702.70,   0.00, 179.99, 0.00);
	F_CreateObject(3857, 1801.51, -1520.96, 5703.30,   0.00, 0.00, 135.13);
	F_CreateObject(16101, 1801.64, -1514.89, 5708.99,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1797.32, -1514.91, 5708.99,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1797.33, -1517.30, 5708.99,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1797.36, -1524.03, 5708.99,   0.00, 179.99, 0.00);
	F_CreateObject(1533, 1809.10, -1513.80, 5699.40,   0.00, 0.00, 0.00);
	F_CreateObject(1533, 1810.60, -1513.80, 5699.40,   0.00, 0.00, 0.00);
	F_CreateObject(1722, 1810.50, -1524.10, 5699.42,   0.00, 0.00, 0.00);
	F_CreateObject(1722, 1811.20, -1524.10, 5699.42,   0.00, 0.00, 0.00);
	F_CreateObject(1722, 1811.90, -1524.10, 5699.42,   0.00, 0.00, 0.00);
	F_CreateObject(1722, 1812.60, -1524.10, 5699.42,   0.00, 0.00, 0.00);
	F_CreateObject(2239, 1814.70, -1523.80, 5699.40,   0.00, 0.00, 200.00);
	F_CreateObject(1815, 1813.50, -1523.70, 5699.42,   0.00, 0.00, 0.00);
	F_CreateObject(1722, 1815.00, -1521.90, 5699.42,   0.00, 0.00, 90.00);
	F_CreateObject(1722, 1815.00, -1521.20, 5699.42,   0.00, 0.00, 90.00);
	F_CreateObject(1722, 1815.00, -1520.50, 5699.42,   0.00, 0.00, 90.00);
	F_CreateObject(1722, 1815.00, -1519.80, 5699.42,   0.00, 0.00, 90.00);
	F_CreateObject(2852, 1814.00, -1523.20, 5699.92,   0.00, 0.00, 0.00);
	F_CreateObject(2190, 1801.20, -1520.10, 5700.40,   0.00, 0.00, 270.00);
	F_CreateObject(2190, 1801.20, -1521.80, 5700.27,   0.00, 0.00, 248.00);
	F_CreateObject(2190, 1801.20, -1521.80, 5700.57,   0.00, 180.00, 275.00);
	F_CreateObject(1715, 1799.00, -1521.90, 5699.40,   0.00, 0.00, 130.00);
	F_CreateObject(1715, 1799.00, -1519.60, 5699.40,   0.00, 0.00, 92.00);
	F_CreateObject(1808, 1814.80, -1516.80, 5699.40,   0.00, 0.00, 268.25);
	F_CreateObject(1808, 1790.70, -1519.00, 5699.40,   0.00, 0.00, 90.00);
	F_CreateObject(1886, 1814.50, -1548.47, 5706.65,   20.92, 359.22, 325.73);
	F_CreateObject(1886, 1791.10, -1523.80, 5702.80,   20.92, 359.22, 135.73);
	F_CreateObject(1886, 1814.40, -1514.10, 5702.80,   20.92, 359.22, 283.73);
	F_CreateObject(1892, 1810.90, -1514.40, 5699.50,   0.00, 0.00, 0.00);
	F_CreateObject(1892, 1809.30, -1514.40, 5699.50,   0.00, 0.00, 0.00);
	F_CreateObject(2165, 1795.50, -1533.00, 5699.40,   0.00, 0.00, 90.00);
	F_CreateObject(2166, 1795.60, -1530.10, 5699.40,   0.00, 0.00, 0.00);
	F_CreateObject(1715, 1796.80, -1532.70, 5699.40,   0.00, 0.00, 262.00);
	F_CreateObject(2186, 1798.10, -1530.30, 5699.40,   0.00, 0.00, 270.00);
	F_CreateObject(1886, 1798.70, -1530.20, 5701.80,   0.00, 0.00, 270.00);
	F_CreateObject(1886, 1791.60, -1526.20, 5701.50,   0.00, 0.00, 0.00);
	F_CreateObject(1886, 1791.60, -1533.70, 5701.50,   0.00, 0.00, 180.00);
	F_CreateObject(3944, 1801.44, -1537.71, 5698.90,   0.00, 0.00, 90.00);
	F_CreateObject(2007, 1802.10, -1533.00, 5699.40,   0.00, 0.00, 180.00);
	F_CreateObject(2007, 1801.10, -1533.00, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1805.10, -1533.00, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1804.10, -1533.00, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1803.10, -1533.00, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1805.10, -1533.00, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1804.10, -1533.00, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1803.10, -1533.00, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1802.10, -1533.00, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1801.10, -1533.00, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1801.10, -1529.60, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1802.10, -1529.60, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1803.10, -1529.60, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1804.10, -1529.60, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1805.10, -1529.60, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1805.10, -1529.60, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1804.10, -1529.60, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1803.10, -1529.60, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1802.10, -1529.60, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(2007, 1801.10, -1529.60, 5700.80,   0.00, 0.00, 179.99);
	F_CreateObject(9339, 1804.90, -1530.20, 5689.20,   90.00, 90.00, 0.00);
	F_CreateObject(1893, 1802.20, -1531.30, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(2007, 1805.09, -1530.80, 5699.40,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1805.09, -1530.80, 5700.80,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1804.10, -1530.80, 5700.80,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1803.10, -1530.80, 5700.80,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1802.10, -1530.80, 5700.80,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1801.10, -1530.80, 5700.80,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1801.10, -1530.80, 5699.40,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1802.10, -1530.80, 5699.40,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1803.10, -1530.80, 5699.40,   0.00, 0.00, 0.00);
	F_CreateObject(2007, 1804.10, -1530.80, 5699.40,   0.00, 0.00, 0.00);
	F_CreateObject(1893, 1820.20, -1533.80, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1823.30, -1541.70, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1827.10, -1541.70, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1827.10, -1531.80, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1820.20, -1541.80, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1823.70, -1531.80, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1802.50, -1527.40, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1807.80, -1527.40, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1798.30, -1520.10, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1794.00, -1520.10, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1805.00, -1520.10, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1812.00, -1520.10, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1812.00, -1515.10, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(1893, 1805.00, -1515.10, 5702.90,   0.00, 0.00, 270.00);
	F_CreateObject(2844, 1801.30, -1532.10, 5699.40,   0.00, 0.00, 66.00);
	F_CreateObject(2845, 1802.60, -1532.10, 5699.40,   0.00, 0.00, 270.00);
	F_CreateObject(2303, 1806.30, -1533.00, 5699.40,   0.00, 0.00, 180.00);
	F_CreateObject(2303, 1807.60, -1533.00, 5699.40,   0.00, 0.00, 179.99);
	F_CreateObject(2741, 1808.30, -1533.40, 5701.00,   0.00, 0.00, 180.00);
	F_CreateObject(1789, 1829.20, -1543.70, 5700.00,   0.00, 0.00, 270.00);
	F_CreateObject(1789, 1829.20, -1541.90, 5700.00,   0.00, 0.00, 270.00);
	F_CreateObject(1808, 1804.80, -1535.70, 5699.40,   0.00, 0.00, 0.00);
	F_CreateObject(2596, 1800.60, -1522.60, 5702.10,   0.00, 0.00, 240.00);
	F_CreateObject(2813, 1807.30, -1537.70, 5700.20,   0.00, 0.00, 0.00);
	F_CreateObject(2817, 1804.20, -1539.20, 5699.42,   0.00, 0.00, 0.00);
	F_CreateObject(2822, 1821.40, -1545.30, 5700.50,   0.00, 0.00, 280.00);
	F_CreateObject(2828, 1806.60, -1535.90, 5701.30,   0.00, 0.00, 164.50);
	F_CreateObject(2831, 1821.10, -1542.40, 5700.30,   0.00, 0.00, 0.00);
	F_CreateObject(2894, 1799.80, -1523.10, 5700.41,   0.00, 0.00, 0.00);
	F_CreateObject(1828, 1826.80, -1532.60, 5699.41,   0.00, 0.00, 358.00);
	F_CreateObject(2286, 1806.00, -1513.80, 5701.40,   0.00, 0.00, 0.00);
	F_CreateObject(2279, 1806.70, -1523.69, 5701.30,   0.00, 0.00, 180.00);
	F_CreateObject(2275, 1811.60, -1523.60, 5701.10,   0.00, 0.00, 180.00);
	F_CreateObject(2261, 1814.50, -1520.30, 5701.00,   0.00, 0.00, 270.00);
	F_CreateObject(1537, 1808.00, -1583.60, 5699.40,   0.00, 0.00, 270.00);
	F_CreateObject(1537, 1812.10, -1582.10, 5699.40,   0.00, 0.00, 90.00);
	F_CreateObject(1537, 1808.40, -1582.10, 5699.40,   0.00, 0.00, 90.00);
	F_CreateObject(1537, 1811.70, -1583.60, 5699.40,   0.00, 0.00, 270.00);
	F_CreateObject(1537, 1809.30, -1585.02, 5699.40,   0.00, 0.00, 179.50);
	F_CreateObject(16101, 1811.90, -1577.10, 5707.80,   0.00, 179.99, 0.00);
	F_CreateObject(16101, 1808.20, -1577.10, 5707.80,   0.00, 179.99, 0.00);
	F_CreateObject(2149, 1823.27, -1545.26, 5700.64,   0.00, 0.00, 180.00);

	/*************************Mont Airport************************/

	F_CreateObject(9245, 1415.00, 375.42, 30.34,   0.00, 0.00, -112.38);
	F_CreateObject(9241, 1427.10, 308.54, 19.31,   0.00, 0.00, 157.98);
	F_CreateObject(8355, 1496.88, 337.48, 18.62,   0.00, 0.00, 68.34);
	F_CreateObject(0, 1415.43, 373.58, 20.65,   0.00, 0.00, -110.40);
	F_CreateObject(8419, 1524.11, 321.73, 6.78,   0.00, 0.00, 68.82);
	F_CreateObject(8419, 1442.62, 353.27, 6.80,   0.00, 0.00, 68.82);
	F_CreateObject(8419, 1453.15, 271.73, 6.82,   0.00, 0.00, -21.06);
	F_CreateObject(8419, 1425.16, 305.98, 6.78,   0.00, 0.00, 68.82);
	F_CreateObject(19313, 1418.32, 367.63, 21.75,   0.00, 0.00, -111.48);
	F_CreateObject(19313, 1423.59, 380.39, 21.75,   0.00, 0.00, -113.40);
	F_CreateObject(19127, 1413.28, 386.75, 19.07,   0.00, 0.00, 0.00);
	F_CreateObject(19124, 1568.46, 330.49, 19.04,   0.00, 0.00, 0.00);
	F_CreateObject(19124, 1553.69, 293.64, 19.04,   0.00, 0.00, 0.00);
	F_CreateObject(19336, 1366.94, 333.88, 18.61,   0.00, 0.00, 0.00);
	F_CreateObject(19313, 1419.83, 389.13, 21.75,   0.00, 0.00, -199.98);
	F_CreateObject(19313, 1409.22, 363.52, 21.75,   0.00, 0.00, -199.98);
	F_CreateObject(19313, 1432.96, 384.38, 21.75,   0.00, 0.00, -199.98);
	F_CreateObject(19313, 1446.10, 379.50, 21.75,   0.00, 0.00, -200.76);
	F_CreateObject(19313, 1459.18, 374.54, 21.75,   0.00, 0.00, -200.76);
	F_CreateObject(19313, 1472.20, 369.46, 21.75,   0.00, 0.00, -202.02);
	F_CreateObject(19313, 1485.16, 364.26, 21.75,   0.00, 0.00, -202.02);
	F_CreateObject(19313, 1497.93, 359.16, 21.75,   0.00, 0.00, -202.02);
	F_CreateObject(19313, 1510.88, 353.97, 21.75,   0.00, 0.00, -201.66);
	F_CreateObject(19313, 1523.80, 348.86, 21.75,   0.00, 0.00, -201.66);
	F_CreateObject(19313, 1536.79, 343.72, 21.75,   0.00, 0.00, -201.66);
	F_CreateObject(19313, 1549.80, 338.60, 21.75,   0.00, 0.00, -201.66);
	F_CreateObject(19313, 1562.80, 338.63, 21.09,   0.00, 0.00, -158.22);
	F_CreateObject(19313, 1574.56, 345.84, 21.09,   0.00, 0.00, -138.84);
	F_CreateObject(19313, 1582.35, 356.97, 21.09,   0.00, 0.00, -111.42);
	F_CreateObject(19313, 1586.62, 367.75, 21.09,   0.00, 0.00, -111.42);
	F_CreateObject(19127, 1408.21, 374.41, 19.07,   0.00, 0.00, 0.00);
	F_CreateObject(19127, 1407.29, 372.28, 19.07,   0.00, 0.00, 0.00);
	F_CreateObject(19127, 1405.79, 368.44, 19.07,   0.00, 0.00, 0.00);
	F_CreateObject(3814, 1452.07, 263.35, 25.13,   0.00, 0.00, -202.14);
	F_CreateObject(9241, 1402.07, 319.05, 19.31,   0.00, 0.00, 157.98);
	F_CreateObject(19124, 1439.58, 314.38, 20.68,   0.00, 0.00, 0.00);
	F_CreateObject(19124, 1432.08, 295.85, 20.68,   0.00, 0.00, 0.00);
	F_CreateObject(19124, 1413.79, 303.11, 20.68,   0.00, 0.00, 0.00);
	F_CreateObject(19124, 1421.39, 321.82, 20.68,   0.00, 0.00, 0.00);
	F_CreateObject(19124, 1414.66, 325.00, 20.68,   0.00, 0.00, 0.00);
	F_CreateObject(19124, 1407.14, 306.30, 20.68,   0.00, 0.00, 0.00);
	F_CreateObject(19124, 1388.90, 313.61, 20.68,   0.00, 0.00, 0.00);
	F_CreateObject(19124, 1396.47, 332.26, 20.68,   0.00, 0.00, 0.00);

	/************************Hospital Interior********************/

	CreateObject(14858, 1158.02209473, -2523.12890625, 1117.96269226, 0.00000000, 0.00000000, 0.00000000);//Base Structure
	F_CreateObject(1538, 1145.07641602, -2509.38159180, 1112.82206726, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1538, 1145.05993652, -2512.38305664, 1112.82206726, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1721, 1141.66784668, -2514.47778320, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1721, 1142.31884766, -2514.47778320, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1721, 1142.97473145, -2514.47778320, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1721, 1143.60412598, -2514.47778320, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1721, 1144.25732422, -2514.47778320, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1721, 1144.95495605, -2508.81689453, 1112.82206726, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1721, 1144.95495605, -2508.01757812, 1112.82206726, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1721, 1143.77062988, -2506.81347656, 1112.82206726, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(1721, 1143.09558105, -2506.81347656, 1112.82206726, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1721, 1142.44409180, -2506.81347656, 1112.82206726, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1999, 1126.71813965, -2508.05175781, 1112.82206726, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1999, 1130.02319336, -2502.95166016, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(646, 1144.47802734, -2507.12817383, 1114.23859406, 0.00000000, 0.00000000, 30.00000000);
	F_CreateObject(1491, 1134.81860352, -2547.51171875, 1112.81425476, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(1523, 1122.96752930, -2510.58056641, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2200, 1133.36425781, -2514.89648438, 1112.81557465, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2200, 1124.80371094, -2514.89648438, 1112.81425476, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2200, 1136.58691406, -2524.82934570, 1112.81557465, 0.00000000, 0.00000000, 269.75000000);
	F_CreateObject(2200, 1126.06359863, -2531.34472656, 1112.81557465, 0.00000000, 0.00000000, 179.74731445);
	F_CreateObject(2204, 1126.29638672, -2546.94921875, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(14867, 1131.85400391, -2543.37353516, 1114.33719635, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2382, 1135.14562988, -2540.44848633, 1113.48049927, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2386, 1131.89196777, -2545.40185547, 1115.98446655, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2371, 1134.84277344, -2540.05786133, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2394, 1135.44677734, -2539.75781250, 1113.52165222, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2704, 1135.64733887, -2540.44458008, 1113.51525879, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2844, 1131.11962891, -2541.63574219, 1115.88808441, 0.00000000, 0.00000000, 330.00000000);
	F_CreateObject(2846, 1135.06335449, -2540.73535156, 1112.81425476, 0.00000000, 0.00000000, 32.00000000);
	F_CreateObject(2689, 1135.78344727, -2540.43359375, 1113.51421356, 0.00000000, 0.00000000, 86.00000000);
	F_CreateObject(1569, 1130.96594238, -2510.59082031, 1112.82206726, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1569, 1134.80261230, -2547.50610352, 1112.81425476, 0.00000000, 0.00000000, 359.99450684);
	F_CreateObject(1569, 1130.96435547, -2510.56591797, 1112.82206726, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1569, 1123.00048828, -2510.56787109, 1112.82206726, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1569, 1124.48693848, -2510.56665039, 1112.82206726, 0.00000000, 0.00000000, 359.99450684);
	F_CreateObject(1808, 1141.57519531, -2506.85058594, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2263, 1140.55664062, -2507.17529297, 1114.57062531, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2008, 1140.12695312, -2508.06713867, 1112.82206726, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2008, 1140.14807129, -2506.15893555, 1112.82206726, 0.00000000, 0.00000000, 269.25000000);
	F_CreateObject(1806, 1138.84338379, -2508.42138672, 1112.82206726, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1208, 1136.25183105, -2543.27197266, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1208, 1136.25183105, -2542.59863281, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1778, 1136.28833008, -2543.70654297, 1112.81425476, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1789, 1135.93603516, -2546.63525391, 1113.37043762, 0.00000000, 0.00000000, 250.00000000);
	F_CreateObject(2146, 1140.49597168, -2523.57250977, 1113.30551910, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2202, 1134.40002441, -2535.08129883, 1112.81425476, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(2700, 1135.66870117, -2539.66845703, 1115.65991974, 1.73959351, 6.25289917, 267.80944824);
	F_CreateObject(2700, 1129.75964355, -2531.23022461, 1115.27544403, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(3389, 1123.01989746, -2518.43212891, 1111.06420898, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(3386, 1126.78100586, -2509.99926758, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(3387, 1121.24218750, -2504.14355469, 1112.77198792, 0.00000000, 0.00000000, 179.75000000);
	F_CreateObject(14455, 1131.33959961, -2545.60986328, 1114.48601532, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(2163, 1126.03942871, -2545.52441406, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2163, 1126.04003906, -2543.76660156, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2164, 1121.04125977, -2545.63256836, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(2167, 1121.03686523, -2543.87670898, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1808, 1125.00610352, -2547.24340820, 1112.81425476, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(1721, 1137.90161133, -2538.72656250, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1721, 1137.90161133, -2538.07910156, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1721, 1137.90161133, -2537.43164062, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1721, 1137.90161133, -2539.37402344, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1721, 1137.90161133, -2540.04638672, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1721, 1137.90161133, -2540.69335938, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1721, 1137.90161133, -2541.34082031, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1721, 1122.98620605, -2521.00317383, 1112.81425476, 0.00000000, 0.00000000, 259.75000000);
	F_CreateObject(1721, 1137.90161133, -2542.73535156, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1721, 1137.90161133, -2543.40771484, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2380, 1134.37609863, -2539.52075195, 1114.00241089, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1997, 1123.79077148, -2517.37304688, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1997, 1123.79077148, -2522.56909180, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1997, 1123.79077148, -2528.61718750, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1997, 1123.79077148, -2525.76831055, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1997, 1135.67846680, -2518.42260742, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1997, 1135.67846680, -2521.24682617, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1997, 1135.67846680, -2528.44677734, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(3077, 1132.71508789, -2505.15576172, 1112.82206726, 0.00000000, 0.00000000, 276.00000000);
	F_CreateObject(1997, 1122.90710449, -2504.19433594, 1112.82206726, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(3502, 1119.73425293, -2504.19970703, 1114.22760010, 0.00000000, 209.74993896, 270.25000000);
	F_CreateObject(3084, 1118.69445801, -2506.66674805, 1112.76488495, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(3084, 1121.07043457, -2506.64477539, 1116.88984680, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1523, 1126.42517090, -2506.70898438, 1112.82206726, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(3386, 1126.71386719, -2507.07934570, 1112.32203674, 0.00000000, 0.00000000, 271.50000000);
	F_CreateObject(3387, 1122.18444824, -2509.01806641, 1112.82199097, 0.00000000, 0.00000000, 179.74731445);
	F_CreateObject(3388, 1122.18444824, -2508.03076172, 1112.82206726, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(3857, 1121.19714355, -2506.70166016, 1117.21912384, 0.00000000, 0.00000000, 225.00000000);
	F_CreateObject(3396, 1126.79150391, -2504.27124023, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1704, 1128.76586914, -2543.34228516, 1112.81425476, 0.00000000, 0.00000000, 170.25000000);
	F_CreateObject(1671, 1128.51892090, -2540.18212891, 1113.27446747, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1714, 1123.51672363, -2540.08300781, 1112.81425476, 0.00000000, 0.00000000, 4.00000000);
	F_CreateObject(2206, 1129.44958496, -2541.56665039, 1112.81425476, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(2605, 1123.56958008, -2541.42260742, 1113.21269226, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(2356, 1124.29235840, -2542.74707031, 1112.81425476, 0.00000000, 0.00000000, 20.00000000);
	F_CreateObject(2356, 1122.87634277, -2542.77685547, 1112.81425476, 0.00000000, 0.00000000, 357.99511719);
	F_CreateObject(627, 1121.52441406, -2546.79028320, 1114.58455658, 0.00000000, 0.00000000, 225.25000000);
	F_CreateObject(631, 1130.72644043, -2546.81347656, 1113.71441650, 0.00000000, 0.00000000, 20.00000000);
	F_CreateObject(646, 1138.10327148, -2544.48632812, 1114.23078156, 0.00000000, 0.00000000, 330.25000000);
	F_CreateObject(644, 1135.30957031, -2551.92724609, 1113.08927155, 0.00000000, 0.00000000, 310.25000000);
	F_CreateObject(631, 1118.27661133, -2535.19067383, 1113.71441650, 0.00000000, 0.00000000, 279.75000000);
	F_CreateObject(632, 1119.12292480, -2511.90844727, 1113.17208862, 0.00000000, 0.00000000, 329.75000000);
	F_CreateObject(1491, 1132.47363281, -2510.58007812, 1112.82206726, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1491, 1129.51782227, -2547.51196289, 1112.81425476, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1491, 1124.28955078, -2547.48388672, 1112.81425476, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1569, 1132.45898438, -2510.58886719, 1112.82206726, 0.00000000, 0.00000000, 359.98901367);
	F_CreateObject(1569, 1133.32568359, -2547.50000000, 1112.81425476, 0.00000000, 0.00000000, 179.98901367);
	F_CreateObject(1569, 1128.01220703, -2547.50000000, 1112.81425476, 0.00000000, 0.00000000, 179.98352051);
	F_CreateObject(1569, 1129.49987793, -2547.50610352, 1112.81425476, 0.00000000, 0.00000000, 359.98901367);
	F_CreateObject(1569, 1122.78332520, -2547.49780273, 1112.81425476, 0.00000000, 0.00000000, 179.98901367);
	F_CreateObject(1569, 1124.26159668, -2547.50561523, 1112.81425476, 0.00000000, 0.00000000, 359.98352051);
	F_CreateObject(1726, 1134.44055176, -2551.95385742, 1112.81425476, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(1726, 1129.73730469, -2551.95385742, 1112.81425476, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1726, 1124.61132812, -2551.95385742, 1112.81425476, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(646, 1131.36218262, -2550.82861328, 1114.23078156, 0.00000000, 0.00000000, 310.24902344);
	F_CreateObject(1727, 1120.85107422, -2550.11865234, 1112.81425476, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1808, 1126.21728516, -2551.40795898, 1112.81425476, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(1721, 1137.90136719, -2542.03808594, 1112.81425476, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1721, 1136.32226562, -2522.23413086, 1112.81425476, 0.00000000, 0.00000000, 79.74975586);
	F_CreateObject(1721, 1136.25988770, -2517.10009766, 1112.81425476, 0.00000000, 0.00000000, 129.74426270);
	F_CreateObject(1721, 1130.12304688, -2514.94873047, 1112.81425476, 0.00000000, 0.00000000, 179.74304199);
	F_CreateObject(1721, 1129.42150879, -2514.94873047, 1112.81425476, 0.00000000, 0.00000000, 179.74182129);
	F_CreateObject(15038, 1136.18371582, -2523.97314453, 1113.43144226, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2253, 1125.31384277, -2515.08666992, 1114.99370575, 0.00000000, 0.00000000, 340.00000000);
	F_CreateObject(2245, 1126.51220703, -2544.64282227, 1114.91297150, 0.00000000, 0.00000000, 60.00000000);
	F_CreateObject(2194, 1125.81335449, -2543.72778320, 1114.07077789, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2289, 1141.06945801, -2527.67822266, 1114.91696167, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2287, 1125.57165527, -2543.16064453, 1114.76836395, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2284, 1121.68078613, -2545.27905273, 1114.86870575, 349.25000000, 0.00000000, 90.00000000);
	F_CreateObject(2278, 1126.78820801, -2546.39770508, 1114.98548126, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(2271, 1127.19348145, -2539.93164062, 1114.73119354, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2270, 1129.27795410, -2539.92895508, 1114.73826599, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2266, 1128.52001953, -2535.06835938, 1114.63995361, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(2265, 1133.91650391, -2532.04687500, 1114.58411407, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2263, 1135.91918945, -2515.31323242, 1114.64079285, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2260, 1123.20300293, -2524.71313477, 1114.64870453, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(2265, 1124.75073242, -2515.44384766, 1114.83756256, 344.50000000, 0.00000000, 0.00000000);
	F_CreateObject(2270, 1127.37377930, -2511.15039062, 1114.27529144, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1723, 1127.89880371, -2506.43847656, 1112.82206726, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1724, 1132.95397949, -2507.92285156, 1112.82206726, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(2262, 1128.51232910, -2502.98291016, 1114.72664642, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2266, 1133.01623535, -2509.54174805, 1114.55719757, 0.00000000, 0.00000000, 270.00000000);
	F_CreateObject(1808, 1129.75158691, -2510.31909180, 1112.82206726, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(3386, 1122.18359375, -2510.02050781, 1112.82206726, 0.00000000, 0.00000000, 179.99450684);
	F_CreateObject(1235, 1140.75573730, -2514.90966797, 1113.32514191, 0.00000000, 0.00000000, 20.00000000);
	F_CreateObject(1723, 1127.89843750, -2509.16796875, 1112.82206726, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(2373, 1133.32641602, -2539.00976562, 1112.81320953, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2373, 1134.97778320, -2539.00244141, 1112.81320953, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(7191, 1117.62475586, -2513.07177734, 1114.70714569, 0.00000000, 0.00000000, 180.00000000);
	F_CreateObject(2146, 1118.19482422, -2521.55590820, 1113.29980469, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2146, 1121.11230469, -2517.85034180, 1113.29980469, 0.00000000, 0.00000000, 10.00000000);
	F_CreateObject(7191, 1141.23425293, -2536.91162109, 1114.58215332, 0.00000000, 0.00000000, 359.99450684);
	F_CreateObject(2289, 1123.36718750, -2539.45996094, 1115.09165192, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(2263, 1138.21923828, -2519.96899414, 1114.71782684, 0.00000000, 0.00000000, 90.00000000);
	F_CreateObject(1567, 1135.23522949, -2510.58911133, 1112.82206726, 0.00000000, 0.00000000, 0.00000000);
	F_CreateObject(1569, 1135.25366211, -2510.57080078, 1112.82206726, 0.00000000, 0.00000000, 179.48901367);
	F_CreateObject(1569, 1134.97009277, -2510.57128906, 1112.82206726, 0.00000000, 0.00000000, 180.48352051);

	/************************Trailer Park*************************/

	F_CreateObject(1412, 2297.83, 224.69, 24.02,   0.00, 0.00, -86.04);
	F_CreateObject(1412, 2297.49, 229.85, 23.60,   0.00, 0.00, -86.04);
	F_CreateObject(1447, 2297.49, 234.97, 22.84,   2.22, 5.70, 94.02);
	F_CreateObject(1447, 2297.17, 240.13, 22.67,   -0.84, 1.26, 94.02);
	F_CreateObject(1412, 2294.78, 244.12, 22.35,   0.00, 0.00, -212.22);
	F_CreateObject(1412, 2290.30, 245.50, 21.99,   -4.50, 9.12, -176.22);
	F_CreateObject(1412, 2276.25, 243.13, 20.16,   -2.46, -3.42, 44.40);
	F_CreateObject(1412, 2274.69, 238.74, 20.05,   0.00, 0.00, 95.40);
	F_CreateObject(1412, 2275.21, 233.53, 20.15,   0.00, 0.00, 95.40);
	F_CreateObject(1412, 2275.74, 228.35, 20.31,   0.00, 0.00, 95.40);
	F_CreateObject(1447, 2278.66, 225.70, 21.05,   -8.58, -8.28, 0.00);
	F_CreateObject(1447, 2283.49, 224.58, 21.71,   -5.46, -4.02, -25.56);
	F_CreateObject(1412, 2295.59, 221.78, 23.69,   -8.70, -5.58, 4.74);
	F_CreateObject(1452, 2292.01, 244.82, 21.75,   0.00, 0.00, 0.00);
	F_CreateObject(3167, 2295.55, 229.40, 21.81,   6.00, 3.12, -177.00);
	F_CreateObject(1372, 2296.19, 236.02, 21.48,   3.48, 7.74, -182.34);
	F_CreateObject(1438, 2291.97, 232.02, 21.30,   9.48, -5.04, -112.80);
	F_CreateObject(3175, 2278.12, 235.64, 19.17,   4.86, -1.56, -87.84);
	F_CreateObject(1368, 2294.96, 240.86, 21.85,   1.62, -1.62, -91.98);
	F_CreateObject(1368, 2292.98, 237.69, 21.69,   2.82, 6.78, -164.46);
	F_CreateObject(1412, 2288.72, 247.86, 21.61,   -7.26, -0.90, -290.76);
	F_CreateObject(1412, 2277.36, 247.44, 20.23,   -5.88, 2.46, -256.32);
	F_CreateObject(1412, 2276.22, 252.45, 20.03,   -5.88, 2.46, -256.32);
	F_CreateObject(1412, 2275.02, 257.50, 19.83,   -5.88, 2.46, -256.32);
	F_CreateObject(1412, 2292.28, 250.42, 21.75,   -0.78, -5.94, -356.34);
	F_CreateObject(1412, 2273.76, 262.57, 19.57,   -5.88, 2.46, -256.32);
	F_CreateObject(1447, 2297.47, 250.76, 22.37,   -1.08, -5.22, 4.14);
	F_CreateObject(1447, 2302.74, 251.05, 22.88,   -1.08, -5.22, 4.14);
	F_CreateObject(1412, 2307.95, 251.37, 23.60,   -0.78, -5.94, -357.42);
	F_CreateObject(1412, 2311.98, 253.65, 23.94,   6.48, 0.66, -484.98);
	F_CreateObject(1412, 2313.35, 258.38, 23.96,   5.88, -1.32, -447.72);
	F_CreateObject(1412, 2313.25, 263.52, 23.74,   5.88, -1.32, -447.72);
	F_CreateObject(1412, 2280.74, 266.49, 20.29,   -7.44, -5.40, -350.46);
	F_CreateObject(1412, 2275.67, 265.59, 19.64,   -7.44, -5.40, -349.80);
	F_CreateObject(1412, 2285.82, 267.41, 20.85,   -7.44, -5.40, -350.46);
	F_CreateObject(1412, 2290.91, 268.08, 21.46,   -7.44, -5.40, -355.74);
	F_CreateObject(1412, 2296.12, 268.55, 21.81,   -7.44, -5.40, -355.74);
	F_CreateObject(1412, 2301.29, 269.07, 22.56,   -7.44, -5.40, -355.74);
	F_CreateObject(1412, 2306.40, 268.98, 22.99,   -6.54, -3.36, -366.96);
	F_CreateObject(1412, 2311.16, 267.49, 23.37,   -6.84, -3.54, -390.06);
	F_CreateObject(3175, 2278.96, 227.51, 19.44,   4.86, -1.56, -87.84);
	F_CreateObject(1452, 2277.69, 229.35, 20.42,   -0.12, 0.18, -179.58);
	F_CreateObject(1472, 2279.30, 237.66, 19.48,   -4.32, -0.30, -268.74);
	F_CreateObject(3171, 2277.82, 260.40, 18.87,   2.04, 4.62, -165.60);
	F_CreateObject(1438, 2279.39, 264.39, 19.05,   -4.14, -6.18, 7.62);
	F_CreateObject(3168, 2288.68, 261.16, 20.12,   0.84, 5.10, -171.00);
	F_CreateObject(1451, 2291.91, 265.17, 21.17,   -2.16, -4.50, 12.54);
	F_CreateObject(1451, 2294.44, 265.47, 21.46,   -2.16, -4.50, 12.54);
	F_CreateObject(3171, 2299.32, 262.72, 21.22,   1.44, 4.56, -170.28);
	F_CreateObject(1368, 2300.51, 265.31, 22.12,   0.00, 0.00, 98.34);
	F_CreateObject(1346, 2310.82, 253.64, 23.97,   0.00, 0.00, -131.82);
	F_CreateObject(3594, 2309.22, 263.03, 22.67,   1.50, -2.58, -13.20);
	F_CreateObject(647, 2311.30, 262.61, 22.55,   0.00, 0.00, 0.00);
	F_CreateObject(647, 2307.47, 266.12, 22.55,   0.00, 0.00, 0.00);
	F_CreateObject(647, 2307.52, 262.13, 22.55,   0.00, 0.00, 0.00);
	F_CreateObject(680, 2285.75, 222.81, 20.98,   0.00, 0.00, 0.00);
	F_CreateObject(680, 2293.39, 221.10, 21.99,   0.00, 0.00, 0.00);

	/***********************Garage********************************/

	F_CreateObject(11387, 2416.75, 153.57, 28.92, 0.00, 0.00, 269.58);
	F_CreateObject(19355, 2385.33, 173.11, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2387.06, 172.99, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2390.16, 172.85, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2393.24, 172.70, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2396.32, 172.59, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2399.41, 172.47, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2408.62, 172.10, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2402.56, 172.36, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2405.71, 172.22, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2411.71, 171.99, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(19355, 2414.83, 171.88, 27.00, 0.00, 0.00, 87.67);
	F_CreateObject(11389, 2432.85, 162.67, 28.71, 0.00, 0.00, 269.37);
	F_CreateObject(11388, 2433.22, 162.77, 32.04, 0.00, 0.00, 269.20);
	F_CreateObject(19355, 2422.39, 106.59, 27.08, 0.00, 0.00, 90.65);
	F_CreateObject(19355, 2419.26, 106.55, 27.08, 0.00, 0.00, 90.05);
	F_CreateObject(19355, 2418.70, 106.57, 27.08, 0.00, 0.00, 90.05);
	F_CreateObject(19355, 2417.20, 108.25, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2417.22, 111.48, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2417.20, 114.67, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2417.17, 117.81, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2417.15, 120.99, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2417.15, 124.15, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2417.11, 127.32, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2417.16, 132.41, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2417.15, 130.42, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2415.66, 136.13, 27.08, 0.00, 0.00, 89.88);
	F_CreateObject(19355, 2417.17, 134.48, 27.08, 0.00, 0.00, 359.97);
	F_CreateObject(19355, 2412.46, 136.15, 27.08, 0.00, 0.00, 89.88);
	F_CreateObject(19355, 2409.32, 136.15, 27.08, 0.00, 0.00, 89.88);
	F_CreateObject(19355, 2406.13, 136.16, 27.08, 0.00, 0.00, 89.88);
	F_CreateObject(19355, 2402.96, 136.24, 27.08, 0.00, 0.00, 87.78);
	F_CreateObject(19355, 2399.78, 136.36, 27.08, 0.00, 0.00, 87.78);
	F_CreateObject(19355, 2398.11, 134.90, 26.12, 0.00, 0.00, 176.08);
	F_CreateObject(19355, 2398.01, 133.28, 27.08, 0.00, 0.00, 176.08);
	F_CreateObject(19355, 2398.11, 134.90, 27.10, 0.00, 0.00, 176.08);
	F_CreateObject(19355, 2449.03, 148.46, 27.00, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2449.03, 151.50, 26.99, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2449.00, 145.20, 27.02, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2448.98, 142.05, 27.02, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2448.95, 138.86, 27.02, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2448.96, 135.68, 27.02, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2448.97, 132.53, 27.02, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2448.98, 129.33, 27.02, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2448.97, 126.15, 27.02, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2449.00, 123.29, 27.02, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2452.06, 106.69, 27.02, 0.00, 0.00, 269.18);
	F_CreateObject(19355, 2448.80, 106.69, 27.02, 0.00, 0.00, 269.18);
	F_CreateObject(19355, 2445.59, 106.73, 27.02, 0.00, 0.00, 269.18);
	F_CreateObject(19355, 2442.46, 106.79, 27.02, 0.00, 0.00, 269.18);
	F_CreateObject(19355, 2439.31, 106.82, 27.02, 0.00, 0.00, 269.18);
	F_CreateObject(19355, 2436.16, 106.88, 27.02, 0.00, 0.00, 269.18);
	F_CreateObject(19355, 2433.03, 106.94, 27.02, 0.00, 0.00, 269.18);
	F_CreateObject(19355, 2430.12, 106.95, 27.02, 0.00, 0.00, 269.18);
	F_CreateObject(19355, 2426.89, 107.01, 27.02, 0.00, 0.00, 269.18);
	F_CreateObject(19355, 2423.79, 106.80, 27.02, 0.00, 0.00, 277.67);
	F_CreateObject(19355, 2449.06, 120.15, 26.09, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2449.11, 107.53, 26.09, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2449.14, 108.75, 26.09, 0.00, 0.00, 0.00);
	F_CreateObject(19355, 2449.06, 118.68, 26.09, 0.00, 0.00, 0.00);
	F_CreateObject(14796, 2442.55, 158.37, 29.20, 0.00, 0.00, 88.49);
	F_CreateObject(14826, 2421.55, 169.68, 26.27, 0.00, 0.00, 201.24);
	F_CreateObject(1764, 2426.37, 159.45, 25.59, 0.00, 0.00, 269.51);
	F_CreateObject(1764, 2426.33, 156.98, 25.59, 0.00, 0.00, 269.51);
	F_CreateObject(1764, 2425.38, 154.55, 25.59, 0.00, 0.00, 179.65);
	F_CreateObject(14532, 2423.03, 158.26, 26.47, 0.00, 0.00, 224.44);
	F_CreateObject(2452, 2417.67, 154.83, 25.55, 0.00, 0.00, 89.02);
	F_CreateObject(2130, 2417.97, 157.55, 25.48, 0.00, 0.00, 89.42);
	F_CreateObject(6959, 2428.21, 127.12, 25.57, 0.00, 0.00, 0.00);
	F_CreateObject(3294, 2436.12, 153.29, 27.76, 0.00, 0.00, 90.00);
	F_CreateObject(3294, 2416.58, 167.71, 27.76, 0.00, 0.00, 0.00);
	F_CreateObject(6959, 2428.53, 175.55, 5.58, 90.00, 0.00, -0.42);
	F_CreateObject(6959, 2415.58, 175.64, 5.58, 90.00, 0.00, -0.42);
	F_CreateObject(6959, 2449.11, 154.79, 5.58, 90.00, 0.00, -90.18);

	/***********************Dock**********************************/

	CreateObject(9829, 2131.45, -105.36, -62.45,   0.00, 0.00, 17.86);
	F_CreateObject(1232, 2113.10, -84.28, 5.60,   0.00, 0.00, 358.23);
	F_CreateObject(1232, 2123.15, -115.93, 5.60,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 2100.58, -89.01, 5.60,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 2095.43, -90.77, 5.60,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 2073.64, -97.79, 5.60,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 2068.51, -99.48, 5.60,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 2051.01, -105.13, 5.60,   0.00, 0.00, 0.00);
	F_CreateObject(1232, 2060.88, -135.21, 5.60,   0.00, 0.00, 0.00);
	F_CreateObject(3578, 2113.63, -67.15, 2.11,   0.00, 0.00, 17.86);
	F_CreateObject(3578, 2115.53, -73.63, 2.11,   0.00, 0.00, 17.86);
	F_CreateObject(3578, 2115.53, -73.63, 2.11,   0.00, 0.00, 17.86);
	F_CreateObject(3578, 2117.73, -80.05, 2.11,   0.00, 0.00, 17.86);
	F_CreateObject(3578, 2134.37, -101.65, 2.11,   0.00, 0.00, 107.86);
	F_CreateObject(3578, 2141.85, -99.31, 2.11,   0.00, 0.00, 107.86);
	F_CreateObject(13078, 2156.36, -120.73, 6.25,   0.00, 0.00, 109.41);
	F_CreateObject(3578, 2153.83, -94.98, 2.11,   0.00, 0.00, 107.86);
	F_CreateObject(3578, 2161.63, -92.37, 2.11,   0.00, 0.00, 107.86);

	/***********************Welcome Sign**************************/

	CreateObject(3335, 2141.3078, 33.5438, 25.3516, 0.0,0.0,257.0); //Welcome Sign
	sign_object_text = CreateObject(18661, 2141.1078, 33.5438, 26.9516, 0.0,0.0,348.0);

	/***************************Vehicle Dealership***************/

	F_CreateObject(7526, 2408.14, -50.39, 27.69,   0.00, 0.00, 270.00);
	CreateObject(8355, 2422.04, -56.86, 25.44,   0.00, 0.00, 90.00);

	/***************************PD Building**********************/

	CreateObject(12855, 2247.21, -9.60, 31.95,   0.00, 0.00, 270.00);
	CreateObject(6959, 2263.11, -0.66, 25.57,   0.00, 0.00, 0.00);
	CreateObject(6959, 2254.57, -0.66, 25.56,   0.00, 0.00, 0.00);
	CreateObject(6959, 2210.30, -13.82, 5.95,   0.00, 90.00, 0.00);
	CreateObject(6959, 2230.28, 6.20, 5.95,   0.00, 90.00, 90.00);
	CreateObject(6959, 2263.11, 14.20, 25.56,   0.00, 0.00, 0.00);
	CreateObject(6959, 2254.57, 14.20, 25.56,   0.00, 0.00, 0.00);
	F_CreateObject(1649, 243.67, 72.37, 1003.98,   0.00, 0.00, 0.00);
	F_CreateObject(1649, 243.67, 72.37, 1003.98,   0.00, 0.00, 180.00);
	F_CreateObject(1501, 2251.75, -13.22, 27.05,   0.00, 0.00, 0.00);
	F_CreateObject(3578, 2281.72, 16.20, 24.77,   0.00, 0.00, 90.00);
	F_CreateObject(3578, 2276.89, 16.20, 24.77,   0.00, 0.00, 90.00);
	F_CreateObject(3578, 2271.89, 16.20, 24.77,   0.00, 0.00, 90.00);
	F_CreateObject(3578, 2266.89, 16.20, 24.77,   0.00, 0.00, 90.00);
	F_CreateObject(3578, 2261.89, 16.20, 24.77,   0.00, 0.00, 90.00);
	F_CreateObject(3578, 2256.89, 16.20, 24.77,   0.00, 0.00, 90.00);
	F_CreateObject(3578, 2251.89, 16.20, 24.77,   0.00, 0.00, 90.00);
	F_CreateObject(3578, 2246.89, 16.20, 24.77,   0.00, 0.00, 90.00);
	F_CreateObject(3578, 2241.89, 16.20, 24.77,   0.00, 0.00, 90.00);

	/***************************Gas Station**********************/

	CreateObject(6959, 2263.55, -58.13, 25.48,   0.00, 0.00, 0.00);
	CreateObject(6959, 2253.15, -57.70, 25.47,   0.00, 0.00, 0.00);
	CreateObject(6959, 2253.67, -70.86, 25.47,   0.00, 0.00, 0.00);
	F_CreateObject(12853, 2258.90, -58.35, 27.39,   0.00, 0.00, 270.00);
	F_CreateObject(12854, 2252.86, -58.16, 27.37,   0.00, 0.00, 270.00);
	F_CreateObject(1686, 2264.85, -47.36, 25.54,   0.00, 0.00, 270.00);
	F_CreateObject(1686, 2263.23, -47.32, 25.54,   0.00, 0.00, 270.00);
	F_CreateObject(1686, 2254.82, -47.25, 25.54,   0.00, 0.00, 270.00);
	F_CreateObject(1686, 2253.20, -47.28, 25.54,   0.00, 0.00, 270.00);
	F_CreateObject(3578, 2258.21, -44.40, 24.67,   0.00, 0.00, 0.00);
	F_CreateObject(3578, 2258.21, -50.40, 24.67,   0.00, 0.00, 0.00);
	F_CreateObject(1345, 2282.00, -60.62, 26.20,   356.86, 0.00, 0.00);
	F_CreateObject(1345, 2277.84, -60.62, 26.20,   356.86, 0.00, 0.00);
	F_CreateObject(1345, 2273.84, -60.62, 26.20,   356.86, 0.00, 0.00);
	F_CreateObject(1438, 2272.51, -58.28, 25.39,   3.14, 0.00, 90.00);
	F_CreateObject(957, 2267.85, -49.64, 30.15,   0.00, 0.00, 0.00);
	F_CreateObject(957, 2257.85, -49.64, 30.15,   0.00, 0.00, 0.00);
	F_CreateObject(957, 2267.85, -57.64, 30.15,   0.00, 0.00, 0.00);
	F_CreateObject(957, 2267.85, -45.64, 30.15,   0.00, 0.00, 0.00);
	F_CreateObject(957, 2257.85, -45.64, 30.15,   0.00, 0.00, 0.00);

	/****************************Airport Gates**********************/

	airport_gate1 = CreateObject(969, 1958.17, -2189.74, 12.53,   0.00, 0.00, -0.36);
	airport_gate2 = CreateObject(969, 1955.74, -2189.77, 12.53,   0.00, 0.00, 0.00);

    /**************************PAY N SPRAYS*************************/

	F_CreateObject(980, 1024.7661132813, -1029.4514160156, 33.385856628418, 0, 0, 0);
	F_CreateObject(980, 1043.9195556641, -1025.9884033203, 33.874954223633, 0, 0, 0);
	F_CreateObject(980, 488.41333007813, -1735.3404541016, 12.957328796387, 0, 0, 352.25);
	F_CreateObject(980, 2071.6125488281, -1830.2231445313, 15.320266723633, 0, 0, 89.75);
	F_CreateObject(971, 719.96600341797, -462.57037353516, 16.980899810791, 0, 0, 0.25);
	F_CreateObject(971, -99.648231506348, 1111.4874267578, 20.887142181396, 0, 0, 0);
	F_CreateObject(971, -1904.6336669922, 277.81777954102, 42.841682434082, 0, 0, 0);
	F_CreateObject(971, -1935.9670410156, 239.35699462891, 36.22403717041, 0, 0, 0);
	F_CreateObject(971, -2716.1748046875, 217.39024353027, 6.4523072242737, 0, 0, 90);
	F_CreateObject(971, -2425.3005371094, 1028.078125, 52.317474365234, 0, 0, 0);
	F_CreateObject(971, -1420.7016601563, 2591.0751953125, 56.853294372559, 0, 0, 0);
	F_CreateObject(971, 1968.232421875, 2162.8244628906, 12.415260314941, 0, 0, 90);
	F_CreateObject(971, 2386.6110839844, 1043.376953125, 13.19024848938, 0, 0, 0);
	F_CreateObject(985, 2644.9240722656, -2039.5684814453, 14.054022789001, 0, 180, 180.5);

	/****************************Impound****************************/

	F_CreateObject(971, -485.93, -562.97, 28.15,   0.00, 0.00, 0.00);
	F_CreateObject(971, -493.00, -563.10, 28.15,   0.00, 0.00, 3.00);

	new added_objects = F_CountObjects();
	printf("Streamed Objects: %d",added_objects);

}

public SaveInteriors()
{

	new str[1024];
	if(active_interior_save < MAX_INTERIORS)
	{

		format(str,sizeof(str),"UPDATE rp_interiors SET spawn_x = '%f', spawn_y = '%f', spawn_z = '%f', interior_x = '%f', interior_y = '%f', interior_z = '%f', interior = '%d', `lock` = '%d', faction = '%d' WHERE id = '%d' LIMIT 1",
		InteriorInfo[active_interior_save][iSpawnX],
		InteriorInfo[active_interior_save][iSpawnY],
		InteriorInfo[active_interior_save][iSpawnZ],
		InteriorInfo[active_interior_save][iInteriorX],
		InteriorInfo[active_interior_save][iInteriorY],
		InteriorInfo[active_interior_save][iInteriorZ],
		InteriorInfo[active_interior_save][iInterior],
		InteriorInfo[active_interior_save][iLock],
		InteriorInfo[active_interior_save][iFaction],
		InteriorInfo[active_interior_save][iID]);
		mysql_query(str,QUERY_SAVE_INTERIORS,QUERY_SAVE_INTERIORS);

	} else { active_interior_save = 0; print("Interiors Saved."); SendAdminBroadcast("[SERVER] Interiors Successfully Saved"); if(server_restarting) { saved_vars ++; CheckRestartState(); } }

}

public CreateInteriors()
{

	for(new i = 0; i < MAX_INTERIORS; i ++)
	{

	    InteriorInfo[i][iPickup] = CreatePickup(1239,2,InteriorInfo[i][iSpawnX],InteriorInfo[i][iSpawnY],InteriorInfo[i][iSpawnZ]);

	}
	print("Interiors Loaded.");

}

public LoadInteriors()
{

	mysql_query("SELECT * FROM rp_interiors",QUERY_LOAD_INTERIORS,QUERY_LOAD_INTERIORS);

}

public AddJobs()
{

	job_pickup_market = CreatePickup(1239,2,2249.9968,52.8400,26.6671);
	job_pickup_deliver = CreatePickup(1239,2,2248.8794,-78.2331,26.5129);
	//job_pickup_taxi = CreatePickup(1239,2,1085.4576,-1226.3864,15.8203);
	//job_pickup_bus = CreatePickup(1239,2,912.5792,-1230.0784,16.9766);
	job_pickup_garbage = CreatePickup(1239,2,2404.4587,83.3811,26.4742);
	job_pickup_fish = CreatePickup(1239,2,2131.0662,-106.8137,3.8547);
	job_pickup_dmv = CreatePickup(1239,2,2436.5339,-50.8632,26.6416);
	//job_pickup_mechanic = CreatePickup(1239,2,2272.1875,-55.3477,26.4487);
	job_pickup_drug = CreatePickup(1239,2,-1094.9161,-1620.8561,76.3672);
	job_pickup_truck = CreatePickup(1239,2,-77.6213,-1136.4148,1.0781);
	job_pickup_pizza = CreatePickup(1239,2,2323.7251,76.6891,26.4957);
	job_pickup_chop = CreatePickup(1239,2,2310.1265,-74.9731,26.1919);
	job_pickup_impound = CreatePickup(1239,2,-491.3537,-565.5520,24.5645);
	job_pickup_sweeper = CreatePickup(1239,2,1324.5885,287.9557,20.0452);
	//job_pickup_eng = CreatePickup(1239,2,2770.6843,-1628.5165,12.1775);
	//job_pickup_dealer = CreatePickup(1239,2,2321.5620,54.6961,26.4862);
	//job_pickup_smuggle = CreatePickup(1239,2,2320.4155,35.0751,26.4844);
	//job_pickup_getwep = CreatePickup(1239,2,-550.7075,2593.8193,53.9348);
	job_pickup_farmer = CreatePickup(1239,2,1925.6642,170.8058,37.2813);
	pickup_armory = CreatePickup(1239,2,255.3259,74.4255,1003.6406,-1);
	print("Job Pickups Created.");

}

public AddJobVehicles()
{

	rent_vehicles[0] = AddStaticVehicleEx(421,2276.0435,-56.0167,26.1743,0.6665,random(125),random(125),-1); // rent car 1
	rent_vehicles[1] = AddStaticVehicleEx(421,2257.1106,-84.0597,26.2425,358.2190,random(125),random(125),-1); // rent car 2
	rent_vehicles[2] = AddStaticVehicleEx(421,2583.2485,46.5546,26.1188,89.1067,random(125),random(125),-1); // rent car 3
	rent_vehicles[3] = AddStaticVehicleEx(421,2117.2078,-75.7156,3.5704,106.4803,random(125),random(125),-1); // rent car 4
	rent_vehicles[4] = AddStaticVehicleEx(421,1289.2383,339.8477,19.2806,246.7102,random(125),random(125),-1); // rent car 5
	rent_vehicles[5] = AddStaticVehicleEx(421,1389.9406,265.2052,19.2934,156.0764,random(125),random(125),-1); // rent car 6
	rent_vehicles[6] = AddStaticVehicleEx(421,1424.7125,271.8080,19.2782,64.0024,random(125),random(125),-1); // rent car 7

	AddStaticVehicle(532,1999.9458,246.2710,28.4282,175.6001,1,1); // combine 1
	AddStaticVehicle(532,1989.9458,246.2710,28.4282,175.6001,1,1); // combine 1
	AddStaticVehicle(532,1979.9458,246.2710,28.4282,175.6001,1,1); // combine 1

    //AddStaticVehicleEx(552,2772.9895,-1605.7220,10.6103,271.7821,1,1,300); // UtilityVan
    //AddStaticVehicleEx(552,2772.9895,-1608.7220,10.6103,271.7821,1,1,300); // UtilityVan
    //AddStaticVehicleEx(552,2772.9895,-1611.7220,10.6103,271.7821,1,1,300); // UtilityVan
    //AddStaticVehicleEx(552,2772.9895,-1614.7220,10.6103,271.7821,1,1,300); // UtilityVan

	sweeper[0] = AddStaticVehicle(574,1333.8221,286.6605,19.4330,330.0,1,1); // sweeper 1
	sweeper[1] = AddStaticVehicle(574,1336.8221,286.6605,19.4330,330.0,1,1); // sweeper 2
	sweeper[2] = AddStaticVehicle(574,1339.8221,286.6605,19.4330,330.0,1,1); // sweeper 3

	pizzaboy[0] = AddStaticVehicleEx(448,2323.4631,73.8879,26.0825,90.0,3,3,300);//Pizza Boy 1
	pizzaboy[1] = AddStaticVehicleEx(448,2323.4631,71.8879,26.0825,90.0,3,3,300);//Pizza Boy 2
	pizzaboy[2] = AddStaticVehicleEx(448,2323.4631,67.8879,26.0825,90.0,3,3,300);//Pizza Boy 3

    trucks[0] = AddStaticVehicle(403,-79.5798,-1107.8682,1.6852,158.7020,0,0); // linerunner
	trucks[1] = AddStaticVehicle(403,-73.0866,-1108.7682,1.6843,161.6580,0,0); // linerunner 2
	trucks[2] = AddStaticVehicle(403,-65.6087,-1112.5134,1.6842,158.8756,0,0); // linerunner 3

	AddStaticVehicle(435,-51.7872,-1134.4116,1.6850,68.3983,1,1); // trailer 1
	AddStaticVehicle(435,-57.8472,-1136.2605,1.6840,64.4278,0,0); // trailer 2
	AddStaticVehicle(435,-59.2355,-1144.4806,1.6843,65.1766,0,0); // trailer 3

    //AddStaticVehicleEx(525,2280.0315,-55.3954,28.3337,0.0,1,1,300); // Tow truck
    //AddStaticVehicleEx(525,2275.0315,-55.3954,28.3337,0.0,1,1,300); // Tow truck

	AddStaticVehicleEx(453,3038.9277,-2278.5967,-0.4530,102.9975,1,1,1); // drug point

	delivery_vans[0] = AddStaticVehicleEx(482,2240.0122,-66.8802,28.5342,90.0,1,1,300); // burrito 1
	delivery_vans[1] = AddStaticVehicleEx(482,2240.0122,-71.8802,28.5342,90.0,1,1,300); // burrito 2
	delivery_vans[2] = AddStaticVehicleEx(482,2240.0122,-76.8802,28.5342,90.0,1,1,300); // burrito 3
	delivery_vans[3] = AddStaticVehicleEx(482,2240.0122,-81.8802,28.5342,90.0,1,1,300); // burrito 4

	//taxi_vehicles[0] = AddStaticVehicleEx(438,1112.4376,-1247.4011,15.6015,0.0,6,6,300); // taxi 1
	//taxi_vehicles[1] = AddStaticVehicleEx(438,1108.4376,-1247.4011,15.6015,0.0,6,6,300); // taxi 2
	//taxi_vehicles[2] = AddStaticVehicleEx(438,1104.4376,-1247.4011,15.6015,0.0,6,6,300); // taxi 3
	//taxi_vehicles[3] = AddStaticVehicleEx(438,1100.4376,-1247.4011,15.6015,0.0,6,6,300); // taxi 4
	//bus_vehicles[0] = AddStaticVehicle(431,889.6165,-1210.0712,17.0817,180.0,1,1); // bus 1
	//bus_vehicles[1] = AddStaticVehicle(431,893.6165,-1210.0712,17.0817,180.0,1,1); // bus 2
	//bus_vehicles[2] = AddStaticVehicle(431,897.6165,-1210.0712,17.0817,180.0,1,1); // bus 3
	//bus_vehicles[3] = AddStaticVehicle(431,901.6165,-1210.0712,17.0817,180.0,1,1); // bus 4
	garbage_vehicles[0] = AddStaticVehicleEx(408,2412.5349,86.9245,26.1779,90.0,1,1,300); // garbage truck 1
	garbage_vehicles[1] = AddStaticVehicleEx(408,2412.5349,91.9245,26.1779,90.0,1,1,300); // garbage truck 2
	garbage_vehicles[2] = AddStaticVehicleEx(408,2412.5349,96.9245,26.1779,90.0,1,1,300); // garbage truck 3
	fish_vehicles[0] = AddStaticVehicle(453,2098.6245,-75.2247,-0.2654,18.5033,1,1); // reefer 1
	fish_vehicles[1] = AddStaticVehicle(453,2061.5708,-86.0378,-0.3672,17.9872,1,1); // reefer 2
	dmv_vehicles[0] = AddStaticVehicle(445,2444.9114,-42.3207,28.1484,0.0,1,1); // lic veh 1
	dmv_vehicles[1] = AddStaticVehicle(445,2448.9114,-42.3207,28.1484,0.0,1,1); // lic veh 2
	SetVehicleParamsEx(dmv_vehicles[0], 1, 0, 0, 1, 0, 0, 0);
	SetVehicleParamsEx(dmv_vehicles[1], 1, 0, 0, 1, 0, 0, 0);

	/******************************************/

	for(new i = 0; i < sizeof(rent_vehicles); i ++) { SetVehicleParamsEx(rent_vehicles[i], 0, 0, 0, 0, 0, 0, 0); }

	print("Job Vehicles Created.");

}

public LoadFactions()
{

	mysql_query("SELECT * FROM rp_factions",QUERY_LOAD_FACTIONS,QUERY_LOAD_FACTIONS);

}

public CreateBuyPlanes()
{

	new a = 0; new i = 0;
	while(i < sizeof(VehicleModelInfo))
	{

	    if(VehicleModelInfo[i][vmModel] > 0 && VehicleModelInfo[i][vmType] == VEHICLE_MODEL_TYPE_PLANE)
		{

			VehicleModelInfo[i][vmVehicle] = AddStaticVehicle(VehicleModelInfo[i][vmModel],buy_plane_spawns[a][0],buy_plane_spawns[a][1],buy_plane_spawns[a][2],buy_plane_spawns[a][3],random(100),random(100));
			SetVehicleVirtualWorld(VehicleModelInfo[i][vmVehicle],(VIRTUAL_WORLD_CARCHOOSE + i));
	        a ++;

	    }
	    i ++;

	}
	print("Created Buy Planes.");

}

public CreateBuyBoats()
{

	new a = 0; new i = 0;
	while(i < sizeof(VehicleModelInfo))
	{

	    if(VehicleModelInfo[i][vmModel] > 0 && VehicleModelInfo[i][vmType] == VEHICLE_MODEL_TYPE_BOAT)
		{

			VehicleModelInfo[i][vmVehicle] = AddStaticVehicle(VehicleModelInfo[i][vmModel],buy_boat_spawns[a][0],buy_boat_spawns[a][1],buy_boat_spawns[a][2],buy_boat_spawns[a][3],random(100),random(100));
			SetVehicleVirtualWorld(VehicleModelInfo[i][vmVehicle],(VIRTUAL_WORLD_CARCHOOSE + i));
	        a ++;

	    }
	    i ++;

	}
	print("Created Buy Boats.");
	CreateBuyPlanes();

}

public CreateBuyVehicles()
{

	new a = 0; new i = 0;
	while(i < sizeof(VehicleModelInfo))
	{

	    if(VehicleModelInfo[i][vmModel] > 0 && VehicleModelInfo[i][vmType] == VEHICLE_MODEL_TYPE_CAR)
		{

			VehicleModelInfo[i][vmVehicle] = AddStaticVehicle(VehicleModelInfo[i][vmModel],-1660.3021,1213.7434,6.9696,252.8694,random(100),random(100));
			SetVehicleVirtualWorld(VehicleModelInfo[i][vmVehicle],(VIRTUAL_WORLD_CARCHOOSE + i));
	        a ++;

	    }
	    i ++;

	}
	print("Created Buy Vehicles.");
	CreateBuyBoats();

}

public LoadVehicleModels()
{

	mysql_query("SELECT * FROM rp_vehicle_models ORDER BY id ASC",QUERY_LOAD_MODELS,QUERY_LOAD_MODELS);

}

public CreateBizes()
{

 	new str[256];
	for(new i = 0; i < MAX_BIZES; i ++)
	{

		if(BizInfo[i][bOwner] == 0)
		{

		    format(str,sizeof(str),"Business Information\n%s\n\nPrice: $%d\nEntrance Fee: $%d\nLevel: %d\nThis business is for sale!\nUse /biz for a list of available actions",BizInfo[i][bName],BizInfo[i][bPrice],BizInfo[i][bEntranceFee],BizInfo[i][bLevel]);

		}
		else
		{

			format(str,sizeof(str),"Business Information\n%s\n\nEntrance Fee: $%d\nUse /enter to enter this building",BizInfo[i][bName],BizInfo[i][bEntranceFee]);

		}
		BizInfo[i][bPickup] = Create3DTextLabel(str, COLOR_LIGHTBLUE, BizInfo[i][bSpawnX], BizInfo[i][bSpawnY], BizInfo[i][bSpawnZ], 30.0, 0, 0);

	}
	print("Bizes Created.");
	RefreshStockMarket();

}

public LoadBizes()
{

	mysql_query("SELECT * FROM rp_businesses",QUERY_LOAD_BIZES,QUERY_LOAD_BIZES);

}

public SaveVehicles()
{

	new str[1024];
	if(active_vehicle_save < MAX_RP_VEHICLES)
	{

	    if(!VehicleInfo[active_vehicle_save][vImpounded]) { FormatModString(VehicleInfo[active_vehicle_save][vVehicle]); SaveVehicleDamage(VehicleInfo[active_vehicle_save][vVehicle]); }
	    new wstr[256];
	    new tmp[64];
	    for(new a = 0; a < MAX_VEH_WEAPONS; a ++)
	    {

	        new w = vehicle_weapons[active_vehicle_save][a];
	        new am = vehicle_weapon_ammo[active_vehicle_save][a];
			if(a == 0)
			{

				format(tmp,sizeof(tmp),"%d=%d",w,am);

			}
			else
			{

			    format(tmp,sizeof(tmp),"|%d=%d",w,am);

			}
			strins(wstr,tmp,strlen(wstr));

	    }
	    new cleanplate[128];
	    mysql_real_escape_string(VehicleInfo[active_vehicle_save][vPlate],cleanplate);
		format(str,sizeof(str),"UPDATE rp_vehicles SET model = '%d',spawn_x = '%f',spawn_y = '%f',spawn_z = '%f',spawn_r='%f',`lock`='%d',locked='%d',times_destroyed='%d',fuel='%d',faction='%d',owner_name='%s',death_time='%d',mileage='%d',owning_character='%d',plate='%s',color1='%d',color2='%d',insurance='%d',mods='%s',paintjob = '%d',weapons='%s',imp='%d',gps='%d',comp='%d',dmg1='%d',dmg2='%d',dmg3='%d',dmg4='%d',hp='%f',neon='%d',immob='%d',selling='%d',sprice='%d',sexpire='%d' WHERE id = '%d'",
		VehicleInfo[active_vehicle_save][vModel],
		VehicleInfo[active_vehicle_save][vSpawnX],
		VehicleInfo[active_vehicle_save][vSpawnY],
		VehicleInfo[active_vehicle_save][vSpawnZ],
		VehicleInfo[active_vehicle_save][vSpawnR],
		VehicleInfo[active_vehicle_save][vLock],
		VehicleInfo[active_vehicle_save][vLocked],
		VehicleInfo[active_vehicle_save][vDestroyed],
		VehicleInfo[active_vehicle_save][vFuel],
		VehicleInfo[active_vehicle_save][vFaction],
		VehicleInfo[active_vehicle_save][vOwnerName],
		VehicleInfo[active_vehicle_save][vDeathTime],
		VehicleInfo[active_vehicle_save][vMileage],
		VehicleInfo[active_vehicle_save][vOwner],
		cleanplate,
		VehicleInfo[active_vehicle_save][vColor1],
		VehicleInfo[active_vehicle_save][vColor2],
		VehicleInfo[active_vehicle_save][vInsurance],
		VehicleInfo[active_vehicle_save][vMods],
		VehicleInfo[active_vehicle_save][vPaintjob],
		wstr,
		VehicleInfo[active_vehicle_save][vImpounded],
		VehicleInfo[active_vehicle_save][vGps],
		VehicleInfo[active_vehicle_save][vCompany],
		VehicleInfo[active_vehicle_save][vDamage][0],
		VehicleInfo[active_vehicle_save][vDamage][1],
		VehicleInfo[active_vehicle_save][vDamage][2],
		VehicleInfo[active_vehicle_save][vDamage][3],
		VehicleInfo[active_vehicle_save][vHealth],
		VehicleInfo[active_vehicle_save][vNeon],
		VehicleInfo[active_vehicle_save][vImmob],
		VehicleInfo[active_vehicle_save][vSelling],
		VehicleInfo[active_vehicle_save][vSellingPrice],
		VehicleInfo[active_vehicle_save][vSellingExpire],
		VehicleInfo[active_vehicle_save][vID]);
		mysql_query(str,QUERY_VEHICLES_SAVE,QUERY_VEHICLES_SAVE);
	    active_vehicle_save ++;

	} else { active_vehicle_save = 0; print("Vehicles saved."); SendAdminBroadcast("[SERVER] Vehicles Successfully Saved"); if(server_restarting) { saved_vars ++; CheckRestartState(); } }

}

public SaveBizes()
{

	new str[1024];
	if(active_biz_save < MAX_BIZES)
	{

	    format(str,sizeof(str),"UPDATE rp_businesses SET spawn_x = '%f', spawn_y = '%f', spawn_z = '%f', interior_x = '%f', interior_y = '%f', interior_z = '%f', interior = '%d', price = '%d', type= '%d', owning_character = '%d', owner_name = '%s', vehicle_spawn_x = '%f', vehicle_spawn_y = '%f', vehicle_spawn_z = '%f', vehicle_spawn_r = '%f', open = '%d', bank = '%d', fuel_price = '%d', name = '%s', bill_time = '%d', efee = '%d', level = '%d' WHERE id = '%d' LIMIT 1",
		BizInfo[active_biz_save][bSpawnX],
		BizInfo[active_biz_save][bSpawnY],
		BizInfo[active_biz_save][bSpawnZ],
		BizInfo[active_biz_save][bInteriorX],
		BizInfo[active_biz_save][bInteriorY],
		BizInfo[active_biz_save][bInteriorZ],
		BizInfo[active_biz_save][bInterior],
		BizInfo[active_biz_save][bPrice],
		BizInfo[active_biz_save][bType],
		BizInfo[active_biz_save][bOwner],
		BizInfo[active_biz_save][bOwnerName],
		BizInfo[active_biz_save][bVX],
		BizInfo[active_biz_save][bVY],
		BizInfo[active_biz_save][bVZ],
		BizInfo[active_biz_save][bVR],
	    BizInfo[active_biz_save][bOpen],
	    BizInfo[active_biz_save][bBank],
		BizInfo[active_biz_save][bFuelPrice],
	 	BizInfo[active_biz_save][bName],
	 	BizInfo[active_biz_save][bBillTime],
	 	BizInfo[active_biz_save][bEntranceFee],
	 	BizInfo[active_biz_save][bLevel],
	 	BizInfo[active_biz_save][bID]);
	 	mysql_query(str,QUERY_BIZ_SAVE,QUERY_BIZ_SAVE);

	} else { active_biz_save = 0; print("Businesses Saved."); SendAdminBroadcast("[SERVER] Businesses Successfully Saved"); if(server_restarting) { saved_vars ++; CheckRestartState(); } }

}


public SaveDrugs()
{

	new str[1024];
	if(active_drug_save < MAX_DRUGS)
	{
	    format(str,sizeof(str),"UPDATE rp_drugs SET spawn_x = '%f', spawn_y = '%f', spawn_z = '%f', type = '%d', planted = '%d' WHERE id = '%d' LIMIT 1",
		DrugInfo[active_drug_save][dSpawnX],
		DrugInfo[active_drug_save][dSpawnY],
		DrugInfo[active_drug_save][dSpawnZ],
		DrugInfo[active_drug_save][dType],
		DrugInfo[active_drug_save][dTime],
		DrugInfo[active_drug_save][dID]);
		mysql_query(str,QUERY_DRUG_SAVE,QUERY_DRUG_SAVE);
	}
	else { active_drug_save = 0; print("Drugs Saved."); SendAdminBroadcast("[SERVER] Drugs Successfully Saved"); if(server_restarting) { saved_vars ++; CheckRestartState(); } }

}

public SaveHouses()
{

	new str[1024];
	if(active_house_save < MAX_HOUSES)
	{

     	new wstr[256];
	    new tmp[64];
	    for(new a = 0; a < MAX_HOUSE_WEAPONS; a ++)
	    {

	        new w = house_weapons[active_house_save][a];
	        new am = house_weapon_ammo[active_house_save][a];
			if(a == 0)
			{

				format(tmp,sizeof(tmp),"%d=%d",w,am);

			}
			else
			{

			    format(tmp,sizeof(tmp),"|%d=%d",w,am);

			}
			strins(wstr,tmp,strlen(wstr));

	    }
	    new upstr[256];
		FormatHouseUpgradeString(active_house_save,upstr);
	    new inventory[512];
	    FormatHouseInventoryString(active_house_save,inventory);
	    format(str,sizeof(str),"UPDATE rp_houses SET spawn_x = '%f', spawn_y = '%f', spawn_z = '%f', interior_x = '%f', interior_y = '%f', interior_z = '%f', interior = '%d', owning_character = '%d', owner_name = '%s', locked = '%d', rent_price = '%d', price = '%d', bank = '%d', inv = '%s', weapons = '%s', upgrades = '%s', rentable = '%d', level = '%d' WHERE id = '%d' LIMIT 1",
	    HouseInfo[active_house_save][hSpawnX],
		HouseInfo[active_house_save][hSpawnY],
		HouseInfo[active_house_save][hSpawnZ],
		HouseInfo[active_house_save][hInteriorX],
		HouseInfo[active_house_save][hInteriorY],
		HouseInfo[active_house_save][hInteriorZ],
		HouseInfo[active_house_save][hInterior],
		HouseInfo[active_house_save][hOwner],
		HouseInfo[active_house_save][hOwnerName],
		HouseInfo[active_house_save][hLocked],
		HouseInfo[active_house_save][hRentPrice],
		HouseInfo[active_house_save][hPrice],
		HouseInfo[active_house_save][hBank],
		inventory,
		wstr,
		upstr,
		HouseInfo[active_house_save][hRentable],
		HouseInfo[active_house_save][hLevel],
		HouseInfo[active_house_save][hID]);
		mysql_query(str,QUERY_HOUSE_SAVE,QUERY_HOUSE_SAVE);
	}
	else { active_house_save = 0; print("Houses Saved."); SendAdminBroadcast("[SERVER] Houses Successfully Saved"); if(server_restarting) { saved_vars ++; CheckRestartState(); } }

}

public CreateHouses()
{

	for(new i = 0; i < MAX_HOUSES; i ++)
	{

        new str[256];
		if(HouseInfo[i][hOwner] == 0)
		{

		    new addr[256];
		    GetHouseAddress(i,addr);
			format(str,sizeof(str),"%s\nHouse Information\nPrice: $%d\nLevel: %d\n\nThis house is for sale!\nUse /house for a list of available actions",addr,HouseInfo[i][hPrice],HouseInfo[i][hLevel]);

		}
		else
		{

		    new addr[256];
		    GetHouseAddress(i,addr);
		    format(str,sizeof(str),"%s\nHouse Information\nOwner: %s\n\nUse /enter to enter this building",addr,HouseInfo[i][hOwnerName]);

		}
		HouseInfo[i][hPickup] = Create3DTextLabel(str, TEAM_GROVE_COLOR, HouseInfo[i][hSpawnX], HouseInfo[i][hSpawnY], HouseInfo[i][hSpawnZ], 30.0, 0, 0);

	}
	print("Houses Created.");

}

public LoadHouses()
{

	mysql_query("SELECT * FROM rp_houses",QUERY_LOAD_HOUSES,QUERY_LOAD_HOUSES);

}

public LoadVehicleInventory()
{

	mysql_query("SELECT * FROM rp_vinventory",QUERY_LOAD_VINVENTORY,QUERY_LOAD_VINVENTORY);

}

public CreateVehicles()
{

	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vModel] > 0)
	    {

			if(!VehicleInfo[i][vImpounded])
			{

				if(VehicleInfo[i][vSelling] == -1)
				{

				    VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],VehicleInfo[i][vSpawnR],VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1);

				}
				else
				{

					new Float:X, Float:Y, Float:Z, Float:R;
     				new Float:X2, Float:Y2;
     				new id = used_vehicle_offset[VehicleInfo[i][vSelling]];
					GetNextAuctionPos(VehicleInfo[i][vSelling],X,Y,Z,R,id);
				    VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],X,Y,Z,R,VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1);
				    GetPosInFrontOfVehicle(VehicleInfo[i][vVehicle], X2, Y2, 5.0);
				    LinkVehicleToInterior(VehicleInfo[i][vVehicle],BizInfo[VehicleInfo[i][vSelling]][bInterior]);
				    SetVehicleVirtualWorld(VehicleInfo[i][vVehicle],(VehicleInfo[i][vSelling] + 2000));
				    used_vehicle_pickups[VehicleInfo[i][vSelling]][id] = CreatePickup(1239,2,X2,Y2,Z,(VehicleInfo[i][vSelling] + 2000));
					used_vehicle_slots[VehicleInfo[i][vSelling]][id] = i;
					used_vehicle_offset[VehicleInfo[i][vSelling]] ++;
					sync_attribs[VehicleInfo[i][vVehicle]] = 1;

				}

			} else { VehicleInfo[i][vVehicle] = -1; }
			if(!VehicleInfo[i][vImpounded])
			{

				SetVehicleParamsEx(VehicleInfo[i][vVehicle],0,0,0,0,0,0,0);
				SetVehicleDamage(VehicleInfo[i][vVehicle]);
				RefreshNeon(i);

			}
			if(strlen(VehicleInfo[i][vPlate]) && !VehicleInfo[i][vImpounded]) { SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]); }
			adding_vinventory[i] = -1;
			if(!VehicleInfo[i][vImpounded]) sync_attribs[VehicleInfo[i][vVehicle]] = 1;
			for(new a = 0; a < MAX_INVENTORY; a ++)
			{
				VehicleInventory[i][a][vinItem] = -1;
				VehicleInventory[i][a][vinAmount] = 0;
				VehicleInventory[i][a][vinOwner] = VehicleInfo[i][vID];
			}

	    } else { VehicleInfo[i][vVehicle] = -1; }

	}
	print("Vehicles Created.");
	LoadVehicleInventory();

}

public LoadVehicles()
{

	mysql_query("SELECT * FROM rp_vehicles WHERE truncated = 0",QUERY_LOAD_VEHICLES,QUERY_LOAD_VEHICLES);

}

public InitTime()
{

	new hour, mins, sec;
	gettime(hour,mins,sec);
	SetWorldTime(hour);
	active_hour = hour;

}

public StartTimers()
{

	timers[0] = SetTimer("GeneralListener",1000,1);
	timers[1] = SetTimer("Refresh",3600000,1);
	timers[2] = SetTimer("Weather",1000,1);
	timers[3] = SetTimer("VehicleListener",1000,1);
	timers[4] = SetTimer("BizListener",1000,1);
	timers[5] = SetTimer("CrashListener",100,1);
	timers[6] = SetTimer("CheatListener",1000,1);
	timers[7] = SetTimer("RaceListener",600000,1);
	timers[8] = SetTimer("QuickListener",750,1);

}

public QuickListener()
{

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++)
	{

	    if(IsPlayerConnectedEx(playerid))
	    {

	    	if(filling[playerid] && filling_started[playerid])
			{

                new biz = GetClosestBiz(playerid);
                if(biz == filling_biz[playerid] && IsPlayerInAnyVehicle(playerid))
                {
                    new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
				   	new key, leftright, updown;
			        GetPlayerKeys(playerid,key,updown,leftright);
			        if(key == KEY_HANDBRAKE && (VehicleInfo[slot][vFuel] + filling_amount[playerid]) < 100 && CharacterInfo[playerid][active_character[playerid]][cMoney] > (BizInfo[biz][bFuelPrice] * filling_amount[playerid]))
			        {

						new str[256];
						filling_amount[playerid] ++;
						new newamount = (VehicleInfo[slot][vFuel] + filling_amount[playerid]);
						new newprice = (BizInfo[biz][bFuelPrice] * filling_amount[playerid]);
						format(str,sizeof(str),"~p~FILLING CAR~n~CURRENT LEVEL: ~w~%d/100~n~~p~Current Price: ~w~$%d~n~Release ~p~~k~~VEHICLE_HANDBRAKE~~w~ to stop",newamount,newprice);
						GameTextForPlayer(playerid,str,5000,5);
						PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

			        }
			        else
			        {

			            new newprice = (BizInfo[biz][bFuelPrice] * filling_amount[playerid]);
			            new str[256];
	               		format(str,sizeof(str),"~p~Finished filling vehicle~n~~w~Your refill cost ~r~$%d",newprice);
			            GameTextForPlayer(playerid,str,5000,5);
			            CharacterInfo[playerid][active_character[playerid]][cMoney] -= newprice;
			            BizInfo[biz][bBank] += newprice;
			            VehicleInfo[slot][vFuel] += filling_amount[playerid];
			            filling_amount[playerid] = 0;
						filling_biz[playerid] = -1;
						filling[playerid] = 0;
						filling_started[playerid] = 0;
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0);

			        }

				}
				else
				{

				    SendErrorMsg(playerid,"You are no longer near the gas station. Filling stopped.");
		            filling_amount[playerid] = 0;
					filling_biz[playerid] = -1;
					filling[playerid] = 0;
					filling_started[playerid] = 0;

				}

			}

	    }

	}

}

public RaceListener()
{

	RunRaceWinner();
	RunNextRace();

}

public CheatListener()
{

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++)
	{

	    if(IsPlayerConnectedEx(playerid))
	    {

			new action = GetPlayerSpecialAction(playerid);
			WeaponsCheck(playerid);
			if(action == SPECIAL_ACTION_USEJETPACK) {

			    BannedJetpackRemoval(playerid);

			}

		}

	}

}

public CrashListener()
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

		if(IsPlayerConnected(i) && !IsPlayerNPC(i)) PlayerUpdateListener(i);
		if(IsPlayerConnectedEx(i))
		{

		    if(IsPlayerInAnyVehicle(i) && !crash_detection_disabled[i])
		    {

		        new veh = GetPlayerVehicleID(i);
		        new Float:hp;
	         	GetVehicleHealth(veh,hp);
				if(hp < crash_vhp[veh])
				{
				    new Float:difference;
		    		difference = (crash_vhp[veh] - hp);
				    if(difference > 100)
					{

				        new Float:speed_x, Float:speed_y, Float:speed_z;
						GetVehicleVelocity(GetPlayerVehicleID(i),speed_x,speed_y,speed_z);
						new Float:final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*99.4166672; // 250.666667 = kmph  // 199,4166672 = mph
						new speed = floatround(final_speed,floatround_round);
				        if(speed < player_vehicle_speed[i])
				        {
				            new Float:sdifference;
				            sdifference = (player_vehicle_speed[i] - speed);
				            if(sdifference > 20)
				            {

								new drunk_gain = 5000; //1.1 4000
								if(seatbelt[i]) { drunk_gain = 3500; } //1.1 3000
				                SetPlayerDrunkLevel(i,(GetPlayerDrunkLevel(i) + drunk_gain));
				                if(difference > 100)
				                {
					                new Float:phploss;
					                phploss = floatround((difference / 4));
					                if(seatbelt[i]) { phploss = floatround(phploss / 2); if(phploss < 0) { phploss = 0; } }
					                new Float:php;
					                GetPlayerHealth(i,php);
					                SetPlayerHealth(i,(php - phploss));
								}
				                TextDrawShowForPlayer(i,crash_screen);
				                SetTimerEx("HideCrash",250,0,"i",i);

				            }

				        }

				    }

				}

		    }
		    if(!speedcamera_cooldown[i] && GetPlayerState(i) == PLAYER_STATE_DRIVER)
		    {
				for(new a = 0; a < sizeof(speed_cameras); a ++)
				{

					if(IsPlayerInRangeOfPoint(i,30.0,speed_cameras[a][0],speed_cameras[a][1],speed_cameras[a][2]))
					{

						if(player_vehicle_speed[i] >= 61)
						{

						    if(!InCopCar(i) && !InAmbulance(i) && !IsAircraft(GetPlayerVehicleID(i)) && GetVehicleModel(GetPlayerVehicleID(i)) != 407)
						    {

								new Float:X, Float:Y, Float:Z;
								GetPlayerPos(i,X,Y,Z);
								new name[MAX_PLAYER_NAME];
								GetCharacterNameEx(i,name);
								new str[256];
								format(str,sizeof(str),"** FLASH ** A speed camera takes a picture of %s's vehicle",name);
	                            SendServerEmote(str,X, Y, Z, 30.0, 0);
							    speedcamera_cooldown[i] = 60;
								format(str,sizeof(str),"Dear %s,~n~ ~n~This message is to inform you that you have been charged $100 for a speeding violation.",name);
							    SendMail(CharacterInfo[i][active_character[i]][cID],"Speeding Ticket",str,"Red County Sheriffs Department",player_threads[i]);
							    if(CharacterInfo[i][active_character[i]][cBank] >= 100) { CharacterInfo[i][active_character[i]][cBank] -= 100; FactionInfo[0][fBank] += 100; }
							    PlayerPlaySound(i,1132,0.0,0.0,0.0);
							    if(speed_camera_stats[a] == -1)
							    {

							        X = speed_cameras[a][0];
							        Y = speed_cameras[a][1];
							        GetPosInFrontOfCoord(X, Y, speed_cameras[a][2], 2.0);
							    	speed_camera_flash[a] = CreateObject(18670,X, Y,(speed_cameras[a][2] + 4.5),0.0,0.0,0.0);
							    	speed_camera_stats[a] = 3;

								}
							}
						}
					}
				}
		    }
		    new weapons[13][2];
		    for(new a = 0; a < 13; a ++) { GetPlayerWeaponData(i,a,weapons[a][0],weapons[a][1]); }
      		if((weapons[5][0] == WEAPON_AK47 && weapons[5][1] > 0 && GetPlayerWeapon(i) != WEAPON_M4 && GetPlayerWeapon(i) != WEAPON_AK47) || (weapons[5][0] == WEAPON_M4 && weapons[5][1] > 0 && GetPlayerWeapon(i) != WEAPON_M4 && GetPlayerWeapon(i) != WEAPON_AK47))
			{

				if(!cl_SlotUsed(i,CLOTHING_HIDEWEAPON))
				{

				    new object = (weapons[5][0] == WEAPON_M4) ? 356 : 355;
				    cl_SetClothing(i,CLOTHING_HIDEWEAPON,object,15,-0.2,0.15,0.0,0.0,45.0,0.0,1.0,1.0,1.0);

				}

			}
			else if(cl_SlotUsed(i,CLOTHING_HIDEWEAPON) && (GetPlayerWeapon(i) == WEAPON_M4 || GetPlayerWeapon(i) == WEAPON_AK47 || (!HasWeapon(i,WEAPON_M4) && !HasWeapon(i,WEAPON_AK47))))
			{

			    cl_RemoveClothing(i,CLOTHING_HIDEWEAPON);

			}
			if((weapons[3][0] == WEAPON_SHOTGUN && weapons[3][1] > 0 && GetPlayerWeapon(i) != WEAPON_SHOTGUN && GetPlayerWeapon(i) != 27) || (weapons[3][0] == 27 && weapons[3][1] > 0 && GetPlayerWeapon(i) != 27 && GetPlayerWeapon(i) != WEAPON_SHOTGUN))
			{

				if(!cl_SlotUsed(i,CLOTHING_HIDEWEAPONTWO))
				{

				    new object = (weapons[3][0] == WEAPON_SHOTGUN) ? 349 : 351;
				    cl_SetClothing(i,CLOTHING_HIDEWEAPONTWO,object,15,-0.10,0.15,-0.35,0.0,-40.0,0.0,1.0,1.0,1.0);

				}

			}
			else if(cl_SlotUsed(i,CLOTHING_HIDEWEAPONTWO) && (GetPlayerWeapon(i) == WEAPON_SHOTGUN || GetPlayerWeapon(i) == 27 || (!HasWeapon(i,WEAPON_SHOTGUN))))
			{

			    cl_RemoveClothing(i,CLOTHING_HIDEWEAPONTWO);

			}
		}
	}

	for(new b = 0; b < MAX_VEHICLES; b ++) { new Float:hp; GetVehicleHealth(b,hp); crash_vhp[b] = hp; }

}

public HideCrash(playerid)
{

	TextDrawHideForPlayer(playerid,crash_screen);

}

public BizListener()
{

	for(new i = 0; i < MAX_BIZES; i ++)
	{

	    if(BizInfo[i][bOwner] > 0)
	    {

			if(BizInfo[i][bBillTime] > 0)
			{

				BizInfo[i][bBillTime] --;

			}
			else if(BizInfo[i][bBillTime] == 0)
			{

			    BillBiz(i);
			    BizInfo[i][bBillTime] = 86400;

			}

	    }

	}
	if(airport_timeout > 1) { airport_timeout --; }
	if(airport_timeout == 1) {

	    airport_timeout = 0;
	    MoveObject(airport_gate1,1958.17, -2189.74, 12.53,6.0);
		MoveObject(airport_gate2,1955.74, -2189.77, 12.53,6.0);

	}
	for(new i = 0; i < sizeof(oil_rigs); i ++)
	{

	    if(oil_rig_cooldown[i] > 1)
		{

			oil_rig_cooldown[i] --;

		}
		else
		{

	    	if(oil_rig_owners[i] > 0 && oil_rig_levels[i] < 250) oil_rig_levels[i] ++;
	    	oil_rig_cooldown[i] = 600;

	    }

	}
	for(new i = 0; i < MAX_DRUGS; i ++)
	{

	    if(DrugInfo[i][dType] > 0)
	    {

			if((gettime() - DrugInfo[i][dTime]) > (3600 * 48))
			{

			    DrugInfo[i][dTime] = 0;
	            DrugInfo[i][dType] = 0;
				F_DestroyObject(DrugInfo[i][dObject]);
				DrugInfo[i][dObject] = 0;

			}

	    }

	}

}

public VehicleListener()
{

	if(derby_sys_countdown > 0) { derby_sys_countdown --; }
	if(derby_sys_countdown <= 4 && derby_sys_countdown > 0)
	{

	    new str[64];
	    format(str,sizeof(str),"DERBY STARTS IN: %d",(derby_sys_countdown - 1));
	    for(new a = 0; a < MAX_PLAYERS; a ++)
	    {

	        if(IsPlayerConnectedEx(a))
	        {

				if(derby_sys_driver[a])
				{

		            GameTextForPlayer(a,str,1000,5);
		            if(derby_sys_countdown >= 2)
		            {

		            	PlayerPlaySound(a,1056,0.0,0.0,0.0);

					}
					else if(derby_sys_countdown == 1)
					{

						PlayerPlaySound(a,1057,0.0,0.0,0.0);
						TogglePlayerControllable(a,1);

					}
				}

	        }

	    }

	}
	if(nascar_sys_countdown > 0) { nascar_sys_countdown --; }
	if(nascar_sys_countdown <= 4 && nascar_sys_countdown > 0)
	{

	    new str[64];
	    format(str,sizeof(str),"RACE STARTS IN: %d",(nascar_sys_countdown - 1));
	    for(new a = 0; a < MAX_PLAYERS; a ++)
	    {

	        if(IsPlayerConnectedEx(a))
	        {

				if(nascar_sys_driver[a])
				{

		            GameTextForPlayer(a,str,1000,5);
		            if(nascar_sys_countdown >= 2)
		            {

		            	PlayerPlaySound(a,1056,0.0,0.0,0.0);

					}
					else if(nascar_sys_countdown == 1)
					{

						PlayerPlaySound(a,1057,0.0,0.0,0.0);
						TogglePlayerControllable(a,1);
						RefreshNascarStage(a);

					}
				}

	        }

	    }

	}
	for(new slot = 0; slot < MAX_RP_VEHICLES; slot ++)
	{

		if(VehicleInfo[slot][vVehicle] > -1)
		{

    		if(sync_engine_off[VehicleInfo[slot][vVehicle]]) { StopEngine(VehicleInfo[slot][vVehicle]); sync_engine_off[VehicleInfo[slot][vVehicle]] = 0; }
			if(sync_attribs[VehicleInfo[slot][vVehicle]]) { AddVehicleMods(VehicleInfo[slot][vVehicle]); ResyncColors(VehicleInfo[slot][vVehicle]); sync_attribs[VehicleInfo[slot][vVehicle]] = 0; }
			if(VehicleInfo[slot][vSelling] > -1)
			{

			    if(gettime() >= VehicleInfo[slot][vSellingExpire])
			    {

			        if(!vehicle_creating)
			        {

			            vehicle_creating = 1;
				        SendMail(VehicleInfo[slot][vOwner],"Your sale has expired","Unfortunatelly your vehicle sale has expired, we couldnt find anyone that wanted your car!","Palomino Creek Used Vehicles",(slot + 20000));
						VehicleInfo[slot][vSelling] = -1;
						VehicleInfo[slot][vSellingExpire] = 0;
						VehicleInfo[slot][vSellingPrice] = 0;
						DestroyVehicle(VehicleInfo[slot][vVehicle]);
						VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
						if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
						sync_attribs[VehicleInfo[slot][vVehicle]] = 1;
						sync_engine_off[VehicleInfo[slot][vVehicle]] = 1;
						for(new bizes = 0; bizes < MAX_BIZES; bizes ++)
						{

							if(BizInfo[bizes][bType] == BIZ_TYPE_VAUCTION)
							{

							    for(new z = 0; z < 5; z ++)
							    {

							        if(used_vehicle_slots[bizes][z] == slot)
							        {

							            DestroyPickup(used_vehicle_pickups[bizes][z]);
							            used_vehicle_slots[bizes][z] = -1;
							            used_vehicle_pickups[bizes][z] = 0;

							        }

							    }

							}

						}
						vehicle_creating = 0;

					}

			    }

			}
			if(IsEngineOn(VehicleInfo[slot][vVehicle]) && !sync_engine_off[VehicleInfo[slot][vVehicle]] && !IsPushbike(GetVehicleModel(VehicleInfo[slot][vVehicle])))
			{

				if(fuel_interval[VehicleInfo[slot][vVehicle]] <= 0) { VehicleInfo[slot][vFuel] --; fuel_interval[VehicleInfo[slot][vVehicle]] = FetchFuelInterval(VehicleInfo[slot][vVehicle]); FuelCheck(VehicleInfo[slot][vVehicle]); }
				else if(fuel_interval[VehicleInfo[slot][vVehicle]] > 0) { fuel_interval[VehicleInfo[slot][vVehicle]] --; }

			}
			if(vehicle_alarm_time[VehicleInfo[slot][vVehicle]] == 1)
			{

			    StopAlarm(VehicleInfo[slot][vVehicle]);
			    vehicle_alarm_time[VehicleInfo[slot][vVehicle]] = 0;

			}
			if(vehicle_alarm_time[VehicleInfo[slot][vVehicle]] > 1)
			{

			    vehicle_alarm_time[VehicleInfo[slot][vVehicle]] --;

			}
			if(VehicleInfo[slot][vDeathTime] == 1)
			{

		        new vehowner = -1;
			    for(new a = 0; a < MAX_PLAYERS; a ++)
			    {

			        if(IsPlayerConnectedEx(a))
			        {

			            if(CharacterInfo[a][active_character[a]][cID] == VehicleInfo[slot][vOwner])
			            {

							vehowner = a;

			            }

			        }

			    }
			    if(vehowner > -1)
			    {

			        new vname[256];
					new str[256];
					GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
					format(str,sizeof(str),"You failed to redeem your %s in time. You have lost it!",vname);
					SendClientMessageA(vehowner,COLOR_LIGHTRED,str);
					VehicleInfo[slot][vOwner] = 0;
			        VehicleInfo[slot][vInsurance] = 0;
			        VehicleInfo[slot][vDestroyed] = 0;
			        VehicleInfo[slot][vModel] = 0;
			        VehicleInfo[slot][vSpawnX] = 0.0;
			        VehicleInfo[slot][vSpawnY] = 0.0;
			        VehicleInfo[slot][vSpawnZ] = 0.0;
			        VehicleInfo[slot][vDeathTime] = 0;
					format(str,sizeof(str),"UPDATE rp_vehicles SET truncated = 1 WHERE id = '%d'",VehicleInfo[slot][vID]);
					mysql_query(str,slot);

			  	}

			}
			if(VehicleInfo[slot][vDeathTime] > 1)
			{

			    VehicleInfo[slot][vDeathTime] --;

			}
			if(startup_delay[VehicleInfo[slot][vVehicle]] > 0)
			{
				startup_delay[VehicleInfo[slot][vVehicle]] --;
				if(startup_delay[VehicleInfo[slot][vVehicle]] == 0 && IsPlayerInVehicle(startup_delay_sender[VehicleInfo[slot][vVehicle]],VehicleInfo[slot][vVehicle]))
				{

					new vname[128];
					GetVehicleNameByModel(GetVehicleModel(VehicleInfo[slot][vVehicle]),vname);
					new str[128];
					format(str,sizeof(str),"starts the %s's engine",vname);
					SendEmote(startup_delay_sender[VehicleInfo[slot][vVehicle]],str);
					StartEngine(VehicleInfo[slot][vVehicle]);
					startup_delay_sender[VehicleInfo[slot][vVehicle]] = -1;

				}
				else if(startup_delay[VehicleInfo[slot][vVehicle]] == 0) { startup_delay_sender[VehicleInfo[slot][vVehicle]] = -1; }

			}

		}

	}
	for(new i = 0; i < MAX_VEHICLES; i ++)
	{

	    if(GetVehicleDistanceFromPoint(i,vpos[i][0],vpos[i][1],vpos[i][2]) > 15.0 && vpos[i][0] != 0.0 && vpos[i][1] != 0.0 && vpos[i][2] != 0.0)
	    {

	        if(!IsAnyPlayerInVehicle(i))
	        {
	
	            SetVehiclePosEx(i,vpos[i][0],vpos[i][1],vpos[i][2]);
	            SetVehicleZAngle(i,vpos[i][3]);
				printf("Vehicle ID: %d just travelled more than 15 meters with no one in it! Resetting its position.");
	
			}
			
		}
	    new Float:X, Float:Y, Float:Z, Float:R;
		GetVehiclePos(i,X,Y,Z);
		GetVehicleZAngle(i,R);
		vpos[i][0] = X;
		vpos[i][1] = Y;
		vpos[i][2] = Z;
		vpos[i][3] = R;
		

	
	}

}

public Weather()
{

	if(active_weather_expire > 1)
	{

	    active_weather_expire --;

	}
	else
	{

	    if(active_weather_stage == 1)
	    {

			active_weather_expire = WeatherProfiles[active_weather_queue][1];
			SetWeather(WeatherProfiles[active_weather_queue][0]);
			server_weather = WeatherProfiles[active_weather_queue][0];
			active_weather_stage = 0;

		}
		else
		{

		    active_weather_queue = random(sizeof(WeatherProfiles));
		    new str[128];
		    format(str,sizeof(str),"[Weather Forecast] %s",WeatherNames[active_weather_queue]);
		    SendWeatherBroadcast(str);
		    active_weather_expire = 300;
			active_weather_stage = 1;

		}
		for(new i = 0; i < MAX_PLAYERS; i ++)
		{

		    if(IsPlayerConnectedEx(i))
			{

		        if(heroin[i] && heroin_stage[i] < sizeof(heroin_stages)) { SetPlayerWeather(i,heroin_stages[heroin_stage[i]]); }

		    }

		}

	}

	for(new i = 0; i < sizeof(speed_camera_stats); i ++)
	{

		if(speed_camera_stats[i] > 1) { speed_camera_stats[i] --; }
		if(speed_camera_stats[i] == 1 && speed_camera_flash[i] > -1) { DestroyObject(speed_camera_flash[i]); speed_camera_flash[i] = -1; speed_camera_stats[i] = -1; }

	}


}

public Refresh()
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(character_chosen[i])
	        {

				LoadMail(i);

			}

	    }

	}
	beginSaveSequence();
	SendAdminBroadcast("[SERVER] Restart sequence started by: Automatic Save Service");
	oil_price = (200 + random(500));
	//RefreshStockMarket();
	RefreshMarketPrices();
	printf("Setting New Oil Price To: %d",oil_price);
	print("Refreshing.");
	RefreshPopulation();

}

public CreateTextDraws()
{

    announcetxt = TextDrawCreate(321.000000,138.000000,"Admin Notification");
    TextDrawAlignment(announcetxt,2);
	TextDrawBackgroundColor(announcetxt,0x000000ff);
	TextDrawFont(announcetxt,3);
	TextDrawLetterSize(announcetxt,0.399999,2.000000);
	TextDrawColor(announcetxt,0xffffffff);
	TextDrawSetOutline(announcetxt,1);
	TextDrawSetProportional(announcetxt,1);
	TextDrawSetShadow(announcetxt,1);

	logintxt = TextDrawCreate(310.000000,361.000000,"select your character~n~use the ~r~arrow keys~w~ to change character");
	TextDrawAlignment(logintxt,2);
	TextDrawBackgroundColor(logintxt,0x000000ff);
	TextDrawFont(logintxt,3);
	TextDrawLetterSize(logintxt,0.399999,1.800000);
	TextDrawColor(logintxt,0xffffffff);
	TextDrawSetOutline(logintxt,1);
	TextDrawSetProportional(logintxt,1);
	TextDrawSetShadow(logintxt,1);

	timetxt = TextDrawCreate(57.000000,321.000000,"Loading Time...");
	TextDrawAlignment(timetxt,0);
	TextDrawBackgroundColor(timetxt,0x000000ff);
	TextDrawFont(timetxt,3);
	TextDrawLetterSize(timetxt,0.399999,1.400000);
	TextDrawColor(timetxt,0xffffffff);
	TextDrawSetOutline(timetxt,1);
	TextDrawSetProportional(timetxt,1);
	TextDrawSetShadow(timetxt,1);

    mailmsg = TextDrawCreate(548.000000,11.000000,"~p~new mail!");
    TextDrawAlignment(mailmsg,0);
	TextDrawBackgroundColor(mailmsg,0x000000ff);
	TextDrawFont(mailmsg,3);
	TextDrawLetterSize(mailmsg,0.299999,1.200000);
	TextDrawColor(mailmsg,0xffffffff);
	TextDrawSetOutline(mailmsg,1);
	TextDrawSetProportional(mailmsg,1);
	TextDrawSetShadow(mailmsg,1);

	mailhelp = TextDrawCreate(385.000000,377.000000,"use the arrow keys to move between mesages~n~press ~r~~k~~PED_SPRINT~ ~w~to delete a message");
	TextDrawAlignment(mailhelp,2);
	TextDrawBackgroundColor(mailhelp,0x000000ff);
	TextDrawFont(mailhelp,3);
	TextDrawLetterSize(mailhelp,0.299999,1.000000);
	TextDrawColor(mailhelp,0xffffffff);
	TextDrawSetOutline(mailhelp,1);
	TextDrawSetProportional(mailhelp,1);
	TextDrawSetShadow(mailhelp,1);

	mailnav = TextDrawCreate(323.000000,373.000000,"Press ~r~~k~~PED_SPRINT~~w~ to delete this message~n~use ~r~~k~~SNEAK_ABOUT~~w~ to leave message");
	TextDrawAlignment(mailnav,2);
	TextDrawBackgroundColor(mailnav,0x000000ff);
	TextDrawFont(mailnav,3);
	TextDrawLetterSize(mailnav,0.299999,1.600000);
	TextDrawColor(mailnav,0xffffffff);
	TextDrawSetOutline(mailnav,1);
	TextDrawSetProportional(mailnav,1);
	TextDrawSetShadow(mailnav,1);

	ucp_txt = TextDrawCreate(363.000000,373.000000,"Please go to the UCP: ~p~ucp.countrysidegaming.com~w~ to create a character!");
	TextDrawAlignment(ucp_txt,2);
	TextDrawBackgroundColor(ucp_txt,0x000000ff);
	TextDrawFont(ucp_txt,3);
	TextDrawLetterSize(ucp_txt,0.299999,1.400000);
	TextDrawColor(ucp_txt,0xffffffff);
	TextDrawSetOutline(ucp_txt,1);
	TextDrawSetProportional(ucp_txt,1);
	TextDrawSetShadow(ucp_txt,1);

	crash_screen = TextDrawCreate(1.000000,-1.000000,"_");
	TextDrawUseBox(crash_screen,1);
	TextDrawBoxColor(crash_screen,0xff000066);
	TextDrawTextSize(crash_screen,641.000000,0.000000);
	TextDrawAlignment(crash_screen,0);
	TextDrawBackgroundColor(crash_screen,0x000000ff);
	TextDrawFont(crash_screen,3);
	TextDrawLetterSize(crash_screen,4.599999,50.399879);
	TextDrawColor(crash_screen,0xff000066);
	TextDrawSetOutline(crash_screen,1);
	TextDrawSetProportional(crash_screen,1);
	TextDrawSetShadow(crash_screen,1);

	logo = TextDrawCreate(208.000000,126.000000,"~b~CountrySide~w~Gaming");
	TextDrawAlignment(logo,0);
	TextDrawBackgroundColor(logo,0x000000ff);
	TextDrawFont(logo,3);
	TextDrawLetterSize(logo,1.000000,2.599999);
	TextDrawColor(logo,0xffffffff);
	TextDrawSetOutline(logo,1);
	TextDrawSetProportional(logo,1);
	TextDrawSetShadow(logo,1);

	stocktitle = TextDrawCreate(18.000000,126.000000,"~p~stock market");
	stockcontent = TextDrawCreate(19.000000,143.000000,"Loading...");
	TextDrawUseBox(stockcontent,1);
	TextDrawBoxColor(stockcontent,0x00000066);
	TextDrawTextSize(stockcontent,317.000000,0.000000);
	TextDrawAlignment(stocktitle,0);
	TextDrawAlignment(stockcontent,0);
	TextDrawBackgroundColor(stocktitle,0x000000ff);
	TextDrawBackgroundColor(stockcontent,0x000000ff);
	TextDrawFont(stocktitle,1);
	TextDrawLetterSize(stocktitle,0.499999,1.700000);
	TextDrawFont(stockcontent,2);
	TextDrawLetterSize(stockcontent,0.299999,1.700000);
	TextDrawColor(stocktitle,0xffffffff);
	TextDrawColor(stockcontent,0xffffffff);
	TextDrawSetOutline(stocktitle,1);
	TextDrawSetOutline(stockcontent,1);
	TextDrawSetProportional(stocktitle,1);
	TextDrawSetProportional(stockcontent,1);
	TextDrawSetShadow(stocktitle,1);
	TextDrawSetShadow(stockcontent,1);

	print("Text Draws Created.");

}

/*******TIMERS********/

public GeneralListener()
{

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++)
	{

	    if(IsPlayerConnectedEx(playerid) && !IsPlayerNPC(playerid) && character_chosen[playerid])
	    {

        	afk_movement[playerid] --;
			if(prisoner[playerid])
			{

				if(!HasCell(playerid))
				{

					ResetSpawnStuff(playerid);
				    ProcessSpawn(playerid);
					GameTextForPlayer(playerid,"~g~Released from prison.",5000,1);
					prisoner[playerid] = 0;

				}

			}
        	if(prison_alarm > 0)
        	{

        	    if(IsPlayerInRangeOfPoint(playerid,500.0,1807.1791,-1539.6235,5700.4302) && !playing_prison_alarm[playerid])
        	    {

        	        PlayerPlaySound(playerid,9200,0.0,0.0,0.0);
        	        playing_prison_alarm[playerid] = 1;

        	    }
        	    else if(playing_prison_alarm[playerid] && !IsPlayerInRangeOfPoint(playerid,500.0,1807.1791,-1539.6235,5700.4302))
        	    {

        	    	PlayerPlaySound(playerid,4202,0.0,0.0,0.0);
        	        playing_prison_alarm[playerid] = 0;

        	    }

        	}
			else if(prison_alarm == 0 && playing_prison_alarm[playerid])
        	{

        	    PlayerPlaySound(playerid,4202,0.0,0.0,0.0);
        	    playing_prison_alarm[playerid] = 0;

        	}
			new boom_box = GetClosestBoomBox(playerid,35.0);
			if(boom_box > -1)
			{

			    if(strlen(BoomBoxInfo[boom_box][boStream]))
			    {

			        if(streaming_boombox[playerid] != boom_box)
			        {

			            if(Audio_IsClientConnected(playerid))
			            {

				            boom_box_handle[playerid] = Audio_PlayStreamed(playerid,BoomBoxInfo[boom_box][boStream]);
				            Audio_Set3DPosition(playerid,boom_box_handle[playerid],BoomBoxInfo[boom_box][boX],BoomBoxInfo[boom_box][boY],BoomBoxInfo[boom_box][boZ],35.0);
				            Audio_SetVolume(playerid,boom_box_handle[playerid],100);
				            streaming_boombox[playerid] = boom_box;

				        }

			        }

			    }

			}
			else if(boom_box == -1 && streaming_boombox[playerid] != -1)
			{

			    if(Audio_IsClientConnected(playerid))
			    {

					streaming_boombox[playerid] = -1;
					Audio_Stop(playerid,boom_box_handle[playerid]);
					boom_box_handle[playerid] = -1;

				}

			}
			if(afk_movement[playerid] <= 0)
			{

				afk_reset[playerid] = 1;
				SaveStats(playerid);

			}
    		if(GetPlayerMoney(playerid) != CharacterInfo[playerid][active_character[playerid]][cMoney])
			{

			    if(!in_modshop[playerid])
			    {

			        ResetPlayerMoney(playerid);
					GivePlayerMoney(playerid,CharacterInfo[playerid][active_character[playerid]][cMoney]);

				}
				else
				{

				    if(GetPlayerMoney(playerid) < CharacterInfo[playerid][active_character[playerid]][cMoney])
					{

				        new diff = (CharacterInfo[playerid][active_character[playerid]][cMoney] - GetPlayerMoney(playerid));
						CharacterInfo[playerid][active_character[playerid]][cMoney] = GetPlayerMoney(playerid);
						BizInfo[in_biz[playerid]][bBank] += diff;

				    }
				    else
				    {

				        ResetPlayerMoney(playerid);
						GivePlayerMoney(playerid,CharacterInfo[playerid][active_character[playerid]][cMoney]);

				    }
				}

			}
			if(worklog_cooldown[playerid] > 0) { worklog_cooldown[playerid] --; }
			if(fly_school_countdown[playerid] > 0) { fly_school_countdown[playerid] --; }
			if(fly_school_countdown[playerid] == 1) { fly_school_countdown[playerid] = 0; RefreshFlySchoolStage(playerid); }
			if(ac_cooldown[playerid] > 0) { ac_cooldown[playerid] --; }
			if(phone_calling[playerid] > -1)
			{

			    phone_bill[playerid] ++;

			}
			if(progress_wait[playerid] >= 1 && progress_wait[playerid] < progress_wait_max[playerid])
			{

				ShowProgressBarForPlayer(playerid,progress_bar[playerid]);
	            new Float:tmp = progress_wait[playerid];
	            new Float:tmp2 = progress_wait_max[playerid];
	            new Float:prog = ((tmp / tmp2) * 100.0);
	            SetProgressBarValue(progress_bar[playerid],prog);
	            ShowProgressBarForPlayer(playerid,progress_bar[playerid]);
				progress_wait[playerid] ++;

			}
			if(progress_wait[playerid] == progress_wait_max[playerid])
			{

				SetProgressBarValue(progress_bar[playerid],0.0);
				HideProgressBarForPlayer(playerid,progress_bar[playerid]);
				progress_wait[playerid] = 0;
				progress_wait_max[playerid] = 0;
				OnProgressBarFinish(playerid,progress_wait_type[playerid]);
				progress_wait_type[playerid] = PROGRESS_BAR_INVALID;

			}
			if(derby_sys_driver[playerid])
			{

			    new Float:X, Float:Y, Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    if(Z < 1033.0 && !derby_sys_respawn[playerid])
			    {

			        new name[MAX_PLAYER_NAME], str[128];
			        GetCharacterName(playerid,name);
					format(str,sizeof(str),"[DERBY] %s has fallen off the platform, looks like they are out of the derby!",name);
					SendDerbyNews(str);
			        OnPlayerLeaveDerby(playerid);

			    }

			}
			if(gps_cooldown[playerid] > 0) { gps_cooldown[playerid] --; }
			if(find_cooldown[playerid] > 0) { find_cooldown[playerid] --; }
	        if(trace_cooldown[playerid] > 0) { trace_cooldown[playerid] --; }
	        if(CharacterInfo[playerid][active_character[playerid]][cChopCooldown] > 0) { CharacterInfo[playerid][active_character[playerid]][cChopCooldown] --; }
	        if(tenant_cooldown[playerid] > 0) { tenant_cooldown[playerid] --; }
	        if(timetxt_expire[playerid] > 1)
	        {

	            timetxt_expire[playerid] --;

	        }
	        if(timetxt_expire[playerid] == 1)
	        {

	            TextDrawHideForPlayer(playerid,timetxt);
	            timetxt_expire[playerid] = 0;

	        }
	        if(infotxt_expire[playerid] > 1)
	        {

	            infotxt_expire[playerid] --;

	        }
	        if(infotxt_expire[playerid] == 1)
	        {

                TextDrawHideForPlayer(playerid,infotxt[playerid]);
                infotxt_expire[playerid] = 0;

	        }
	        if(hunger_set_expire[playerid] > 1)
	        {

				hunger_set_expire[playerid] --;

			}
			if(hunger_set_expire[playerid] == 1)
			{

				if(!heroin[playerid])
				{

				    new Float:hp;
				    GetPlayerHealth(playerid,hp);
				   	SetPlayerHealth(playerid,(hp - 1));
				    hunger_set_expire[playerid] = 121;

				}
				else
				{

					new Float:hp;
				    GetPlayerHealth(playerid,hp);
				    SetPlayerHealth(playerid,(hp + 2));
				    hunger_set_expire[playerid] = 60;

				}

			}
			if(IsPlayerInAnyVehicle(playerid))
			{

			    new str[128];
			    new Float:speed_x, Float:speed_y, Float:speed_z;
				GetVehicleVelocity(GetPlayerVehicleID(playerid),speed_x,speed_y,speed_z);
				new Float:final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*99.4166672; // 250.666667 = kmph  // 199,4166672 = mph
				new speed = floatround(final_speed,floatround_round);
				player_vehicle_speed[playerid] = speed;
				new seatb[64];
				if(seatbelt[playerid]) { format(seatb,sizeof(seatb),"~g~Yes"); } else { format(seatb,sizeof(seatb),"~r~No"); }
			    format(str,sizeof(str),"Speed: ~p~%d MPH ~w~Seatbelt: ~p~%s",speed,seatb);
			    if(speed > 200)
			    {

			        SendCheatAlert(playerid,CHEAT_SPEEDHACK,speed);

			    }
			    new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
			    if(slot > -1)
			    {

			        if(VehicleInfo[slot][vMileage] < 9999999)
			        {

			        	VehicleInfo[slot][vMileage] += GetPlayerMileage(playerid,true);

			        }
			        new fuel = VehicleInfo[slot][vFuel];
			        new tmp[64];
			        format(tmp,sizeof(tmp)," ~w~Fuel: ~p~%d",fuel);
			        strins(str,tmp,strlen(str));

			    }
			    if(speedo_active[playerid] && !filling[playerid]) { TextDrawSetString(speedo_txt[playerid],str); }
			    if(driving_test[playerid] && speed > 60.0) { driving_test_failed[playerid] = 1; }

			}
			if(drug_effect[playerid] > 0)
			{

			    drug_effect[playerid] --;

			}
			if(InTaxi(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{

			    if(fare_time[playerid] == 0 && fare_filler[playerid] == -1 && taxi_send_cooldown[playerid] == 0)
			    {

			        new num = random(100);
			        if(num >= 95)
			        {

						SendTaxiMission(playerid);
						taxi_send_cooldown[playerid] = 300;

			        }

			    }

			}
			if(fare_time[playerid] > 0)
			{

			    if(fare_cooldown[playerid] > 0)
				{

					fare_cooldown[playerid] --;

				}
				else
				{

				    if(fare_increment[playerid] > 0)
				    {

						fare_increment[playerid] --;

				    }
				    else
				    {
				        fare_increment[playerid] = 2;
					    fare_time[playerid] ++;
					    new str[126];
					    format(str,sizeof(str),"~n~ ~n~ ~n~ ~n~ ~n~FARE: ~r~$%d",(fare_time[playerid] - 1));
					    GameTextForPlayer(playerid,str,5000,5);
						GameTextForPlayer(fare_passenger[playerid],str,5000,5);
					}

				}

			}
			if(CharacterInfo[playerid][active_character[playerid]][cJailTime] > 1 && AccountInfo[playerid][aJailTime] == 0)
			{
				CharacterInfo[playerid][active_character[playerid]][cJailTime] --;
				new mins = (CharacterInfo[playerid][active_character[playerid]][cJailTime] / 60);
				new str[64];
				if(mins > 0) { format(str,sizeof(str),"~p~time left: ~w~%d mins",mins); } else { format(str,sizeof(str),"~p~time left: ~w~%d seconds",CharacterInfo[playerid][active_character[playerid]][cJailTime]); }
				TextDrawSetString(jail_timeleft[playerid],str);
				TextDrawShowForPlayer(playerid,jail_timeleft[playerid]);
			}
			else if(CharacterInfo[playerid][active_character[playerid]][cJailTime] == 1)
			{

				CharacterInfo[playerid][active_character[playerid]][cJailTime] = 0;
				GameTextForPlayer(playerid,"~g~Released from jail",5000,1);
				TextDrawHideForPlayer(playerid,jail_timeleft[playerid]);
				in_interior[playerid] = -1;
				in_house[playerid] = -1;
				in_biz[playerid] = -1;
				SetPlayerPos(playerid,2252.5598,-20.1387,26.5387);
				SetPlayerFacingAngle(playerid,1800);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);

			}
			if(AccountInfo[playerid][aJailTime] > 1)
			{
				AccountInfo[playerid][aJailTime] --;
				new mins = (AccountInfo[playerid][aJailTime] / 60);
				new str[64];
				if(mins > 0) { format(str,sizeof(str),"~p~time left: ~w~%d mins",mins); } else { format(str,sizeof(str),"~p~time left: ~w~%d seconds",AccountInfo[playerid][aJailTime]); }
				TextDrawSetString(jail_timeleft[playerid],str);
				TextDrawShowForPlayer(playerid,jail_timeleft[playerid]);
			}
			else if(AccountInfo[playerid][aJailTime] == 1)
			{

				AccountInfo[playerid][aJailTime] = 0;
				ProcessSpawn(playerid);
				GameTextForPlayer(playerid,"~g~Released from jail",5000,1);
				TextDrawHideForPlayer(playerid,jail_timeleft[playerid]);

			}
			if(hotwire_cooldown[playerid] > 0) { hotwire_cooldown[playerid] --; }
			if(vehicle_select_cooldown[playerid] > 0) { vehicle_select_cooldown[playerid] --; }
			if(taze_time[playerid] > 1) { taze_time[playerid] --; }
			if(taze_time[playerid] == 1) { taze_time[playerid] = 0; TogglePlayerControllable(playerid,1); }
			if(CharacterInfo[playerid][active_character[playerid]][cPayTime] == 0) { CharacterInfo[playerid][active_character[playerid]][cPayTime] = 3600; TriggerPayday(playerid); }
			if(CharacterInfo[playerid][active_character[playerid]][cPayTime] > 0) { CharacterInfo[playerid][active_character[playerid]][cPayTime] --; }
			if(taxi_send_cooldown[playerid] > 0) { taxi_send_cooldown[playerid] --; }
			if(leave_spray[playerid] == 1) { if(IsPlayerInAnyVehicle(playerid)) { new biz = in_biz[playerid]; new veh = GetPlayerVehicleID(playerid); SetVehiclePosEx(veh,BizInfo[biz][bSpawnX],BizInfo[biz][bSpawnY],BizInfo[biz][bSpawnZ]); leave_spray[playerid] = 0; TogglePlayerControllable(playerid,1); in_biz[playerid] = -1; } }
			if(leave_spray[playerid] > 0) { leave_spray[playerid] --; }
			if(declare_fare_cooldown[playerid] > 0) { declare_fare_cooldown[playerid] --; }
			if(CharacterInfo[playerid][active_character[playerid]][cJobCooldown] > 0) { CharacterInfo[playerid][active_character[playerid]][cJobCooldown] --; }
			if(note_cmd_cooldown[playerid] > 0) { note_cmd_cooldown[playerid] --; }
			if(death_respawn_time[playerid] == 1) { death_respawn_time[playerid] = 0; death_mode[playerid] = 0; ResetSpawnLocation(playerid); ProcessSpawn(playerid); }
			if(death_respawn_time[playerid] > 1) { death_respawn_time[playerid] --; }
			if(death_cooldown[playerid] > 0) { death_cooldown[playerid] --; new mins = ((death_cooldown[playerid] / 60) % (60 * 60)); new secs = (death_cooldown[playerid] % 60); new str[128]; format(str,sizeof(str),"~n~ ~n~ ~n~ ~n~ ~n~ Give up in: ~r~%d:%d",mins,secs); GameTextForPlayer(playerid,str,5000,5); if(death_cooldown[playerid] == 1) { SendClientMessage(playerid,COLOR_YELLOW,"You can now use /giveup to give up."); } }
			if(cpr_cooldown[playerid] > 0) { cpr_cooldown[playerid] --; }
			if(defib_cooldown[playerid] > 0) { defib_cooldown[playerid] --; }
			if(heroin_expire[playerid] == 1) { heroin_stage[playerid] ++; RefreshHeroinStage(playerid); }
			if(heroin_expire[playerid] > 1) { heroin_expire[playerid] --; }
			if(unlock_cooldown[playerid] > 0) { unlock_cooldown[playerid] --; }
			if(speedcamera_cooldown[playerid] > 0) { speedcamera_cooldown[playerid] --; }
			if(callreq_cooldown[playerid] > 0) { callreq_cooldown[playerid] --; }
			if(cloth_cooldown[playerid] > 0) { cloth_cooldown[playerid] --; }
			if(radio_cooldown[playerid] > 0) { radio_cooldown[playerid] --; }
			if(pizza_mission[playerid] > -1) { pizza_mission_time[playerid] ++; }
			if(trick_treat_cooldown[playerid] > 0) { trick_treat_cooldown[playerid] --; }
			if(sleeping[playerid])
			{

				new Float:hp;
				GetPlayerHealth(playerid,hp);
				if(hp < GetHouseMaxSleepHp(in_house[playerid]))
				{

				    hp += 1.0;
				    SetPlayerHealth(playerid,hp);
				    new chance = random(100);
				    if(chance > 90) { SendEmote(playerid,"snores..."); }

				}
				else
				{

				    SendEmote(playerid,"wakes up");
					TogglePlayerControllable(playerid,1);
				    CallLocalFunction("cmd_stopanim","is",playerid,"1");
					sleeping[playerid] = 0;

				}

			}
			if(CharacterInfo[playerid][active_character[playerid]][cAddiction])
			{

				if(addiction_runtime[playerid] > 1)
				{

				    addiction_runtime[playerid] --;

				}
				else if(addiction_runtime[playerid] == 1)
				{

					if(CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] > 1)
					{

						SendAddictionAction(playerid);

					}
					else
					{

					    CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] = 0;
					    CharacterInfo[playerid][active_character[playerid]][cAddiction] = 0;
					    SendClientMessage(playerid,COLOR_YELLOW,"You are no longer addicted to drugs.");

					}

				}

			}
			if(in_repair_time[playerid] == 1)
			{
			    new Float:X, Float:Y, Float:Z;
			    GetVehiclePos(in_repair[playerid],X,Y,Z);
				if(IsPlayerInRangeOfPoint(playerid,15.0,X,Y,Z))
				{
				    RepairVehicleEx(in_repair[playerid]);
					new str[128];
					format(str,sizeof(str),"Finishes repairing the nearby vehicle.");
					SendEmote(playerid,str);
					vehicle_repairing[in_repair[playerid]] = 0;
					in_repair[playerid] = -1;
					in_repair_time[playerid] = 0;
					GameTextForPlayer(playerid,"~g~Vehicle repaired",5000,5);
				}
				else
				{

				    GameTextForPlayer(playerid,"~r~You are no longer in range of the vehicle!",5000,5);
				    vehicle_repairing[in_repair[playerid]] = 0;
					in_repair[playerid] = -1;
					in_repair_time[playerid] = 0;

				}
			}
			if(in_repair_time[playerid] > 1) { in_repair_time[playerid] --; new str[128]; format(str,sizeof(str),"repairing Vehicle ~r~%d~w~ seconds remaining",in_repair_time[playerid]); GameTextForPlayer(playerid,str,1000,5); }
			if(in_respray_time[playerid] == 1)
			{
			    new Float:X, Float:Y, Float:Z;
			    GetVehiclePos(VehicleInfo[in_respray[playerid]][vVehicle],X,Y,Z);
				if(IsPlayerInRangeOfPoint(playerid,15.0,X,Y,Z))
				{
					ChangeVehicleColor(VehicleInfo[in_respray[playerid]][vVehicle],in_respray_col1[playerid],in_respray_col2[playerid]);
					VehicleInfo[in_respray[playerid]][vColor1] = in_respray_col1[playerid];
					VehicleInfo[in_respray[playerid]][vColor2] = in_respray_col2[playerid];
					new str[128];
					format(str,sizeof(str),"Finishes Respraying the nearby vehicle.");
					SendEmote(playerid,str);
					vehicle_respraying[in_respray[playerid]] = 0;
					in_respray[playerid] = -1;
					in_respray_time[playerid] = 0;
					GameTextForPlayer(playerid,"~g~Vehicle resprayed",5000,5);
				}
				else
				{

				    GameTextForPlayer(playerid,"~r~You are no longer in range of the vehicle!",5000,5);
				    vehicle_respraying[in_respray[playerid]] = 0;
					in_respray[playerid] = -1;
					in_respray_time[playerid] = 0;

				}
			}
			if(in_respray_time[playerid] > 1) { in_respray_time[playerid] --; new str[128]; format(str,sizeof(str),"Respraying Vehicle ~r~%d~w~ seconds remaining",in_respray_time[playerid]); GameTextForPlayer(playerid,str,1000,5); }
			if(IsLaw(playerid) || IsMedic(playerid))
			{

				if(duty[playerid])
				{

					CharacterInfo[playerid][active_character[playerid]][cPayday] += 2;

				}

			}
			if(IsNews(playerid) || IsGov(playerid))
			{

				if(news_expire[playerid] == 0)
				{

					news_expire[playerid] = 2;
					CharacterInfo[playerid][active_character[playerid]][cPayday] ++;

				}
				news_expire[playerid] --;

			}
			if(spectating[playerid] > -1 && AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
			{

				if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(spectating[playerid])) { SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(spectating[playerid])); }
				if(GetPlayerInterior(playerid) != GetPlayerInterior(spectating[playerid])) { SetPlayerInterior(playerid,GetPlayerInterior(spectating[playerid])); }
				if(IsPlayerInAnyVehicle(spectating[playerid]) && spectate_type[playerid] != 2) { PlayerSpectateVehicle(playerid,GetPlayerVehicleID(spectating[playerid])); spectate_type[playerid] = 2; }
				if(!IsPlayerInAnyVehicle(spectating[playerid]) && spectate_type[playerid] != 1) { PlayerSpectatePlayer(playerid,spectating[playerid]); spectate_type[playerid] = 1; }

			}
			if(aduty[playerid] && AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN) { new Float:hp; GetPlayerHealth(playerid,hp); if(hp < 100.0) { SetPlayerHealth(playerid,100); } }
            if((GetPlayerScore(playerid) != CharacterInfo[playerid][active_character[playerid]][cLevel]) && character_chosen[playerid]) { SetPlayerScore(playerid,CharacterInfo[playerid][active_character[playerid]][cLevel]); }
            for(new a = 0; a < 3; a ++)
			{

				if(ErrorInfo[playerid][a][eExpire] > 1)
				{
					ErrorInfo[playerid][a][eExpire] --;
				}
				if(ErrorInfo[playerid][a][eExpire] == 1)
				{
					ErrorInfo[playerid][a][eExpire] = 0;
					RefreshErrorMsg(playerid);
				}

			}
            new Float:hp;
            GetPlayerHealth(playerid,hp);
			if(hp > 100) { SetPlayerHealth(playerid,100.0); }

		}
	}
	new hour, mins, sec;
	new d,m,y;
	getdate(y,m,d);
	new hourstr[4], minstr[4], secstr[4];
	new str[256];
	gettime(hour,mins,sec);
	if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
	if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
	if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
	format(str,sizeof(str),"%s:%s:%s",hourstr,minstr,secstr);
	TextDrawSetString(timetxt,str);

	if(active_hour != hour) { SetWorldTime(hour); active_hour = hour; }

	if(ad_cooldown > 0) { ad_cooldown --; }
	if(announcetxt_expire > 0) { announcetxt_expire --; if(announcetxt_expire == 0) { TextDrawHideForAll(announcetxt); } }
}

public OnGameModeExit()
{
	SaveHouses();
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    SpawnPlayer(playerid);
	return 1;
}

public OnPlayerConnect(playerid)
{

	AccountReset(playerid);
    ResetStats(playerid);
	ResetCharacters(playerid);
    ConfigPlayer(playerid);
	if(server_restarting) { SendClientMessage(playerid,COLOR_OOC,"SERVER RESTARTING. RECONNECT."); Kick(playerid); }
	if(!IsPlayerNPC(playerid))
	{

	    CheckAccountInuse(playerid);
		new name[MAX_PLAYER_NAME];
		GetPlayerName(playerid,name,sizeof(name));
		AccountExists(name,playerid);
		CreatePlayerTextDraws(playerid);
		active_players ++;
		LogConnection(playerid);

	}

}

public OnPlayerDisconnect(playerid, reason)
{

	if(character_chosen[playerid])
	{
	    if(logged[playerid])
	    {
	        if(death_mode[playerid])
         	{

       			if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 20000)
				{

				    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 20000;
				    CharacterInfo[playerid][active_character[playerid]][cDeaths] ++;

				}
				else
				{

				    CharacterInfo[playerid][active_character[playerid]][cMoney] = 5000;
				    CharacterInfo[playerid][active_character[playerid]][cDeaths] ++;

				}
				ResetInventory(playerid,true);

	        }
	        if(phone_incall[playerid] > -1) HangupCall(playerid);
	        if(nascar_sys_driver[playerid]) OnPlayerLeaveNascar(playerid);
			SaveLocation(playerid);
			SaveStats(playerid);
			RunDisconnect(playerid);
			DisconnectTaxi(playerid);
			if(garbage_run[playerid] > -1) { OnPlayerEndGarbage(playerid); }
			SendDisconnectMsg(playerid,reason);

		}
	}
	if(!IsPlayerNPC(playerid))
	{

		active_players --;

	}
	DestroyPlayerTextDraws(playerid);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(!IsPlayerNPC(playerid))
	{
		ProcessSpawn(playerid);
	} else { qs_InitNPC(playerid); }
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerConnectedEx(playerid) && !aduty[playerid])
	{

	    if(!nascar_sys_driver[playerid] && !derby_sys_driver[playerid])
	    {

			if(!death_mode[playerid])
			{

				if(killerid != INVALID_PLAYER_ID) LogPlayerDeath(playerid,killerid,reason);
				EnterDeathMode(playerid);
				mask_on[playerid] = false;
				if(IsPlayerInAnyVehicle(playerid)) { TextDrawHideForPlayer(playerid,speedo_txt[playerid]); }
				StopPlayerRadio(playerid);
				if(pizza_mission[playerid] > -1) { CallLocalFunction("cmd_cancelpizza","is",playerid,"1"); }
				seatbelt[playerid] = 0;
				if(in_fly_school[playerid])
				{

				    DestroyVehicle(in_fly_school_veh[playerid]);
					in_biz[playerid] = -1;
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					in_fly_school_veh[playerid] = -1;
					in_fly_school[playerid] = 0;
					fly_school_step[playerid] = 0;
					fly_school_stage[playerid] = 0;

				}

			}
			else
			{

			    OnPlayerGiveup(playerid);

			}

		}
		else
		{

			if(nascar_sys_driver[playerid])
			{

			    nascar_sys_respawn[playerid] = 1;
			    new name[MAX_PLAYER_NAME];
			    GetCharacterName(playerid,name);
			    new str[128];
			    format(str,sizeof(str),"[NASCAR] OUCH! %s has wrecked their vehicle! Looks like they are out of the race!",name);
			    new tmp = GetPlayerVehicleID(playerid);
			    DestroyVehicle(tmp);
			    SendNascarNews(str);

			 }
			 else
			 {

			    derby_sys_respawn[playerid] = 1;
			    new name[MAX_PLAYER_NAME];
			    GetCharacterName(playerid,name);
			    new str[128];
			    format(str,sizeof(str),"[DERBY] HOW EMBARRASSING! %s has wrecked their vehicle! Looks like they are out of the derby!",name);
			    new tmp = GetPlayerVehicleID(playerid);
			    DestroyVehicle(tmp);
			    SendDerbyNews(str);

			 }

		}

	}
	return 1;
}

public OnPlayerCommandText(playerid,cmdtext[])
{

	if (isnull(cmdtext))
	{

	   	printf("Is Null CMDTEXT detected");
	    return 0;

	}
	return 0;

}

public OnVehicleSpawn(vehicleid)
{

	ReSetVehiclePosEx(vehicleid);
    if(IsRentCar(vehicleid)) { StopEngine(vehicleid); ResetRenters(vehicleid); }
	if(vehicleid == dmv_vehicles[0] || vehicleid == dmv_vehicles[1])
	{
		SetVehicleParamsEx(dmv_vehicles[0], 1, 0, 0, 1, 0, 0, 0);
		SetVehicleParamsEx(dmv_vehicles[1], 1, 0, 0, 1, 0, 0, 0);
	}
	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{

        DisableNeonsAndSirens(vehicleid);
		sync_attribs[vehicleid] = 1;
	    if(!IsPushbike(GetVehicleModel(vehicleid))) { StopEngine(vehicleid); } else if(IsPushbike(GetVehicleModel(vehicleid))) { StartEngine(vehicleid); }
	    sync_engine_off[vehicleid] = 1;
		if(!IsPushbike(GetVehicleModel(vehicleid))) { LockVehicle(vehicleid); } else if(IsPushbike(GetVehicleModel(vehicleid))) { UnlockVehicle(vehicleid); }
	    if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(vehicleid,VehicleInfo[slot][vPlate]); }
	   	SetVehicleDamage(vehicleid);

	}
	return 1;
}

public GetConnectedVehicleOwnerID(vehicleid)
{

	new vehowner = -1;
	new slot = GetVehicleSlot(vehicleid);
	if(slot == -1) { return -1; }
    for(new i = 0; i < MAX_PLAYERS; i ++)
    {

        if(IsPlayerConnectedEx(i))
        {

            if(CharacterInfo[i][active_character[i]][cID] == VehicleInfo[slot][vOwner])
            {

				vehowner = i;

            }

        }

    }
    return vehowner;

}

public OnVehicleDeath(vehicleid, killerid)
{

	ReSetVehiclePosEx(vehicleid);
	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{

		new vehowner = GetConnectedVehicleOwnerID(vehicleid);
	    if(vehowner > -1 && !IsDonatorVehicle(GetVehicleModel(vehicleid)))
	    {
	        LogVehicleDeath(vehicleid,killerid);
	        ClearMods(vehicleid);
	        if(VehicleInfo[slot][vInsurance] > 1)
	        {

				new vname[256];
				new str[256];
				GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
		        VehicleInfo[slot][vInsurance] --;
		        VehicleInfo[slot][vDestroyed] ++;
				format(str,sizeof(str),"Your %s has been destroyed! Your insurance company has covered you for the damage.. You have %d insurances left.",vname,VehicleInfo[slot][vInsurance]);
				SendClientMessageA(vehowner,COLOR_LIGHTRED,str);
				ClearVehicleInventory(slot);
				VehicleInfo[slot][vNeon] = 0;
				VehicleInfo[slot][vNeonState] = 0;
				RefreshNeon(slot);

			}
			else
			{

				new price_of_car = FetchVehiclePrice(VehicleInfo[slot][vModel]);
				new price_to_keep_car = floatround((price_of_car / 2) + (price_of_car * 0.10));
		        new vname[256];
				new str[256];
				GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
				VehicleInfo[slot][vInsurance] = 0;
		        VehicleInfo[slot][vDestroyed] ++;
				format(str,sizeof(str),"Your %s has been destroyed! You do not have any insurance. You can get your vehicle back by using /acceptcharge",vname);
				SendClientMessageA(vehowner,COLOR_LIGHTRED,str);
				format(str,sizeof(str),"within the next 90 minutes for $%d",price_to_keep_car);
				SendClientMessageA(vehowner,COLOR_LIGHTRED,str);
				DestroyVehicle(VehicleInfo[slot][vVehicle]);
				VehicleInfo[slot][vDeathTime] = 5400;
		        VehicleInfo[slot][vVehicle] = 0;
		        ClearVehicleInventory(slot);
		        VehicleInfo[slot][vNeon] = 0;
		        VehicleInfo[slot][vNeonState] = 0;
		        RefreshNeon(slot);

			}

	    }
		ResetVehicleDamage(vehicleid);

	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	afk_movement[playerid] = AFK_TIME;
	if(character_chosen[playerid])
	{

	    if(calling_san[playerid])
		{

	        SendSANCall(playerid,text);
	        return 0;

	    }
	    if(racing_sys_writing[playerid] > -1)
	    {

	        new amount = strval(text);
	        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= amount)
	        {

				if(amount >= 100 && amount <= 10000)
				{

				    CharacterInfo[playerid][active_character[playerid]][cMoney] -= amount;
				    racing_sys_ticket[playerid] = racing_sys_writing[playerid];
				    racing_sys_stake[playerid] = amount;
				    racing_sys_writing[playerid] = -1;
				    new str[128];
					SendClientMessage(playerid,COLOR_YELLOW,"|-----Betting Slip-----|");
					format(str,sizeof(str),"Your bet has been successfully placed!");
					SendClientMessage(playerid,COLOR_YELLOW,str);
					format(str,sizeof(str),"You have bet on: %s",racing_sys_names[racing_sys_ticket[playerid]]);
					SendClientMessage(playerid,COLOR_YELLOW,str);
					format(str,sizeof(str),"Your bet: $%d",amount);
					SendClientMessage(playerid,COLOR_YELLOW,str);
					format(str,sizeof(str),"Odds: %d/%d",racing_sys_odds[racing_sys_ticket[playerid]][0],racing_sys_odds[racing_sys_ticket[playerid]][1]);
					SendClientMessage(playerid,COLOR_YELLOW,str);
     				TogglePlayerControllable(playerid,1);
     				BizInfo[in_biz[playerid]][bBank] += (amount / 2);
					return 0;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot bet under $100 or above $10000");
				    return 0;

				}

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have this much money.");
	            return 0;

	        }

	    }
	    if(biz_editingentrance[playerid] > -1)
	    {

	        new amount = strval(text);
	        if(amount < 0 || amount > 100000) { SendClientMessage(playerid,COLOR_LIGHTRED,"Entrance fee cannot be below $0 or above $100000"); return 0; }
	        BizInfo[biz_editingentrance[playerid]][bEntranceFee] = amount;
			new str[128];
			format(str,sizeof(str),"You have set this businesses entrance fee to $%d",amount);
			SendClientMessage(playerid,COLOR_GREEN,str);
			TogglePlayerControllable(playerid,1);
			new biz = biz_editingentrance[playerid];
			new str2[256];
			format(str2,sizeof(str),"Business Information\n%s\n\nEntrance Fee: $%d\nUse /enter to enter this building",BizInfo[biz][bName],BizInfo[biz][bEntranceFee]);
			Update3DTextLabelText(BizInfo[biz][bPickup],COLOR_LIGHTBLUE,str2);
			biz_editingentrance[playerid] = -1;
			return 0;

	    }
	    if(calling_nonpolice[playerid] > 0)
	    {

	        SendPoliceNote(playerid,text);
			return 0;

	    }
	    if(interview[playerid] > -1)
	    {

	        SendInterviewMessage(playerid,text);
	        return 0;

	    }
	    if(composing_mail[playerid] > 0)
	    {

	        ProcessMailStage(playerid,text);
	        return 0;

	    }
	    else if(calling_mechanic[playerid] > 0)
	    {

	        SendMechanicRequest(playerid,text);
	        return 0;

	    }
	    else if(calling_taxi[playerid])
	    {

	        SendTaxiRequest(playerid,text);
	        return 0;

	    }
	    else if(setting_fuel_price[playerid])
	    {

	        new biz = GetClosestBiz(playerid);
	        if(IsBusinessOwner(playerid,biz))
	        {

	            new price = strval(text);
	            if(price < 1 || price > 50) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Price cannot be above 50 or below 1"); return 0; }
	            BizInfo[biz][bFuelPrice] = price;
				SendClientMessageA(playerid,COLOR_GREEN,"Fuel price has been set");
				setting_fuel_price[playerid] = 0;
				return 0;

			}
			setting_fuel_price[playerid] = false;
			return 0;

	    }
	    else if(phone_incall[playerid]> -1)
	    {

	        new other = phone_incall[playerid];
	        if(other > -1)
	        {

	            new name[MAX_PLAYER_NAME];
	            GetCharacterNameEx(playerid,name);
	            new othername[MAX_PLAYER_NAME];
	            GetCharacterNameEx(other,othername);
	            new str[256];
	            if(strlen(accent[playerid])) { format(str,sizeof(str),"[Cellphone] %s Says: [%s] %s",name,accent[playerid],text); } else { format(str,sizeof(str),"[Cellphone] %s Says: %s",name,text); }
	            SendClientMessageA(other,COLOR_YELLOW,str);
				GetCharacterName(playerid,name);
				if(strlen(accent[playerid])) { format(str,sizeof(str),"[Cellphone] %s Says: [%s] %s",name,accent[playerid],text); } else { format(str,sizeof(str),"[Cellphone] %s Says: %s",name,text); }
			    SendLocalICMessage(playerid,str,30.0);
	            return 0;

	        }

	    }
	    else if(biz_editname[playerid] > 0)
	    {

	        new biz = GetClosestBiz(playerid);
	        if(biz == -1) { biz = in_biz[playerid]; }
	        if(biz > -1)
	        {

	            new rtext[256];
	            rtext = str_replace("~"," ",text);
	            rtext = str_replace("'"," ",rtext);
				new clean_str[256];
				mysql_real_escape_string(rtext,clean_str);
				format(BizInfo[biz][bName],256,"%s",clean_str);
				SendClientMessageA(playerid,COLOR_GREEN,"The name of your business has been changed.");
				biz_editname[playerid] = 0;
				new str[256];
				format(str,sizeof(str),"Business Information\n%s\n\nEntrance Fee: $%d\nUse /enter to enter this building",BizInfo[biz][bName],BizInfo[biz][bEntranceFee]);
				Update3DTextLabelText(BizInfo[biz][bPickup],COLOR_LIGHTBLUE,str);
				return 0;

	        }
	        else
	        {

	            SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not near one of your business.");
	            biz_editname[playerid] = 0;
	            return 0;

	        }

	    }
	    else if(carchoose_color[playerid] > 0)
	    {

			new color = strval(text);
			if(color < 0 || color > 126) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Color ID cannot be below 0 or above 126"); return 0; }
	        if(carchoose_color[playerid] == 1) { carchoose_color[playerid] = 2; tmp_carcolor1[playerid] = strval(text); SendClientMessageA(playerid,COLOR_GREEN,"Now type the ID of the second car color."); return 0; } else { tmp_carcolor2[playerid] = strval(text); PurchaseVehicle(playerid,vehicle_showroom_position[playerid]); return 0; }

	    }
	    else if(cooking[playerid])
	    {

			ProcessCooking(playerid,text);
			return 0;

		}
		else if(in_911[playerid])
		{

		    in_911_stage[playerid] ++;
		    RefreshEmerCallStage(playerid,text);
		    new str[256];
		    new name[MAX_PLAYER_NAME];
            GetCharacterNameEx(playerid,name);
			format(str,sizeof(str),"[Cellphone] %s Says: %s",name,text);
		    SendLocalICMessage(playerid,str,30.0);

		}
		else if(biz_withdraw[playerid] > -1)
		{

		    new biz = biz_withdraw[playerid];
			if(IsBusinessOwner(playerid,biz))
			{

			    new amount = strval(text);
			    if(amount < 1 || amount > BizInfo[biz][bBank]) { SendClientMessageA(playerid,COLOR_LIGHTRED,"There is not enough money in this bank."); biz_withdraw[playerid] = -1; return 0; }
				BizInfo[biz][bBank] -= amount;
				CharacterInfo[playerid][active_character[playerid]][cMoney] += amount;
				biz_withdraw[playerid] = -1;
				new str[128];
				format(str,sizeof(str),"$%d taken from business bank.",amount);
				SendClientMessage(playerid,COLOR_GREEN,str);
				return 0;

			}
			else
			{

			    SendErrorMsg(playerid,"You do not own this business.");
			    return 0;

			}

		}
		else if(house_withdraw[playerid] > -1)
		{

		    new house = house_withdraw[playerid];
		    if(IsHouseOwner(playerid,house))
		    {

		        new amount = strval(text);
		        if(amount < 1 || amount > HouseInfo[house][hBank]) { SendClientMessage(playerid,COLOR_LIGHTRED,"There is not enough money in your house to withdraw this amount."); house_withdraw[playerid] = -1; return 0; }
		        HouseInfo[house][hBank] -= amount;
		        CharacterInfo[playerid][active_character[playerid]][cMoney] += amount;
		        house_withdraw[playerid] = -1;
				new str[128];
				format(str,sizeof(str),"$%d taken from house bank.",amount);
				SendClientMessage(playerid,COLOR_GREEN,str);
				return 0;

		    }

		}
		else if(house_settingrent[playerid] > -1)
		{

		    new house = house_settingrent[playerid];
		    if(IsHouseOwner(playerid,house))
		    {

		        new amount = strval(text);
		        if(amount < 1 || amount > 10000) { SendClientMessage(playerid,COLOR_LIGHTRED,"rent cannot be below $1 or above $10000"); house_settingrent[playerid] = -1; return 0; }
		        HouseInfo[house][hRentPrice] = amount;
		        house_settingrent[playerid] = -1;
				new str[128];
				format(str,sizeof(str),"House rent set to $%d.",amount);
				SendClientMessage(playerid,COLOR_GREEN,str);
				return 0;

		    }

		}
	    else
	    {

		    new str[256];
		    new name[MAX_PLAYER_NAME];
            GetCharacterNameEx(playerid,name);
			if(!strlen(accent[playerid])) { format(str,sizeof(str),"%s Says: %s",name,text); } else { format(str,sizeof(str),"%s [%s] Says: %s",name,accent[playerid],text); }
		    if(!death_mode[playerid]) { SendLocalICMessage(playerid,str,20.0); }
		    new anim_time = (1000 + (80 * strlen(text)));
		    if(!IsPlayerInAnyVehicle(playerid))
			{

			    if(!in_anim[playerid])
			    {

			        if(!death_mode[playerid] && !sleeping[playerid])
			        {

						ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,1,1,1);
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) SetTimerEx("StopTalk", anim_time, false, "i", playerid);

					}
					else
					{

					    SendErrorMsg(playerid,"You cannot talk whilst dead/asleep.");

					}

				}

			}

		}

	}
	else
	{

	    SendClientMessageA(playerid,COLOR_LIGHTRED,"Please choose your character first.");

	}
	return 0;
}

public StopTalk(playerid)
{
  	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
  	in_anim[playerid] = 0;
    return 1;
}


public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{

    player_vehicle_speed[playerid] = 0;

	if(ispassenger && IsTrain(vehicleid))
	{

	    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 50)
	    {
			in_train[playerid] = vehicleid;
			SetPlayerPos(playerid,2022.0135,2235.6025,2103.9536);
			SetPlayerFacingAngle(playerid,0.0);
			SetPlayerInterior(playerid,18);
	        SetCameraBehindPlayer(playerid);
	        CharacterInfo[playerid][active_character[playerid]][cMoney] -= 50;
		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $50 to board the train.");

		}

	}
	if(Audio_IsClientConnected(playerid))
	{

		if(radio_id[playerid] != vehicle_radioid[vehicleid] && vehicle_radioid[vehicleid] > 0) {

	        Audio_Stop(playerid,radio_handle[playerid]);
	        radio_handle[playerid] = Audio_PlayStreamed(playerid,vehicle_radio[vehicleid]);
	        Audio_SetVolume(playerid,radio_handle[playerid],vehicle_radio_volume[playerid]);
	        format(player_radio[playerid],256,"%s",vehicle_radio[vehicleid]);

		}
		if(!strlen(vehicle_radio[vehicleid])) { Audio_Stop(playerid,radio_handle[playerid]); }

	}
	new slot = GetVehicleSlot(vehicleid);
	if(vehicle_repairing[vehicleid]) { new Float:X, Float:Y, Float:Z; GetPlayerPos(playerid,X,Y,Z); SetPlayerPos(playerid,X,Y,Z); SendClientMessageA(playerid,COLOR_LIGHTRED,"You cannot get into this vehicle while it is being repaired."); return 0;  }
	if(slot > -1) if(VehicleInfo[slot][vLocked] && !aduty[playerid] && !IsPushbike(GetVehicleModel(vehicleid))) { new Float:X, Float:Y, Float:Z; GetPlayerPos(playerid,X,Y,Z); SetPlayerPos(playerid,X,Y,Z); SendClientMessageA(playerid,COLOR_LIGHTRED,"This vehicle is locked. Use /lockpick to try and unlock it."); return 0; }
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	old_vehicle[playerid] = vehicleid;
	old_veh_seat[playerid] = GetPlayerVehicleSeat(playerid);
	if(seatbelt[playerid])
	{

		SendClientMessage(playerid,COLOR_LIGHTRED,"You are wearing a seatbelt. Remove it before attempting to leave the vehicle (/seatbelt)");
		return 0;

	}
	if(InTruck(playerid) && trucking[playerid])
	{

		GameTextForPlayer(playerid,"~r~Trucking Mission Cancelled",5000,5);
		trucking[playerid] = 0;
		trucking_mission[playerid] = 0;
		trucking_stage[playerid] = 0;
		DisablePlayerCheckpoint(playerid);

	}
	if(InTaxi(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{

	    LeaveTaxi(playerid);

	}
	else if(InTaxi(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) { if(fare_passenger[playerid] > -1) { LeaveTaxi(fare_passenger[playerid]); } }
	if(driving_test[playerid])
	{

	    driving_test[playerid] = 0;
	    driving_test_reversing[playerid] = 0;
	    driving_test_stage[playerid] = 0;
	    SetVehicleToRespawn(vehicleid);
		GameTextForPlayer(playerid,"~r~Driving test abandoned",5000,5);
		DisablePlayerCheckpoint(playerid);

	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{

	if(oldstate == PLAYER_STATE_DRIVER)
	{

		TextDrawHideForPlayer(playerid,speedo_txt[playerid]);

	}
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER)
	{

	    if(seatbelt[playerid]) { PutPlayerInVehicle(playerid,old_vehicle[playerid],old_veh_seat[playerid]); return 1; }

	}
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER)
	{

		if(Audio_IsClientConnected(playerid))
		{

		 	Audio_SetVolume(playerid,radio_handle[playerid],0);

		}

	}
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{

	    if(derby_sys_driver[playerid]) { PutPlayerInVehicle(playerid,old_vehicle[playerid],0); SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot exit the vehicle during a DERBY."); }
        if(nascar_sys_driver[playerid]) { PutPlayerInVehicle(playerid,old_vehicle[playerid],0); SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot exit the vehicle during a NASCAR race."); }
	    if(Audio_IsClientConnected(playerid))
		{

			Audio_SetVolume(playerid,radio_handle[playerid],0);

		}

	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{

	    if(Audio_IsClientConnected(playerid))
		{

			Audio_SetVolume(playerid,radio_handle[playerid],vehicle_radio_volume[GetPlayerVehicleID(playerid)]);

		}
	    if(InBus(playerid))
	    {

	        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10)
	        {

	        	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10;
		        SendEmote(playerid,"pays the driver $10 to board the bus");

			}
			else
			{

				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot afford to ride the bus.");

			}

	    }

	}
	if(newstate == PLAYER_STATE_DRIVER)
	{

	    if(IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid))) && !AccountInfo[playerid][aBikePerm])
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You need permission from an administrator to use this type of vehicle.");
	        RemovePlayerFromVehicle(playerid);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			SetPlayerPos(playerid,X,Y,(Z + 2.5));

	    } else if(IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid)))) { StartEngine(GetPlayerVehicleID(playerid)); }
	    player_vehicle_speed[playerid] = 0;
	    Audio_SetVolume(playerid,radio_handle[playerid],radio_volume[playerid]);
	    GetPlayerPos(playerid, SpeedPos[playerid][3], SpeedPos[playerid][4], SpeedPos[playerid][5]);
	    if(!IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid)))) { TextDrawShowForPlayer(playerid,speedo_txt[playerid]); }
	    if(InUtility(playerid))
	    {

	    	if(CharacterInfo[playerid][active_character[playerid]][cJob] != JOB_ENG)
	        {

	            RemovePlayerFromVehicle(playerid);
	            SendClientMessage(playerid,COLOR_LIGHTRED,"Only Engineers can drive this vehicle.");

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_GREEN,"Use /startengineer to begin.");

	        }

	    }
	    if(InSweeper(playerid))
	    {

	        if(CharacterInfo[playerid][active_character[playerid]][cJob] != JOB_SWEEPER)
	        {

	            RemovePlayerFromVehicle(playerid);
	            SendClientMessage(playerid,COLOR_LIGHTRED,"Only Street Cleaners can drive this vehicle.");

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_GREEN,"Use /startsweep to begin a sweeping run.");

	        }

	    }
	    if(InPizzaBoy(playerid))
	    {

	        if(CharacterInfo[playerid][active_character[playerid]][cJob] != JOB_PIZZA)
	        {

	            RemovePlayerFromVehicle(playerid);
	            SendClientMessage(playerid,COLOR_LIGHTRED,"Only Pizza Boys may drive this vehicle.");

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_GREEN,"Use /startpizza to begin a pizza run. The faster you deliver the pizzas, the more money you will recieve.");

	        }

	    }
	    if(InTruck(playerid))
	    {

	        if(CharacterInfo[playerid][active_character[playerid]][cJob] != JOB_TRUCKER)
	        {

	            RemovePlayerFromVehicle(playerid);
	            SendClientMessage(playerid,COLOR_LIGHTRED,"Only truckers may drive this vehicle.");

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_GREEN,"Use /starttrucking to begin a trucking run. (You will be awarded more money for taking a trailer)");

	        }

	    }
	    if(InDeliveryVan(playerid))
	    {

	        if(CharacterInfo[playerid][active_character[playerid]][cJob] != JOB_DELIVER)
	        {

	            RemovePlayerFromVehicle(playerid);
	            SendClientMessageA(playerid,COLOR_LIGHTRED,"Only delivery men may drive this vehicle");

	        }
			else
			{

			    SendClientMessageA(playerid,COLOR_GREEN,"Use /startdelivery to begin a delivery chain");

			}

	    }
	  	if(InRentCar(playerid))
		{
			if(renting_car[playerid] != GetPlayerVehicleID(playerid))
			{

				TextDrawSetString(infotxt[playerid],"~p~Rentable Vehicle~n~ ~n~~w~~p~Price: ~w~$300~n~ ~n~use ~p~/rentcar~w~ to rent this vehicle.");
				TextDrawShowForPlayer(playerid,infotxt[playerid]);
				infotxt_expire[playerid] = 10;

			}

		}
		if(InTaxi(playerid))
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cJob] != JOB_TAXI)
		    {

				RemovePlayerFromVehicle(playerid);
				SendClientMessageA(playerid,COLOR_LIGHTRED,"Only taxi drivers may drive this vehicle");
				return 1;

		    }
		    else
		    {

				SendClientMessageA(playerid,COLOR_GREEN,"Use /fare when someone is in your vehicle to begin charging the player fare.");
				SendTaxiNotification(playerid);

		    }

		}
		if(InBus(playerid))
		{

			if(CharacterInfo[playerid][active_character[playerid]][cJob] != JOB_BUS)
		    {

				RemovePlayerFromVehicle(playerid);
				SendClientMessageA(playerid,COLOR_LIGHTRED,"Only bus drivers may drive this vehicle");
				return 1;

		    }
		    else
		    {

				SendClientMessageA(playerid,COLOR_GREEN,"Use /startroute to start a bus route.");

		    }
		}
		if(InGarbage(playerid))
		{

			if(CharacterInfo[playerid][active_character[playerid]][cJob] != JOB_GARBAGE)
			{

				RemovePlayerFromVehicle(playerid);
				SendClientMessageA(playerid,COLOR_LIGHTRED,"Only garbage men may drive this vehicle");
				return 1;

		    }
		    else
		    {

		        if(garbage_run[playerid] == -1)
		        {

					SendClientMessageA(playerid,COLOR_GREEN,"Use /startrun to start a garbage run.");

				}

		    }
		}
		if(InFish(playerid))
		{

			if(CharacterInfo[playerid][active_character[playerid]][cJob] != JOB_FISH)
			{

				RemovePlayerFromVehicle(playerid);
				SendClientMessageA(playerid,COLOR_LIGHTRED,"Only fisher men may drive this vehicle");
				return 1;

		    }
		    else
		    {

		        if(fish_run[playerid] == -1)
		        {

					SendClientMessageA(playerid,COLOR_GREEN,"Use /startfish to start a fishing run.");

				}

		    }
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{

	PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
	if(qs_inquest[playerid] > -1) qs_OnQuestEvent(playerid,qs_inquest[playerid],QUESTEVENT_UPDATE);
	if(farming[playerid])
	{

	    if(InFarmerVehicle(playerid))
	    {

		    if(farming_stage[playerid] == 0) PayFarmer(playerid);
		    RefreshFarmingStage(playerid);

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a combine harvester.");

		}

	}
	if(mining[playerid])
	{

	    if(!IsPlayerInAnyVehicle(playerid))
	    {

			SendEmote(playerid,"Begins mining for metal...");
			TogglePlayerControllable(playerid,0);
			SetPlayerProgressBar(playerid,PROGRESS_BAR_MINE,5);
			DisablePlayerCheckpoint(playerid);

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"Leave the vehicle first.");

	    }

	}
	if(gunrun[playerid])
	{

		SendClientMessage(playerid,COLOR_WHITE,"George: Hey there budddy! You looking for your supply of weapons? Look no further!");
		ShowPlayerDialog(playerid,DIALOG_GUNRUN,DIALOG_STYLE_LIST,"Choose a weapons package to purchase:","1 x Desert Eagle [$7500]\n1 x Desert Eagle, 1 x MP5 [$10000]\n1 x Desert Eagle, 1 x MP5, 1 x Shotgun [$12500]\n1 x AK47, 1 x Desert Eagle, 1 x MP5, 1 x Shotgun [$15000]","Confirm","Cancel");
		DisablePlayerCheckpoint(playerid);

	}
	if(cp_target[playerid]) { DisablePlayerCheckpoint(playerid); GameTextForPlayer(playerid,"~r~You found it",5000,5); cp_target[playerid] = 0; }
	if(using_tour[playerid]) { DisablePlayerCheckpoint(playerid); GameTextForPlayer(playerid,"~r~You found it",5000,5); using_tour[playerid] = 0; }
	if(company_work[playerid])
	{

        if(IsInCompanyJobVehicle(playerid))
        {

			new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
			switch(CompanyInfo[slot][ciType])
			{

			    case COMP_TYPE_OIL:
			    {

			        if(company_work_stage[playerid] == 1)
			        {

			            SetPlayerProgressBar(playerid,PROGRESS_BAR_OILJOB,15);
			            SendClientMessage(playerid,COLOR_YELLOW2,"Oil is being loaded, please wait...");
			            TogglePlayerControllable(playerid,0);

			        }
			        else
			        {

			        	SetPlayerProgressBar(playerid,PROGRESS_BAR_OILJOB,15);
			            SendClientMessage(playerid,COLOR_YELLOW2,"Oil is being un-loaded, please wait...");
			            TogglePlayerControllable(playerid,0);

			        }

			    }
			    case COMP_TYPE_AIRLINE:
			    {

					if(company_work_stage[playerid] == 1)
					{

		            	SetPlayerProgressBar(playerid,PROGRESS_BAR_AIRLINEJOB,20);
			            SendClientMessage(playerid,COLOR_YELLOW2,"Your passengers are boarding.. Please wait.");
			            TogglePlayerControllable(playerid,0);

			     	}
			     	else if(company_work_stage[playerid] == 2)
			     	{

						SetPlayerProgressBar(playerid,PROGRESS_BAR_AIRLINEJOB,20);
						SendClientMessage(playerid,COLOR_YELLOW2,"Your passengers are de-boarding.. Please wait.");
						TogglePlayerControllable(playerid,0);

			     	}

		      	}
		      	case COMP_TYPE_TRUCK:
			    {

					if(company_work_stage[playerid] == 1)
					{

		            	SetPlayerProgressBar(playerid,PROGRESS_BAR_DELJOB,20);
			            SendClientMessage(playerid,COLOR_YELLOW2,"Your cargo is being loaded.. Please wait.");
			            TogglePlayerControllable(playerid,0);

			     	}
			     	else if(company_work_stage[playerid] == 2)
			     	{

						SetPlayerProgressBar(playerid,PROGRESS_BAR_DELJOB,20);
						SendClientMessage(playerid,COLOR_YELLOW2,"Your cargo is being removed.. Please wait.");
						TogglePlayerControllable(playerid,0);

			     	}

		      	}

	       }

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"Where is your company vehicle? Mission cancelled..");
            carrying_oil[playerid] = 0;
            company_work[playerid] = 0;
            company_work_stage[playerid] = 0;
            DisablePlayerCheckpoint(playerid);

        }

	}
	if(engineer_sys_run[playerid] > -1)
	{

	    if(!IsPlayerInAnyVehicle(playerid))
	    {

			SetPlayerProgressBar(playerid,PROGRESS_BAR_ENG,15);
			SendClientMessage(playerid,COLOR_YELLOW,"Repairing...");
			TogglePlayerControllable(playerid,0);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0,1); // Place Bomb

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"Leave your vehicle first.");
	        return 1;

	    }

	}
	if(sweeper_sys_run[playerid] > -1)
	{

	    if(InSweeper(playerid))
	    {

	    	OnPlayerSweeperUpdate(playerid);

		}
		else
		{

		    SendClientMessage(playerid,COLOR_YELLOW,"You lost the sweeper!?");
		    sweeper_sys_run[playerid] = -1;
			sweeper_sys_stage[playerid] = 0;
			DisablePlayerCheckpoint(playerid);

		}

	}
	if(pizza_mission[playerid] > -1)
	{

	    if(!IsPlayerInAnyVehicle(playerid))
	    {

			UpdatePizzaStage(playerid);

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"Leave your vehicle to deliver the Pizza");

		}

	}
	if(trucking[playerid] == 1)
	{

		UpdateTruckerStage(playerid);

 	}
	if(delivery_active[playerid] > -1)
	{

		if(InDeliveryVan(playerid))
		{

		    SendClientMessage(playerid,COLOR_YELLOW2,"Unloading your truck... Please wait.");
		    TogglePlayerControllable(playerid,0);
			SetPlayerProgressBar(playerid,PROGRESS_BAR_DEL,10);

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"Where is the delivery van?");

		}

	}
	if(fare_filler[playerid] > -1)
	{

	    fare_filler_stage[playerid] ++;
		RefreshFareStage(playerid);

	}
	if(bus_active[playerid] > -1)
	{

	    TogglePlayerControllable(playerid,0);
		SetPlayerProgressBar(playerid,PROGRESS_BAR_BUS,10);

	}
	if(garbage_run[playerid] > -1)
	{

	    if(!IsPlayerInAnyVehicle(playerid))
	    {

	    	if(garbage_run_state[playerid] == 0) { OnPlayerPickupGarbage(playerid); }
		    else if(garbage_run_state[playerid] > 0 && garbage_run_state[playerid] != 3) { OnPlayerDropGarbage(playerid); }

		}
		else if(garbage_run_state[playerid] == 3)
		{

		    GameTextForPlayer(playerid,"~g~Garbage Run Complete",5000,5);
            OnPlayerEndGarbage(playerid);

		}
		else
		{

		    SendClientMessageA(playerid,COLOR_LIGHTRED,"Leave your vehicle first");

		}

	}
	if(fish_run[playerid] > -1)
	{

	    if(InFish(playerid))
	    {

	        if(fish_state[playerid] == 1)
	        {

	        	fish_stage[playerid] ++;
		        OnFishRefresh(playerid);

			}
			else
			{

			    OnEndFishing(playerid,1);

			}

	    }
	    else
	    {

	        SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not in the boat... Fishing run cancelled.");
	        fish_run[playerid] = -1;

	    }

	}
	if(driving_test[playerid])
	{

	    driving_test_stage[playerid] ++;
	    OnRefreshVehicleTest(playerid);

	}
	if(going_to_scrap[playerid]) { DisablePlayerCheckpoint(playerid); }
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
	if(nascar_sys_driver[playerid])
	{

	   	RefreshNascarLapStage(playerid);
	    RefreshNascarStage(playerid);

	}
	else if(in_fly_school[playerid])
	{

	    RefreshFlySchoolStage(playerid);

	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{

	if(!tutorial_stage[playerid])
	{

	    if(in_biz[playerid] > -1)
	    {

	        for(new i = 0; i < MAX_BIZES; i ++)
	        {

	            if(BizInfo[i][bType] == BIZ_TYPE_VAUCTION && in_biz[playerid] == i)
	            {

        	        new done = 0;
					for(new a = 0; a < 5; a ++)
					{

					    if(used_vehicle_pickups[i][a] == pickupid)
					    {

					        if(!done)
					        {

						        new str[256];
								new veh = used_vehicle_slots[i][a];
								new vname[128];
					            GetVehicleNameByModel(VehicleInfo[veh][vModel],vname);
						        format(str,sizeof(str),"~p~ %s ~n~ ~n~~w~This vehicle is for sale, it's details:~n~~p~Insurances: ~w~ %d ~n~~p~Lock: ~w~ %d ~n~~p~Destroyed: ~w~ %d ~n~~p~Immob: ~w~ %d ~n~~p~Price: ~w~ $%d ~n~ ~n~~p~Use /buyvehicle to purchase this car!",vname,VehicleInfo[veh][vInsurance],VehicleInfo[veh][vLock],VehicleInfo[veh][vDestroyed],VehicleInfo[veh][vImmob],VehicleInfo[veh][vSellingPrice]);
						        TextDrawSetString(infotxt[playerid],str);
								TextDrawShowForPlayer(playerid,infotxt[playerid]);
								infotxt_expire[playerid] = 16;
								done = 1;

							}

					    }

					}

	            }

	        }

	    }

		if(pickupid == pickup_armory)
		{
		
		    GameTextForPlayer(playerid,"~b~Police Armory~n~~w~use ~p~/armory~w~ to arm yourself.",5000,5);
		
		}
	    if(pickupid == job_pickup_market)
	    {

	        GameTextForPlayer(playerid,"~r~Market~n~~w~use ~p~/market~w~ to sell and buy goods.",5000,5);

	    }
	    if(pickupid == job_pickup_farmer)
	    {

	    	GameTextForPlayer(playerid,"~r~Farmer Job~n~~w~Use /takejob to become a ~r~Farmer",5000,5);

	    }
	    if(pickupid == job_pickup_getwep)
	    {

	        GameTextForPlayer(playerid,"~r~Weapons Smuggle Point~n~~w~use ~p~/buymats~w~ to get materials ~p~($3000 per unit)",5000,5);

	    }
		if(pickupid == job_pickup_smuggle)
	    {

	        GameTextForPlayer(playerid,"~r~Weapons Smuggler~n~~w~Use /takejob to become a ~r~Weapons Smuggler",5000,5);

	    }
	    if(pickupid == job_pickup_dealer)
	    {

	        GameTextForPlayer(playerid,"~r~Weapons Dealer~n~~w~Use /takejob to become a ~r~Weapons Dealer",5000,5);

	    }
	    if(pickupid == job_pickup_sweeper)
	    {

	    	GameTextForPlayer(playerid,"~r~Street Cleaner~n~~w~Use /takejob to become a ~r~Street Cleaner",5000,5);

	    }
	    if(pickupid == job_pickup_impound)
	 	{

	        GameTextForPlayer(playerid,"~b~Los Santos Impound Lot~n~~w~Use /unimpound to retrieve a vehicle",5000,5);

	    }
	    if(pickupid == job_pickup_deliver)
		{

			GameTextForPlayer(playerid,"~r~Delivery Man~n~~w~Use /takejob to become a ~r~delivery man",5000,5);

		}
		else if(pickupid == job_pickup_taxi)
		{

		    GameTextForPlayer(playerid,"~r~Taxi Driver~n~~w~Use /takejob to become a ~r~taxi driver",5000,5);

		}
		else if(pickupid == job_pickup_bus)
		{

		    GameTextForPlayer(playerid,"~r~Bus Driver~n~~w~Use /takejob to become a ~r~bus driver",5000,5);

		}
		else if(pickupid == job_pickup_garbage)
		{

		    GameTextForPlayer(playerid,"~r~Garbage Man~n~~w~Use /takejob to become a ~r~Garbage Man",5000,5);

		}
		else if(pickupid == job_pickup_fish)
		{

			GameTextForPlayer(playerid,"~r~Fisher Man~n~~w~Use /takejob to become a ~r~Fisher Man",5000,5);

		}
		else if(pickupid == job_pickup_dmv)
		{

		    GameTextForPlayer(playerid,"~r~DMV~n~~w~Use ~p~/taketest ~w~to take your drivers test",5000,5);

		}
		else if(pickupid == job_pickup_mechanic)
		{

		    GameTextForPlayer(playerid,"~r~Mechanic~n~~w~Use /takejob to become a~n~ ~r~Mechanic",5000,5);

		}
		else if(pickupid == job_pickup_drug)
		{

		    GameTextForPlayer(playerid,"~r~Drugs Point~n~~w~use /buyseeds to get ~r~seeds",5000,5);

		}
		else if(pickupid == job_pickup_truck)
		{

		    GameTextForPlayer(playerid,"~r~Trucker Job~n~~w~use /takejob to become a ~r~trucker",5000,5);

		}
		else if(pickupid == job_pickup_pizza)
		{

		 	GameTextForPlayer(playerid,"~r~Pizza Boy~n~~w~use /takejob to become a ~r~Pizza Boy",5000,5);

		}
		else if(pickupid == job_pickup_chop)
		{

			GameTextForPlayer(playerid,"~g~Red County~n~~r~Chop Shop~n~~w~use /chop to sell a vehicle",5000,5);

		}
		else if(pickupid == job_pickup_eng)
		{

		    GameTextForPlayer(playerid,"~r~Engineer~n~~w~use /takejob to become a ~r~Engineer",5000,5);

		}

	}

	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid) {

	new vehicleide = GetVehicleModel(vehicleid);
	new modok = islegalcarmod(vehicleide, componentid);

	if (!modok) {
		SetVehicleToRespawn(vehicleid);
		SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid mods...");
	}

	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    new slot = GetVehicleSlot(vehicleid);
	VehicleInfo[slot][vPaintjob] = (paintjobid + 1);
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	new slot = GetVehicleSlot(vehicleid);
	VehicleInfo[slot][vColor1] = color1;
	VehicleInfo[slot][vColor2] = color2;
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(in_modshop[playerid] && newinteriorid == 0) { OnPlayerExitBusiness(playerid,in_biz[playerid]); }
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{

	afk_movement[playerid] = AFK_TIME;
	if(newkeys == KEY_FIRE && displaying_stock[playerid])
	{

		TextDrawHideForPlayer(playerid,stocktitle);
		TextDrawHideForPlayer(playerid,stockcontent);

	}
	if(IsPlayerInAnyVehicle(playerid) && newkeys == KEY_CROUCH)
	{

	    if(IsPlayerInRangeOfPoint(playerid,10.0,1958.17, -2189.74, 12.53))
	    {

	        if(CharacterInfo[playerid][active_character[playerid]][cFlyLic])
			{

			    MoveObject(airport_gate1,1967.05, -2189.85, 12.53,6.0);
				MoveObject(airport_gate2,1947.42, -2189.79, 12.53,6.0);
				airport_timeout = 6;

			}

	    }

	}
	if(newkeys == KEY_LOOK_BEHIND)
	{

	    if(in_shamal[playerid] == -1)
	    {
			new shamal = NearShamal(playerid);
			if(shamal > -1 && !IsPlayerInAnyVehicle(playerid))
			{
				SetPlayerPos(playerid,1.6028,32.7263,1199.5938);
				SetPlayerInterior(playerid,1);
				SetPlayerFacingAngle(playerid,180.0);
				SetPlayerVirtualWorld(playerid,shamal);
				in_shamal[playerid] = shamal;
			}
		}
		else
		{

			new Float:X, Float:Y, Float:Z;
			GetVehiclePos(in_shamal[playerid],X,Y,Z);
			SetPlayerPos(playerid,(X + 2),(Y + 2),Z);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			in_shamal[playerid] = -1;

		}

	}
	if(newkeys == KEY_SPRINT)
	{

	    if(in_anim[playerid])
	    {

			CallLocalFunction("cmd_stopanim","is",playerid,"1");

		}

	}
	if(dancing[playerid])
	{

		if(newkeys == KEY_FIRE)
		{

			if(old_action[playerid] != SPECIAL_ACTION_NONE)
			{

			    SetPlayerSpecialAction(playerid,old_action[playerid]);
			    old_action[playerid] = SPECIAL_ACTION_NONE;

			}
			else
			{

			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);

			}
			dancing[playerid] = 0;

		}

	}
	if(sleeping[playerid])
	{

		SendEmote(playerid,"wakes up");
		TogglePlayerControllable(playerid,1);
		CallLocalFunction("cmd_stopanim","is",playerid,"1");
		sleeping[playerid] = 0;

	}
	if(filling[playerid])
	{

	    if(newkeys == KEY_HANDBRAKE)
	    {

	        filling_started[playerid] = 1;

	    }

	}
	if(drinking[playerid] > 0)
	{

	    if(newkeys == KEY_FIRE)
	    {

	        drinking[playerid] --;
	        new action = GetPlayerSpecialAction(playerid);
	        switch(action)
	        {

	            case SPECIAL_ACTION_DRINK_SPRUNK:
	            {

					new Float:hp;
					GetPlayerHealth(playerid,hp);
					SetPlayerHealth(playerid,(hp + 2.0));

	            }
	            case SPECIAL_ACTION_DRINK_BEER:
	            {

					new Float:hp;
					GetPlayerHealth(playerid,hp);
					SetPlayerHealth(playerid,(hp + 3.0));
					SetPlayerDrunkLevel(playerid,(GetPlayerDrunkLevel(playerid) + 750));

	            }
	            case SPECIAL_ACTION_DRINK_WINE:
	            {

					new Float:hp;
					GetPlayerHealth(playerid,hp);
					SetPlayerHealth(playerid,(hp + 4.0));
					SetPlayerDrunkLevel(playerid,(GetPlayerDrunkLevel(playerid) + 1000));

	            }

	        }
	        if(drinking[playerid] == 0) { SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE); drinking[playerid] = 0; }

	    }

	}
	if(weed[playerid] > 0)
	{

	    if(newkeys == KEY_FIRE)
	    {

	        weed[playerid] ++;
        	new dlevel = GetPlayerDrunkLevel(playerid);
		    if((dlevel + 2000) < 10000) { SetPlayerDrunkLevel(playerid,(dlevel + 2000)); }
	        if(weed[playerid] == 10)
			{

			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			    SendEmote(playerid,"finishes their spliff.");
			    weed[playerid] = 0;

			}

	    }

	}
	if(mail_reading[playerid] > -1)
	{

	    new offset = mail_reading[playerid];
	    if(newkeys == KEY_SPRINT)
	    {

	        MailInfo[playerid][offset][mActive] = 0;
	        SaveMail(playerid,offset);
	        SendClientMessageA(playerid,COLOR_GREEN,"Message Deleted.");
	        HideLetter(playerid);
	        PlayerPlaySound(playerid,1083,0.0,0.0,0.0);

	    }
	    else if(newkeys == KEY_WALK)
	    {

	        HideLetter(playerid);
	        PlayerPlaySound(playerid,1083,0.0,0.0,0.0);

	    }

	}
	if(newkeys == KEY_SPRINT)
	{

	    if(tutorial_skip[playerid])
	    {
		   	tutorial_stage[playerid] ++;
		    //RefreshPlayerTutorial(playerid);
		}

	}
    if((newkeys & KEY_WALK) && (newkeys & KEY_SPRINT))
	{

	    //****ENTER****

	    new house = GetClosestHouse(playerid);
		if(house > -1 && in_house[playerid] == -1 && GetPlayerVirtualWorld(playerid) == 0)
		{

			if(HouseInfo[house][hLocked]) { GameTextForPlayer(playerid,"~r~Locked",5000,6); PlayerPlaySound(playerid,1145,0.0,0.0,0.0); return 1; }
			SetPlayerInterior(playerid,HouseInfo[house][hInterior]);
		    SetPlayerVirtualWorld(playerid,house);
		    SetPlayerPos(playerid,HouseInfo[house][hInteriorX],HouseInfo[house][hInteriorY],HouseInfo[house][hInteriorZ]);
		    in_house[playerid] = house;
		    return 1;

		}

		new biz = GetClosestBiz(playerid);
		if(biz > -1 && GetPlayerVirtualWorld(playerid) == 0)
		{

		    if(!BizInfo[biz][bOpen]) { GameTextForPlayer(playerid,"~r~Closed",5000,6); PlayerPlaySound(playerid,1145,0.0,0.0,0.0); return 1; }
		    OnPlayerEnterBusiness(playerid,biz);
		    return 1;

		}

		new inter = GetClosestInterior(playerid);
		if(inter > -1 && GetPlayerVirtualWorld(playerid) == 0)
		{

		    OnPlayerEnterInterior(playerid,inter);
		    return 1;

		}

		//****EXIT****

		house = in_house[playerid];
		if(house > -1)
		{

            if(HouseInfo[house][hLocked]) { GameTextForPlayer(playerid,"~r~Locked",5000,6); PlayerPlaySound(playerid,1145,0.0,0.0,0.0); return 1; }
		    SetPlayerPos(playerid,HouseInfo[house][hSpawnX],HouseInfo[house][hSpawnY],HouseInfo[house][hSpawnZ]);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    in_house[playerid] = -1;
		    return 1;

		}

		biz = in_biz[playerid];
		if(biz > -1)
		{

		    OnPlayerExitBusiness(playerid,biz);
		    return 1;

		}

		OnPlayerExitInterior(playerid);
		return 1;

	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(!IsPlayerNPC(playerid))
	{
		RefreshMaskStatus(playerid,forplayerid);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{

	    case 1:
	    {

	        if(response == 1)
	        {

	            if(strlen(inputtext))
	            {

	                CallLocalFunction("cmd_login","is",playerid,inputtext);

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"Please enter a password.");
	                ShowPlayerDialog(playerid,1,DIALOG_STYLE_PASSWORD,"Login","Enter your password below:","Login","Cancel");

	            }

			}
			else
			{

			    Kick(playerid);

			}

		}
		case DIALOG_ARMORY:
		{
		
		    if(response == 1)
		    {
		    
		        new name[MAX_PLAYER_NAME];
		        GetCharacterName(playerid,name);
		        new itemname[128];
		        switch(listitem)
          		{
		        
		            case 0:
		            {
		            
		                if(!HasWeapon(playerid,3))
						{
			                GivePlayerWeaponEx(playerid,3,1);
			                format(itemname,sizeof(itemname),"Nightstick");
			         	} else {
			         	    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a nightstick!");
			         	}
		            
		            }
		            case 1:
		            {
		            
		                if(!HasWeapon(playerid,41))
		                {
			                GivePlayerWeaponEx(playerid,41,500);
							format(itemname,sizeof(itemname),"Pepper Spray");
						} else {
						    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have pepper spray!");
						}
		            
		            }
					case 2:
					{
					
					    if(!HasWeapon(playerid,24))
					    {
						    GivePlayerWeaponEx(playerid,24,150);
							format(itemname,sizeof(itemname),"Desert Eagle");
						} else {
						    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a Desert Eagle!");
						}
					
					}
					case 3:
					{
					
						if(!HasWeapon(playerid,25))
						{
						    GivePlayerWeaponEx(playerid,25,150);
						    format(itemname,sizeof(itemname),"Shotgun");
						} else {
						    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a Shotgun!");
						}
					
					}
					case 4:
					{
					
					    if(!HasWeapon(playerid,27))
					    {
						    GivePlayerWeaponEx(playerid,27,50);
						    format(itemname,sizeof(itemname),"Combat Shotgun");
						} else {
						    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a Combat Shotgun!");
						}
					
					}
					case 5:
					{
					
					    if(!HasWeapon(playerid,29))
					    {
						    GivePlayerWeaponEx(playerid,29,500);
						    format(itemname,sizeof(itemname),"MP5");
						} else {
							SendClientMessage(playerid,COLOR_LIGHTRED,"You already have an MP5!");
						}
					
					}
					case 6:
					{
					
					    if(!HasWeapon(playerid,31))
					    {
						    GivePlayerWeaponEx(playerid,31,500);
						    format(itemname,sizeof(itemname),"M4");
						} else {
						    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have an M4!");
						}
					
					}
					case 7:
					{
					
					    if(!HasWeapon(playerid,34))
					    {
						    GivePlayerWeaponEx(playerid,34,15);
						    format(itemname,sizeof(itemname),"Sniper Rifle");
						} else {
						    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a Sniper Rifle.");
						}
					
					}
					case 8:
					{
					
					    if(!HasWeapon(playerid,43))
					    {
					    	GivePlayerWeaponEx(playerid,43,500);
							format(itemname,sizeof(itemname),"Camera");
						} else {
							SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a Camera!");
						}
					
					}
					case 9:
					{
					
					    if(!mask[playerid])
					    {
							mask[playerid] = 1;
							format(itemname,sizeof(itemname),"Mask");
						} else {
						    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a Mask!");
						}

					}
					case 10:
					{
					
					    if(!toolkit[playerid])
					    {
						    toolkit[playerid] = 1;
						    format(itemname,sizeof(itemname),"Toolkit");
 			 			} else {
 			 			    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a Toolkit!");
 			 			}
					
					}
					case 11:
					{
					
					    if(!HasWeapon(playerid,42))
					    {
						    GivePlayerWeaponEx(playerid,42,1000);
						    format(itemname,sizeof(itemname),"Fire Extinguisher");
						} else {
						    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a Fire Extinguisher");
						}
					
					}
					
		        }
				new str[128];
				format(str,sizeof(str),"[Faction] %s %s has taken a %s from the armory",CharacterInfo[playerid][active_character[playerid]][cRankName],name,itemname);
				if(strlen(itemname)) SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
		    
		    }
		
		}
		case DIALOG_MARKET3:
		{

		    if(response == 1)
		    {

				switch(mk_menudirection[playerid])
				{

				    case 1:
				    {

						new amount = strval(inputtext);
						if(amount > 0 && amount < 999)
						{

							switch(mk_selling[playerid])
							{

								case MARKETPRICE_METAL:
								{

									if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_METAL,amount))
									{

									    RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_METAL,amount);
									    new money = (mk_prices[MARKETPRICE_METAL] * amount);
										CharacterInfo[playerid][active_character[playerid]][cMoney] += money;
										new str[128];
										format(str,sizeof(str),"You have sold %d metal for $%d",amount,money);
										SendClientMessage(playerid,COLOR_YELLOW2,str);
										mk_selling[playerid] = 0;

									}
									else
									{

									    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have this much metal.");
									    mk_selling[playerid] = 0;

									}

								}
								case MARKETPRICE_CARPART:
								{

									if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CARPART,amount))
									{

									    RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CARPART,amount);
									    new money = (mk_prices[MARKETPRICE_CARPART] * amount);
										CharacterInfo[playerid][active_character[playerid]][cMoney] += money;
										new str[128];
										format(str,sizeof(str),"You have sold %d car parts for $%d",amount,money);
										SendClientMessage(playerid,COLOR_YELLOW2,str);
										mk_selling[playerid] = 0;

									}
									else
									{

									    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have this many car parts.");
									    mk_selling[playerid] = 0;

									}

								}
								case MARKETPRICE_FISH:
								{

									if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,amount))
									{

									    RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,amount);
									    new money = (mk_prices[MARKETPRICE_FISH] * amount);
										CharacterInfo[playerid][active_character[playerid]][cMoney] += money;
										new str[128];
										format(str,sizeof(str),"You have sold %d fish for $%d",amount,money);
										SendClientMessage(playerid,COLOR_YELLOW2,str);
										mk_selling[playerid] = 0;

									}
									else
									{

									    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have this many fish.");
									    mk_selling[playerid] = 0;

									}

								}

							}

						}
						else
						{

							ShowPlayerDialog(playerid,DIALOG_MARKET3,DIALOG_STYLE_INPUT,"How much metal would you like to sell?","Please type the amount of metal you would like to sell...","Confirm","Cancel");
							SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid amount.");
							mk_selling[playerid] = 0;

						}

					}
					case 2:
					{

						new amount = strval(inputtext);
						if(amount > 0 && amount < 999)
						{

							switch(mk_selling[playerid])
							{

								case MARKETPRICE_METAL:
								{

                                    new money = (mk_prices[MARKETPRICE_METAL] * amount);
									if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= money)
									{

										if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_METAL,amount))
										{

											CharacterInfo[playerid][active_character[playerid]][cMoney] -= money;
											GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_METAL,amount);
											new str[128];
											format(str,sizeof(str),"You have bought %d metal for $%d",amount,money);
											SendClientMessage(playerid,COLOR_YELLOW2,str);
											mk_selling[playerid] = 0;

										}
										else
										{

										    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anything else!");

										}

									}
									else
									{

									    SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d.",money);
									    mk_selling[playerid] = 0;

									}

								}
								case MARKETPRICE_CARPART:
								{

                                    new money = (mk_prices[MARKETPRICE_CARPART] * amount);
									if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= money)
									{

										if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CARPART,amount))
										{

											CharacterInfo[playerid][active_character[playerid]][cMoney] -= money;
											GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CARPART,amount);
											new str[128];
											format(str,sizeof(str),"You have bought %d car parts for $%d",amount,money);
											SendClientMessage(playerid,COLOR_YELLOW2,str);
											mk_selling[playerid] = 0;

										}
										else
										{

										    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have this many items.");

										}

									}
									else
									{

									    SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d.",money);
									    mk_selling[playerid] = 0;

									}

								}
								case MARKETPRICE_FISH:
								{

                                    new money = (mk_prices[MARKETPRICE_FISH] * amount);
									if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= money)
									{

										if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,amount))
										{

											CharacterInfo[playerid][active_character[playerid]][cMoney] -= money;
											GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,amount);
											new str[128];
											format(str,sizeof(str),"You have bought %d fish for $%d",amount,money);
											SendClientMessage(playerid,COLOR_YELLOW2,str);
											mk_selling[playerid] = 0;

										}
										else
										{

										    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anything else.");

										}

									}
									else
									{

									    SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d.",money);
									    mk_selling[playerid] = 0;

									}

								}

							}

						}
						else
						{

							ShowPlayerDialog(playerid,DIALOG_MARKET3,DIALOG_STYLE_INPUT,"How much metal would you like to sell?","Please type the amount of metal you would like to sell...","Confirm","Cancel");
							SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid amount.");
							mk_selling[playerid] = 0;

						}

					}

		        }

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"Cancelled...");
		        mk_menudirection[playerid] = 0;
		        mk_selling[playerid] = 0;

		    }

		}
		case DIALOG_MARKET2:
		{

		    if(response == 1)
		    {

		        switch(listitem)
		        {

		            case MARKETPRICE_METAL:
		            {

		                if(mk_menudirection[playerid] == 1)
		                {

							ShowPlayerDialog(playerid,DIALOG_MARKET3,DIALOG_STYLE_INPUT,"How much metal would you like to sell?","Please type the amount of metal you would like to sell...","Confirm","Cancel");
							mk_selling[playerid] = MARKETPRICE_METAL;

		                }
		                else if(mk_menudirection[playerid] == 2)
		                {

		                	ShowPlayerDialog(playerid,DIALOG_MARKET3,DIALOG_STYLE_INPUT,"How much metal would you like to buy?","Please type the amount of metal you would like to buy...","Confirm","Cancel");
							mk_selling[playerid] = MARKETPRICE_METAL;

		                }

		            }
		            case MARKETPRICE_CARPART:
		            {

		                if(mk_menudirection[playerid] == 1)
		                {

		                	ShowPlayerDialog(playerid,DIALOG_MARKET3,DIALOG_STYLE_INPUT,"How many car parts would you like to sell?","Please type the amount of car parts you would like to sell...","Confirm","Cancel");
							mk_selling[playerid] = MARKETPRICE_CARPART;

		                }
		                else if(mk_menudirection[playerid] == 2)
		                {

		                	ShowPlayerDialog(playerid,DIALOG_MARKET3,DIALOG_STYLE_INPUT,"How many car parts would you like to buy?","Please type the amount of car parts you would like to buy...","Confirm","Cancel");
							mk_selling[playerid] = MARKETPRICE_CARPART;

		                }

		            }
		            case MARKETPRICE_FISH:
		            {

		                if(mk_menudirection[playerid] == 1)
		                {

		                	ShowPlayerDialog(playerid,DIALOG_MARKET3,DIALOG_STYLE_INPUT,"How many fish would you like to sell?","Please type the amount of fish you would like to sell...","Confirm","Cancel");
							mk_selling[playerid] = MARKETPRICE_FISH;

		                }
		                else if(mk_menudirection[playerid] == 2)
		                {

		                	ShowPlayerDialog(playerid,DIALOG_MARKET3,DIALOG_STYLE_INPUT,"How many fish would you like to buy?","Please type the amount of fish you would like to buy...","Confirm","Cancel");
							mk_selling[playerid] = MARKETPRICE_FISH;

		                }

		            }

		        }

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_GREEN,"Selling cancelled.");
				mk_menudirection[playerid] = 0;

		    }

		}
		case DIALOG_MARKET:
		{

		    if(response == 1)
		    {

				switch(listitem)
				{

				    case 0:
				    {

				        mk_menudirection[playerid] = 1;
				        new str[256];
				        format(str,sizeof(str),"Metal [$%d per unit]\nCar Parts [$%d per unit]\nFish [$%d per unit]",mk_prices[MARKETPRICE_METAL],mk_prices[MARKETPRICE_CARPART],mk_prices[MARKETPRICE_FISH]);
				        ShowPlayerDialog(playerid,DIALOG_MARKET2,DIALOG_STYLE_LIST,"Please choose an item to sell...",str,"Sell","Cancel");

				    }
				    case 1:
				    {

				        mk_menudirection[playerid] = 2;
						new str[256];
						format(str,sizeof(str),"Metal [$%d per unit]\nCar Parts [$%d per unit]\nFish [$%d per unit]",mk_prices[MARKETPRICE_METAL],mk_prices[MARKETPRICE_CARPART],mk_prices[MARKETPRICE_FISH]);
						ShowPlayerDialog(playerid,DIALOG_MARKET2,DIALOG_STYLE_LIST,"Please choose an item to sell...",str,"Buy","Cancel");

				    }

				}

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_GREEN,"Selection cancelled.");
		        mk_menudirection[playerid] = 0;

		    }

		}
		case DIALOG_BUYPHONE:
		{

		    if(response == 1)
		    {

		        new biz = in_biz[playerid];
				CharacterInfo[playerid][active_character[playerid]][cMoney] -= 150;
				GiveCellPhone(playerid);
	            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
	            BizInfo[biz][bBank] += 150;
				switch(listitem)
				{

				    case 0:
				    {

				        CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18865;

				    }
				    case 1:
				    {

				    	CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18866;

				    }
				    case 2:
				    {

				    	CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18867;

				    }
				    case 3:
				    {

				    	CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18868;

				    }
					case 4:
				    {

				    	CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18869;

				    }
				    case 5:
				    {

				    	CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18870;

				    }
				    case 6:
				    {

				    	CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18871;

				    }
				    case 7:
				    {

				    	CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18872;

				    }
					case 8:
				    {

				    	CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18873;

				    }
				    case 9:
				    {

				    	CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 18874;

				    }

				}

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"Purchase Cancelled.");

		    }

		}
		case DIALOG_AMMENDMENU:
		{

		    if(response == 1)
		    {

		        new slot = listitem;
		        cl_editingitem[playerid] = slot;
				new str[256];
				format(str,sizeof(str),"SELECT * FROM rp_clothing WHERE owner = '%d'",CharacterInfo[playerid][active_character[playerid]][cID]);
				mysql_query(str,player_threads[playerid],QUERY_REQAMMEND);

		    }
		    else
		    {

		        cl_RemoveFromPersonalAmmend(playerid);

		    }

		}
		case DIALOG_NAMECLOTHES:
		{

	        if(response == 1)
	        {

	            if(strlen(inputtext))
				{

				    if(strlen(inputtext) < 32)
				    {

						new slot = cl_buyingitem[playerid];
						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= cl_clothingitems[slot][3])
						{

						    new biz = in_biz[playerid];
						    CharacterInfo[playerid][active_character[playerid]][cMoney] -= cl_clothingitems[slot][3];
						    BizInfo[biz][bBank] += cl_clothingitems[slot][3];
						    new str[1024];
						    new name[32];
						    mysql_real_escape_string(inputtext,name);
						    format(str,sizeof(str),"INSERT INTO rp_clothing (object,bone,x,y,z,rx,ry,rz,scalex,scaley,scalez,owner,equip,name,type) VALUES ('%d','%d','%f','%f','%f','%f','%f','%f','%f','%f','%f','%d',0,'%s','%d')",
						    cl_clothingitems[slot][0],
							cl_clothingitems[slot][1],
                            cl_tmpplacement_pos[playerid][0],
                            cl_tmpplacement_pos[playerid][1],
                            cl_tmpplacement_pos[playerid][2],
                            cl_tmpplacement_pos[playerid][3],
                            cl_tmpplacement_pos[playerid][4],
                            cl_tmpplacement_pos[playerid][5],
                            cl_tmpplacement_pos[playerid][6],
                            cl_tmpplacement_pos[playerid][7],
                            cl_tmpplacement_pos[playerid][8],
                            CharacterInfo[playerid][active_character[playerid]][cID],
                            name,
							cl_clothingitems[slot][2]);
                            mysql_query(str,player_threads[playerid]);
                            SendClientMessage(playerid,COLOR_GREEN,"You have purchased this clothing item! You can access it and equip it by using /clotes equip");
                            cl_RemoveAllClothing(playerid);
                            cl_ShowClothingMenu(playerid);

						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money to purchase this item.");
							ShowPlayerDialog(playerid,DIALOG_NAMECLOTHES,DIALOG_STYLE_INPUT,"Please enter a name...","Please enter a name that you can remember\nthis peice of clothing by.","Confirm","Cancel");

						}

				    }
				    else
				    {

				        SendClientMessage(playerid,COLOR_LIGHTRED,"Name must be under 32 characters long.");
				        ShowPlayerDialog(playerid,DIALOG_NAMECLOTHES,DIALOG_STYLE_INPUT,"Please enter a name...","Please enter a name that you can remember\nthis peice of clothing by.","Confirm","Cancel");

				    }

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"Please enter a name...");
				    ShowPlayerDialog(playerid,DIALOG_NAMECLOTHES,DIALOG_STYLE_INPUT,"Please enter a name...","Please enter a name that you can remember\nthis peice of clothing by.","Confirm","Cancel");

				}

	        }
	        else
	        {

	            cl_RemoveAllClothing(playerid);
	            cl_ShowClothingMenu(playerid);

	        }


		}
		case CONFIRM_TYPE_BUYCLOTHES:
		{

			if(response == 1)
			{

				new slot = cl_buyingitem[playerid];
				if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= cl_clothingitems[slot][3])
				{

				    ShowPlayerDialog(playerid,DIALOG_NAMECLOTHES,DIALOG_STYLE_INPUT,"Please enter a name...","Please enter a name that you can remember\nthis peice of clothing by.","Confirm","Cancel");

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money to purchase this item.");
				    cl_RemoveAllClothing(playerid);
				    cl_ShowClothingMenu(playerid);

				}

			}
			else
			{

					cl_RemoveAllClothing(playerid);
				    cl_ShowClothingMenu(playerid);

			}

		}
		case DIALOG_CLOTHINGBOT:
		{

		    if(response == 1)
		    {

		        new object = -1;
		        new bone = 0;
		        new count = 0;
		        new slot = 0;
		        for(new i = 0; i < sizeof(cl_clothingitems); i ++)
		        {

		            if(cl_clothingitems[i][2] == cl_menutype[playerid])
		            {

		                if(count == listitem)
		                {

		                    object = cl_clothingitems[i][0];
		                    bone = cl_clothingitems[i][1];
		                    slot = i;

		                }
		                count ++;

		            }

		        }
		        if(object > -1)
		        {

		        	cl_SetClothing(playerid,CLOTHING_PLAYER,object,bone,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0);
					cl_buyingitem[playerid] = slot;
					cl_SetPlayerAmmendingClothing(playerid,0,"cl_OnEditShowroomClothes",slot);

		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"An error occured.");
					cl_ShowClothingMenu(playerid);

		        }

		    }
		    else
		    {

		        cl_menutype[playerid] = 0;
		        cl_menulevel[playerid] = 0;
				cl_ShowClothingMenu(playerid);

		    }

		}
		case DIALOG_CLOTHINGTOP:
		{

		    if(response == 1)
		    {

		        cl_menutype[playerid] = listitem;
		        cl_menulevel[playerid] = 1;
		        cl_ShowClothingMenu(playerid);

		    }
		    else
		    {

		        cl_RemovePlayerFromDressingRoom(playerid);

		    }

		}
		case DIALOG_VAUCTION:
		{

		    if(response == 1)
		    {

		        new biz = GetClosestBiz(playerid);
				new price = strval(inputtext);
				if(price > 0 && price < 99999999)
				{

				    if(IsAtAuctionHouse(playerid))
				    {

						if(CanHaveMoreSales(biz))
						{

						    if(IsPlayerInAnyVehicle(playerid))
          					{

          					    new id = GetPlayerVehicleID(playerid);
								new slot = GetVehicleSlot(id);
								if(slot > -1)
								{

								    if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
								    {

										ProcessVehicleAuction(playerid,biz,GetPlayerVehicleID(playerid),price);

									}
									else
									{

									    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not own this vehicle.");

									}

								}
								else
								{

								    SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle cannot be sold.");

								}

							}
							else
							{

							    SendClientMessage(playerid,COLOR_LIGHTRED,"You are no longer in a vehicle.");

							}

						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"This business cannot have anymore vehicles for sale.");

						}

				    }
				    else
        			{

				        SendClientMessage(playerid,COLOR_LIGHTRED,"You are no longer at a used vehicle dealership.");

				    }

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid price entered, cannot be below 1 or above 99999999");

				}

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"Cancelled.");

		    }

		}
		case CONFIRM_TYPE_LEARNSKILL:
		{

		    if(response == 1)
		    {

		    	SendClientMessage(playerid,COLOR_YELLOW2,"Learning skill.. Please wait..");
            	SetPlayerProgressBar(playerid,PROGRESS_BAR_LEARNSKILL,30);

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"Skill learning cancelled.");
		        learning_skill[playerid] = 0;

		    }

		}
		case DIALOG_GUNRUN:
		{

			if(response == 1)
			{

				switch(listitem)
				{

				    case 0:
				    {

				        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 7500)
				        {

				            GivePlayerWeaponEx(playerid,24,100);
				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 7500;
				            SendClientMessage(playerid,COLOR_WHITE,"George: Thanks brother! See you around!");
				            faction_gunrun_cooldowns[CharacterInfo[playerid][active_character[playerid]][cFaction]] = gettime();

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have $7500");
				            gunrun[playerid] = 0;

				        }

				    }
				    case 1:
        			{

				    	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10000)
				        {

				            GivePlayerWeaponEx(playerid,24,100);
				            GivePlayerWeaponEx(playerid,29,250);
				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10000;
				            SendClientMessage(playerid,COLOR_WHITE,"George: Thanks brother! See you around!");
				            faction_gunrun_cooldowns[CharacterInfo[playerid][active_character[playerid]][cFaction]] = gettime();

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have $10000");
				            gunrun[playerid] = 0;

				        }

				    }
				    case 2:
				    {

				    	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 12500)
				        {

				            GivePlayerWeaponEx(playerid,24,100);
				            GivePlayerWeaponEx(playerid,29,250);
				            GivePlayerWeaponEx(playerid,25,50);
				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 12500;
				            SendClientMessage(playerid,COLOR_WHITE,"George: Thanks brother! See you around!");
				            faction_gunrun_cooldowns[CharacterInfo[playerid][active_character[playerid]][cFaction]] = gettime();

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have $12500");
				            gunrun[playerid] = 0;

				        }

				    }
				    case 3:
				    {

				    	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 15000)
				        {

				            GivePlayerWeaponEx(playerid,24,100);
				            GivePlayerWeaponEx(playerid,29,250);
				            GivePlayerWeaponEx(playerid,25,50);
				            GivePlayerWeaponEx(playerid,30,300);
				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 15000;
				            SendClientMessage(playerid,COLOR_WHITE,"George: Thanks brother! See you around!");
				            faction_gunrun_cooldowns[CharacterInfo[playerid][active_character[playerid]][cFaction]] = gettime();

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have $15000");
				            gunrun[playerid] = 0;

				        }

				    }

				}

			}
			else
			{

			    SendClientMessage(playerid,COLOR_WHITE,"George: Maybe next time brother!");
			    gunrun[playerid] = 0;

			}

		}
		case DIALOG_LANGUAGE:
		{

		    if(response == 1)
		    {

		        new lang = (listitem + 1);
				if(CharacterInfo[playerid][active_character[playerid]][cLanguage] != lang)
				{

				    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 5000)
				    {

                        SetPlayerProgressBar(playerid,PROGRESS_BAR_LANGUAGE,60);
                        TogglePlayerControllable(playerid,0);
                        SendClientMessage(playerid,COLOR_YELLOW,"Please wait while you learn your language...");
                        learning_language[playerid] = lang;

				    }
				    else
				    {

				        SendErrorMsg(playerid,"You do not have $5000");

				    }

				}
				else
				{

				    SendErrorMsg(playerid,"You already know this language!");

				}

		    }

		}
		case DIALOG_HOUSEUPGRADE:
		{

		    if(response == 1)
		    {

		        new house = GetClosestHouse(playerid);
		        if(IsHouseOwner(playerid,house))
		        {

					if(HouseInfo[house][hUpgrades][listitem] < 5)
					{

						new price = GetHouseUpgradePrice(house,listitem);
						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
						{

						    new name[64];
					    	GetHouseUpgradeName(listitem,name,sizeof(name));
						    CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
						    HouseInfo[house][hUpgrades][listitem] ++;
						    SendClientMessage(playerid,COLOR_GREEN,"|-----House Upgrade Bill-----|");
						    SendStrMsg(playerid,COLOR_WHITE,"Upgrade: %s",name);
						    SendMsg(playerid,COLOR_WHITE,"Price: $%d",price);
						    SendMsg(playerid,COLOR_WHITE,"New level: %d",(HouseInfo[house][hUpgrades][listitem] + 1));
						    PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
						    new str[128];
						    format(str,sizeof(str),"Purchase house upgrade %d for type %d",HouseInfo[house][hUpgrades][listitem],listitem);
						    SendPurchaseLog(playerid,str);

						}
						else
						{

						    SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d",price);

						}

					}
					else
					{

					    new name[64];
					    GetHouseUpgradeName(listitem,name,sizeof(name));
					    SendStrMsg(playerid,COLOR_LIGHTRED,"%s is already at its max level!",name);

					}

		        }
		        else
		        {

		            SendErrorMsg(playerid,"You do not own this house.");

		        }

		    }

		}
		case DIALOG_SELLSTOCK:
		{

		    if(response == 1)
		    {

				new id = confirm_dialog_extra[playerid];
				SendMoney(playerid,sell_stock_price[playerid]);
				new str[256];
				format(str,sizeof(str),"DELETE FROM rp_stock WHERE id = '%d' LIMIT 1",id);
				mysql_query(str,player_threads[playerid]);
				SendMsg(playerid,COLOR_YELLOW2,"You have sold your stocks for $%d",sell_stock_price[playerid]);
				sell_stock_price[playerid] = 0;

		    }

		}
		case DIALOG_BUYNEON:
		{

		    if(response == 1)
		    {

	            new biz = GetClosestBiz(playerid);
	            new veh = GetPlayerVehicleID(playerid);
	            new slot = GetVehicleSlot(veh);
	            if(slot > -1)
	            {
					switch(listitem)
					{

					    case 0:
					    {

							if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 20000)
							{

						        VehicleInfo[slot][vNeon] = NEON_RED;
						        BizInfo[biz][bBank] += 20000;
						        CharacterInfo[playerid][active_character[playerid]][cMoney] -= 20000;
						        RefreshNeon(slot);

						  	}
						  	else
						  	{

						  	    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $20000");

						  	}

					    }
					    case 1:
					    {

							if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 20000)
							{

						        VehicleInfo[slot][vNeon] = NEON_BLUE;
						        BizInfo[biz][bBank] += 20000;
						        CharacterInfo[playerid][active_character[playerid]][cMoney] -= 20000;
						        RefreshNeon(slot);

						  	}
						  	else
						  	{

						  	    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $20000");

						  	}

					    }
					    case 2:
					    {


							buying_neon[playerid] = NEON_GREEN;
							new str[256];
							format(str,sizeof(str),"user=%d&amount=%f",AccountInfo[playerid][aID],0.50);
							str = str_replace(".","|",str);
						    HTTP(playerid,HTTP_POST,URL_CHECK_PURCHASE,str,"HttpNeonReciever");
							TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~w~checking your wallet for funds...~n~ ~n~ ");
							TextDrawShowForPlayer(playerid,payment_text[playerid]);
							PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
							TogglePlayerControllable(playerid,0);

					    }
					    case 3:
					    {

							buying_neon[playerid] = NEON_YELLOW;
							new str[256];
							format(str,sizeof(str),"user=%d&amount=%f",AccountInfo[playerid][aID],0.50);
							str = str_replace(".","|",str);
						    HTTP(playerid,HTTP_POST,URL_CHECK_PURCHASE,str,"HttpNeonReciever");
							TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~w~checking your wallet for funds...~n~ ~n~ ");
							TextDrawShowForPlayer(playerid,payment_text[playerid]);
							PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
							TogglePlayerControllable(playerid,0);

					    }
					    case 4:
					    {

							buying_neon[playerid] = NEON_PINK;
							new str[256];
							format(str,sizeof(str),"user=%d&amount=%f",AccountInfo[playerid][aID],0.50);
							str = str_replace(".","|",str);
						    HTTP(playerid,HTTP_POST,URL_CHECK_PURCHASE,str,"HttpNeonReciever");
							TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~w~checking your wallet for funds...~n~ ~n~ ");
							TextDrawShowForPlayer(playerid,payment_text[playerid]);
							PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
							TogglePlayerControllable(playerid,0);

					    }
					    case 5:
					    {

							buying_neon[playerid] = NEON_WHITE;
							new str[256];
							format(str,sizeof(str),"user=%d&amount=%f",AccountInfo[playerid][aID],0.50);
							str = str_replace(".","|",str);
						    HTTP(playerid,HTTP_POST,URL_CHECK_PURCHASE,str,"HttpNeonReciever");
							TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~w~checking your wallet for funds...~n~ ~n~ ");
							TextDrawShowForPlayer(playerid,payment_text[playerid]);
							PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
							TogglePlayerControllable(playerid,0);

					    }

					}
					SendClientMessage(playerid,COLOR_GREEN,"You have purchased Neons for your vehicle! Use /(v)ehicle neon to enable it.");

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a customizable vehicle.");

				}


		    }

		}
		case DIALOG_COMPREPAIR:
		{

		    if(response == 1)
		    {

		        new price = FetchCompanyRepairPrice(CharacterInfo[playerid][active_character[playerid]][cCompany]);
		        new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
		        if(CompanyInfo[slot][ciBank] >= price)
		        {

		            CompanyInfo[slot][ciBank] -= price;
		            RepairCompanyVehicles(CharacterInfo[playerid][active_character[playerid]][cCompany]);
		            new str[128];
		            new name[MAX_PLAYER_NAME];
		            GetCharacterName(playerid,name);
		            format(str,sizeof(str),"[Company] %s has repaired all empty company vehicles.",name);
		            SendCompanyMsg(CharacterInfo[playerid][active_character[playerid]][cCompany],str);

		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Your company does not have enough money to repair it's vehicles.");

		        }

		    }

		}
		case DIALOG_GATE:
		{

		    if(response == 1)
		    {

		        OpenNearbyGates(playerid,inputtext);
		        SendEmote(playerid,"taps a few keys on the gate's keypad");

		    }

		}
		case DIALOG_ACCEPTRIG:
		{

		    if(response == 1)
		    {

				new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
				if(CompanyInfo[slot][ciBank] >= oil_offer_price[playerid])
				{

				    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] == COMP_PERMS_LEADER)
				    {

				        if(IsPlayerConnectedEx(oil_offer[playerid]))
				        {

							if(GetDistanceBetweenPlayers(oil_offer[playerid],playerid) <= 7.5)
							{

								new oslot = FetchCompanySlot(CharacterInfo[oil_offer[playerid]][active_character[oil_offer[playerid]]][cCompany]);
								CompanyInfo[slot][ciBank] -= oil_offer_price[playerid];
								CompanyInfo[oslot][ciBank] += oil_offer_price[playerid];
								oil_rig_owners[oil_offer_rig[playerid]] = CharacterInfo[playerid][active_character[playerid]][cCompany];
								new name[MAX_PLAYER_NAME];
								new str[128];
								GetCharacterName(oil_offer[playerid],name);
								format(str,sizeof(str),"You have accepted %s's oil rig offer for $%d",name,oil_offer_price[playerid]);
								SendClientMessage(playerid,COLOR_YELLOW2,str);
								GetCharacterName(playerid,name);
								format(str,sizeof(str),"%s has accepted your oil rig offer for $%d",name,oil_offer_price[playerid]);
								SendClientMessage(oil_offer[playerid],COLOR_YELLOW2,str);
                               	oil_offer[playerid] = -1;
								oil_offer_price[playerid] = 0;
								oil_offer_rig[playerid] = -1;

							}
							else
							{

							    SendClientMessage(playerid,COLOR_LIGHTRED,"You are no longer near the seller.");
                               	oil_offer[playerid] = -1;
								oil_offer_price[playerid] = 0;
								oil_offer_rig[playerid] = -1;

							}

				        }
				        else
				        {

							SendClientMessage(playerid,COLOR_LIGHTRED,"Your seller is no longer online.");
							oil_offer[playerid] = -1;
							oil_offer_price[playerid] = 0;
							oil_offer_rig[playerid] = -1;

				        }

				    }
				    else
				    {

				        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not the company leader.");
						oil_offer[playerid] = -1;
						oil_offer_price[playerid] = 0;
						oil_offer_rig[playerid] = -1;

				    }

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"Your company does not have enough money to complete this transaction.");
					oil_offer[playerid] = -1;
					oil_offer_price[playerid] = 0;
					oil_offer_rig[playerid] = -1;

				}

		    }

		}
		case DIALOG_CHOOSERIG:
		{

		    if(response == 1)
		    {

				SendOilJobFromOffset(playerid,listitem);

		    }

		}
		case DIALOG_BUYRIG:
		{

		    if(response == 1)
		    {

				if(CharacterInfo[playerid][active_character[playerid]][cCompany] > 0)
				{

					new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
					if(CompanyInfo[slot][ciBank] >= 75000)
					{

						new rig = NearestRig(playerid);
						if(rig > -1)
						{

						    if(!IsRigOwned(rig))
						    {

						        CompanyInfo[slot][ciBank] -= 75000;
								oil_rig_owners[rig] = CharacterInfo[playerid][active_character[playerid]][cCompany];
								oil_rig_objects[rig] = F_CreateObject(3426,oil_rigs[rig][0],oil_rigs[rig][1],oil_rigs[rig][2],0.0,0.0,0.0);
								SendClientMessage(playerid,COLOR_YELLOW2,"You have just purchased this oil rig for $75000");

						    }
						    else
						    {

						        SendClientMessage(playerid,COLOR_LIGHTRED,"This rig is already owned.");

						    }

						}
						else
						{

							SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a rig.");

						}

					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"Your company does not have $75000");

					}

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a company.");

				}

		    }

		}
		case DIALOG_FUELCOMPANY:
		{

		    if(response == 1)
		    {

	        	new price = FetchCompanyRefuelPrice(CharacterInfo[playerid][active_character[playerid]][cCompany]);
	        	new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
	        	if(CompanyInfo[slot][ciBank] >= price)
	        	{

	        	    new str[128];
	        		RefuelCompanyVehicles(CharacterInfo[playerid][active_character[playerid]][cCompany]);
				    CompanyInfo[slot][ciBank] -= price;
				   	format(str,sizeof(str),"You have refueled all company vehicles for $%d",price);
					SendClientMessage(playerid,COLOR_YELLOW2,str);

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"Your company does not have enough money to refuel it's vehicles.");

				}

		    }

		}
		case DIALOG_GPS:
		{

			if(response == 1)
			{

			    switch(listitem)
				{

			        case 0:
			        {

			            ShowClosestBiz(playerid,BIZ_TYPE_BANK);

			        }
			        case 1:
			        {

			            ShowClosestBiz(playerid,BIZ_TYPE_FOOD);

			        }
			        case 2:
			        {

			            ShowClosestBiz(playerid,BIZ_TYPE_GEN);

			        }
			        case 3:
			        {

			            ShowClosestBiz(playerid,BIZ_TYPE_VEHICLE);

			        }
			        case 4:
			        {

			            ShowClosestBiz(playerid,BIZ_TYPE_VUPGRADE);

			        }
			        case 5:
			        {

			            ShowClosestBiz(playerid,BIZ_TYPE_PLANE);

			        }
			        case 6:
			        {

			            ShowClosestBiz(playerid,BIZ_TYPE_BOAT);

			        }
			        case 7:
			        {

			            ShowClosestBiz(playerid,BIZ_TYPE_FUEL);

			        }
					case 8:
					{

					    ShowClosestBiz(playerid,BIZ_TYPE_GUN);

					}
					case 9:
					{

						ShowClosestBiz(playerid,BIZ_TYPE_MAIL);

					}
					case 10:
					{

						ShowClosestBiz(playerid,BIZ_TYPE_DRINK);

					}
					case 11:
					{

					    ShowClosestBiz(playerid,BIZ_TYPE_AD);

					}
					case 12:
					{

					    ShowClosestBiz(playerid,BIZ_TYPE_HOTEL);

					}
					case 13:
					{

					    ShowClosestBiz(playerid,BIZ_TYPE_CLOTHES);

					}
					case 14:
					{

					    ShowClosestBiz(playerid,BIZ_TYPE_RACES);

					}
					case 15:
					{

					    SetPlayerCheckpoint(playerid,2133.0959,-1149.4222,24.2833,2.5);
					    cp_target[playerid] = 1;

					}
					case 16:
					{

						SetPlayerCheckpoint(playerid,2695.8445,-1704.9447,11.8438,2.5);
					    cp_target[playerid] = 1;

					}

			    }
			    gps_cooldown[playerid] = 60;

			}

		}
		case DIALOG_CONFIRMHP:
		{

		    if(response == 1)
		    {

	    	 	new deaths = CharacterInfo[playerid][active_character[playerid]][cDeaths];
				new price = (HP_INSURANCE_BASEPRICE * (deaths + 1));
				if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
				{

				    CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
				    CharacterInfo[playerid][active_character[playerid]][cHealthInsurance] = 1;
					new str[128];
					format(str,sizeof(str),"You have purchased health insurance for $%d, you will not be charged funeral bills upon death.",price);
					SendClientMessage(playerid,COLOR_YELLOW,str);
					PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
					TogglePlayerControllable(playerid,1);

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money.");
				    PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
				    TogglePlayerControllable(playerid,1);

				}

		    }
		    else
		    {

		        PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
		        TogglePlayerControllable(playerid,1);

		    }

		}
		case DIALOG_RACES:
		{

		    if(response == 1)
		    {

				racing_sys_writing[playerid] = listitem;
				SendClientMessage(playerid,COLOR_YELLOW,"You have chosen your horse, type how much money you would like to bet. (/cancelbet to cancel)");

		    }
		    else
		    {

		        PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
		        TogglePlayerControllable(playerid,1);

		    }

		}
		case DIALOG_HOUSE:
		{

		    new house = GetClosestHouse(playerid);
		    if(house > -1)
		    {

				if(response == 1 && !IsHouseOwner(playerid,house) && !IsRentingHouse(playerid,house))
				{

		            if(listitem == 0)
		            {
		            	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= HouseInfo[house][hPrice])
		        		{
						    if(HouseInfo[house][hOwner] == 0)
		    				{

		    				    if(NumOfHouses(playerid) < 3)
		    				    {

		    				        if(CharacterInfo[playerid][active_character[playerid]][cLevel] >= HouseInfo[house][hLevel])
									{

										new name[MAX_PLAYER_NAME];
										GetCharacterName(playerid,name);
										CharacterInfo[playerid][active_character[playerid]][cMoney] -= HouseInfo[house][hPrice];
										HouseInfo[house][hOwner] = CharacterInfo[playerid][active_character[playerid]][cID];
										format(HouseInfo[house][hOwnerName],MAX_PLAYER_NAME,"%s",name);
										PlayerPlaySound(playerid,1149,0.0,0.0,0.0);
										GameTextForPlayer(playerid,"~g~You have purchased a new house!",5000,5);
					                    SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a new house! Using /house inside and outside of the house will give you");
					                    SendClientMessageA(playerid,COLOR_GREEN,"a list of available options.");
		                                RefreshHouseTag(house);
		                          	}
		                          	else
		                          	{

										new str[128];
										format(str,sizeof(str),"You are not level %d",HouseInfo[house][hLevel]);
										SendErrorMsg(playerid,str);

		                          	}

								}
								else
								{

								    SendErrorMsg(playerid,"You already own 3 houses!");
								    return 1;

								}

							}
							else
						    {

						        SendErrorMsg(playerid,"This house is not for sale!");

						    }
						}
						else
				        {

				            SendErrorMsg(playerid,"You do not have enough money to purchase this house");

				        }

					}
					else if(listitem == 1)
					{

						if(!CharacterInfo[playerid][active_character[playerid]][cRenting])
						{

							if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= HouseInfo[house][hRentPrice])
							{

							    if(HouseInfo[house][hRentable])
							    {

									CharacterInfo[playerid][active_character[playerid]][cMoney] -= HouseInfo[house][hRentPrice];
									HouseInfo[house][hBank] += HouseInfo[house][hRentPrice];
									CharacterInfo[playerid][active_character[playerid]][cRenting] = HouseInfo[house][hID];
									PlayerPlaySound(playerid,1149,0.0,0.0,0.0);
									GameTextForPlayer(playerid,"~g~You have started renting this house!",5000,5);
									SendClientMessageA(playerid,COLOR_GREEN,"You have just started renting this house, Use /house for a list of available actions.");

								}
								else
								{

									PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
									GameTextForPlayer(playerid,"~g~This house is not currentlly rentable!",5000,5);

								}

							}
							else
							{

							    SendErrorMsg(playerid,"You do not have enough money to rent this house.");

							}

						}
						else
						{

						    SendErrorMsg(playerid,"You are already renting a house");

						}

					}
					else
					{

					    SendErrorMsg(playerid,"Nothing Selected");

					}


				}
				else if(response == 1 && (IsHouseOwner(playerid,house) || IsRentingHouse(playerid,house)))
				{

				    switch(listitem)
				    {

				        case 0:
				        {

							if(HouseInfo[house][hLocked])
							{

				                HouseInfo[house][hLocked] = 0;
				                GameTextForPlayer(playerid,"~g~House Unlocked",5000,6);
				                PlayerPlaySound(playerid,1145,0.0,0.0,0.0);

							}
							else
							{

							    HouseInfo[house][hLocked] = 1;
							    GameTextForPlayer(playerid,"~r~House Locked",5000,6);
							    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);

							}

						}
						case 1:
						{

						    if(IsRentingHouse(playerid,house))
							{

								CharacterInfo[playerid][active_character[playerid]][cRenting] = 0;
								GameTextForPlayer(playerid,"~g~You have unrented your house!",5000,5);
								PlayerPlaySound(playerid,1149,0.0,0.0,0.0);
								SaveStats(playerid);

						    }
						    else if(IsHouseOwner(playerid,house))
						    {

								SendConfirmationMsg(playerid,"You are about to sell your house for 60 percent of its market value. Are you sure you wish to proceed?",CONFIRM_TYPE_SELLHOUSE,house);

						    }

						}
						case 2:
						{

						    if(IsHouseOwner(playerid,house))
						    {

								house_withdraw[playerid] = house;
								SendClientMessage(playerid,COLOR_GREEN,"Type the amount of money you want to withdraw.");

						    }

						}
						case 3:
						{

							if(IsHouseOwner(playerid,house))
							{

								house_settingrent[playerid] = house;
								SendClientMessage(playerid,COLOR_GREEN,"Type the new rentprice for your house.");

							}

						}
						case 4:
						{

						    if(IsHouseOwner(playerid,house))
						    {

						        if(tenant_cooldown[playerid] == 0)
						        {
						        	new str[256];
							        format(str,sizeof(str),"SELECT name FROM rp_characters WHERE renting = '%d' ORDER BY id DESC",HouseInfo[house][hID]);
							        mysql_query(str,player_threads[playerid],QUERY_TENANTS);
							        tenant_cooldown[playerid] = 10;
								}
								else
								{

								    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot request your tenant list more than once every 10 seconds.");

								}

						    }

						}
						case 5:
						{

						    if(IsHouseOwner(playerid,house))
						    {

						        ShowHouseUpgradeDialog(playerid,house);

						    }
						    else
						    {

						        SendErrorMsg(playerid,"You are not the owner of this house.");

						    }

						}
						case 6:
						{

							HouseInfo[house][hRentable] = !HouseInfo[house][hRentable];
							new rentable[16];
							if(HouseInfo[house][hRentable])
							{

								format(rentable,sizeof(rentable),"~g~Renting Enabled");

							}
							else
							{

							    format(rentable,sizeof(rentable),"~r~Renting Disabled");

							}
					       	GameTextForPlayer(playerid,rentable,5000,6);
					       	PlayerPlaySound(playerid,1145,0.0,0.0,0.0);

						}

				    }

				}
				else
				{

				    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);

				}

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You are not near a house!");

		    }
		    TogglePlayerControllable(playerid,1);

		}
		case CONFIRM_TYPE_SELLHOUSE:
		{

			if(response == 1)
			{
			    new house = confirm_dialog_extra[playerid];
			    new str[256];
			    if(IsHouseOwner(playerid,house))
			    {

			        HouseInfo[house][hOwner] = 0;
					format(HouseInfo[house][hOwnerName],MAX_PLAYER_NAME,"No-one");
					CharacterInfo[playerid][active_character[playerid]][cMoney] += ((60 * HouseInfo[house][hPrice]) / 100);
					format(str,sizeof(str),"~g~You have sold your house for $%d",((60 * HouseInfo[house][hPrice]) / 100));
					GameTextForPlayer(playerid,str,5000,5);
					PlayerPlaySound(playerid,1149,0.0,0.0,0.0);
					format(str,sizeof(str),"House Information\nPrice: $%d\n\nThis house is for sale!\nUse /house for a list of available actions",HouseInfo[house][hPrice]);
					Update3DTextLabelText(HouseInfo[house][hPickup],TEAM_GROVE_COLOR,str);

			    }
			}

		}
		case DIALOG_FOOD:
		{

		    if(response == 1)
		    {

		        switch(listitem)
		        {

		            case 0:
		            {

		                if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 5)
		                {

		                    new biz = (in_biz[playerid] > -1) ? in_biz[playerid] : IsAtDriveThru(playerid);
		                    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 5;
							new Float:hp;
							GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,(hp + 25));
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							BizInfo[biz][bBank] += 5;
					    	if(!IsPlayerInAnyVehicle(playerid)) { ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); }

		                }
		                else
		                {

		                    SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have enough money to purchase this meal.");
		                    PlayerPlaySound(playerid,1055,0.0,0.0,0.0);

		                }

		            }
		            case 1:
		            {

		                if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10)
		                {

                            new biz = (in_biz[playerid] > -1) ? in_biz[playerid] : IsAtDriveThru(playerid);
		                    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10;
							new Float:hp;
							GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,(hp + 40));
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							BizInfo[biz][bBank] += 10;
							if(!IsPlayerInAnyVehicle(playerid)) { ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); }

		                }
		                else
		                {

		                    SendErrorMsg(playerid,"You do not have enough money to purchase this meal.");

		                }

		            }
		            case 2:
		            {

		                if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 15)
		                {

                            new biz = (in_biz[playerid] > -1) ? in_biz[playerid] : IsAtDriveThru(playerid);
		                    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 15;
							new Float:hp;
							GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,(hp + 65));
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							BizInfo[biz][bBank] += 15;
							if(!IsPlayerInAnyVehicle(playerid)) { ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); }

		                }
		                else
		                {

		                    SendErrorMsg(playerid,"You do not have enough money to purchase this meal.");

		                }

					}
		            case 3:
		            {

		                if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 25)
		                {

                            new biz = (in_biz[playerid] > -1) ? in_biz[playerid] : IsAtDriveThru(playerid);
		                    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 25;
							new Float:hp;
							GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,100);
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							BizInfo[biz][bBank] += 25;
							if(!IsPlayerInAnyVehicle(playerid)) { ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); }

		                }
		                else
		                {

		                    SendErrorMsg(playerid,"You do not have enough money to purchase this meal.");

		                }

		            }

		        }

		    }

		}
		case DIALOG_FUEL:
		{

		    if(response == 1)
		    {

				new price = confirm_dialog_extra[playerid];
				if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
				{

				    CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
				    new veh = GetPlayerVehicleID(playerid);
				    new slot = GetVehicleSlot(veh);
				    VehicleInfo[slot][vFuel] = 100;
				    PlayerPlaySound(playerid,1054,0.0,0.0,0.0);

				}
				else
				{

				    SendErrorMsg(playerid,"You do not have enough money to re-fuel your car!");

				}
				confirm_dialog_extra[playerid] = -1;

		    }

		}
 	 	case DIALOG_BUY:
		{

		    if(response == 1)
		    {

		        new biz = in_biz[playerid];
				switch(listitem)
				{

				    case 0:
				    {

				        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 150)
				        {

							ShowPlayerDialog(playerid,DIALOG_BUYPHONE,DIALOG_STYLE_LIST,"Please choose a model of phone...","Jazz Phone\nJungle Phone\nTiger Phone\nPurple Phone\nLepord Phone\nRed Phone\nGreen Phone\njPhone v91\nYellow Phone\nWhite Phone","Confirm","Cancel");

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have enough money to purchase this item.");

				        }

				    }
				    case 1:
				    {

				        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 50)
				        {

				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 50;
							mask[playerid] = true;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a mask! Use /mask to put your mask on!");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 50;

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

				    }
				    case 2:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 1000)
				        {

							if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_GASCAN,1))
							{

							    new res = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_GASCAN,1);
							    if(res)
							    {

						            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 1000;
									SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a gas can! Use /fill to fill a nearby car!");
						            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
						            BizInfo[biz][bBank] += 1000;

						      	}
						      	else
						      	{

						      	    SendErrorMsg(playerid,"Unable to give item.");

						      	}

					       	}
					       	else
					       	{

					       	    SendErrorMsg(playerid,"You cannot carry any more of this item.");

					       	}

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

					}
					case 3:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10)
				        {

				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10;
							cooking_eggs[playerid] += 6;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased some eggs! Use /cook when in a house to begin cooking.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 10;

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

					}
					case 4:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10)
				        {

				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10;
							cooking_bread[playerid] ++;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased some bread! Use /cook when in a house to begin cooking.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 10;

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

					}
					case 5:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 20)
				        {

				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 20;
							cooking_meat[playerid] ++;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased some meat! Use /cook when in a house to begin cooking.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 20;

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

					}
					case 6:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 15)
				        {

				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 15;
							cooking_cheese[playerid] += 5;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased some cheese! Use /cook when in a house to begin cooking.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 15;

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

					}
					case 7:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10)
				        {

				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10;
							cooking_rice[playerid] ++;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased some rice! Use /cook when in a house to begin cooking.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 10;

				        }
				        else
				        {

					        SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

					}
					case 8:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 25)
				        {

				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 25;
							cooking_chilli[playerid] ++;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased some spicy chillis! Use /cook when in a house to begin cooking.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 25;

				        }
				        else
				        {

							SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

					}
					case 9:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 5)
				        {

				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 5;
							cooking_dough[playerid] ++;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased some ready to go dough! Use /cook when in a house to begin cooking.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 5;

				        }
				        else
				        {

				            SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

					}
					case 10:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 200)
				        {

				            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 200;
							toolkit[playerid] = 1;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a toolkit. Use /fix in a vehicle to repair it.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 150;

				        }
				        else
				        {

				           	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

				        }

					}
					case 11:
					{

					    if(!HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1))
					    {

					        if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1))
					        {

							    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 500)
							    {

    						    	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1);
    						    	if(rec)
    						    	{
								    	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 500;
										CharacterInfo[playerid][active_character[playerid]][cRadioChannel] = 0;
										format(CharacterInfo[playerid][active_character[playerid]][cRadioAuth],16,"");
										SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a radio (/radiocontrol).");
							            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							            BizInfo[biz][bBank] += 500;
									}

							    }
							    else
							    {

							    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");

							    }

							}
							else
							{

							    SendErrorMsg(playerid,"You cannot carry anymore items!");
							    return 1;

							}

						}
						else
						{

						    SendErrorMsg(playerid,"You already have a radio.");

						}

					}
					case 12:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 50)
					    {

					    	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 50;
							rope[playerid] = 1;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a rope (/tie).");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 50;

					    }
					    else
					    {

					    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

					    }

					}
					case 13:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 50)
					    {

					    	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 50;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a Bat.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 50;
				            GivePlayerWeaponEx(playerid,5,1);

					    }
					    else
					    {

					    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

					    }

					}
					case 14:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 50)
					    {

					    	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 50;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a Shovel.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 50;
				            GivePlayerWeaponEx(playerid,6,1);

					    }
					    else
					    {

					    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

					    }

					}
					case 15:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 25)
					    {

					    	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 25;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased some flowers.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 25;
				            GivePlayerWeaponEx(playerid,14,1);

					    }
					    else
					    {

					    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

					    }

					}
					case 16:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 100)
					    {

					    	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 100;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a camera.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 100;
				            GivePlayerWeaponEx(playerid,43,50);

					    }
					    else
					    {

					    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

					    }

					}
					case 17:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 5)
					    {

					    	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 5;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a dice.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 5;
				            dice[playerid] = 1;

					    }
					    else
					    {

					    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");


					    }

					}
					case 18:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 250)
					    {

					        CharacterInfo[playerid][active_character[playerid]][cMoney] -= 250;
					        SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a GPS, use /gps to find locations.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 250;
				            gps[playerid] = 1;
				            ShowSpeedCameras(playerid);

					    }
					    else
					    {

					    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");

					    }

					}
					case 19:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10)
					    {

					        CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10;
					        SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a cup of coffee. Your drunk level will now be lowered slightly.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 10;
				            if(GetPlayerDrunkLevel(playerid) > 0)
				            {

				                SetPlayerDrunkLevel(playerid,(GetPlayerDrunkLevel(playerid) - 2500));

				            }
				            SendEmote(playerid,"sips on his cup of coffee.");

					    }
					    else
					    {

					    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");

					    }

					}
					case 20:
					{

					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 1250)
					    {

							if(!HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_BOOMBOX,1))
							{

							    if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_BOOMBOX,1))
							    {

    							    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 1250;
							    	GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_BOOMBOX,1);
							    	SendClientMessage(playerid,COLOR_GREEN,"You have bought a Boom Box for $1250");

							    }
							    else
							    {

							        SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anything else!");

							    }

							}
							else
							{

							    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a boom box!");

							}

					    }
					    else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $1250");

						}

					}
					case 21:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 500)
					    {

							if(!HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISHROD,1))
							{

							    if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISHROD,1))
							    {

    							    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 500;
							    	GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISHROD,1);
							    	SendClientMessage(playerid,COLOR_GREEN,"You have bought a Fishing Rod for $500");

							    }
							    else
							    {

							        SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anything else!");

							    }

							}
							else
							{

							    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a fishing rod!");

							}

					    }
					    else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $500");

						}

					}
					/*case 18:
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 25)
					    {

					    	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 25;
							SendClientMessageA(playerid,COLOR_GREEN,"You have just purchased a deck of cards.");
				            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				            BizInfo[biz][bBank] += 25;
				            card_sys_deck[playerid] = 1;

					    }
					    else
					    {

					    	SendErrorMsg(playerid,"You do not have enough money to purchase this item.");
				            return 1;

					    }

					}*/

				}

		    }

		}
		case DIALOG_BUY_GUN:
		{

		    if(response == 1)
		    {

		        new biz = in_biz[playerid];
		        switch(listitem)
		        {

		            case 0:
		            {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 3000)
						{

						    GivePlayerWeaponEx(playerid,WEAPON_DEAGLE,64);
                            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 3000;
							SendClientMessageA(playerid,COLOR_LIGHTRED,"You have just bought a Desert Eagle for $3000");
							BizInfo[biz][bBank] += 3000;

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have enough money to purchase this weapon");
						    return 1;

						}

		            }
		            case 1:
		            {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 5000)
						{

						    GivePlayerWeaponEx(playerid,WEAPON_SHOTGUN,50);
                            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 5000;
							SendClientMessageA(playerid,COLOR_LIGHTRED,"You have just bought a Shotgun for $5000");
							BizInfo[biz][bBank] += 5000;

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have enough money to purchase this weapon");
						    return 1;

						}

		            }
		            case 2:
		            {

		            	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 6500)
						{

						    GivePlayerWeaponEx(playerid,WEAPON_RIFLE,30);
                            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 6500;
							SendClientMessageA(playerid,COLOR_LIGHTRED,"You have just bought a Rifle for $6500");
							BizInfo[biz][bBank] += 6500;

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have enough money to purchase this weapon");
						    return 1;

						}

		            }
		            case 3:
		            {

		            	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 250)
						{

                            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 250;
							SendClientMessageA(playerid,COLOR_LIGHTRED,"You have just bought some Body Armor for $250");
							SetPlayerArmour(playerid,100);
							BizInfo[biz][bBank] += 250;

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have enough money to purchase this weapon");
						    return 1;

						}

		            }
		            case 4:
		            {

		            	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 1500)
						{

						    GivePlayerWeaponEx(playerid,WEAPON_SILENCED,64);
                            PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 1500;
							SendClientMessageA(playerid,COLOR_LIGHTRED,"You have just bought an Silenced Pistol for $1500");
							BizInfo[biz][bBank] += 1500;

						}
						else
						{

						    SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have enough money to purchase this weapon");
						    PlayerPlaySound(playerid,1055,0.0,0.0,0.0);
						    return 1;

						}


		            }

		        }

		    }

		}
		case DIALOG_BIZ:
		{

		    if(response == 1)
		    {

			    new biz = GetClosestBiz(playerid);
			    if(BizInfo[biz][bOwner] == 0)
			    {

					switch(listitem)
					{

					    case 0:
					    {

					        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= BizInfo[biz][bPrice])
					        {

								if(NumOfBizes(playerid) < 2)
								{

								    if(CharacterInfo[playerid][active_character[playerid]][cLevel] >= BizInfo[biz][bLevel])
								    {

							            new name[MAX_PLAYER_NAME];
										GetCharacterName(playerid,name);
							            CharacterInfo[playerid][active_character[playerid]][cMoney] -= BizInfo[biz][bPrice];
							            BizInfo[biz][bOwner] = CharacterInfo[playerid][active_character[playerid]][cID];
							            BizInfo[biz][bBank] = 0;
										BizInfo[biz][bBillTime] = 86400;
							            format(BizInfo[biz][bOwnerName],MAX_PLAYER_NAME,"%s",name);
							            GameTextForPlayer(playerid,"~g~You have purchased a new business!",5000,5);
										PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
										new str[256];
										format(str,sizeof(str),"Business Information\n%s\n\nEntrance Fee: $%d\nUse /enter to enter this building",BizInfo[biz][bName],BizInfo[biz][bEntranceFee]);
										Update3DTextLabelText(BizInfo[biz][bPickup],COLOR_LIGHTBLUE,str);

									}
									else
									{

										new str[128];
										format(str,sizeof(str),"You are not level %d",BizInfo[biz][bLevel]);
										SendErrorMsg(playerid,str);

									}

								}
								else
								{

								    SendErrorMsg(playerid,"You cannot own more than 2 businesses at a time.");

								}

					        }
					        else
					        {

					            SendErrorMsg(playerid,"You do not have enough money to purchase this business.");

					        }

					    }

					}

			    }
			    else if(IsBusinessOwner(playerid,biz))
			    {

			        switch(listitem)
			        {

			            case 0:
						{

						    if(BizInfo[biz][bOpen])
							{

								BizInfo[biz][bOpen] = 0;
								GameTextForPlayer(playerid,"~r~Business Closed",5000,6);
                                PlayerPlaySound(playerid,1145,0.0,0.0,0.0);

							}
							else
							{

							 	BizInfo[biz][bOpen] = 1;
								GameTextForPlayer(playerid,"~g~Business Opened",5000,6);
                                PlayerPlaySound(playerid,1145,0.0,0.0,0.0);

							}

						}
						case 1:
						{

						    if(BizInfo[biz][bType] == BIZ_TYPE_FUEL)
						    {

						        setting_fuel_price[playerid] = 1;
						        SendClientMessageA(playerid,COLOR_YELLOW2,"Type the new fuel price for your business");

						    }
						    else
						    {

						        ShowBusinessFinance(playerid,biz);

						    }

						}
						case 2:
						{

						    if(BizInfo[biz][bType] == BIZ_TYPE_FUEL)
						    {

                                ShowBusinessFinance(playerid,biz);

						    }
						    else
						    {

						        SendConfirmationMsg(playerid,"You are about to sell your business for 60 percent of its market value. Are you sure you wish to proceed?",DIALOG_SELLBIZ,biz);

						    }

						}
						case 3:
						{

						    if(BizInfo[biz][bType] == BIZ_TYPE_FUEL)
						    {

						    	SendConfirmationMsg(playerid,"You are about to sell your business for 60 percent of its market value. Are you sure you wish to proceed?",DIALOG_SELLBIZ,biz);

							}
							else
							{

								biz_editname[playerid] = 1;
								SendClientMessageA(playerid,COLOR_YELLOW,"Type the new name of your business.");

							}

						}
						case 4:
						{

						    if(BizInfo[biz][bType] == BIZ_TYPE_FUEL)
						    {
						        biz_editname[playerid] = 1;
							    SendClientMessageA(playerid,COLOR_YELLOW,"Type the new name of your business.");
						    }
						    else
						    {

								biz_withdraw[playerid] = biz;
								SendClientMessageA(playerid,COLOR_GREEN,"Type the amount of money you want to withdraw.");

						    }

						}
						case 5:
						{

						    if(BizInfo[biz][bType] == BIZ_TYPE_FUEL)
						    {

								biz_withdraw[playerid] = biz;
								SendClientMessageA(playerid,COLOR_GREEN,"Type the amount of money you want to withdraw.");

						    }
						    else
						    {

						        biz_editingentrance[playerid] = GetClosestBiz(playerid);
						        SendClientMessage(playerid,COLOR_WHITE,"Type how much you would like the entrance price to be.");

						    }

						}

			        }

			    }

			}

		}
		case DIALOG_SELLBIZ:
		{

		    if(response == 1)
		    {
			    if(IsBusinessOwner(playerid,confirm_dialog_extra[playerid]))
			    {

					BizInfo[confirm_dialog_extra[playerid]][bOwner] = 0;
					CharacterInfo[playerid][active_character[playerid]][cMoney] += ((60 * BizInfo[confirm_dialog_extra[playerid]][bPrice]) / 100);
					GameTextForPlayer(playerid,"~g~You have sold your business",5000,5);
					PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
					new str[256];
					format(str,sizeof(str),"Business Information\n%s\n\nPrice: $%d\nLevel: %d\nThis business is for sale!\nUse /biz for a list of available actions",BizInfo[confirm_dialog_extra[playerid]][bName],BizInfo[confirm_dialog_extra[playerid]][bPrice],BizInfo[confirm_dialog_extra[playerid]][bLevel]);
					Update3DTextLabelText(BizInfo[confirm_dialog_extra[playerid]][bPickup],COLOR_LIGHTBLUE,str);

			    }
			 }

		}
		case DIALOG_INSURANCE:
		{

		    if(response == 1)
      		{

				new price = confirm_dialog_extra[playerid];
				if(price > 0)
				{

				    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
				    {

						new veh = GetPlayerVehicleID(playerid);
						new slot = GetVehicleSlot(veh);
						if(slot > -1)
						{

						    new biz = GetClosestBiz(playerid);
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
							if(BizInfo[biz][bType] == BIZ_TYPE_VUPGRADE) { BizInfo[biz][bBank] += price; }
							VehicleInfo[slot][vInsurance] ++;
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							SendClientMessageA(playerid,COLOR_GREEN,"You have added an insurance to your vehicle.");

						}
						else
						{

						    SendErrorMsg(playerid,"You do not own this vehicle.");

						}

				    }
				    else
				    {

				        SendErrorMsg(playerid,"You do not have enough money to purchase this insurance.");
				        return 1;

				    }

				}

		    }

		}
		case DIALOG_LOCK:
		{

		    if(response == 1)
		    {

		        switch(listitem)
		        {

		            case 0:
		            {

		                if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 2500)
		                {

							if(IsAtUpgradeShop(playerid))
							{

							    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 2500)
							    {

									PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
									SendClientMessageA(playerid,COLOR_GREEN,"Your vehicle lock is upgrading...");
									vu_upgrading[playerid] = 1;
									vu_upgradelevel[playerid] = 1;
                                    SetPlayerProgressBar(playerid,PROGRESS_BAR_VUPGRADE,30);
                                    TogglePlayerControllable(playerid,0);

								}
								else
								{

								   	SendErrorMsg(playerid,"You do not have enough money to purchase this upgrade");
								    return 1;

								}

							}
							else
							{

							    SendErrorMsg(playerid,"You are not at an upgrade store");
							    return 1;

							}


		                }

		            }
		            case 1:
		            {

		                if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 12000)
		                {

							if(IsAtUpgradeShop(playerid))
							{

							    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 12000)
							    {

									PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
									SendClientMessageA(playerid,COLOR_GREEN,"Your vehicle lock is upgrading...");
									vu_upgrading[playerid] = 1;
									vu_upgradelevel[playerid] = 2;
									SetPlayerProgressBar(playerid,PROGRESS_BAR_VUPGRADE,30);
									TogglePlayerControllable(playerid,0);

								}
								else
								{

								    SendErrorMsg(playerid,"You do not have enough money to purchase this upgrade");
								    return 1;

								}

							}
							else
							{

							    SendErrorMsg(playerid,"You are not at an upgrade store");
							    return 1;

							}


		                }

		            }
		            case 2:
		            {

		                if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 25000)
		                {

							if(IsAtUpgradeShop(playerid))
							{

							    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 25000)
							    {

									PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
									SendClientMessageA(playerid,COLOR_GREEN,"Your vehicle lock is upgrading...");
									vu_upgrading[playerid] = 1;
									vu_upgradelevel[playerid] = 3;
									SetPlayerProgressBar(playerid,PROGRESS_BAR_VUPGRADE,30);
									TogglePlayerControllable(playerid,0);

								}
								else
								{

								    SendErrorMsg(playerid,"You do not have enough money to purchase this upgrade");
								    return 1;

								}

							}
							else
							{

							    SendErrorMsg(playerid,"You are not at an upgrade store");
							    return 1;

							}


		                }

		            }
		            case 3:
		            {

		                if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 50000)
		                {

							if(IsAtUpgradeShop(playerid))
							{

							    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 50000)
							    {

									PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
									SendClientMessageA(playerid,COLOR_GREEN,"Your vehicle lock is upgrading...");
									vu_upgrading[playerid] = 1;
									vu_upgradelevel[playerid] = 4;
									SetPlayerProgressBar(playerid,PROGRESS_BAR_VUPGRADE,30);
									TogglePlayerControllable(playerid,0);

								}
								else
								{

								    SendErrorMsg(playerid,"You do not have enough money to purchase this upgrade");
								    return 1;

								}

							}
							else
							{

							    SendErrorMsg(playerid,"You are not at an upgrade store");
							    return 1;

							}


		                }

		            }

				}

		    }

		}
		case DIALOG_MAIL:
		{

			if(response == 1)
			{

				new offset = listitem; new pos = 0; new active_mail = -1;
				for(new i = 0; i < MAX_MAIL; i ++)
				{

				    if(MailInfo[playerid][i][mActive] > 0)
				    {

						if(pos == offset)
						{

							active_mail = i;

						}
						pos ++;

				    }

				}

				if(active_mail > -1)
				{

				    ShowLetter(playerid,active_mail);

				}
				else
				{

				    SendClientMessageA(playerid,COLOR_LIGHTRED,"An error occured");

				}

			}

		}
		case DIALOG_PASSGUN:
		{

		    if(response == 1)
		    {

			    new other = weapontransfer_other[playerid];
			    if(GetDistanceBetweenPlayers(playerid,other) < 7.5 && IsPlayerConnectedEx(other))
			    {

			        new offset = listitem;
					new weapons[13][3]; new tmpweapons[13][2];
					new a = 0;
					for (new i = 0; i < 13; i++)
					{
	                    GetPlayerWeaponData(playerid, i, tmpweapons[i][0], tmpweapons[i][1]);
	                    if(tmpweapons[i][0] > 0)
	                    {
							GetPlayerWeaponData(playerid, i, weapons[a][0], weapons[a][1]);
							weapons[a][2] = i;
							a ++;
						}
					}
			        new weapon; new ammo;
			        GetPlayerWeaponData(playerid,offset,weapon,ammo);
			        SetPlayerAmmo(playerid,weapons[offset][0],0);
			        GivePlayerWeaponEx(other,weapons[offset][0],weapons[offset][1]);
			        new str[256];
			        new name[MAX_PLAYER_NAME];
			        GetCharacterName(other,name);
			        format(str,sizeof(str),"discretely takes out a weapon and hands it to %s",name);
			        SendEmote(playerid,str);
			        weapontransfer_other[playerid] = -1;
			        TogglePlayerControllable(playerid,1);
					LogWeaponsTransfer(playerid,other,weapons[offset][0]);

				}
				else
				{

				    SendErrorMsg(playerid,"You are no longer near this player");

				}

			}
			else
			{

			    TogglePlayerControllable(playerid,1);

			}


		}
		case DIALOG_DRINK:
		{

			if(response == 1)
			{

			    new biz = in_biz[playerid];
			    switch(listitem)
			    {

			        case 0:
			        {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 1)
						{

						    new Float:hp;
						    GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,(hp + 1));
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 1;
							SendClientMessageA(playerid,COLOR_GREEN,"You have purchased a water for $1");
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							SendEmote(playerid,"purchases a glass of water from the bar");
							BizInfo[biz][bBank] += 1;
							GivePlayerDrink(playerid,SPECIAL_ACTION_DRINK_SPRUNK,5);

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have $1");

						}

			        }
			        case 1:
			        {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 3)
						{

						    new Float:hp;
						    GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,(hp + 5));
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 3;
							SendClientMessageA(playerid,COLOR_GREEN,"You have purchased a cola for $3");
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							SendEmote(playerid,"purchases a glass of cola from the bar");
							BizInfo[biz][bBank] += 3;
							GivePlayerDrink(playerid,SPECIAL_ACTION_DRINK_SPRUNK,6);

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have $3");

						}

			        }
			        case 2:
			        {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 3)
						{

						    new Float:hp;
						    GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,(hp + 5));
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 3;
							SendClientMessageA(playerid,COLOR_GREEN,"You have purchased a sprunk for $3");
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							SendEmote(playerid,"purchases a glass of sprunk from the bar");
							BizInfo[biz][bBank] += 3;
							GivePlayerDrink(playerid,SPECIAL_ACTION_DRINK_SPRUNK,7);

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have $3");

						}

			        }
			        case 3:
			        {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 5)
						{

						    new Float:hp;
						    GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,(hp + 15));
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 5;
							SendClientMessageA(playerid,COLOR_GREEN,"You have purchased a beer for $5");
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							SendEmote(playerid,"purchases a pint of beer from the bar");
							SetPlayerDrunkLevel(playerid,(GetPlayerDrunkLevel(playerid) + 1000));
							BizInfo[biz][bBank] += 5;
							GivePlayerDrink(playerid,SPECIAL_ACTION_DRINK_BEER,7);

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have $5");

						}

			        }
			        case 4:
			        {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 7)
						{

						    new Float:hp;
						    GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,(hp + 25));
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 7;
							SendClientMessageA(playerid,COLOR_GREEN,"You have purchased a whiskey for $7");
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							SendEmote(playerid,"purchases a glass of whiskey from the bar");
							SetPlayerDrunkLevel(playerid,(GetPlayerDrunkLevel(playerid) + 1500));
							BizInfo[biz][bBank] += 7;
							GivePlayerDrink(playerid,SPECIAL_ACTION_DRINK_BEER,8);

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have $7");

						}

			        }
			     	case 5:
			        {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10)
						{

						    new Float:hp;
						    GetPlayerHealth(playerid,hp);
							SetPlayerHealth(playerid,(hp + 50));
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10;
							SendClientMessageA(playerid,COLOR_GREEN,"You have purchased a cocktail for $10");
							PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
							SendEmote(playerid,"purchases a cocktail from the bar");
							SetPlayerDrunkLevel(playerid,(GetPlayerDrunkLevel(playerid) + 2000));
							BizInfo[biz][bBank] += 10;
							GivePlayerDrink(playerid,SPECIAL_ACTION_DRINK_WINE,10);

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have $10");

						}

			        }

			    }

			}

		}
		case DIALOG_BUYFAC:
		{

			if(response == 1) { buy_forfaction[playerid] = 1; RefreshVehicleColorScreen(playerid); }
			else
			{

				buy_forfaction[playerid] = 0;
				if(VehicleModelInfo[vehicle_showroom_position[playerid]][vmEmerVeh] || VehicleModelInfo[vehicle_showroom_position[playerid]][vmNews])
				{

				    SendClientMessageA(playerid,COLOR_LIGHTRED,"You cannot buy this vehicle for yourself!");

				}
				else
				{

					RefreshVehicleColorScreen(playerid);

				}

			}

		}
	 	case DIALOG_REG1:
		{

		  	ShowPlayerDialog(playerid,DIALOG_REG3,DIALOG_STYLE_INPUT,"Your Password","Please CHOOSE a password for your account:","Confirm","");

		}
		case DIALOG_REG2:
		{

		    ShowPlayerDialog(playerid,DIALOG_REG3,DIALOG_STYLE_INPUT,"Your Password","Please CHOOSE a password for your account:","Confirm","");

		}
		case DIALOG_REG3:
		{

		    if(!strlen(inputtext))
		    {

				ShowPlayerDialog(playerid,DIALOG_REG3,DIALOG_STYLE_INPUT,"Your Password","Please CHOOSE a password for your account:","Confirm","");

		    }
		    else
		    {

		        new str2[512];
		        new clean_password[64];
		        new name[MAX_PLAYER_NAME];
		        new ip[256];
		        GetPlayerIp(playerid,ip,sizeof(ip));
		        new cleanip[256];
		        new formatted_password[129];
		        mysql_real_escape_string(ip,cleanip);
				GetPlayerName(playerid,name,sizeof(name));
		        mysql_real_escape_string(inputtext,clean_password);
		        WP_Hash(formatted_password, sizeof(formatted_password), clean_password);
		        format(str2,sizeof(str2),"INSERT INTO rp_users (email,password,name,admin,max_chars,ip,ooc) VALUES ('changeme@changeme.com','%s','%s','0','3','%s','1')",formatted_password,name,cleanip);
		        mysql_query(str2,player_threads[playerid],QUERY_CREATE_ACCOUNT);
				ShowPlayerDialog(playerid,DIALOG_REG4,DIALOG_STYLE_MSGBOX,"Please choose your characters gender...","Is your character male or female?","Male","Female");

		    }

		}
		case DIALOG_REG4:
		{

		    if(response == 1)
		    {

				format(reg_sex[playerid],32,"male");

		    }
		    else
		    {

		        format(reg_sex[playerid],32,"female");

		    }
		    ShowPlayerDialog(playerid,DIALOG_REG5,DIALOG_STYLE_INPUT,"Character Creation","Please type the FULL name of your character. In the following format: Firstname_Lastname (remember to incldue the underscore)","Confirm","");

		}
		case DIALOG_REG5:
		{

		  	if(!strlen(inputtext))
		    {

		        ShowPlayerDialog(playerid,DIALOG_REG5,DIALOG_STYLE_INPUT,"Character Creation","Please type the FULL name of your character. In the following format: Firstname_Lastname (remember to incldue the underscore)","Confirm","");

		    }
		    else
		    {

		        if(IsValidRpName(inputtext) && strlen(inputtext))
		        {

					if(strlen(inputtext) >= MAX_PLAYER_NAME) { SendClientMessage(playerid,COLOR_LIGHTRED,"Name too long! Please reduce it's length"); ShowPlayerDialog(playerid,DIALOG_REG4,DIALOG_STYLE_INPUT,"Character Creation","Please type the FULL name of your character. In the following format: FIRSTNAME_LASTNAME (remember to incldue the underscore)","Confirm",""); }
					new str[256];
					mysql_real_escape_string(inputtext,clean_save_name[playerid]);
					format(str,sizeof(str),"SELECT * FROM rp_characters WHERE name = '%s'",clean_save_name[playerid]);
					mysql_query(str,player_threads[playerid],QUERY_CREATE_CHAR);

		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Please enter your name in Firstname_Lastname format!");
		            ShowPlayerDialog(playerid,DIALOG_REG5,DIALOG_STYLE_INPUT,"Character Creation","Please type the FULL name of your character. In the following format: FIRSTNAME_LASTNAME (remember to incldue the underscore)","Confirm","");

		        }

		    }

		}
		case DIALOG_PAINTPLATE:
		{

		    if(response == 1)
			{

			    if(IsAtUpgradeShop(playerid))
			    {

					new biz = GetClosestBiz(playerid);
					new veh = GetPlayerVehicleID(playerid);
					new slot = GetVehicleSlot(veh);
					CharacterInfo[playerid][active_character[playerid]][cMoney] -= 2500;
					BizInfo[biz][bBank] += 2500;
					VehicleInfo[slot][vPlate] = str_replace("{FF0033}","",VehicleInfo[slot][vPlate]);
					VehicleInfo[slot][vPlate] = str_replace("{FF69B4}","",VehicleInfo[slot][vPlate]);
					VehicleInfo[slot][vPlate] = str_replace("{0000FF}","",VehicleInfo[slot][vPlate]);
					VehicleInfo[slot][vPlate] = str_replace("{9370D8}","",VehicleInfo[slot][vPlate]);
					VehicleInfo[slot][vPlate] = str_replace("{8B4513}","",VehicleInfo[slot][vPlate]);
					VehicleInfo[slot][vPlate] = str_replace("{FAFAD2}","",VehicleInfo[slot][vPlate]);
					switch(listitem)
					{

					    case 0:
					    {

							strins(VehicleInfo[slot][vPlate],"{FF0033}",0);
							SendClientMessageA(playerid,COLOR_GREEN,"License plate color set to Red, this vehicle must respawn for the changes to take effect.");

					    }
					    case 1:
					    {

							strins(VehicleInfo[slot][vPlate],"{FF69B4}",0);
							SendClientMessageA(playerid,COLOR_GREEN,"License plate color set to Pink, this vehicle must respawn for the changes to take effect.");

					    }
						case 2:
					    {

							strins(VehicleInfo[slot][vPlate],"{0000FF}",0);
							SendClientMessageA(playerid,COLOR_GREEN,"License plate color set to Blue, this vehicle must respawn for the changes to take effect.");

					    }
					    case 3:
					    {

							strins(VehicleInfo[slot][vPlate],"{9370D8}",0);
							SendClientMessageA(playerid,COLOR_GREEN,"License plate color set to Purple, this vehicle must respawn for the changes to take effect.");

					    }
					    case 4:
					    {

							strins(VehicleInfo[slot][vPlate],"{8B4513}",0);
							SendClientMessageA(playerid,COLOR_GREEN,"License plate color set to Brown, this vehicle must respawn for the changes to take effect.");

					    }
					    case 5:
					    {

							strins(VehicleInfo[slot][vPlate],"{FAFAD2}",0);
							SendClientMessageA(playerid,COLOR_GREEN,"License plate color set to Yellow, this vehicle must respawn for the changes to take effect.");

					    }

					}

			    }
			    else
			    {

			        SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not at an upgrade shop.");
			        return 1;

			    }

			}

		}
		case DIALOG_SELLCAR:
		{

		    new other2 = vehicle_sell_sender[playerid];
		    new sellprice = vehicle_sell_price[playerid];
		    new slot = vehicle_sell_offer[playerid];
		    new str2[256];
		    new name[MAX_PLAYER_NAME];
		    new oname[MAX_PLAYER_NAME];
		    GetCharacterName(playerid,name);
		    GetCharacterName(other2,oname);
		    if(response == 1)
		    {

				if(GetDistanceBetweenPlayers(playerid,other2) < 7.5)
				{

				    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= sellprice)
				    {

						format(str2,sizeof(str2),"You have accepted %s's vehicle offer!",oname);
						SendClientMessageA(playerid,COLOR_FACTION,str2);
						format(str2,sizeof(str2),"%s has accepted your vehicle offer!",name);
						SendClientMessageA(other2,COLOR_FACTION,str2);
						VehicleInfo[slot][vOwner] = CharacterInfo[playerid][active_character[playerid]][cID];
						format(VehicleInfo[slot][vOwnerName],MAX_PLAYER_NAME,"%s",name);
						CharacterInfo[playerid][active_character[playerid]][cMoney] -= sellprice;
						CharacterInfo[other2][active_character[other2]][cMoney] += sellprice;
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
						PlayerPlaySound(other2,1054,0.0,0.0,0.0);
						format(str2,sizeof(str2),"takes out a vehicle-transfer contract and hands it to %s for signing.",oname);
						SendEmote(other2,str2);
						format(str2,sizeof(str2),"signs the contract.");
						SendEmote(playerid,str2);

					}
					else
					{

					    SendErrorMsg(playerid,"You do not have enough money to purchase this car.");

					}

				}
				else
				{

				    SendErrorMsg(playerid,"You are no longer near this player.");

				}

		    }
		    else
		    {


				format(str2,sizeof(str2),"%s has declined your offer.",name);
				SendClientMessageA(other2,COLOR_FACTION,str2);
				format(str2,sizeof(str2),"You have declined %s's offer.",oname);
				SendClientMessageA(playerid,COLOR_FACTION,str2);

		    }
			vehicle_sell_offer[playerid] = -1;
			vehicle_sell_sender[playerid] = -1;
			vehicle_sell_price[playerid] = 0;

		}
		case DIALOG_SCRAPCAR:
		{

		    if(response == 1)
		    {

		        new veh = GetPlayerVehicleID(playerid);
		        new slot = GetVehicleSlot(veh);
		        if(slot > -1)
		        {

		            if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID] || (IsFactionVehicle(CharacterInfo[playerid][active_character[playerid]][cFaction],slot) && CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD))
		            {

		            	new price = floatround(FetchVehiclePrice(VehicleInfo[slot][vModel]) * 0.20);
						CharacterInfo[playerid][active_character[playerid]][cMoney] += price;
		                VehicleInfo[slot][vOwner] = 0;
		                VehicleInfo[slot][vModel] = 0;
						DestroyVehicle(VehicleInfo[slot][vVehicle]);
						VehicleInfo[slot][vModel] = 0;
						VehicleInfo[slot][vVehicle] = -1;
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
						ClearVehicleInventory(slot);
						new str[256];
						format(str,sizeof(str),"UPDATE rp_vehicles SET truncated = 1 WHERE id = '%d'",VehicleInfo[slot][vID]);
						mysql_query(str,player_threads[playerid]);

		            } else { SendErrorMsg(playerid,"Error."); }

		        }
		        else
		        {

		            SendErrorMsg(playerid,"Error.");

		        }

		    } else { SendErrorMsg(playerid,"Vehicle Scrapping Cancelled."); }

		}
		case DIALOG_TAKESAVE:
		{

		    if(response == 1)
		    {

		        if(IsInBank(playerid))
		        {

					new str2[128];
					SendClientMessage(playerid,COLOR_WHITE,"|-----Bank Slip-----|");
					format(str2,sizeof(str2),"Savings Withdrawl: $%d",CharacterInfo[playerid][active_character[playerid]][cSavings]);
					SendClientMessage(playerid,COLOR_WHITE,str2);
					SendClientMessage(playerid,COLOR_WHITE,"This withdraw was tax free!");
					SendClientMessage(playerid,COLOR_WHITE,"New Savings: $0");
					CharacterInfo[playerid][active_character[playerid]][cMoney] += CharacterInfo[playerid][active_character[playerid]][cSavings];
			        CharacterInfo[playerid][active_character[playerid]][cSavings] = 0;

				}
				else
				{

				    SendErrorMsg(playerid,"You are no longer in the bank.");

				}

		    }

		}
		case DIALOG_TOUR:
		{

		    if(response == 1)
		    {

		        using_tour[playerid] = 1;
		        switch(listitem)
		        {

		            case 0:
		            {

		                SetPlayerCheckpoint(playerid,1310.2188,-1367.7772,13.5405,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 1:
		            {

		                SetPlayerCheckpoint(playerid,2133.0959,-1149.4222,24.2833,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 2:
		            {

		            	SetPlayerCheckpoint(playerid,1110.3217,-1797.0281,16.5938,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 3:
		            {

		            	SetPlayerCheckpoint(playerid,1247.8191,-1561.1221,13.5556,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 4:
		            {

		            	SetPlayerCheckpoint(playerid,613.5499,-1493.3125,14.8174,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 5:
		            {

		            	SetPlayerCheckpoint(playerid,1085.4576,-1226.3864,15.8203,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 6:
		            {

		            	SetPlayerCheckpoint(playerid,912.5792,-1230.0784,16.9766,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 7:
		            {

		            	SetPlayerCheckpoint(playerid,1380.2161,-1654.9847,13.5175,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		          	case 8:
		            {

		            	SetPlayerCheckpoint(playerid,2303.7310,-2396.6726,13.3326,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 9:
		            {

		            	SetPlayerCheckpoint(playerid,1702.7346,-1472.2045,13.5469,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 10:
		            {

		            	SetPlayerCheckpoint(playerid,-77.6213,-1136.4148,1.0781,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }
		            case 11:
		            {

		            	SetPlayerCheckpoint(playerid,1778.7502,-1702.6729,13.5093,2.0);
		                SendClientMessage(playerid,COLOR_WHITE,"Directions have been sent to your GPS.");

		            }

		        }

		    }

		}
		case DIALOG_HOTEL:
		{

		    if(response == 1)
		    {
			    if(InHotel(playerid))
			    {

			        new biz = in_biz[playerid];
					if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 100)
					{

					    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 100;
					    CharacterInfo[playerid][active_character[playerid]][cHotel] = biz;
					    BizInfo[biz][bBank] += 100;
						new str[256];
						format(str,sizeof(str),"~p~Hotel Room~n~ ~n~~w~You have just rented a room in this hotel. You will spawn here unless you begin renting or buy a house.~n~ ~n~You can unrent using ~p~/cancelroom");
						TextDrawSetString(infotxt[playerid],str);
						TextDrawShowForPlayer(playerid,infotxt[playerid]);
						infotxt_expire[playerid] = 11;

					}
					else
					{

					    SendErrorMsg(playerid,"You do not have $100");

					}

			    }
			}

		}

	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

/*********LOGIN_SYS_FUNCTIONS**************/

public AccountExists(name[],playerid)
{

	new str[256];
	new clean_name[MAX_PLAYER_NAME];
	mysql_real_escape_string(name,clean_name);
	format(str,sizeof(str),"SELECT * FROM rp_users WHERE name = '%s' LIMIT 1",clean_name);
	player_thread_inuse[playerid] = QUERY_LOGIN_USER;
	mysql_query(str,player_threads[playerid],QUERY_LOGIN_USER);


}

public ResetStats(playerid)
{

	prisoner[playerid] = 0;
	playing_prison_alarm[playerid] = 0;
	strdel(reg_sex[playerid],0,strlen(reg_sex[playerid]));
	mk_selling[playerid] = 0;
	mk_menulevel[playerid] = 0;
	mk_menudirection[playerid] = 0;
	cl_editinguid[playerid] = 0;
	cl_editingitem[playerid] = 0;
	cl_buyingitem[playerid] = 0;
	cl_menutype[playerid] = 0;
	cl_menulevel[playerid] = 0;
	cl_equipping[playerid] = 0;
	vu_upgrading[playerid] = 0;
	vu_upgradelevel[playerid] = 0;
	qs_ResetQuestObjects(playerid);
	qs_queststage[playerid] = 0;
	qs_inquest[playerid] = -1;
	spraying_vehicle[playerid] = 0;
	spraying_vehicle_color[playerid] = 0;
	last_caller[playerid] = 0;
	farming[playerid] = 0;
	farming_stage[playerid] = 0;
	cuffed[playerid] = 0;
	strdel(purchase_plate_cmd[playerid],0,strlen(purchase_plate_cmd[playerid]));
    buying_plate_ignoredonator[playerid] = 0;
	buying_neon[playerid] = 0;
	mining[playerid] = 0;
	learning_skill[playerid] = 0;
	gunrun[playerid] = 0;
	strdel(unbanning_player[playerid],0,strlen(unbanning_player[playerid]));
	learning_language[playerid] = 0;
	active_language[playerid] = -1;
	boom_box_handle[playerid] = -1;
	streaming_boombox[playerid] = -1;
	changing_boombox[playerid] = -1;
    donator_vehicle_purchasing[playerid] = -1;
	purchasing_vehicle[playerid] = -1;
	screen_saver_timer[playerid] = -1;
	screen_saver[playerid] = 0;
	intro_music[playerid] = -1;
	listen_ringtone[playerid] = 0;
	afk_movement[playerid] = AFK_TIME;
	armor_display_tog[playerid] = 1;
	armor_display_enabled[playerid] = 0;
	displaying_stock[playerid] = 0;
	selling_stock_slot[playerid] = 0;
	sell_stock_price[playerid] = 0;
	buying_stock[playerid] = 0;
	buying_stock_amount[playerid] = 0;
	derby_sys_respawn[playerid] = 0;
	oil_offer[playerid] = -1;
	oil_offer_price[playerid] = 0;
	oil_offer_rig[playerid] = -1;
	carrying_oil[playerid] = 0;
	last_text[playerid] = -1;
	in_shamal[playerid] = -1;
	worklog_cooldown[playerid] = 0;
	tog_callerid[playerid] = 1;
	company_work_load[playerid] = -1;
	progress_wait[playerid] = 0;
	progress_wait_max[playerid] = 0;
	progress_wait_type[playerid] = PROGRESS_BAR_INVALID;
	company_work_stage[playerid] = 0;
	fly_school_step[playerid] = 0;
	fly_school_stage[playerid] = 0;
	fly_school_countdown[playerid] = 0;
	in_fly_school[playerid] = 0;
	in_fly_school_veh[playerid] = -1;
	company_work[playerid] = 0;
	company_inviter[playerid] = -1;
	buy_forcompany[playerid] = 0;
	togtp[playerid] = 0;
	ac_cooldown[playerid] = 0;
	tog_derby[playerid] = 1;
	find_cooldown[playerid] = 0;
	tog_con[playerid] = 1;
	calling_san[playerid] = 0;
	crash_detection_disabled[playerid] = 0;
	smuggle_sys_run[playerid] = 0;
 	player_threads[playerid] = playerid;
 	player_save_threads[playerid] = (playerid + 1000);
 	player_thread_inuse[playerid] = false;
 	character_chosen[playerid] = false;
 	choosing_character[playerid] = false;
 	character_offset[playerid] = 0;
 	active_character[playerid] = -1;
 	infotxt_expire[playerid] = 0;
	in_house[playerid] = -1;
	confirm_dialog_extra[playerid] = -1;
	vehicle_showroom_position[playerid] = -1;
	in_biz[playerid] = -1;
	vehicle_showroom_type[playerid] = -1;
	mask[playerid] = false;
	mask_on[playerid] = false;
	setting_fuel_price[playerid] = false;
	hunger_set_expire[playerid] = 121;
	phone_ringing[playerid] = 0;
	phone_caller[playerid] = -1;
	phone_calling[playerid] = -1;
	phone_incall[playerid] = -1;
	composing_mail[playerid] = 0;
	composing_mail_to[playerid] = 0;
	mail_reading[playerid] = -1;
	drug_effect[playerid] = 0;
	weapontransfer_other[playerid] = -1;
	delivery_active[playerid] = -1;
	delivery_stage[playerid] = -1;
	fare_time[playerid] = 0;
	fare_filler[playerid] = -1;
	fare_passenger[playerid] = -1;
	fare_cooldown[playerid] = 0;
	fare_pmission[playerid] = 0;
	fare_filler_stage[playerid] = 0;
	bus_active[playerid] = -1;
	bus_stage[playerid] = -1;
	biz_editname[playerid] = 0;
	carchoose_color[playerid] = 0;
	tmp_carcolor1[playerid] = 0;
	tmp_carcolor2[playerid] = 0;
	garbage_run[playerid] = -1;
	garbage_run_stage[playerid] = -1;
	garbage_run_state[playerid] = -1;
	garbage_object[playerid] = -1;
	garbage_run_vehicle[playerid] = -1;
	fish_run[playerid] = -1;
	fish_stage[playerid] = -1;
	fish_state[playerid] = -1;
	faction_invite[playerid] = 0;
	buy_forfaction[playerid] = 0;
	vehicle_select_cooldown[playerid] = 0;
	duty[playerid] = 0;
	taze_time[playerid] = 0;
	tazer_out[playerid] = 0;
	ticket_price[playerid] = 0;
	ticket_sender[playerid] = -1;
	driving_test[playerid] = 0;
	driving_test_stage[playerid] = 0;
	driving_test_reversing[playerid] = 0;
	driving_test_failed[playerid] = 0;
	tmp_pickup[playerid] = -1;
    sellgun_sender[playerid] = -1;
	sellgun_sendgun[playerid] = 0;
	sellgun_price[playerid] = 0;
	cooking[playerid] = 0;
	cooking_eggs[playerid] = 0;
	cooking_bread[playerid] = 0;
	cooking_meat[playerid] = 0;
	cooking_cheese[playerid] = 0;
	cooking_rice[playerid] = 0;
	cooking_chilli[playerid] = 0;
	cooking_dough[playerid] = 0;
	cooking_contents[playerid][0] = 0;
	cooking_contents[playerid][1] = 0;
	cooking_contents[playerid][2] = 0;
	cooking_contents[playerid][3] = 0;
	cooking_contents[playerid][4] = 0;
	cooking_contents[playerid][5] = 0;
	cooking_contents[playerid][6] = 0;
	cooking_contents[playerid][7] = 0;
	cooking_contents[playerid][8] = 0;
	cooking_contents[playerid][9] = 0;
	in_interior[playerid] = -1;
	player_threads_alt[playerid] = (playerid + 10000);
	player_threads_inventory[playerid] = (playerid + 20000);
	aduty[playerid] = 0;
	spectating[playerid] = -1;
	spectate_type[playerid] = 0;
	format(activate_code[playerid],256," ");
	format(activate_email[playerid],256," ");
	speedo_active[playerid] = true;
	toolkit[playerid] = 0;
	vehicle_towing[playerid] = -1;
	renting_car[playerid] = -1;
	taxi_send_cooldown[playerid] = 0;
	in_911[playerid] = 0;
	in_911_stage[playerid] = 0;
	audio_countdown[playerid] = 0;
	leave_spray[playerid] = 0;
	biz_withdraw[playerid] = -1;
	tutorial_stage[playerid] = 0;
	tutorial_skip[playerid] = 0;
	block_pm[playerid] = 0;
	going_to_scrap[playerid] = 0;
	rope[playerid] = 0;
	tied[playerid] = 0;
	house_withdraw[playerid] = -1;
	house_settingrent[playerid] = -1;
	duty_expire[playerid] = 2;
	news_expire[playerid] = 3;
	calling_taxi[playerid] = 0;
	declare_fare_cooldown[playerid] = 0;
	riot_shield[playerid] = 0;
	note_cmd_cooldown[playerid] = 0;
 	creating_note[playerid] = -1;
 	adding_inventory[playerid] = -1;
 	afk_reset[playerid] = 0;
    old_pos[playerid][0] = 0.0;
    old_pos[playerid][1] = 0.0;
    old_pos[playerid][2] = 0.0;
    repair_sender[playerid] = -1;
	repair_price[playerid] = 0;
	in_repair[playerid] = -1;
	in_repair_time[playerid] = 0;
    respray_sender[playerid] = -1;
	respray_price[playerid] = 0;
	in_respray[playerid] = -1;
	in_respray_time[playerid] = 0;
	in_respray_col1[playerid] = 0;
	in_respray_col2[playerid] = 0;
	death_mode[playerid] = 0;
	death_cooldown[playerid] = 0;
    death_respawn_time[playerid] = 0;
    cpr_cooldown[playerid] = 0;
    death_hploss[playerid] = 0;
    defib_cooldown[playerid] = 0;
    in_911_type[playerid] = 0;
    weed[playerid] = 0;
	heroin[playerid] = 0;
	heroin_stage[playerid] = 0;
	heroin_expire[playerid] = 0;
	addiction_runtime[playerid] = 600;
	trucking[playerid] = 0;
	trucking_mission[playerid] = 0;
	trucking_stage[playerid] = 0;
	unlock_cooldown[playerid] = 0;
	in_anim[playerid] = 0;
	temp_pickup[playerid] = -1;
	player_vehicle_speed[playerid] = 0.0;
	tmp_account_id[playerid] = -1;
	strdel(accent[playerid],0,strlen(accent[playerid]));
	using_tour[playerid] = 0;
	speedcamera_cooldown[playerid] = 0;
	drinking[playerid] = 0;
	callreq_cooldown[playerid] = 0;
	filling[playerid] = 0;
	filling_amount[playerid] = 0;
	filling_biz[playerid] = -1;
	filling_started[playerid] = 0;
	interview[playerid] = -1;
	interview_offer[playerid] = -1;
	tog_ooc[playerid] = 0;
	tog_news[playerid] = 0;
	sleeping[playerid] = 0;
	in_modshop[playerid] = 0;
	cloth_cooldown[playerid] = 0;
	old_action[playerid] = SPECIAL_ACTION_NONE;
	dancing[playerid] = 0;
	seatbelt[playerid] = 0;
	calling_mechanic[playerid] = 0;
	radio_cooldown[playerid] = 0;
	radio_handle[playerid] = 0;
	radio_volume[playerid] = 75;
	old_vehicle[playerid] = -1;
	old_veh_seat[playerid] = 0;
	radio_id[playerid] = 0;
	reply_to[playerid] = -1;
	pizza_mission[playerid] = -1;
	pizza_mission_time[playerid] = 0;
	pizza_mission_distance[playerid] = 0;
	pizza_mission_num[playerid] = 0;
	tog_phone[playerid] = 1;
	trick_treat_cooldown[playerid] = 0;
	in_train[playerid] = 0;
	requesting_cheque[playerid] = 0;
	racing_sys_ticket[playerid] = -1;
	racing_sys_stake[playerid] = 0;
	racing_sys_writing[playerid] = -1;
	sweeper_sys_run[playerid] = -1;
	sweeper_sys_stage[playerid] = 0;
	trace_cooldown[playerid] = 0;
	engineer_sys_object[playerid] = -1;
	engineer_sys_run[playerid] = -1;
	calling_nonpolice[playerid] = 0;
	biz_editingentrance[playerid] = -1;
	house_offer[playerid] = -1;
	house_offer_house[playerid] = -1;
	house_offer_price[playerid] = 0;
	nascar_sys_driver[playerid] = 0;
	nascar_sys_stage[playerid] = 0;
	nascar_sys_laps[playerid] = 1;
	tog_nascar[playerid] = 1;
	nascar_sys_respawn[playerid] = 0;
	cp_target[playerid] = 0;

	vehicle_sell_offer[playerid] = -1;
	vehicle_sell_sender[playerid] = -1;
	vehicle_sell_price[playerid] = 0;

	tenant_cooldown[playerid] = 0;
	evicting_tenant[playerid] = 0;

	qs_ResetQuestObjects(playerid);
	ResetInventory(playerid);
	ResetMail(playerid);
	ResetNotes(playerid);
	ResetCooldowns(playerid);

	for(new i = 0;  i < 13; i ++) { cheat_weapons[playerid][i] = 0; cheat_ammo[playerid][i] = 0; }
	for(new a = 0; a < MAX_PLAYERCLOTHING; a ++) { cl_clothingslots[playerid][a] = 0; }

}

public ResetCharacters(playerid)
{

	for(new i = 0; i < 25; i ++)
	{

	    CharacterInfo[playerid][i][cSkin] = 0;
	    CharacterInfo[playerid][i][cRadio] = 0;

	}

}

public ConfigPlayer(playerid)
{

	TogglePlayerClock(playerid,false);
	SetPlayerColor(playerid,COLOR_WHITE);
	ConfigBuildings(playerid);

}

/***********MYSQL Functions*************/

public OnQueryError(errorid, error[], resultid, extraid, callback[], query[], connectionHandle)
{

	new str[1024];
	format(str,sizeof(str),"Error for query: %s",query);
	print(str);
	LogMysqlError(str);
	if(active_house_save > 0 || active_biz_save > 0) { print("MySQL error occured when saving stats."); SendAdminBroadcast("[SERVER] !!!WARNING!!! AN ERROR OCCURED WHEN SAVING SOME DATA - SOME MAY BE LOST!");  }

}

public OnQueryFinish( query[], resultid, extraid, connectionHandle )
{

	mysql_store_result();
	new playerid = resultid;
	new rows = 0;
	new type = extraid;

	/************/

	if(type == QUERY_LOGIN_USER)
	{
		rows = mysql_num_rows();
        if(rows)
		{
			SendClientMessageA(playerid,COLOR_LIGHTRED,"Welcome to our server, use /login to continue playing.");
			ShowPlayerDialog(playerid,1,DIALOG_STYLE_PASSWORD,"Login","Enter your password below:","Login","Cancel");
			registered[playerid] = 1;

		}
		else
		{

			new str[1024];
			format(str,sizeof(str),"Hello! Welcome to Countryside Gaming! A roleplaying server for the serious gamer.\n\nThe following tutorial will help you get playing on our server! We'll try to get you playing as \nsoon as possible! As we use a User Control Panel on our server, we need to first verify \nyour email address.\n\nAll that we ask, is that you read the following information, very, very carefully.\n\n\n\nClick next as soon as you're ready!");
			ShowPlayerDialog(playerid,DIALOG_REG1,DIALOG_STYLE_MSGBOX,"Welcome!",str,"Next >>","");
			registered[playerid] = 0;

		}
		SetPlayerScreenSaver(playerid);
		player_thread_inuse[playerid] = false;

	}
	else if(type == QUERY_LOGIN_SEND)
	{

	    rows = mysql_num_rows();
	    if(rows)
	    {

			mysql_retrieve_row();
			new secure_check[128];
			mysql_fetch_field_row(secure_check,"secure_ip");
			if(strlen(secure_check)) { //Secure IP enabled
			    new ip[128];
			    GetPlayerIp(playerid,ip,sizeof(ip));
			    if(!(strcmp(ip,secure_check,true) == 0)) {
					ShowPlayerDialog(playerid,999,DIALOG_STYLE_MSGBOX,"Connection Rejected","The account you are trying to login with is protected by Countryside Gamings Secure IP system\n You cannot access this account without first authorising this IP address.\n\n To authorize this IP address please access your settings at: ucp.countrysidegaming.com","Ok","");
					new clean_ip[128];
					mysql_real_escape_string(ip,clean_ip);
					new secure_query[256];
					new secure_user_id[32];
					mysql_fetch_field_row(secure_user_id,"id");
					format(secure_query,sizeof(secure_query),"INSERT INTO rp_secure_ip_logs (user_id,ip) VALUES ('%s','%s')",secure_user_id,clean_ip);
					mysql_query(secure_query,player_threads[playerid]);
					Kick(playerid);
			    }
			}
  	        screen_saver[playerid] = 0;
	        if(Audio_IsClientConnected(playerid) && intro_music[playerid] > -1) { Audio_Stop(playerid,intro_music[playerid]); intro_music[playerid] = -1; }
			if(screen_saver_timer[playerid] > -1)
			{

			    KillTimer(screen_saver_timer[playerid]);

			}
	        SendClientMessage(playerid,COLOR_GREEN,"Logged in. Welcome.");
	        SendClientMessage(playerid,COLOR_FACTION,"Welcome to Countryside Gaming. For assistance please use /assistme");
	        SendClientMessage(playerid,COLOR_YELLOW,"To change your skin or create new characters, please visit our UCP: ucp.countrysidegaming.com");
	        logged[playerid] = true;
	        player_thread_inuse[playerid] = false;
	        LoadStats(playerid);
	        SetSpawnInfo(playerid,0,177,414.1235,-17.7988,991.8047,90.0,0,0,0,0,0,0);
	        SendConnectMessage(playerid);
	        return 1;

     	}
     	else
     	{

			SendClientMessageA(playerid,COLOR_RED,"Invalid Login.");
			ShowPlayerDialog(playerid,1,DIALOG_STYLE_PASSWORD,"Login","Enter your password below:","Login","Cancel");
			logged[playerid] = false;
			player_thread_inuse[playerid] = false;
			return 1;

     	}

	}
	else if(type == QUERY_LOGIN_STATS)
	{

		new str[256]; new data[17][256];
		mysql_fetch_row_format(str);
		explode(data,str,"|");
		AccountInfo[playerid][aID] = strval(data[0]);
		format(AccountInfo[playerid][aName],MAX_PLAYER_NAME,"%s",data[1]);
		AccountInfo[playerid][aMaxChars] = strval(data[3]);
		AccountInfo[playerid][aAdmin] = strval(data[4]);
		AccountInfo[playerid][aJailTime] = strval(data[5]);
		AccountInfo[playerid][aTutorial] = strval(data[7]);
		AccountInfo[playerid][aAssistant] = strval(data[8]);
		AccountInfo[playerid][aBikePerm] = strval(data[14]);
		player_thread_inuse[playerid] = QUERY_LOGIN_CHARS;
		format(str,sizeof(str),"SELECT * FROM rp_characters WHERE rp_characters.owner = '%d' ORDER BY id DESC LIMIT %d",AccountInfo[playerid][aID],AccountInfo[playerid][aMaxChars]);
		mysql_query(str,player_threads[playerid],QUERY_LOGIN_CHARS);

	}
	else if(type == QUERY_LOGIN_CHARS)
	{

		new ii = 0;
	    new bb[256];
	    while(mysql_retrieve_row())
	    {

			mysql_fetch_field_row(bb,"id");
			CharacterInfo[playerid][ii][cID] = strval(bb);
			mysql_fetch_field_row(bb,"name");
			format(CharacterInfo[playerid][ii][cName],MAX_PLAYER_NAME,"%s",bb);
			mysql_fetch_field_row(bb,"skin");
			CharacterInfo[playerid][ii][cSkin] = strval(bb);
			mysql_fetch_field_row(bb,"spawn_x");
			CharacterInfo[playerid][ii][cSpawnX] = floatstr(bb);
			mysql_fetch_field_row(bb,"spawn_y");
			CharacterInfo[playerid][ii][cSpawnY] = floatstr(bb);
			mysql_fetch_field_row(bb,"spawn_z");
			CharacterInfo[playerid][ii][cSpawnZ] = floatstr(bb);
			mysql_fetch_field_row(bb,"money");
			CharacterInfo[playerid][ii][cMoney] = strval(bb);
			mysql_fetch_field_row(bb,"spawn_r");
			CharacterInfo[playerid][ii][cSpawnR] = floatstr(bb);
			mysql_fetch_field_row(bb,"spawn_i");
			CharacterInfo[playerid][ii][cSpawnI] = strval(bb);
			mysql_fetch_field_row(bb,"renting");
			CharacterInfo[playerid][ii][cRenting] = strval(bb);
			mysql_fetch_field_row(bb,"faction");
			CharacterInfo[playerid][ii][cFaction] = strval(bb);
			mysql_fetch_field_row(bb,"phone_number");
			CharacterInfo[playerid][ii][cPhone] = strval(bb);
			mysql_fetch_field_row(bb,"weapons");
			format(CharacterInfo[playerid][ii][cWeapons],256,"%s",bb);
			mysql_fetch_field_row(bb,"bank");
			CharacterInfo[playerid][ii][cBank] = strval(bb);
			mysql_fetch_field_row(bb,"payday");
			CharacterInfo[playerid][ii][cPayday] = strval(bb);
			mysql_fetch_field_row(bb,"faction_perm");
			CharacterInfo[playerid][ii][cFactionPermissions] = strval(bb);
			mysql_fetch_field_row(bb,"rank_name");
			format(CharacterInfo[playerid][ii][cRankName],64,"%s",bb);
			mysql_fetch_field_row(bb,"jail_time");
			CharacterInfo[playerid][ii][cJailTime] = strval(bb);
			mysql_fetch_field_row(bb,"car_lic");
			CharacterInfo[playerid][ii][cCarLic] = strval(bb);
			mysql_fetch_field_row(bb,"wep_lic");
			CharacterInfo[playerid][ii][cWepLic] = strval(bb);
			mysql_fetch_field_row(bb,"pay_time");
			CharacterInfo[playerid][ii][cPayTime] = strval(bb);
			mysql_fetch_field_row(bb,"level");
			CharacterInfo[playerid][ii][cLevel] = strval(bb);
			mysql_fetch_field_row(bb,"exp");
			CharacterInfo[playerid][ii][cExp] = strval(bb);
			mysql_fetch_field_row(bb,"spawn_world");
			CharacterInfo[playerid][ii][cSpawnWorld] = strval(bb);
			mysql_fetch_field_row(bb,"radio");
			CharacterInfo[playerid][ii][cRadio] = strval(bb);
			mysql_fetch_field_row(bb,"rc");
			CharacterInfo[playerid][ii][cRadioChannel] = strval(bb);
			mysql_fetch_field_row(bb,"radio_auth");
			format(CharacterInfo[playerid][ii][cRadioAuth],16,"%s",bb);
			if(!strlen(CharacterInfo[playerid][ii][cRadioAuth])) { format(CharacterInfo[playerid][ii][cRadioAuth],16,"none"); }
			mysql_fetch_field_row(bb,"job");
			CharacterInfo[playerid][ii][cJob] = strval(bb);
			mysql_fetch_field_row(bb,"jcool");
			CharacterInfo[playerid][ii][cJobCooldown] = strval(bb);
			mysql_fetch_field_row(bb,"addict");
			CharacterInfo[playerid][ii][cAddiction] = strval(bb);
			mysql_fetch_field_row(bb,"alvl");
			CharacterInfo[playerid][ii][cAddictionLevel] = strval(bb);
			mysql_fetch_field_row(bb,"savings");
			CharacterInfo[playerid][ii][cSavings] = strval(bb);
			mysql_fetch_field_row(bb,"fly_lic");
		   	CharacterInfo[playerid][ii][cFlyLic] = strval(bb);
		   	mysql_fetch_field_row(bb,"duty_skin");
		   	CharacterInfo[playerid][ii][cDutySkin] = strval(bb);
			mysql_fetch_field_row(bb,"health");
			CharacterInfo[playerid][ii][cHealth] = floatstr(bb);
			mysql_fetch_field_row(bb,"armor");
			CharacterInfo[playerid][ii][cArmor] = floatstr(bb);
			if(CharacterInfo[playerid][ii][cHealth] < 10.0) { CharacterInfo[playerid][ii][cHealth] = 10.0; }
			mysql_fetch_field_row(bb,"employed");
			CharacterInfo[playerid][ii][cEmployed] = strval(bb);
			mysql_fetch_field_row(bb,"hotel");
			CharacterInfo[playerid][ii][cHotel] = strval(bb);
			mysql_fetch_field_row(bb,"lic_warns");
			CharacterInfo[playerid][ii][cCarLicWarnings] = strval(bb);
			mysql_fetch_field_row(bb,"dob");
			format(CharacterInfo[playerid][ii][cDob],32,"%s",bb);
			mysql_fetch_field_row(bb,"duplicate");
			CharacterInfo[playerid][ii][cDuplicate] = strval(bb);
			mysql_fetch_field_row(bb,"badge");
			CharacterInfo[playerid][ii][cBadge] = strval(bb);
			mysql_fetch_field_row(bb,"ccool");
			CharacterInfo[playerid][ii][cChopCooldown] = strval(bb);
			mysql_fetch_field_row(bb,"deaths");
			CharacterInfo[playerid][ii][cDeaths] = strval(bb);
			mysql_fetch_field_row(bb,"hins");
			CharacterInfo[playerid][ii][cHealthInsurance] = strval(bb);
			mysql_fetch_field_row(bb,"fstyle");
			CharacterInfo[playerid][ii][cFstyle] = strval(bb);
			mysql_fetch_field_row(bb,"comp");
			CharacterInfo[playerid][ii][cCompany] = strval(bb);
			mysql_fetch_field_row(bb,"comp_perms");
			CharacterInfo[playerid][ii][cCompanyPerms] = strval(bb);
			mysql_fetch_field_row(bb,"comp_rank");
			format(CharacterInfo[playerid][ii][cCompanyRank],32,"%s",bb);
			mysql_fetch_field_row(bb,"acc");
			format(CharacterInfo[playerid][ii][cAccent],16,"%s",bb);
			mysql_fetch_field_row(bb,"lang");
			CharacterInfo[playerid][ii][cLanguage] = strval(bb);
			mysql_fetch_field_row(bb,"skill");
			CharacterInfo[playerid][ii][cSkill] = strval(bb);
			mysql_fetch_field_row(bb,"skill_lvl");
			CharacterInfo[playerid][ii][cSkillLevel] = strval(bb);
			mysql_fetch_field_row(bb,"pmodel");
			CharacterInfo[playerid][ii][cPhoneModel] = strval(bb);
			mysql_fetch_field_row(bb,"bail");
			CharacterInfo[playerid][ii][cBail] = strval(bb);
	        ii ++;

	    }
	    player_thread_inuse[playerid] = false;
	    BanCheck(playerid);
	    SpawnPlayer(playerid);

	}
	else if(type == QUERY_LOGIN_NOTES)
	{

	    new i = 0;
	    new b[256];
	    while(mysql_retrieve_row())
	    {

	        mysql_fetch_field_row(b,"id");
	        NoteInfo[playerid][i][nID] = strval(b);
	        mysql_fetch_field_row(b,"text");
	        format(NoteInfo[playerid][i][nText],256,"%s",b);
	        NoteInfo[playerid][i][nActive] = 1;
	        i ++;

	    }
	    format(b,sizeof(b),"* You are carrying %d notes.",i);
	    SendClientMessage(playerid,COLOR_YELLOW2,b);

	}
	else if(type == QUERY_LOAD_VEHICLES)
	{

	    new i = 0;
	    new b[256];
	    while(mysql_retrieve_row())
	    {

			mysql_fetch_field_row(b,"id");
			VehicleInfo[i][vID] = strval(b);
			mysql_fetch_field_row(b,"model");
			VehicleInfo[i][vModel] = strval(b);
			mysql_fetch_field_row(b,"spawn_x");
			VehicleInfo[i][vSpawnX] = floatstr(b);
			mysql_fetch_field_row(b,"spawn_y");
			VehicleInfo[i][vSpawnY] = floatstr(b);
			mysql_fetch_field_row(b,"spawn_z");
			VehicleInfo[i][vSpawnZ] = floatstr(b);
			mysql_fetch_field_row(b,"spawn_r");
			VehicleInfo[i][vSpawnR] = floatstr(b);
			mysql_fetch_field_row(b,"color1");
			VehicleInfo[i][vColor1] = strval(b);
			mysql_fetch_field_row(b,"color2");
			VehicleInfo[i][vColor2] = strval(b);
			mysql_fetch_field_row(b,"owning_character");
			VehicleInfo[i][vOwner] = strval(b);
			mysql_fetch_field_row(b,"mileage");
			VehicleInfo[i][vMileage] = strval(b);
			mysql_fetch_field_row(b,"lock");
			VehicleInfo[i][vLock] = strval(b);
			mysql_fetch_field_row(b,"locked");
			VehicleInfo[i][vLocked] = strval(b);
			mysql_fetch_field_row(b,"times_destroyed");
			VehicleInfo[i][vDestroyed] = strval(b);
			VehicleInfo[i][vEngine] = 0;
			mysql_fetch_field_row(b,"fuel");
			VehicleInfo[i][vFuel] = strval(b);
			mysql_fetch_field_row(b,"faction");
			VehicleInfo[i][vFaction] = strval(b);
			mysql_fetch_field_row(b,"owner_name");
			format(VehicleInfo[i][vOwnerName],MAX_PLAYER_NAME,"%s",b);
			mysql_fetch_field_row(b,"death_time");
			VehicleInfo[i][vDeathTime] = strval(b);
			mysql_fetch_field_row(b,"plate");
			format(VehicleInfo[i][vPlate],32,"%s",b);
			mysql_fetch_field_row(b,"insurance");
			VehicleInfo[i][vInsurance] = strval(b);
			mysql_fetch_field_row(b,"mods");
			format(VehicleInfo[i][vMods],256,"%s",b);
			mysql_fetch_field_row(b,"weapons");
			AssignVehicleWeapons(i,b);
			mysql_fetch_field_row(b,"paintjob");
			VehicleInfo[i][vPaintjob] = strval(b);
			mysql_fetch_field_row(b,"imp");
			VehicleInfo[i][vImpounded] = strval(b);
			mysql_fetch_field_row(b,"gps");
			VehicleInfo[i][vGps] = strval(b);
			mysql_fetch_field_row(b,"comp");
			VehicleInfo[i][vCompany] = strval(b);
			mysql_fetch_field_row(b,"dmg1");
			VehicleInfo[i][vDamage][0] = strval(b);
			mysql_fetch_field_row(b,"dmg2");
			VehicleInfo[i][vDamage][1] = strval(b);
			mysql_fetch_field_row(b,"dmg3");
			VehicleInfo[i][vDamage][2] = strval(b);
			mysql_fetch_field_row(b,"dmg4");
			VehicleInfo[i][vDamage][3] = strval(b);
			mysql_fetch_field_row(b,"hp");
			VehicleInfo[i][vHealth] = floatstr(b);
			mysql_fetch_field_row(b,"neon");
			VehicleInfo[i][vNeon] = strval(b);
			mysql_fetch_field_row(b,"immob");
			VehicleInfo[i][vImmob] = strval(b);
			if(!strlen(VehicleInfo[i][vPlate]) && VehicleInfo[i][vModel]) FetchVehiclePlate(i,VehicleInfo[i][vPlate]);
			mysql_fetch_field_row(b,"selling");
			VehicleInfo[i][vSelling] = strval(b);
			mysql_fetch_field_row(b,"sprice");
			VehicleInfo[i][vSellingPrice] = strval(b);
			mysql_fetch_field_row(b,"sexpire");
			VehicleInfo[i][vSellingExpire] = strval(b);
			i ++;

	    }
		CreateVehicles();

	}
	else if(type == QUERY_LOAD_HOUSES)
	{

	    new i = 0;
	    new b[256];
	    while(mysql_retrieve_row())
	    {

	        mysql_fetch_field_row(b,"id");
	        HouseInfo[i][hID] = strval(b);
	        mysql_fetch_field_row(b,"owning_character");
	        HouseInfo[i][hOwner] = strval(b);
	        mysql_fetch_field_row(b,"owner_name");
	        format(HouseInfo[i][hOwnerName],MAX_PLAYER_NAME,"%s",b);
	        mysql_fetch_field_row(b,"price");
	        HouseInfo[i][hPrice] = strval(b);
	        mysql_fetch_field_row(b,"spawn_x");
	        HouseInfo[i][hSpawnX] = floatstr(b);
	        mysql_fetch_field_row(b,"spawn_y");
	        HouseInfo[i][hSpawnY] = floatstr(b);
	        mysql_fetch_field_row(b,"spawn_z");
	        HouseInfo[i][hSpawnZ] = floatstr(b);
	        mysql_fetch_field_row(b,"interior_x");
			HouseInfo[i][hInteriorX] = floatstr(b);
			mysql_fetch_field_row(b,"interior_y");
			HouseInfo[i][hInteriorY] = floatstr(b);
			mysql_fetch_field_row(b,"interior_z");
			HouseInfo[i][hInteriorZ] = floatstr(b);
			mysql_fetch_field_row(b,"interior_r");
			HouseInfo[i][hInteriorR] = floatstr(b);
			mysql_fetch_field_row(b,"interior");
			HouseInfo[i][hInterior] = strval(b);
			mysql_fetch_field_row(b,"locked");
			HouseInfo[i][hLocked] = strval(b);
			mysql_fetch_field_row(b,"rent_price");
			HouseInfo[i][hRentPrice] = strval(b);
			mysql_fetch_field_row(b,"bank");
			HouseInfo[i][hBank] = strval(b);
			mysql_fetch_field_row(b,"inv");
			format(HouseInfo[i][hInventory],256,"%s",b);
			LoadHouseInventory(i);
			mysql_fetch_field_row(b,"weapons");
			AssignHouseWeapons(i,b);
			mysql_fetch_field_row(b,"upgrades");
			AssignHouseUpgrades(i,b);
			mysql_fetch_field_row(b,"rentable");
			HouseInfo[i][hRentable] = strval(b);
			mysql_fetch_field_row(b,"level");
			HouseInfo[i][hLevel] = strval(b);
			i ++;

	    }
	    CreateHouses();

	}
	else if(type == QUERY_LOAD_BIZES)
 	{

		new i = 0;
		new b[256];
		while(mysql_retrieve_row())
		{

		    for(new z = 0; z < 5; z ++){ used_vehicle_slots[i][z] = -1; }
	        mysql_fetch_field_row(b,"id");
	        BizInfo[i][bID] = strval(b);
	        mysql_fetch_field_row(b,"owning_character");
	        BizInfo[i][bOwner] = strval(b);
	        mysql_fetch_field_row(b,"owner_name");
	        format(BizInfo[i][bOwnerName],MAX_PLAYER_NAME,"%s",b);
	        mysql_fetch_field_row(b,"price");
	        BizInfo[i][bPrice] = strval(b);
	        mysql_fetch_field_row(b,"spawn_x");
	        BizInfo[i][bSpawnX] = floatstr(b);
	        mysql_fetch_field_row(b,"spawn_y");
	        BizInfo[i][bSpawnY] = floatstr(b);
	        mysql_fetch_field_row(b,"spawn_z");
	        BizInfo[i][bSpawnZ] = floatstr(b);
	        mysql_fetch_field_row(b,"interior_x");
			BizInfo[i][bInteriorX] = floatstr(b);
			mysql_fetch_field_row(b,"interior_y");
			BizInfo[i][bInteriorY] = floatstr(b);
			mysql_fetch_field_row(b,"interior_z");
			BizInfo[i][bInteriorZ] = floatstr(b);
			mysql_fetch_field_row(b,"interior");
			BizInfo[i][bInterior] = strval(b);
			mysql_fetch_field_row(b,"type");
			BizInfo[i][bType] = strval(b);
			mysql_fetch_field_row(b,"open");
			BizInfo[i][bOpen] = strval(b);
			mysql_fetch_field_row(b,"vehicle_spawn_x");
			BizInfo[i][bVX] = floatstr(b);
			mysql_fetch_field_row(b,"vehicle_spawn_y");
			BizInfo[i][bVY] = floatstr(b);
			mysql_fetch_field_row(b,"vehicle_spawn_z");
			BizInfo[i][bVZ] = floatstr(b);
			mysql_fetch_field_row(b,"vehicle_spawn_r");
			BizInfo[i][bVR] = floatstr(b);
			mysql_fetch_field_row(b,"open");
			BizInfo[i][bOpen] = strval(b);
			mysql_fetch_field_row(b,"bank");
			BizInfo[i][bBank] = strval(b);
			mysql_fetch_field_row(b,"fuel_price");
			BizInfo[i][bFuelPrice] = strval(b);
			mysql_fetch_field_row(b,"name");
			format(BizInfo[i][bName],256,"%s",b);
			mysql_fetch_field_row(b,"bill_time");
			BizInfo[i][bBillTime] = strval(b);
			mysql_fetch_field_row(b,"efee");
			BizInfo[i][bEntranceFee] = strval(b);
			mysql_fetch_field_row(b,"level");
			BizInfo[i][bLevel] = strval(b);
			stock_value_oldchange[i] = (BizInfo[i][bBank] != 0) ? (BizInfo[i][bBank] / 100) : 0;
			i ++;

		}
		CreateBizes();

	}
	else if(type == QUERY_LOAD_MODELS)
	{

		new b[256];
		new i = 0;
		while(mysql_retrieve_row())
		{

			mysql_fetch_field_row(b,"model");
			VehicleModelInfo[i][vmModel] = strval(b);
			mysql_fetch_field_row(b,"name");
			format(VehicleModelInfo[i][vmName],256,"%s",b);
			mysql_fetch_field_row(b,"price");
			VehicleModelInfo[i][vmPrice] = strval(b);
			mysql_fetch_field_row(b,"emergency_vehicle");
			VehicleModelInfo[i][vmEmerVeh] = strval(b);
			mysql_fetch_field_row(b,"donator_vehicle");
			VehicleModelInfo[i][vmDonatorVeh] = floatstr(b);
			mysql_fetch_field_row(b,"vehicle_type");
			VehicleModelInfo[i][vmType] = strval(b);
			mysql_fetch_field_row(b,"insurance_price");
			VehicleModelInfo[i][vmInsurancePrice] = strval(b);
			mysql_fetch_field_row(b,"news");
			VehicleModelInfo[i][vmNews] = strval(b);
			mysql_fetch_field_row(b,"fuel_interval");
			VehicleModelInfo[i][vmFuelInterval] = strval(b);
			i ++;

		}
		vehicle_creating = 0;
		print("Vehicle Models Loaded.");
		CreateBuyVehicles();

	}
	else if(type == QUERY_LOAD_FACTIONS)
	{

		new b[256];
		new i = 0;
		while(mysql_retrieve_row())
		{

		    mysql_fetch_field_row(b,"id");
			FactionInfo[i][fID] = strval(b);
			mysql_fetch_field_row(b,"name");
			format(FactionInfo[i][fName],256,"%s",b);
			mysql_fetch_field_row(b,"short_name");
			format(FactionInfo[i][fShortName],256,"%s",b);
			mysql_fetch_field_row(b,"bank");
			FactionInfo[i][fBank] = strval(b);
			mysql_fetch_field_row(b,"type");
			FactionInfo[i][fType] = strval(b);
			i ++;

		}

	}
	else if(type == QUERY_LOGIN_MAIL)
	{

	    new b[256];
	    new i = 0;
	    while(mysql_retrieve_row())
	    {

	        mysql_fetch_field_row(b,"id");
			MailInfo[playerid][i][mID] = strval(b);
			mysql_fetch_field_row(b,"sender");
			format(MailInfo[playerid][i][mSender],MAX_PLAYER_NAME,"%s",b);
			mysql_fetch_field_row(b,"subject");
			format(MailInfo[playerid][i][mSubject],64,"%s",b);
			mysql_fetch_field_row(b,"msg");
			format(MailInfo[playerid][i][mMsg],256,"%s",b);
			mysql_fetch_field_row(b,"active");
			MailInfo[playerid][i][mActive] = strval(b);
			mysql_fetch_field_row(b,"read");
			MailInfo[playerid][i][mRead] = strval(b);
			i ++;

	    }
	    RefreshCharacterMail(GetCharacterID(playerid));

	}
	else if(type == QUERY_FIND_MAIL)
	{

		new id = mysql_retrieve_row();
		if(id > -1)
		{
	        composing_mail[playerid] = 2;
	        composing_mail_to[playerid] = id;
	        SendClientMessageA(playerid,COLOR_GREEN,"Pleae type the subject for your message.");

		}
		else
		{

			SendClientMessageA(playerid,COLOR_LIGHTRED,"Could Not Find Player. Please make sure you spelt the name correctlly.");

		}

	}
	else if(type == QUERY_SEND_MAIL)
	{

     	if(composing_mail[playerid]) { SendClientMessageA(playerid,COLOR_GREEN,"Your message has been sent"); }
	    composing_mail[playerid] = 0;
	    TogglePlayerControllable(playerid,1);

	}
	else if(type == QUERY_LOAD_INTERIORS)
	{

	    new b[256];
	    new i = 0;
	    while(mysql_retrieve_row())
	    {

	        mysql_fetch_field_row(b,"id");
			InteriorInfo[i][iID] = strval(b);
			mysql_fetch_field_row(b,"spawn_x");
			InteriorInfo[i][iSpawnX] = floatstr(b);
			mysql_fetch_field_row(b,"spawn_y");
			InteriorInfo[i][iSpawnY] = floatstr(b);
			mysql_fetch_field_row(b,"spawn_z");
			InteriorInfo[i][iSpawnZ] = floatstr(b);
			mysql_fetch_field_row(b,"interior_x");
			InteriorInfo[i][iInteriorX] = floatstr(b);
			mysql_fetch_field_row(b,"interior_y");
			InteriorInfo[i][iInteriorY] = floatstr(b);
			mysql_fetch_field_row(b,"interior_z");
			InteriorInfo[i][iInteriorZ] = floatstr(b);
			mysql_fetch_field_row(b,"interior");
			InteriorInfo[i][iInterior] = strval(b);
			mysql_fetch_field_row(b,"lock");
			InteriorInfo[i][iLock] = strval(b);
			mysql_fetch_field_row(b,"faction");
			InteriorInfo[i][iFaction] = strval(b);
			i ++;

	    }
	    CreateInteriors();

	}
	else if(type == QUERY_LOGIN_BANCHECK)
	{

		new num = mysql_num_rows();
		if(num > 0) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This account or IP address is BANNED! You cannot continue playing."); Kick(playerid); }

	}
	else if(type == QUERY_HOUSE_SAVE)
	{

	    active_house_save ++;
		SaveHouses();

	}
	else if(type == QUERY_BIZ_SAVE)
	{

	    active_biz_save ++;
		SaveBizes();

	}
	else if(type == QUERY_VEHICLES_SAVE)
	{

		SaveVehicles();

	}
	else if(type == QUERY_LOAD_RADIO)
	{

 		new b[256];
	    new i = 0;
	    while(mysql_retrieve_row())
	    {

	        mysql_fetch_field_row(b,"id");
			RadioInfo[i][rID] = strval(b);
			mysql_fetch_field_row(b,"channel");
			RadioInfo[i][rChannel] = strval(b);
			mysql_fetch_field_row(b,"owning_character");
			RadioInfo[i][rOwner] = strval(b);
			mysql_fetch_field_row(b,"password");
			format(RadioInfo[i][rPassword],16,"%s",b);
			i ++;

	    }
	    print("Radio Channels Loaded.");

	}
	else if(type == QUERY_RADIO_CREATE)
	{

	    RadioInfo[playerid][rID] = mysql_insert_id();

	}
	else if(type == QUERY_SAVE_INTERIORS)
	{

	    active_interior_save ++;
	    SaveInteriors();

	}
	else if(type == QUERY_SAVE_PLAYER)
	{

	    if(server_restarting) { active_player_saves --; CheckRestartState(); }
		if(afk_reset[(playerid - 1000)]) { StopPlayerRadio((playerid - 1000)); character_chosen[(playerid - 1000)] = 0; active_character[(playerid - 1000)] = -1; ResetStats((playerid - 1000)); ProcessSpawn((playerid - 1000)); }

	}
	else if(type == QUERY_CREATE_NOTE)
	{

	    if(creating_note[playerid] > -1)
	    {

			NoteInfo[playerid][creating_note[playerid]][nID] = mysql_insert_id();
			creating_note[playerid] = -1;

		}

	}
	else if(type == QUERY_LOGIN_INVENTORY)
	{

 		new b[256];
	    new i = 0;
	    while(mysql_retrieve_row())
	    {

	        mysql_fetch_field_row(b,"id");
			InventoryInfo[playerid][i][inID] = strval(b);
			mysql_fetch_field_row(b,"item");
			InventoryInfo[playerid][i][inItem] = strval(b);
			mysql_fetch_field_row(b,"amount");
			InventoryInfo[playerid][i][inAmount] = strval(b);
			i ++;

	    }

	}
	else if(type == QUERY_LOAD_DRUGS)
	{

	 	new b[256];
	    new i = 0;
	    while(mysql_retrieve_row())
	    {

	        mysql_fetch_field_row(b,"id");
			DrugInfo[i][dID] = strval(b);
			mysql_fetch_field_row(b,"type");
			DrugInfo[i][dType] = strval(b);
			mysql_fetch_field_row(b,"spawn_x");
			DrugInfo[i][dSpawnX] = floatstr(b);
			mysql_fetch_field_row(b,"spawn_y");
			DrugInfo[i][dSpawnY] = floatstr(b);
			mysql_fetch_field_row(b,"spawn_z");
			DrugInfo[i][dSpawnZ] = floatstr(b);
			mysql_fetch_field_row(b,"planted");
			DrugInfo[i][dTime] = strval(b);
			i ++;

	    }
	    CreateDrugs();

	}
	else if(type == QUERY_DRUG_SAVE)
	{

	    active_drug_save ++;
		SaveDrugs();

	}
	else if(type == QUERY_LOAD_VINVENTORY)
	{

		new b[256];
	    new i = 0;
	    while(mysql_retrieve_row())
	    {

			mysql_fetch_field_row(b,"owning_vehicle");
			new slot = GetVehicleSlotFromID(strval(b));
			new a = 0;
			new is = -1;
			do{

				if(VehicleInventory[slot][a][vinItem] == -1) { is = a; }
				a ++;

			} while(is == -1 && a < MAX_INVENTORY);
			if(is > -1)
			{
		        mysql_fetch_field_row(b,"id");
				VehicleInventory[slot][is][vinID] = strval(b);
				mysql_fetch_field_row(b,"item");
				VehicleInventory[slot][is][vinItem] = strval(b);
				mysql_fetch_field_row(b,"amount");
				VehicleInventory[slot][is][vinAmount] = strval(b);
			}
			i ++;

	    }
	    print("Vehicle Inventory Loaded.");

	}
	else if(type == QUERY_CREATE_VINVENTORY)
	{

		if(adding_vinventory[(playerid - 100000)] > -1)
	    {

			VehicleInventory[(playerid - 100000)][adding_vinventory[(playerid - 100000)]][vinID] = mysql_insert_id();
			adding_vinventory[(playerid - 100000)] = -1;

	    }

	}
	else if(type == QUERY_SAVE_VINVENTORY)
	{

	   	if(adding_vinventory[(playerid - 100000)] > -1)
	    {

			adding_vinventory[(playerid - 100000)] = -1;

	    }

	}
	else if(type == QUERY_CREATE_ACCOUNT)
	{

        tmp_account_id[playerid] = mysql_insert_id();

	}
	else if(type == QUERY_CREATE_CHAR)
	{

	    if(!mysql_num_rows())
	    {

			new skin = (strcmp(reg_sex[playerid],"male",true) == 0) ? 177 : 192;
	        new str3[1024];
		    format(str3,sizeof(str3),"INSERT INTO rp_characters (name,skin,spawn_x,spawn_y,spawn_z,spawn_r,owner,pay_time,level,gender,dob,ethnicity,radio_auth,health,money,bank) VALUES ('%s','%d','1929.0565','33.6534','33.9817','270','%d','3600','1','%s',NOW(),'White','none',100,'5000','8000')",clean_save_name[playerid],skin,tmp_account_id[playerid],reg_sex[playerid]);
		    mysql_query(str3,player_threads[playerid]);
			format(str3,sizeof(str3),"INSERT INTO ucp_donator_items (User,Type) VALUES ('%d',1)",tmp_account_id[playerid]);
			mysql_query(str3,player_threads_alt[playerid]);
		    tmp_account_id[playerid] = -1;
		    SendClientMessage(playerid,COLOR_YELLOW,"Thank you for registering to Countryside Gaming. To change your characters details please visit our UCP @ ucp.countrysidegaming.com");
		    SendClientMessage(playerid,COLOR_YELLOW,"ucp.countrysidegaming.com");
		    OnPlayerConnect(playerid);

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"That character name is already taken. Please choose another.");
		    ShowPlayerDialog(playerid,DIALOG_REG4,DIALOG_STYLE_INPUT,"Character Creation","Please type the FULL name of your character. In the following format: Firstname_Lastname (remember to incldue the underscore)","Confirm","");

		}

	}
	else if(type == QUERY_REQCALLS)
	{

	    new b[256];
		SendClientMessage(playerid,COLOR_YELLOW2,"|-----Recent Calls-----|");
		if(mysql_num_rows())
		{

			while(mysql_retrieve_row())
			{

			    mysql_fetch_field_row(b,"id");
			    new id = strval(b);
			    mysql_fetch_field_row(b,"situation");
			    new sit[64];
				strcat(sit,b,sizeof(sit));
				mysql_fetch_field_row(b,"stamp2");
			    new str3[256];
			    format(str3,sizeof(str3),"Call %d: %s (%s)",id,sit,b);
			    SendClientMessageA(playerid,COLOR_YELLOW2,str3);

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"No Calls");

		}

	}
	else if(type == QUERY_WARRANTS)
	{

		if(mysql_num_rows())
		{

			new b[256];
			while(mysql_retrieve_row())
			{

				new crime[128];
			    mysql_fetch_field_row(b,"crime");
			    strcat(crime,b);
			    mysql_fetch_field_row(b,"stamp");
			    new str3[256];
			    format(str3,sizeof(str3),"WARRANT: %s (%s)",crime,b);
			    SendClientMessageA(playerid,COLOR_LIGHTRED,str3);
			    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_WHITE,"No Outstanding Warrants");

		}
		new fine_str[256];
		format(fine_str,sizeof(fine_str),"SELECT * FROM rp_fines WHERE suspect = '%d' AND paid = 0",GetPVarInt(playerid,"mdc_otherid"));
		mysql_query(fine_str,player_threads[playerid],QUERY_MDC_FINE);

	}
	else if(type == QUERY_GETCALL)
	{

	    if(mysql_num_rows())
	    {

			while(mysql_retrieve_row())
			{

			    new caller[MAX_PLAYER_NAME];
			    mysql_fetch_field_row(caller,"caller");
			    new number[64];
			    mysql_fetch_field_row(number,"phone");
			    new location[128];
			    mysql_fetch_field_row(location,"location");
			    new situation[128];
			    mysql_fetch_field_row(situation,"situation");
			    new stamp[64];
			    mysql_fetch_field_row(stamp,"stamp");
				new tmp[256];
				SendClientMessage(playerid,COLOR_YELLOW2,"|-----Call Information-----|");
				format(tmp,sizeof(tmp),"{808080}Caller: {FFFFFF}%s",caller);
				SendClientMessage(playerid,COLOR_WHITE,tmp);
				format(tmp,sizeof(tmp),"{808080}Phone: {FFFFFF}%s",number);
				SendClientMessage(playerid,COLOR_WHITE,tmp);
				format(tmp,sizeof(tmp),"{808080}Location: {FFFFFF}%s",location);
				SendClientMessage(playerid,COLOR_WHITE,tmp);
				format(tmp,sizeof(tmp),"{808080}Situation: {FFFFFF}%s",situation);
				SendClientMessageA(playerid,COLOR_WHITE,tmp);
				format(tmp,sizeof(tmp),"{808080}Called: {FFFFFF}%s",stamp);
				SendClientMessage(playerid,COLOR_WHITE,tmp);

			}

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"Call not found.");

	    }

	}
	else if(type == QUERY_DELETE_VINVENTORY)
	{

	    for(new slot = 0; slot < MAX_INVENTORY; slot ++)
		{

	   		if(VehicleInventory[(playerid - 100000)][slot][vinID] > 0 && VehicleInventory[(playerid - 100000)][slot][vinItem] == -1) { VehicleInventory[(playerid - 100000)][slot][vinID] = 0; }

	    }

	}
	else if(type == QUERY_REQ_STATIONS)
	{

	    if(!mysql_num_rows()) { SendClientMessage(playerid,COLOR_LIGHTRED,"No radio stations available."); } else {

	        SendClientMessage(playerid,COLOR_YELLOW2,"|------Radio Stations------|");
	        new b[64];
	        new b2[64];
	        new str3[128];
	        while(mysql_retrieve_row())
	        {

                mysql_fetch_field_row(b,"radioID");
		        mysql_fetch_field_row(b2,"Station");
				format(str3,sizeof(str3),"Station %s: %s",b,b2);
				SendClientMessage(playerid,COLOR_YELLOW2,str3);

	        }
	        SendClientMessage(playerid,COLOR_YELLOW2,"Use /radio set [Station ID] to set your radio station.");

	    }


	}
	else if(type == QUERY_SET_STATION)
	{

	    if(!mysql_num_rows()) { SendErrorMsg(playerid,"Radio Station Not Found"); } else {

		    Audio_Stop(playerid,radio_handle[playerid]);
	        new b[256];
			new d[3][256];
			mysql_fetch_row_format(b);
			explode(d,b,"|");
			new url[256];
			radio_id[playerid] = strval(d[0]);
			format(url,sizeof(url),"%s",d[2]);
			Audio_StopRadio(playerid);
			radio_handle[playerid] = Audio_PlayStreamed(playerid,url);
			Audio_SetVolume(playerid,radio_handle[playerid],radio_volume[playerid]);
			SendClientMessage(playerid,COLOR_YELLOW2,"Use /radio volume [1-100] to set the volume, or /radio stop to stop the radio station.");
			new veh = GetPlayerVehicleID(playerid);
			vehicle_radioid[veh] = radio_id[playerid];
			format(vehicle_radio[veh],256,"%s",url);
			format(player_radio[playerid],256,"%s",url);
			SyncRadioPassengers(veh);
			SendEmote(playerid,"changes the radio station.");

	    }

	}
	else if(type == QUERY_LOAD_INVENTORY)
	{

		mysql_retrieve_row();
	    new bb[256];
	    mysql_fetch_field_row(bb,"inventory");
	    GiveSavedInventory((playerid - 20000),bb);

	}
	else if(type == QUERY_CASH_CHEQUE)
	{

	    new i = 1;
	    new done = 0;
	    while(mysql_retrieve_row())
	    {

	        if(i == requesting_cheque[playerid])
	        {

		    	new bb[256];
				mysql_fetch_field_row(bb,"id");
				new id = strval(bb);
				mysql_fetch_field_row(bb,"amount");
				new amount = strval(bb);
				mysql_fetch_field_row(bb,"sender");
				new other = strval(bb);
				CompleteChequeCash(id,playerid,other,amount);
				done = 1;

			}
			i ++;

	    }
		if(!done) SendClientMessage(playerid,COLOR_LIGHTRED,"There are no cheques in this slot.");

	}
	else if(type == QUERY_VIEW_CHEQUES)
	{

		SendClientMessage(playerid,COLOR_YELLOW2,"|-----Your Cheques-----|");
		new ii = 1;
		while(mysql_retrieve_row())
		{

		    new bbb[128];
		    mysql_fetch_field_row(bbb,"amount");
			new str3[128];
			format(str3,sizeof(str3),"Cheque #%d: $%s",ii,bbb);
			SendClientMessage(playerid,COLOR_YELLOW2,str3);
			ii ++;

		}

	}
	else if(type == QUERY_TENANTS)
	{

	    SendClientMessage(playerid,COLOR_YELLOW2,"|-----Your Tenants-----|");
		new tid = 1;
		while(mysql_retrieve_row())
		{

		    new tstr[MAX_PLAYER_NAME], tstr2[128];
		    mysql_fetch_field_row(tstr,"name");
			format(tstr2,sizeof(tstr2),"#%d: %s",tid,tstr);
			SendClientMessage(playerid,COLOR_YELLOW2,tstr2);

		}
		SendClientMessage(playerid,COLOR_YELLOW2,"Usage /evict [tenant #] to evict a tenant");

	}
	else if(type == QUERY_EVICT)
	{

		new tid = 1;
		new evict_str[256];
		new evict_tmp[256];
		new evict_int = 0;
		new evict_ustr[128];
		new done = 0;
		while(mysql_retrieve_row())
		{

			if(tid == evicting_tenant[playerid])
			{

				mysql_fetch_field_row(evict_str,"id");
				evict_int = strval(evict_str);
				mysql_fetch_field_row(evict_tmp,"name");
				new other = IsCharacterOnline(evict_int);
				if(other > -1)
				{

					CharacterInfo[other][active_character[other]][cRenting] = 0;
					done = 1;

				}
				else
				{

					format(evict_str,sizeof(evict_str),"UPDATE rp_characters SET renting = '0' WHERE id = '%d' LIMIT 1",evict_int);
					mysql_query(evict_str,player_threads[playerid]);
					done = 1;

				}
				format(evict_ustr,sizeof(evict_ustr),"You have evicted %s from your house.",evict_tmp);
				SendClientMessage(playerid,COLOR_YELLOW,evict_ustr);

			}
			tid ++;

		}
		if(!done) SendClientMessage(playerid,COLOR_LIGHTRED,"No tenant in this slot.");
		evicting_tenant[playerid] = 0;

	}
	else if(type == QUERY_APB)
	{

		SendClientMessage(playerid,COLOR_LIGHTRED,"|----APBs----|");
		new apb_str[256];
		new apb_id = 0;
		new apb_suspect[64];
		new apb_send[256];
		while(mysql_retrieve_row())
		{

		    mysql_fetch_field_row(apb_str,"id");
		    apb_id = strval(apb_str);
		    mysql_fetch_field_row(apb_str,"suspect");
		    format(apb_suspect,sizeof(apb_suspect),"%s",apb_str);
		    format(apb_send,sizeof(apb_send),"#%d: %s",apb_id,apb_suspect);
		    SendClientMessage(playerid,COLOR_LIGHTRED,apb_send);

		}
		SendClientMessage(playerid,COLOR_LIGHTRED,"Usage /apb read to read an APB");

	}
	else if(type == QUERY_APB_READ)
	{

		if(mysql_num_rows())
		{

		    new read_apb_str[256];
		    new read_apb_id = 0;
		    new read_apb_suspect[128];
		    new read_apb_crime[128];
		    new read_apb_stamp[128];
			mysql_retrieve_row();
			mysql_fetch_field_row(read_apb_str,"id");
			read_apb_id = strval(read_apb_str);
			mysql_fetch_field_row(read_apb_str,"suspect");
			format(read_apb_suspect,sizeof(read_apb_suspect),"%s",read_apb_str);
			mysql_fetch_field_row(read_apb_str,"crime");
			format(read_apb_crime,sizeof(read_apb_crime),"%s",read_apb_str);
			mysql_fetch_field_row(read_apb_str,"stamp");
			format(read_apb_stamp,sizeof(read_apb_stamp),"%s",read_apb_str);
			SendClientMessage(playerid,COLOR_LIGHTRED,"|-----APB Information-----|");
			format(read_apb_str,sizeof(read_apb_str),"APB #: %d",read_apb_id);
			SendClientMessage(playerid,COLOR_LIGHTRED,read_apb_str);
			format(read_apb_str,sizeof(read_apb_str),"Suspect/Vehicle: %s",read_apb_suspect);
			SendClientMessage(playerid,COLOR_LIGHTRED,read_apb_str);
			format(read_apb_str,sizeof(read_apb_str),"Crime: %s",read_apb_crime);
			SendClientMessage(playerid,COLOR_LIGHTRED,read_apb_str);
			format(read_apb_str,sizeof(read_apb_str),"Created: %s",read_apb_stamp);
			SendClientMessage(playerid,COLOR_LIGHTRED,read_apb_str);

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"No APB with this ID available.");

		}

	}
	else if(type == QUERY_APB_CREATE)
	{

		new apb_write_name[MAX_PLAYER_NAME];
		GetCharacterName(playerid,apb_write_name);
		new apb_write_str[256];
		new apb_write_id = mysql_insert_id();
		format(apb_write_str,sizeof(apb_write_str),"%s %s has just issued a new APB, use /apb read %d to read it.",CharacterInfo[playerid][active_character[playerid]][cRankName],apb_write_name,apb_write_id);
		SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],apb_write_str);

	}
	else if(type == QUERY_SAVE_FACTIONS)
	{

	    active_faction_save ++;
	    if(active_faction_save < sizeof(FactionInfo))
	    {

	        SaveFactions();

	    }
	    else
	    {
	    
	        active_faction_save = 0;
	        print("Factions Saved.");
	        SendAdminBroadcast("[SERVER] Factions Successfully Saved");
			if(server_restarting) {
			    saved_vars ++;
		        CheckRestartState();
			}

	    }

	}
	else if(type == QUERY_LOAD_COMPANIES)
	{

		new i = 0;
		while(mysql_retrieve_row())
		{

    		new comp_str[256];
		    mysql_fetch_field_row(comp_str,"id");
		    CompanyInfo[i][ciID] = strval(comp_str);
		    mysql_fetch_field_row(comp_str,"name");
			format(CompanyInfo[i][ciName],64,"%s",comp_str);
			mysql_fetch_field_row(comp_str,"bank");
			CompanyInfo[i][ciBank] = strval(comp_str);
			mysql_fetch_field_row(comp_str,"jobs_complete");
			CompanyInfo[i][ciJobsComplete] = strval(comp_str);
			mysql_fetch_field_row(comp_str,"type");
			CompanyInfo[i][ciType] = strval(comp_str);
			mysql_fetch_field_row(comp_str,"pay_rate");
			CompanyInfo[i][ciPayRate] = strval(comp_str);
			mysql_fetch_field_row(comp_str,"job_money");
			CompanyInfo[i][ciJobMoney] = strval(comp_str);
			i ++;

		}
		print("Companies Loaded.");

	}
	else if(type == QUERY_WORKLOGS)
	{

	    new dialogstr[1024];
	    while(mysql_retrieve_row())
	    {

	        new tmp[128];
	        new namestr[MAX_PLAYER_NAME];
			new paystr[128];
	        new typestr[128];
	        mysql_fetch_field_row(namestr,"name");
         	mysql_fetch_field_row(paystr,"pay");
         	mysql_fetch_field_row(typestr,"type");
			format(tmp,sizeof(tmp),"%s completed a %s | Money made: $%s\n",namestr,typestr,paystr);
			strins(dialogstr,tmp,strlen(dialogstr));

	    }
	    ShowPlayerDialog(playerid,999,DIALOG_STYLE_LIST,"Recentlly Completed Jobs...",dialogstr,"Ok","Close");

	}
	else if(type == QUERY_SAVE_RIGS)
	{

	    active_rig_save ++;
		SaveRigs();

	}
	else if(type == QUERY_LOAD_RIGS)
	{

		new i = 0;
		while(mysql_retrieve_row())
		{

    		new rig_str[256];
			mysql_fetch_field_row(rig_str,"owner");
			oil_rig_owners[i] = strval(rig_str);
			mysql_fetch_field_row(rig_str,"level");
			oil_rig_levels[i] = strval(rig_str);
			if(oil_rig_owners[i] > 0)
			{

                oil_rig_objects[i] = F_CreateObject(3426,oil_rigs[i][0],oil_rigs[i][1],oil_rigs[i][2],0.0,0.0,0.0);

			}
			i ++;

		}
		print("Rigs Loaded.");

	}
	else if(type == QUERY_SAVE_COMPANY)
	{

	    active_company_save ++;
	    SaveCompanies();

	}
	else if(type == QUERY_BUY_STOCK)
	{

	    new stype = buying_stock[playerid];
	    new amount = buying_stock_amount[playerid];
	    new bstock_str[256];
	    if(!mysql_num_rows())
	    {

         	format(bstock_str,sizeof(bstock_str),"INSERT INTO rp_stock (owner,type,amount) VALUES ('%d','%d','%d')",CharacterInfo[playerid][active_character[playerid]][cID],stype,amount);
			mysql_query(bstock_str,player_threads[playerid]);

	    }
	    else
	    {

	        format(bstock_str,sizeof(bstock_str),"UPDATE rp_stock SET amount = '%d' WHERE owner = '%d' AND type = '%d'",amount,CharacterInfo[playerid][active_character[playerid]][cID],stype);
			mysql_query(bstock_str,player_threads[playerid]);

	    }
	    buying_stock[playerid] = 0;
	    buying_stock_amount[playerid] = 0;

	}
	else if(type == QUERY_STOCK_LIST)
	{

		new i = 1;
		SendClientMessage(playerid,COLOR_YELLOW2,"|-----Your Stocks-----|");
		while(mysql_retrieve_row())
		{

    		new stock_str[256];
			mysql_fetch_field_row(stock_str,"type");
			new stype = strval(stock_str);
			mysql_fetch_field_row(stock_str,"amount");
			new amount = strval(stock_str);
			new stock_send_str[128];
			new name[64];
			GetStockName(stype,name);
			format(stock_send_str,128,"#%d: %d x %s",i,amount,name);
			SendClientMessage(playerid,COLOR_WHITE,stock_send_str);
			i ++;

		}

	}
	else if(type == QUERY_SELL_STOCK)
	{

	    new i = 1;
	    new sdone = 0;
	    while(mysql_retrieve_row())
	    {

	        new sells_str[256];
	        if(i == selling_stock_slot[playerid])
	        {

	            mysql_fetch_field_row(sells_str,"id");
	            new tmpid = strval(sells_str);
		  		mysql_fetch_field_row(sells_str,"amount");
		  		new amount = strval(sells_str);
		  		mysql_fetch_field_row(sells_str,"type");
		  		new setype = strval(sells_str);
		  		new name[64];
		  		GetStockName(setype,name);
		  		new se_send_str[256];
		  		new price = (stock_value[setype] * amount);
		  		sell_stock_price[playerid] = price;
		  		format(se_send_str,sizeof(se_send_str),"{FFFFFF}You are about to sell your stocks in {FF0000}%s {FFFFFF}for {FF0000}$%d",name,price);
		  		SendConfirmationMsg(playerid,se_send_str,DIALOG_SELLSTOCK,tmpid);
				sdone = 1;

	        }
	        i ++;

	    }
	    if(!sdone)
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"There is no stock in this slot.");

	    }

	}
	else if(type == QUERY_COMPMEMBERS)
	{

	    while(mysql_retrieve_row())
	    {

	        new sendstr[128];
	        new membstr[MAX_PLAYER_NAME];
	        mysql_fetch_field_row(membstr,"name");
	        new rankstr[64];
	        mysql_fetch_field_row(rankstr,"comp_rank");
	        new charstr[16];
	        mysql_fetch_field_row(charstr,"id");
			new charid = strval(charstr);
			format(sendstr,sizeof(sendstr),"%s %s",rankstr,membstr);
			new color = (IsCharacterOnline(charid) > -1) ? COLOR_YELLOW2 : COLOR_GRAD1;
			SendClientMessage(playerid,color,sendstr);

	    }

	}
	else if(type == QUERY_LOAD_RINGTONE)
	{

		mysql_retrieve_row();
		new ringtone_src[256];
		mysql_fetch_field_row(ringtone_src,"stream");
		format(ringtone_sys_stream[playerid],256,ringtone_src);

	}
	else if(type == QUERY_RINGTONES)
	{

	    SendClientMessage(playerid,COLOR_YELLOW2,"|-----Available Ringtones-----|");
	    new ringi = 1;
		while(mysql_retrieve_row())
		{

		    new ringtmp1[64];
		    mysql_fetch_field_row(ringtmp1,"name");
		    new ringsendstr[256];
		    format(ringsendstr,sizeof(ringsendstr),"#%d: %s",ringi,ringtmp1);
		    SendClientMessage(playerid,COLOR_YELLOW2,ringsendstr);
		    ringi ++;

		}
		SendClientMessage(playerid,COLOR_YELLOW2,"To preview a ringtone, use /ringtone listen [ringtone #]");

	}
	else if(type == QUERY_LISTEN_RINGTONE)
	{

	    new ringi = 1;
		while(mysql_retrieve_row())
		{

			if(ringi == listen_ringtone[playerid])
			{

			    new ringotmp1[64];
			    mysql_fetch_field_row(ringotmp1,"name");
			    new ringotmp2[256];
			    mysql_fetch_field_row(ringotmp2,"stream");
			    SendStrMsg(playerid,COLOR_YELLOW2,"Now previewing ringtone: %s",ringotmp1);
				new at = Audio_PlayStreamed(playerid,ringotmp2);
				Audio_SetVolume(playerid,at,100);

			}
			ringi ++;

		}

	}
	else if(type == QUERY_SET_RINGTONE)
	{

		new ringi = 1;
		while(mysql_retrieve_row())
		{

			if(ringi == listen_ringtone[playerid])
			{

			    new ringatmp1[64];
			    mysql_fetch_field_row(ringatmp1,"name");
			    new ringatmp2[256];
			    mysql_fetch_field_row(ringatmp2,"stream");
			    SendStrMsg(playerid,COLOR_YELLOW2,"You have set your ringtone to: %s",ringatmp1);
				format(ringtone_sys_stream[playerid],256,ringatmp2);
				new ringquery[256];
				format(ringquery,sizeof(ringquery),"INSERT INTO rp_active_ringtones (owner,stream) VALUES ('%d','%s')",CharacterInfo[playerid][active_character[playerid]][cID],ringatmp2);
				mysql_query(ringquery,player_threads[playerid]);

			}
			ringi ++;

		}

	}
	else if(type == QUERY_PURCHASE_VEHICLE)
	{

	    new slot = purchasing_vehicle[playerid];
	    if(slot > -1)
	    {

	        VehicleInfo[slot][vID] = mysql_insert_id();

     	}
     	purchasing_vehicle[playerid] = -1;

	}
	else if(type == QUERY_LOG_CON)
	{

	    AccountInfo[playerid][aConnectionID] = mysql_insert_id();

	}
	else if(type == QUERY_SIGN)
	{

	    new num = mysql_num_rows();
	    new sign_str[128];
	    format(sign_str,sizeof(sign_str),"Welcome to Palomino Creek\nPopulation: %d",num);
	    SetObjectMaterialText(sign_object_text, sign_str, 0, OBJECT_MATERIAL_SIZE_256x128,"Arial",22);

	}
	else if(type == QUERY_TUNE_BOOMBOX)
 	{

	    if(mysql_num_rows())
	    {

	        new boom_box_str[256];
	    	mysql_fetch_row_format(boom_box_str);
	    	new box = changing_boombox[playerid];
	    	changing_boombox[playerid] = -1;
	    	format(BoomBoxInfo[box][boStream],256,"%s",boom_box_str);
	    	SendEmote(playerid,"alters the radio station on the nearby boom box");
	    	RefreshBoomBoxListeners(box);

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"This radio station does not exist");

	    }

	}
	else if(type == QUERY_UNBAN)
	{

		if(mysql_num_rows())
		{

			new unban_str[256];
			mysql_fetch_row_format(unban_str);
			new unban_id = strval(unban_str);
			new ip[128];
			new unban_ip[128];
			GetPlayerIp(playerid,ip,sizeof(ip));
			mysql_real_escape_string(ip,unban_ip);
			new unban_query[256];
			format(unban_query,sizeof(unban_query),"DELETE FROM rp_bans WHERE banee = '%d' OR ip = '%s'",unban_id,unban_ip);
			mysql_query(unban_query,player_threads[playerid],QUERY_COMPLETE_UNBAN);

		}
		else
		{

			SendClientMessage(playerid,COLOR_LIGHTRED,"That account was not found");

		}

	}
	else if(type == QUERY_COMPLETE_UNBAN)
	{

	    SendClientMessage(playerid,COLOR_GREEN,"This user has been unbanned.");
	    new unban_final_query[256];
	    format(unban_final_query,sizeof(unban_final_query),"INSERT INTO rp_admin_logs (admin,player,action) VALUES ('%s','%s','Unban')",AccountInfo[playerid][aName],unbanning_player[playerid],player_threads[playerid]);
	    mysql_query(unban_final_query,player_threads[playerid]);

	}
	else if(type == QUERY_CHECKCLOTHES)
 	{

	    SendClientMessage(playerid,COLOR_YELLOW2,"|-----Your Clothing Items-----|");
	    new clstr[128];
	    new count = 1;
	    while(mysql_retrieve_row())
		{

		    new tmp[256];
		    new tmp2[256];
		    mysql_fetch_field_row(tmp,"name");
		    mysql_fetch_field_row(tmp2,"equip");
			new equipped = strval(tmp2);
			if(equipped) { format(tmp2,sizeof(tmp2),"Yes"); } else { format(tmp2,sizeof(tmp2),"No"); }
		    format(clstr,sizeof(clstr),"Slot #%d: %s equipped: %s",count,tmp,tmp2);
		    SendClientMessage(playerid,COLOR_YELLOW2,clstr);
		    count ++;

		}
		SendClientMessage(playerid,COLOR_YELLOW2,"Use /clothes equip [slot] to equip a peice of clothing.");

	}
	else if(type == QUERY_EQUIPCLOTHING)
	{

		if(mysql_num_rows() > 0)
		{

		    new count = 1;
			while(mysql_retrieve_row())
			{

			    if(count == cl_equipping[playerid])
			    {

					new cl_results[11][64];
					mysql_fetch_field_row(cl_results[0],"object");
					mysql_fetch_field_row(cl_results[1],"x");
					mysql_fetch_field_row(cl_results[2],"y");
					mysql_fetch_field_row(cl_results[3],"z");
					mysql_fetch_field_row(cl_results[4],"rx");
					mysql_fetch_field_row(cl_results[5],"ry");
					mysql_fetch_field_row(cl_results[6],"rz");
					mysql_fetch_field_row(cl_results[7],"bone");
					mysql_fetch_field_row(cl_results[8],"scalex");
					mysql_fetch_field_row(cl_results[9],"scaley");
					mysql_fetch_field_row(cl_results[10],"scalez");

					new cl_result = cl_SetClothing(playerid,CLOTHING_PLAYER,strval(cl_results[0]),strval(cl_results[7]),floatstr(cl_results[1]),floatstr(cl_results[2]),floatstr(cl_results[3]),floatstr(cl_results[4]),floatstr(cl_results[5]),floatstr(cl_results[6]),floatstr(cl_results[8]),floatstr(cl_results[9]),floatstr(cl_results[10]));
					if(cl_result) { SendClientMessage(playerid,COLOR_GREEN,"Clothing Equipped"); } else { SendClientMessage(playerid,COLOR_LIGHTRED,"Unable to equip clothing, you may have too many items equipped already."); }

					new cl_query[256];
					format(cl_query,sizeof(cl_query),"UPDATE rp_clothing SET equip = 1 WHERE owner = '%d'",CharacterInfo[playerid][active_character[playerid]][cID]);
					mysql_query(cl_query,player_threads[playerid]);

			    }
			    count ++;

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You have nothing in this slot (/clothes list)");

		}
		cl_equipping[playerid] = 0;

	}
	else if(type == QUERY_AMMEND_LIST)
	{

	    new cl_ammend_str[32];
	    new cl_ammend_menu[1024];
	    while(mysql_retrieve_row())
	    {

	        mysql_fetch_field_row(cl_ammend_str,"name");
			new tmp[64];
			format(tmp,sizeof(tmp),"%s\n",cl_ammend_str);
	        strins(cl_ammend_menu,tmp,strlen(cl_ammend_menu));

	    }
	    ShowPlayerDialog(playerid,DIALOG_AMMENDMENU,DIALOG_STYLE_LIST,"Please choose a clothing item to ammend...",cl_ammend_menu,"Confirm","Cancel");

	}
	else if(type == QUERY_REQAMMEND)
	{

	    new cl_req_result[32];
	    new cl_req_count = 0;
	    while(mysql_retrieve_row())
	    {

	        if(cl_req_count == cl_editingitem[playerid])
	        {

				mysql_fetch_field_row(cl_req_result,"id");
				cl_editinguid[playerid] = strval(cl_req_result);

   				new cl_req_results[12][64];
				mysql_fetch_field_row(cl_req_results[0],"object");
				mysql_fetch_field_row(cl_req_results[1],"x");
				mysql_fetch_field_row(cl_req_results[2],"y");
				mysql_fetch_field_row(cl_req_results[3],"z");
				mysql_fetch_field_row(cl_req_results[4],"rx");
				mysql_fetch_field_row(cl_req_results[5],"ry");
				mysql_fetch_field_row(cl_req_results[6],"rz");
				mysql_fetch_field_row(cl_req_results[7],"bone");
				mysql_fetch_field_row(cl_req_results[8],"scalex");
				mysql_fetch_field_row(cl_req_results[9],"scaley");
				mysql_fetch_field_row(cl_req_results[10],"scalez");
				mysql_fetch_field_row(cl_req_results[11],"type");
				new cl_type = strval(cl_req_results[11]);

            	new Float:X, Float:Y, Float:Z, Float:X2, Float:Y2;
				GetPlayerPos(playerid,X,Y,Z);
				GetPosInFrontOfPlayer(playerid,X2,Y2,1.0);

				cl_SetClothing(playerid,CLOTHING_PLAYER,strval(cl_req_results[0]),strval(cl_req_results[7]),floatstr(cl_req_results[1]),floatstr(cl_req_results[2]),floatstr(cl_req_results[3]),floatstr(cl_req_results[4]),floatstr(cl_req_results[5]),floatstr(cl_req_results[6]),floatstr(cl_req_results[8]),floatstr(cl_req_results[9]),floatstr(cl_req_results[10]));
				new slot = cl_FetchObjectSlotFromObjectId(strval(cl_req_results[0]));
    			SetPlayerCameraPos(playerid,(X2 + cl_clothing_cams[cl_type][0]),(Y2 + cl_clothing_cams[cl_type][1]),(Z + cl_clothing_cams[cl_type][2]));
				SetPlayerCameraLookAt(playerid,X,Y,(Z + cl_clothing_cams[cl_type][2]));
			    cl_SetPlayerAmmendingClothing(playerid,0,"cl_OnEditAmmendClothes",slot);

	        }
	        cl_req_count ++;

	    }

	}
	else if(type == QUERY_DRESS_PLAYER)
	{

		new cl_dress_count = 1;
	    while(mysql_retrieve_row())
	    {

	    	new cl_eq_str[12][64];
			mysql_fetch_field_row(cl_eq_str[0],"object");
			mysql_fetch_field_row(cl_eq_str[1],"x");
			mysql_fetch_field_row(cl_eq_str[2],"y");
			mysql_fetch_field_row(cl_eq_str[3],"z");
			mysql_fetch_field_row(cl_eq_str[4],"rx");
			mysql_fetch_field_row(cl_eq_str[5],"ry");
			mysql_fetch_field_row(cl_eq_str[6],"rz");
			mysql_fetch_field_row(cl_eq_str[7],"bone");
			mysql_fetch_field_row(cl_eq_str[8],"scalex");
			mysql_fetch_field_row(cl_eq_str[9],"scaley");
			mysql_fetch_field_row(cl_eq_str[10],"scalez");
			mysql_fetch_field_row(cl_eq_str[11],"type");

			cl_equipping[playerid] = cl_dress_count;

			cl_SetClothing(playerid,CLOTHING_PLAYER,strval(cl_eq_str[0]),strval(cl_eq_str[7]),floatstr(cl_eq_str[1]),floatstr(cl_eq_str[2]),floatstr(cl_eq_str[3]),floatstr(cl_eq_str[4]),floatstr(cl_eq_str[5]),floatstr(cl_eq_str[6]),floatstr(cl_eq_str[8]),floatstr(cl_eq_str[9]),floatstr(cl_eq_str[10]));
			cl_dress_count ++;

	    }

	}
	else if(type == QUERY_LOAD_PRISON)
	{

	    new pr_i = 0;
	    new pr_str[256];
	    while(mysql_retrieve_row())
	    {

	        mysql_fetch_field_row(pr_str,"id");
	        PrisonInfo[pr_i][pID] = strval(pr_str);
	        mysql_fetch_field_row(pr_str,"owner");
	        PrisonInfo[pr_i][pOwner] = strval(pr_str);
	        mysql_fetch_field_row(pr_str,"expire");
			PrisonInfo[pr_i][pExpire] = strval(pr_str);
	        pr_i ++;

	    }
	    print("Prisons Loaded.");

	}
	else if(type == QUERY_FETCH_TICKETS)
	{

		new ti_i = 1;
		new ti_str[256];
		SendClientMessage(playerid,COLOR_FACTION,"|----------Your Tickets----------|");
		while(mysql_retrieve_row())
		{

		    new ti_tmp[3][128];
			mysql_fetch_field_row(ti_str,"issuer");
	        format(ti_tmp[0],128,"Ticket #%d: From: %s ",ti_i,ti_str);
	        mysql_fetch_field_row(ti_str,"amount");
	        format(ti_tmp[1],128,"Amount: $%s",ti_str);
	        format(ti_tmp[2],128,"%s %s",ti_tmp[0],ti_tmp[1]);
	        SendClientMessage(playerid,COLOR_FACTION,ti_tmp[2]);
	        ti_i ++;

		}
		SendClientMessage(playerid,COLOR_FACTION,"Use /tickets pay [ticket #] when inside the police department to pay any ticket. Or /ticket view [ticket #].");

	}
	else if(type == QUERY_VIEW_TICKETS)
	{

		new tv_i = 1;
		new tv_done = 0;
		new tv_str[128];
		new tv_print[128];
		while(mysql_retrieve_row())
		{

		    if(tv_i == GetPVarInt(playerid,"ticket_slot"))
      		{

		        SendClientMessage(playerid,COLOR_FACTION,"|---------Ticket Information--------|");
		        mysql_fetch_field_row(tv_str,"stamp");
		        format(tv_print,sizeof(tv_print),"Date of ticket: %s",tv_str);
		        SendClientMessage(playerid,COLOR_WHITE,tv_print);
		        mysql_fetch_field_row(tv_str,"issuer");
				format(tv_print,sizeof(tv_print),"Ticket Issuer: %s",tv_str);
				SendClientMessage(playerid,COLOR_WHITE,tv_print);
				mysql_fetch_field_row(tv_str,"amount");
				format(tv_print,sizeof(tv_print),"Ticket amount: $%s",tv_str);
				SendClientMessage(playerid,COLOR_WHITE,tv_print);
				mysql_fetch_field_row(tv_str,"reason");
				format(tv_print,sizeof(tv_print),"Ticket reason: %s",tv_str);
				SendClientMessage(playerid,COLOR_WHITE,tv_print);
				SendClientMessage(playerid,COLOR_FACTION,"------------------------------------");
				tv_done = 1;

		    }
		    tv_i ++;

		}
		if(!tv_done) {

		    SendClientMessage(playerid,COLOR_LIGHTRED,"No ticket in this slot.");

		}

	}
	else if(type == QUERY_PAY_TICKET)
	{

	    new tp_i = 1;
	    new tp_done = 0;
		new tp_str[128];
		while(mysql_retrieve_row())
		{

			if(tp_i == GetPVarInt(playerid,"ticket_slot"))
			{

				mysql_fetch_field_row(tp_str,"amount");
				new amount = strval(tp_str);
				if(amount > 1)
				{

				    mysql_fetch_field_row(tp_str,"id");
				    new id = strval(tp_str);
				    if(id)
				    {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= amount)
						{

						    CharacterInfo[playerid][active_character[playerid]][cMoney] -= amount;
						    SendClientMessage(playerid,COLOR_FACTION,"You have paid for your ticket.");
						    FactionInfo[0][fBank] += amount;
							format(tp_str,sizeof(tp_str),"UPDATE rp_fines SET paid = 1 WHERE id = '%d'",id);
							mysql_query(tp_str,player_threads[playerid]);

						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money.");

						}

				    }

				}
				tp_done = 1;

			}
		    tp_i ++;

		}
		if(!tp_done)
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid slot.");

		}

	}
	else if(type == QUERY_MDC_FINE)
	{

	    new fw_str[256];
		while(mysql_retrieve_row())
		{

		    new fw_tmp[128];
		    new fw_print[128];
		    mysql_fetch_field_row(fw_str,"stamp");
			format(fw_tmp,sizeof(fw_tmp),"Date Issued: %s",fw_str);
			mysql_fetch_field_row(fw_str,"reason");
			format(fw_print,sizeof(fw_print),"UNPAID TICKET, reason: %s, issued: %s",fw_tmp,fw_str);
			SendClientMessage(playerid,COLOR_LIGHTRED,fw_print);

		}

	}
	/*****END ON QUERY FINISH*******/

	mysql_free_result();
	return 1;

}

/**************VEHICLE STUFFS***********/

public GetVehicleSlot(vehicleid)
{

	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

		if(VehicleInfo[i][vVehicle] == vehicleid)
		{

		    return i;

		}

 	}
 	return -1;

}

/*****************Player Stuffs***********/

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{

	if(issuerid != INVALID_PLAYER_ID && IsPlayerConnectedEx(issuerid))
	{

	 	if(tazer_out[issuerid])
		{

			if(GetPlayerWeapon(issuerid) == WEAPON_SILENCED)
			{

			    if(GetDistanceBetweenPlayers(issuerid,playerid) < 10.0)
			    {

			    	TazePlayer(issuerid,playerid);

				}

			}

		}

	}
	if(issuerid != INVALID_PLAYER_ID)
	{

	    if(amount > 5.0 && weaponid != 0)
	    {

	        new Float:armor;
			GetPlayerArmour(playerid,armor);
			if(armor <= 0.0)
			{

	       		TextDrawShowForPlayer(playerid,crash_screen);
		        SetTimerEx("HideCrash",250,0,"i",playerid);
		        SetPlayerDrunkLevel(playerid,(GetPlayerDrunkLevel(playerid) + 4000));

		  	}

	    }

	}
	return 1;

}

public Audio_OnClientConnect(playerid)
{

	if(screen_saver[playerid]) intro_music[playerid] = Audio_PlayStreamed(playerid,"http://justrp.net/sounds/intro.mp3");
	//Audio_PlayStreamed(playerid,"http://www.bbc.co.uk/radio/listen/live/r1_heaacv2.pls");

}

public UpdateTruckerStage(playerid)
{

	if(trucking_stage[playerid] == 1)
	{

	    SendClientMessage(playerid,COLOR_YELLOW2,"Wait to unload your cargo...");
	    SetProgressBarValue(progress_bar[playerid], 0.0);
		TogglePlayerControllable(playerid,0);
		SetPlayerProgressBar(playerid,PROGRESS_BAR_TRUCK,30);
		trucking_stage[playerid] ++;

	}
	else if(trucking_stage[playerid] == 2)
	{

	    SetPlayerCheckpoint(playerid,-80.8870,-1125.8657,1.6744,5.0);
	    SendClientMessage(playerid,COLOR_GREEN,"Return to the depot to get your paycheck.");
	    trucking_stage[playerid] ++;

	}
	else if(trucking_stage[playerid] == 3)
	{

	    new pay = 250;
		pay = (pay + random(trucker_stats[trucking_mission[playerid]]));
		new extrapay = 0;
		if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (20 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 200; }
		pay += extrapay;
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		if(HasTrailer(GetPlayerVehicleID(playerid))) { SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid))); pay += 100; }
		CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
		new str[128];
		format(str,sizeof(str),"~w~Trucking Run Complete~n~~g~$%d~w~ added to paycheck",pay);
		GameTextForPlayer(playerid,str,5000,1);
		DisablePlayerCheckpoint(playerid);
		trucking[playerid] = 0;
		trucking_mission[playerid] = 0;
		trucking_stage[playerid] = 0;

	}

}

public OnPlayerStartTrucking(playerid)
{

	trucking[playerid] = 1;
	trucking_mission[playerid] = random(sizeof(trucker_stats));
	trucking_stage[playerid] = 1;
	SetPlayerCheckpoint(playerid,trucker_pos[trucking_mission[playerid]][0],trucker_pos[trucking_mission[playerid]][1],trucker_pos[trucking_mission[playerid]][2],5.0);
	new str[256];
	format(str,sizeof(str),"~p~Trucking Run~n~ ~n~ ~w~%s ~n~ ~n~~p~use ~p~/canceltruck ~w~to~n~cancel this trucking run",trucker_msg[trucking_mission[playerid]]);
	TextDrawSetString(infotxt[playerid],str);
	TextDrawShowForPlayer(playerid,infotxt[playerid]);
	infotxt_expire[playerid] = 11;

}

public RefreshHeroinStage(playerid)
{

	if(heroin_stage[playerid] < sizeof(heroin_stages))
	{
		SetPlayerWeather(playerid,heroin_stages[heroin_stage[playerid]]);
		SetPlayerDrunkLevel(playerid,(GetPlayerDrunkLevel(playerid) + 2000));
		heroin_expire[playerid] = (5 + (2 * heroin_stage[playerid]));
	}
	else if(heroin_stage[playerid] == sizeof(heroin_stages))
	{

	    heroin_expire[playerid] = 300;

	}
	else
	{

		heroin[playerid] = 0;
		heroin_stage[playerid] = 0;
	    heroin_expire[playerid] = 0;
	    SetPlayerWeather(playerid,server_weather);

	}

}

public LoadDrugs()
{

	mysql_query("SELECT * FROM rp_drugs",QUERY_LOAD_DRUGS,QUERY_LOAD_DRUGS);

}

public OnPlayerGiveup(playerid)
{

	death_respawn_time[playerid] = 60;
	gps[playerid] = 0;
	dice[playerid] = 0;
	mask[playerid] = 0;
	HideSpeedCameras(playerid);
	ResetInventory(playerid,true);
	CharacterInfo[playerid][active_character[playerid]][cFstyle] = 0;

}

public SetDeathAnim(playerid)
{

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,1,1,1,1,1);
	SetPlayerCameraPos(playerid,death_pos[playerid][0],death_pos[playerid][1],(death_pos[playerid][2] + 4.0));
	SetPlayerCameraLookAt(playerid,death_pos[playerid][0],death_pos[playerid][1],death_pos[playerid][2]);
	TogglePlayerControllable(playerid,0);

}

public ShowNoteList(playerid)
{

	SendClientMessage(playerid,COLOR_YELLOW2,"|-----Your notes-----|");
	new str[128];
	for(new i = 0; i < MAX_NOTES; i ++)
	{

		if(NoteInfo[playerid][i][nActive] == 0)
		{

			format(str,sizeof(str),"Note #%d: Empty",i);

		}
		else
		{

			new starter[32];
			strcat(starter,NoteInfo[playerid][i][nText]);
			format(str,sizeof(str),"Note #%d: %s",i,starter);

		}
		SendClientMessage(playerid,COLOR_YELLOW2,str);

	}

}

public OnPlayerCreateNote(playerid,text[])
{

	new slot = FetchNextNoteSlot(playerid);
	if(slot > -1)
	{

	    NoteInfo[playerid][slot][nActive] = 1;
	    mysql_real_escape_string(text,NoteInfo[playerid][slot][nText]);
	    new str[128];
	    format(str,sizeof(str),"Note created in slot: %d",slot);
	    SendClientMessage(playerid,COLOR_YELLOW2,str);
	    CreateNote(playerid,slot);
	    return true;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You can only have 10 notes at a time.");
	    return false;

	}

}

public ResetSpawnStuff(playerid)
{

	new done = 0; new hoteldone = 0;
	if(CharacterInfo[playerid][active_character[playerid]][cHotel] > 0)
	{

	    CharacterInfo[playerid][active_character[playerid]][cSpawnX] = BizInfo[CharacterInfo[playerid][active_character[playerid]][cHotel]][bSpawnX];
	    CharacterInfo[playerid][active_character[playerid]][cSpawnY] = BizInfo[CharacterInfo[playerid][active_character[playerid]][cHotel]][bSpawnY];
	    CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = BizInfo[CharacterInfo[playerid][active_character[playerid]][cHotel]][bSpawnZ];
	    CharacterInfo[playerid][active_character[playerid]][cSpawnI] = 0;
	    CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = 0;
	    hoteldone = 1;

	}
	for(new i = 0; i < MAX_HOUSES; i ++)
	{

	    if(IsHouseOwner(playerid,i) || IsRentingHouse(playerid,i))
	    {

	        if(!done)
	        {

		        CharacterInfo[playerid][active_character[playerid]][cSpawnX] = HouseInfo[i][hSpawnX];
		        CharacterInfo[playerid][active_character[playerid]][cSpawnX] = HouseInfo[i][hSpawnY];
		        CharacterInfo[playerid][active_character[playerid]][cSpawnX] = HouseInfo[i][hSpawnZ];
		        CharacterInfo[playerid][active_character[playerid]][cSpawnI] = HouseInfo[i][hInterior];
		        CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = i;
		        done = 1;

			}

	    }

	}
	if(CharacterInfo[playerid][active_character[playerid]][cJailTime] > 0)
	{

	    CharacterInfo[playerid][active_character[playerid]][cSpawnX] = 1543.4993;
		CharacterInfo[playerid][active_character[playerid]][cSpawnY] = -1675.5576;
		CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = 13.5566;
		CharacterInfo[playerid][active_character[playerid]][cSpawnR] = 88.6147;
        CharacterInfo[playerid][active_character[playerid]][cSpawnI] = 0;
        CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = 0;

	}
	if(!done && !hoteldone)
	{

        CharacterInfo[playerid][active_character[playerid]][cSpawnX] = 1929.0565;
		CharacterInfo[playerid][active_character[playerid]][cSpawnY] = 33.6534;
		CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = 33.9817;
		CharacterInfo[playerid][active_character[playerid]][cSpawnI] = 0;
		CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = 0;
		CharacterInfo[playerid][active_character[playerid]][cSpawnR] = 270;

	}

}

public ConnectRadio(playerid,channel)
{

    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1))
	{

		if(channel > 0)
		{
			new str[128]; new done = 0;
			new slot = FetchChannelSlot(channel);
			if(slot > -1)
			{

		        if((strcmp(CharacterInfo[playerid][active_character[playerid]][cRadioAuth],RadioInfo[slot][rPassword],true) == 0 && strlen(CharacterInfo[playerid][active_character[playerid]][cRadioAuth])) || !strlen(RadioInfo[slot][rPassword]))
		        {

		            CharacterInfo[playerid][active_character[playerid]][cRadioChannel] = channel;
					format(str,sizeof(str),"* Connected to channel: %d",channel);
					SendClientMessage(playerid,COLOR_YELLOW2,str);
					done = 1;

		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_YELLOW2,"* Connection Error: Invalid Password. (/radiocontrol setauth)");
		            CharacterInfo[playerid][active_character[playerid]][cRadioChannel] = 0;
		            done = 1;

		        }

			}
			if(!done)
			{

			   	CharacterInfo[playerid][active_character[playerid]][cRadioChannel] = channel;
				format(str,sizeof(str),"* Connected to channel: %d",channel);
				SendClientMessage(playerid,COLOR_YELLOW2,str);

			}
		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_YELLOW2,"You do not have a radio.");
	    CharacterInfo[playerid][active_character[playerid]][cRadioChannel] = 0;
	    format(CharacterInfo[playerid][active_character[playerid]][cRadioAuth],256,"None");

	}

}

public SendAd(playerid,text[])
{

	new name[MAX_PLAYER_NAME];
	new str[256];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"[Advertisment] %s: %s",name,text);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	       SendClientMessageA(i,TEAM_GROVE_COLOR,str);

	    }

	}
	ad_cooldown = 90;

}

public InAdShop(playerid)
{

	if(in_biz[playerid] == -1) { return false; }
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_AD) { return true; }
	return false;

}

public OfferSellCar(playerid,other,offset,price)
{

	new cur_offset = 0; new done = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vModel] > 0)
	    {

	        if(VehicleInfo[i][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	        {

	            cur_offset ++;
	            if(cur_offset == offset)
	            {

					if(!IsDonatorVehicle(VehicleInfo[i][vModel]))
					{

						vehicle_sell_offer[other] = i;
						vehicle_sell_sender[other] = playerid;
						vehicle_sell_price[other] = price;
						new name[MAX_PLAYER_NAME];
						new str[256]; new vname[128];
						GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
						GetCharacterName(playerid,name);
						format(str,sizeof(str),"%s has offered his %s to you for $%d would you like to accept?",name,vname,price);
						ShowPlayerDialog(other,DIALOG_SELLCAR,DIALOG_STYLE_MSGBOX,"Someone wants to sell you their car",str,"Accept","Decline");
						GetCharacterName(other,name);
						format(str,sizeof(str),"You have offered your %s to %s for $%d",vname,name,price);
						SendClientMessageA(playerid,COLOR_FACTION,str);
						done = 1;

					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot sell credit vehicles to other players.");
					    done = 1;

					}

	            }

	        }

	    }

	}
	if(!done) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid vehicle slot."); }

}

public RefreshPlayerTutorial(playerid)
{

	switch(tutorial_stage[playerid])
	{

	    case 1:
	    {

			SetPlayerPos(playerid,1929.0565,33.6534,33.9817);
			SetPlayerFacingAngle(playerid,270.0);
			TogglePlayerControllable(playerid,1);
			SetCameraBehindPlayer(playerid);
			new str[256];
			format(str,sizeof(str),"~p~Welcome To Countryside Gaming!~n~ ~n~~w~Welcome to Countryside Gaming. As you are new here we would like to take this opportunity~n~to show you around our server!");
			TextDrawSetString(infotxt[playerid],str);
			TextDrawShowForPlayer(playerid,infotxt[playerid]);
			tutorial_skip[playerid] = 0;
			SetPlayerVirtualWorld(playerid,(20000 + playerid));
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1,1);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1,1);
			tutorial_stage[playerid] ++;
			SetTimerEx("RefreshPlayerTutorial",7500,0,"i",playerid);
			PlayerPlaySound(playerid,1149,0.0,0.0,0.0);

	    }
	    case 2:
	    {

			new str[256];
			format(str,sizeof(str),"~p~Welcome to Countryside Gaming~n~ ~n~~w~Ahead of you is ~p~Palomino Creek~w~ the main focus of roleplay for Countryside Gaming.~n~Take a moment to have a look around and get used to the location.");
			TextDrawSetString(infotxt[playerid],str);
			tutorial_skip[playerid] = 0;
		 	SetPlayerVirtualWorld(playerid,(20000 + playerid));
		 	tutorial_stage[playerid] ++;
			SetTimerEx("RefreshPlayerTutorial",7500,0,"i",playerid);
			PlayerPlaySound(playerid,1149,0.0,0.0,0.0);

	    }
	    case 3:
	    {

	    	new str[256];
			format(str,sizeof(str),"~p~Assistants~n~ ~n~~w~If you get stuck at any point, or just need a helping hand to get started, use /assistme~n~An assistant will help you out at their earliest convinience.");
			TextDrawSetString(infotxt[playerid],str);
			tutorial_skip[playerid] = 0;
		    SetPlayerVirtualWorld(playerid,(20000 + playerid));
		  	tutorial_stage[playerid] ++;
			SetTimerEx("RefreshPlayerTutorial",7500,0,"i",playerid);
			PlayerPlaySound(playerid,1149,0.0,0.0,0.0);

	    }
	    case 4:
	    {

	    	new str[256];
			format(str,sizeof(str),"~p~Administrators~n~ ~n~~w~If you see a player cheating, or need help with an annoying or irritating person, use /report~n~Our dedicated administration team will help you out as soon as possible.");
			TextDrawSetString(infotxt[playerid],str);
			tutorial_skip[playerid] = 0;
		    SetPlayerVirtualWorld(playerid,(20000 + playerid));
		   	tutorial_stage[playerid] ++;
			SetTimerEx("RefreshPlayerTutorial",7500,0,"i",playerid);
			PlayerPlaySound(playerid,1149,0.0,0.0,0.0);

	    }
	    case 5:
	    {

			new str[256];
			format(str,sizeof(str),"~p~Thanks for listening!~n~ ~n~~w~Thanks for taking this brief tutorial.~n~ ~n~We hope it has helped you in finding your way around our server~n~ ~n~Please do not hesitate contacting an admin or assistant (/admins and /assistants)");
			TextDrawSetString(infotxt[playerid],str);
			tutorial_skip[playerid] = 0;
			TogglePlayerControllable(playerid,1);
			infotxt_expire[playerid] = 6;
			AccountInfo[playerid][aTutorial] = 1;
			ClearAnimations(playerid);
			tutorial_stage[playerid] = 0;
			PlayerPlaySound(playerid,1149,0.0,0.0,0.0);
			SetPlayerVirtualWorld(playerid,0);

	    }

	}

}

public FetchHouseSlot(houseid)
{

	for(new i = 0; i < MAX_HOUSES; i ++)
	{

	    if(HouseInfo[i][hID] == houseid) { return i ; }

	}
	return -1;

}

public FetchVehiclePrice(model)
{

	if(model < 400 || model > 603) { return -1; }
	for(new i = 0; i < sizeof(VehicleModelInfo); i ++)
	{

	    if(VehicleModelInfo[i][vmModel] == model) { return VehicleModelInfo[i][vmPrice]; }

	}
	return -1;

}

stock IsDonatorVehicle(model)
{

	if(model < 400 || model > 603) { return false; }
	for(new i = 0; i < sizeof(VehicleModelInfo); i ++)
	{

	    if(VehicleModelInfo[i][vmModel] == model) { return (VehicleModelInfo[i][vmDonatorVeh]) ? true : false; }

	}
	return false;

}

public AcceptVehicleCharge(playerid,offset)
{

	new cur_offset = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vModel] > 0)
	    {

	        if(VehicleInfo[i][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	        {

	            cur_offset ++;
	            if(cur_offset == offset)
	            {

					new price_of_car = FetchVehiclePrice(VehicleInfo[i][vModel]);
					new price_to_keep_car = floatround((price_of_car / 2) + (price_of_car * 0.10));
					if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price_to_keep_car)
					{

						new biz = GetClosestBiz(playerid);
						if(biz > -1)
						{

						    if(BizInfo[biz][bType] == BIZ_TYPE_VUPGRADE)
						    {

						        if(!vehicle_creating)
						        {

						            vehicle_creating = 1;
							        VehicleInfo[i][vDeathTime] = 0;
							        VehicleInfo[i][vSpawnX] = BizInfo[biz][bVX];
							        VehicleInfo[i][vSpawnY] = BizInfo[biz][bVY];
							        VehicleInfo[i][vSpawnZ] = BizInfo[biz][bVZ];
							        VehicleInfo[i][vSpawnR] = BizInfo[biz][bVR];
									VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],VehicleInfo[i][vSpawnR],VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1);
									VehicleInfo[i][vInsurance] = 1;
									if(strlen(VehicleInfo[i][vPlate])) { SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]); }
									vehicle_creating = 0;
									CharacterInfo[playerid][active_character[playerid]][cMoney] -= price_to_keep_car;
									new str[128];
									format(str,sizeof(str),"You have redeemed your vehicle for $%d do not forget to re-park it.",price_to_keep_car);
									SendClientMessageA(playerid,COLOR_GREEN,str);

								}
								else
								{

								    SendClientMessageA(playerid,COLOR_LIGHTRED,"Another vehicle has just been spawned. Please re-try.");

								}

						    }
						    else
						    {

						    	SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not at a vehicle upgrade shop.");

						    }

						}
						else
						{

						    SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not at a vehicle upgrade shop.");

						}

					}
					else
					{

					    new str[128];
					    format(str,sizeof(str),"You do not have $%d.",price_to_keep_car);
					    SendClientMessageA(playerid,COLOR_LIGHTRED,str);

					}

	            }

	        }

	    }

	}

}

public IsRentCar(vehicleid)
{

	if(int_in_array(vehicleid,rent_vehicles) > -1)
	{

	    return true;

	}
	return false;

}

public InRentCar(playerid)
{

	new vehicleid = GetPlayerVehicleID(playerid);
	if(int_in_array(vehicleid,rent_vehicles) > -1)
	{

	    return true;

	}
	return false;

}

public TowPlayerVehicle(playerid,offset)
{

	new cur_offset = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vModel] > 0)
	    {

	        if(VehicleInfo[i][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	        {

	            if(VehicleInfo[i][vDeathTime] == 0)
	            {
		            cur_offset ++;
		            if(cur_offset == offset)
		            {

		                if(!IsAnyPlayerInVehicle(VehicleInfo[i][vVehicle]))
		                {

		                    if(!VehicleInfo[i][vImpounded])
		                    {

								SendClientMessage(playerid,COLOR_YELLOW2,"Your vehicle is now being towed.. Please wait.");
			                    vehicle_towing[playerid] = VehicleInfo[i][vVehicle];
								SetPlayerProgressBar(playerid,PROGRESS_BAR_TOWCAR,30);

							}
							else
							{

							    SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle is impounded. You cannot tow it.");

							}

		                }
		                else
		                {

		                    SendClientMessageA(playerid,COLOR_LIGHTRED,"This vehicle is in-use. It cannot be towed.");

		                }

		            }
				}
				else
				{

				    SendClientMessageA(playerid,COLOR_LIGHTRED,"Your vehicle cannot be towed at this time.");

				}

	        }

	    }

	}

}


public StopAlarm(vehicleid)
{

	new params[7];
	GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
	SetVehicleParamsEx(vehicleid,params[0],params[1],0,params[3],params[4],params[5],params[6]);
    vehicle_alarm_time[vehicleid] = 30;

}

public StartAlarm(vehicleid)
{

	new params[7];
	GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
	SetVehicleParamsEx(vehicleid,params[0],params[1],1,params[3],params[4],params[5],params[6]);
	vehicle_alarm_time[vehicleid] = 30;

}

public SendAdminBroadcast(text[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

		if(IsPlayerConnectedEx(i))
		{

		    if(AccountInfo[i][aAdmin] >= ADMIN_LVL_TRAIN)
		    {

				SendClientMessageA(i,COLOR_YELLOW,text);

		    }

		}

	}
	printf("%s",text);

}

public LogPM(sender[],reciever[],msg[],senderid)
{

	new str[512];
	new clean_msg[256];
	new clean_name[MAX_PLAYER_NAME];
	new clean_oname[MAX_PLAYER_NAME];
	mysql_real_escape_string(msg,clean_msg);
	mysql_real_escape_string(sender,clean_name);
	mysql_real_escape_string(reciever,clean_oname);
	format(str,sizeof(str),"INSERT INTO rp_pm_logs (sender,reciever,message) VALUES ('%s','%s','%s')",clean_name,clean_oname,clean_msg);
	mysql_query(str,player_threads_alt[senderid]);

}

public AjailPlayer(target,sender,reason[],time)
{

    SendActionReport("Jail",target,sender,reason);
	SetPlayerPos(target,223.5856,111.1056,999.0156);
	SetPlayerInterior(target,10);
	SetPlayerVirtualWorld(target,(target + 2000));
	AccountInfo[target][aJailTime] = time;

}

public BanCheck(playerid)
{

	new str[256];
	new ip[64];
	new clean_ip[64];
	GetPlayerIp(playerid,ip,sizeof(ip));
	mysql_real_escape_string(ip,clean_ip);
	format(str,sizeof(str),"SELECT * FROM rp_bans WHERE (banee = '%d' AND perm = 1) OR (banee = '%d' AND expiration > NOW() AND perm = 0) OR (ip = '%s' AND perm = 1) OR (ip = '%s' AND expiration > NOW() AND perm = 0)",AccountInfo[playerid][aID],AccountInfo[playerid][aID],clean_ip,clean_ip);
	mysql_query(str,player_threads[playerid],QUERY_LOGIN_BANCHECK);

}

public BanPlayer(target,sender,reason[])
{

	new str[256];
	new clean_reason[128];
	new ip[256];
	new clean_ip[256];
	GetPlayerIp(target,ip,sizeof(ip));
	mysql_real_escape_string(ip,clean_ip);
	mysql_real_escape_string(reason,clean_reason);
	format(str,sizeof(str),"INSERT INTO rp_bans (banee,reason,perm,ip) VALUES ('%d','%s',1,'%s')",AccountInfo[target][aID],clean_reason,clean_ip);
	mysql_query(str,player_threads_alt[target]);
    SendActionReport("Ban",target,sender,reason);
	Kick(target);

}

stock TimeBanPlayer(target,sender,reason[],t)
{

	new str[256];
	new clean_reason[128];
	mysql_real_escape_string(reason,clean_reason);
	format(str,sizeof(str),"INSERT INTO rp_bans (banee,reason,perm,expiration) VALUES ('%d','%s',0,DATE_ADD(NOW(),INTERVAL %d HOUR))",AccountInfo[target][aID],clean_reason,t);
	mysql_query(str,player_threads_alt[target]);
    SendActionReport("Time-Ban",target,sender,reason);
	Kick(target);

}

public LogAdminAction(action[],reason[],admin,target)
{

	new str[256];
	new clean_reason[128];
	mysql_real_escape_string(reason,clean_reason);
	format(str,sizeof(str),"INSERT INTO rp_admin_logs (admin,player,action,reason) VALUES ('%s','%s','%s','%s')",AccountInfo[admin][aName],AccountInfo[target][aName],action,clean_reason);
	mysql_query(str,player_threads[admin]);

}

public SendActionReport(action[],playerid,sender,reason[])
{

	new str[128];
	new year, month, day, hour, mins, sec;
	getdate(year,month,day);
	gettime(hour,mins,sec);
	SendClientMessageA(playerid,COLOR_LIGHTRED,"|----------Administrative Action Report----------|");
	SendClientMessageA(playerid,COLOR_LIGHTRED,"You are recieving this message because an administrator has taken administrative action against you.");
	SendClientMessageA(playerid,COLOR_LIGHTRED,"The following are the details of said action. Please press F8 to keep this report for your records.");
	format(str,sizeof(str),"Type of action: %s",action);
	SendClientMessageA(playerid,COLOR_LIGHTRED,str);
	format(str,sizeof(str),"Administrator: %s",AccountInfo[sender][aName]);
	SendClientMessageA(playerid,COLOR_LIGHTRED,str);
	format(str,sizeof(str),"Date: %d/%d/%d @ %d:%d:%d",day,month,year,hour,mins,sec);
	SendClientMessageA(playerid,COLOR_LIGHTRED,str);
	format(str,sizeof(str),"Reason: %s",reason);
	SendClientMessageA(playerid,COLOR_LIGHTRED,str);
	SendClientMessageA(playerid,COLOR_LIGHTRED,"If you feel this action was un-justified. Please report it on the forums using this report.");

}

public KickPlayer(target,sender,reason[])
{

	SendActionReport("Kick",target,sender,reason);
	Kick(target);

}

public OnPlayerExitInterior(playerid)
{

	new done = 0;
	for(new inter = 0; inter < MAX_INTERIORS; inter ++)
	{

		if(!done)
		{

			if(IsPlayerInRangeOfPoint(playerid,7.5,InteriorInfo[inter][iInteriorX],InteriorInfo[inter][iInteriorY],InteriorInfo[inter][iInteriorZ]) && GetPlayerVirtualWorld(playerid) == VIRTUAL_WORLD_INTERIORS)
			{

				if(!InteriorInfo[inter][iLock])
				{
				    SetPlayerPos(playerid,InteriorInfo[inter][iSpawnX],InteriorInfo[inter][iSpawnY],InteriorInfo[inter][iSpawnZ]);
				    SetPlayerInterior(playerid,0);
				    SetPlayerVirtualWorld(playerid,0);
				    in_interior[playerid] = -1;
				    done = 1;
				}
				else
				{

					GameTextForPlayer(playerid,"~r~Locked",5000,6);
					PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
				    done = 1;

				}

			}

		}

	}

}

public OnPlayerEnterInterior(playerid,inter)
{

	if(!InteriorInfo[inter][iLock])
	{

		SetPlayerInterior(playerid,InteriorInfo[inter][iInterior]);
		SetPlayerPos(playerid,InteriorInfo[inter][iInteriorX],InteriorInfo[inter][iInteriorY],InteriorInfo[inter][iInteriorZ]);
		in_interior[playerid] = inter;
		SetPlayerVirtualWorld(playerid,VIRTUAL_WORLD_INTERIORS);
		SetTimerEx("VerifyInteriorPos", 2000, false, "i", playerid);

	}
	else
	{

		GameTextForPlayer(playerid,"~r~Locked",5000,6);
		PlayerPlaySound(playerid,1145,0.0,0.0,0.0);

	}

}

public GetClosestInterior(playerid)
{

	new Float:X, Float:Y, Float:Z;
	new winner = -1;
	new Float:windistance = 50;
	GetPlayerPos(playerid,X,Y,Z);
	for(new i = 0; i < MAX_INTERIORS; i ++)
	{

	    if(IsPlayerInRangeOfPoint(playerid,10.0,InteriorInfo[i][iSpawnX],InteriorInfo[i][iSpawnY],InteriorInfo[i][iSpawnZ]))
	    {

			if(GetDistanceToPoint(playerid,InteriorInfo[i][iSpawnX],InteriorInfo[i][iSpawnY],InteriorInfo[i][iSpawnZ]) < windistance)
			{

			    winner = i;
			    windistance = GetDistanceToPoint(playerid,InteriorInfo[i][iSpawnX],InteriorInfo[i][iSpawnY],InteriorInfo[i][iSpawnZ]);

			}

	    }

	}
	return winner;

}

public FetchCookingElements(offset)
{

	new count = 10;
	for(new i = 0; i < 10; i ++)
	{

	    if(cooking_profiles[offset][i] == 0) { count --; }

	}
	return count;

}

public FetchCookingIngreedients(playerid)
{

	new count = 0;
	for(new i = 0; i < 10; i ++)
	{

	    if(cooking_contents[playerid][i] > 0)
	    {

	        count ++;

	    }

	}
	return count;

}

public PrepareMeal(playerid)
{

	new done = 0;
	new elements_matched[sizeof(cooking_profiles)];
	new ingredients = FetchCookingIngreedients(playerid);
	for(new i = 0; i < sizeof(cooking_profiles); i ++)
	{

	    if(done == 0)
	    {
			new num = FetchCookingElements(i);
		    for(new a = 0; a < 10; a ++)
		    {

		        if(cooking_contents[playerid][a] > 0)
		        {

					if(int_in_array(cooking_contents[playerid][a],cooking_profiles[i]) > -1)
					{

						elements_matched[i] ++;

					}

				}

		    }
		    if(elements_matched[i] == num && num == ingredients)
		    {

				done = 1;
				SendEmote(playerid,cooking_profile_result[i]);
				new Float:hp;
				GetPlayerHealth(playerid,hp);
				SetPlayerHealth(playerid,(hp + cooking_profile_benefit[i]));

		    }
	    }
	}
	if(!done)
	{
		SendEmote(playerid,"pulls a smoldering mess of junk out of the oven.");
	}
	cooking[playerid] = 0;
	cooking_contents[playerid][0] = 0;
	cooking_contents[playerid][1] = 0;
	cooking_contents[playerid][2] = 0;
	cooking_contents[playerid][3] = 0;
	cooking_contents[playerid][4] = 0;
	cooking_contents[playerid][5] = 0;
	cooking_contents[playerid][6] = 0;
	cooking_contents[playerid][7] = 0;
	cooking_contents[playerid][8] = 0;
	cooking_contents[playerid][9] = 0;
	TogglePlayerControllable(playerid,1);

}

public FetchNextCookingSlot(playerid)
{

	for(new i = 0; i < 10; i ++)
	{

	    if(cooking_contents[playerid][i] == 0) { return i; }

	}
	return -1;

}

public ProcessCooking(playerid,text[])
{

	new slot = FetchNextCookingSlot(playerid);
	new done = 0;
	if(slot > -1)
	{

		if(strcmp(text,"eggs",true) == 0)
		{

			if(cooking_eggs[playerid] > 0)
			{

			    cooking_eggs[playerid] --;
				cooking_contents[playerid][slot] = COOK_TYPE_EGG;
				SendEmote(playerid,"takes out an egg and cracks it into his bowl.");
				done = 1;

			}
			else
   			{

				SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have any eggs!");
				done = 1;

			}

		}
		else if(strcmp(text,"bread",true) == 0)
		{

			if(cooking_bread[playerid] > 0)
			{

				cooking_bread[playerid] --;
				cooking_contents[playerid][slot] = COOK_TYPE_BREAD;
				SendEmote(playerid,"takes out some bread and prepares it for his meal.");
				done = 1;

			}
			else
   			{

				SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have any bread!");
				done = 1;

			}

		}
		else if(strcmp(text,"meat",true) == 0)
		{

			if(cooking_meat[playerid] > 0)
			{

				cooking_meat[playerid] --;
				cooking_contents[playerid][slot] = COOK_TYPE_MEAT;
				SendEmote(playerid,"takes out some meat and prepares it for his meal.");
				done = 1;

			}
			else
   			{

				SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have any meat!");
				done = 1;

			}

		}
		else if(strcmp(text,"cheese",true) == 0)
		{

			if(cooking_cheese[playerid] > 0)
			{

				cooking_cheese[playerid] --;
				cooking_contents[playerid][slot] = COOK_TYPE_CHEESE;
				SendEmote(playerid,"takes out some cheese and prepares it for his meal.");
				done = 1;

			}
			else
   			{

				SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have any cheese!");
				done = 1;

			}

		}
		else if(strcmp(text,"rice",true) == 0)
		{

			if(cooking_rice[playerid] > 0)
			{

				cooking_rice[playerid] --;
				cooking_contents[playerid][slot] = COOK_TYPE_RICE;
				SendEmote(playerid,"takes out some rice and prepares it for his meal.");
				done = 1;

			}
			else
   			{

				SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have any rice!");
				done = 1;

			}

		}
		else if(strcmp(text,"chilli",true) == 0)
		{

			if(cooking_chilli[playerid] > 0)
			{

				cooking_chilli[playerid] --;
				cooking_contents[playerid][slot] = COOK_TYPE_CHILLI;
				SendEmote(playerid,"takes out a chilli and adds it to hhis bowl.");
				done = 1;

			}
			else
   			{

				SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have any chilli!");
				done = 1;

			}

		}
		else if(strcmp(text,"dough",true) == 0)
		{

			if(cooking_dough[playerid] > 0)
			{

				cooking_dough[playerid] --;
				cooking_contents[playerid][slot] = COOK_TYPE_DOUGH;
				SendEmote(playerid,"takes out a chilli and adds it to his bowl.");
				done = 1;

			}
			else
   			{

				SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have any dough!");
				done = 1;

			}

		}
		if(!done) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Unrecognized food item."); }

	}
	else
	{

	    SendClientMessageA(playerid,COLOR_LIGHTRED,"You have already added all the ingredients you can. Use /preparemeal to prepare your meal.");

	}

}

public TriggerPayday(playerid)
{

	new str[128];
	new base_pay = 1000;
	new pay = (base_pay + CharacterInfo[playerid][active_character[playerid]][cPayday]);
	new name[MAX_PLAYER_NAME];
 	GetCharacterName(playerid,name);
	if(pay < 1000) { pay = 1000; }
	new in_prison = HasCell(playerid);
	if(in_prison && pay == 1000) { pay = 0; }
	CharacterInfo[playerid][active_character[playerid]][cExp] ++;
	if(CharacterInfo[playerid][active_character[playerid]][cExp] >= (8 * CharacterInfo[playerid][active_character[playerid]][cLevel]))
	{

	    CharacterInfo[playerid][active_character[playerid]][cLevel] ++;
	    CharacterInfo[playerid][active_character[playerid]][cExp] = 0;
	    format(str,sizeof(str),"~g~You have leveled up! You are now level %d",CharacterInfo[playerid][active_character[playerid]][cLevel]);
	    GameTextForPlayer(playerid,str,5000,1);
	    if(Audio_IsClientConnected(playerid)) { Audio_PlayStreamed(playerid,"http://46.23.70.18/sounds/levelup.mp3"); }

 	}
 	SendClientMessage(playerid,COLOR_GRAD1,"|----------Payday!----------|");
	format(str,sizeof(str),"{808080}Payday: {FFFFFF}$%d",pay);
	SendClientMessage(playerid,COLOR_WHITE,str);
 	new rentbill = 0;
 	if(CharacterInfo[playerid][active_character[playerid]][cRenting] > 0)
	{
		new slot = FetchHouseSlot(CharacterInfo[playerid][active_character[playerid]][cRenting]);
		rentbill = HouseInfo[slot][hRentPrice];
		if(rentbill <= pay)
		{

			HouseInfo[slot][hBank] += rentbill;
			format(str,sizeof(str),"{808080}Rent Bill: {FFFFFF}$%d",rentbill);
			SendClientMessage(playerid,COLOR_WHITE,str);

		}
		else
		{

		    CharacterInfo[playerid][active_character[playerid]][cRenting] = 0;
		    rentbill = 0;
		    SendClientMessage(playerid,COLOR_LIGHTRED,"You can no longer afford to rent your house, you have been evicted.");

		}

	}
	else if(CharacterInfo[playerid][active_character[playerid]][cHotel] > 0)
	{
	    rentbill += 100;
		BizInfo[CharacterInfo[playerid][active_character[playerid]][cHotel]][bBank] += 100;
	 	format(str,sizeof(str),"Dear %s, the following is your hotel bill: $100~n~ Thanks for choosing to stay with us.",name,pay);
		SendMail(CharacterInfo[playerid][active_character[playerid]][cID],"Payslip",str,"San Andreas Hotel Mangement",player_threads_alt[playerid]);
		format(str,sizeof(str),"{808080}Hotel Bill: {FFFFFF}$100");
		SendClientMessage(playerid,COLOR_WHITE,str);
	}
 	new finalpay = (pay - rentbill);
 	format(str,sizeof(str),"{808080}Final Paycheck: {FFFFFF}$%d",finalpay);
 	SendClientMessage(playerid,COLOR_WHITE,str);
 	CharacterInfo[playerid][active_character[playerid]][cBank] += finalpay;
 	/*format(str,sizeof(str),"Dear %s, the following is your payslip:~n~Your Pay: $%d~n~",name,pay);
	SendMail(CharacterInfo[playerid][active_character[playerid]][cID],"Payslip",str,"San Andreas Bank",player_threads[playerid]);*/
	CharacterInfo[playerid][active_character[playerid]][cPayday] = 0;
	if(CharacterInfo[playerid][active_character[playerid]][cSavings] > 0 && CharacterInfo[playerid][active_character[playerid]][cSavings] < 1000000)
	{

	   	format(str,sizeof(str),"{808080}Savings: {FFFFFF}$%d",CharacterInfo[playerid][active_character[playerid]][cSavings]);
	   	SendClientMessage(playerid,COLOR_WHITE,str);
	    new savingsgain = floatround((CharacterInfo[playerid][active_character[playerid]][cSavings] * 0.03));
	    format(str,sizeof(str),"{808080}Interest: {FFFFFF}3 percent ($%d)",savingsgain);
	    SendClientMessage(playerid,COLOR_WHITE,str);
	    CharacterInfo[playerid][active_character[playerid]][cSavings] += savingsgain;
	    format(str,sizeof(str),"{808080}New Savings: {FFFFFF}$%d",CharacterInfo[playerid][active_character[playerid]][cSavings]);
	    SendClientMessage(playerid,COLOR_WHITE,str);


	}
	else if(CharacterInfo[playerid][active_character[playerid]][cSavings] > 0 && CharacterInfo[playerid][active_character[playerid]][cSavings] >= 1000000)
	{

	    format(str,sizeof(str),"{808080}Savings: {FFFFFF}$%d",CharacterInfo[playerid][active_character[playerid]][cSavings]);
	   	SendClientMessage(playerid,COLOR_WHITE,str);
	   	SendClientMessage(playerid,COLOR_LIGHTRED,"Your savings account has reached $1000000, it will no longer gain interest.");

	}
	if(in_prison) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are in prison, you recieve no paycheck."); }
	//SendClientMessageA(playerid,COLOR_YELLOW,"[Cellphone] SMS From San Andreas Bank: This is a bank alert service. Your paycheck has been automaticlly added to your account.");
	PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
	if(CharacterInfo[playerid][active_character[playerid]][cJobCooldown] == 0) { CharacterInfo[playerid][active_character[playerid]][cEmployed] ++; }
	SaveStats(playerid);

}

public OnPlayerFinishDrivingTest(playerid)
{

	new Float:hp;
	GetVehicleHealth(GetPlayerVehicleID(playerid),hp);
	seatbelt[playerid] = 0;
	if(!driving_test_failed[playerid] && hp > 900)
	{

	    SendClientMessageA(playerid,COLOR_WHITE,"Driving Instructor: Well Done. You have passed your driving test. Here is your license. That will be $800");
	    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 800;
	    CharacterInfo[playerid][active_character[playerid]][cCarLic] = 1;

	}
	else
	{

	    SendClientMessageA(playerid,COLOR_WHITE,"Driving Instructor: Unfortunately you have failed your driving test on this occassion. Better luck next time.");

	}
	driving_test[playerid] = 0;
    driving_test_reversing[playerid] = 0;
    driving_test_stage[playerid] = 0;
    driving_test_failed[playerid] = 0;
    DisablePlayerCheckpoint(playerid);
    if(IsPlayerInAnyVehicle(playerid)) { SetVehicleToRespawn(GetPlayerVehicleID(playerid)); }

}

public OnRefreshVehicleTest(playerid)
{

	if(driving_test_stage[playerid] >= sizeof(driving_test_points))
	{

		OnPlayerFinishDrivingTest(playerid);

	}
	else
	{
		SetPlayerCheckpoint(playerid,driving_test_points[driving_test_stage[playerid]][0],driving_test_points[driving_test_stage[playerid]][1],driving_test_points[driving_test_stage[playerid]][2],5.0);
		switch(driving_test_points[(driving_test_stage[playerid] - 1)][3])
		{

		    case LIC_TYPE_LEFT:
			{

		        SendClientMessageA(playerid,COLOR_WHITE,"Driving Instructor: Take the next left please.");

			}
			case LIC_TYPE_RIGHT:
			{

			    SendClientMessageA(playerid,COLOR_WHITE,"Driving Instructor: Take the next right please.");

			}
			case LIC_TYPE_REVSTART:
			{

			    SendClientMessageA(playerid,COLOR_WHITE,"Driving Instructor: Please reverse into that nearby area.");
				driving_test_reversing[playerid] = 1;

			}
			case LIC_TYPE_REVEND:
			{

			    SendClientMessageA(playerid,COLOR_WHITE,"Driving Instructor: Thank you. Continue when ready.");
			    driving_test_reversing[playerid] = 0;

			}

		}
	}

}

public OnPlayerEnterVehicleTest(playerid)
{

	new done = 0;
	for(new i = 0; i < MAX_VEHICLES; i ++)
	{

		for(new a = 0; a < sizeof(dmv_vehicles); a ++)
		{

		    if(i == dmv_vehicles[a])
		    {

		        if(!IsPlayerInAnyVehicle(playerid) && !IsAnyPlayerInVehicle(i))
		        {

		            PutPlayerInVehicle(playerid,i,0);
		            done = 1;

		        }

		    }

		}

	}
	if(done)
	{

	    driving_test[playerid] = 1;
	    driving_test_reversing[playerid] = 0;
	    driving_test_stage[playerid] = 0;
		SendClientMessageA(playerid,COLOR_WHITE,"Driving Instructor: *Sigh* Ok.. Lets get this over with. Follow the road ahead unless told otherwise. Do not exceed 60 MPH.");
		SendClientMessageA(playerid,COLOR_WHITE,"Driving Instructor: Do not damage the vehicle. Proceeed when ready.");
		SetPlayerCheckpoint(playerid,driving_test_points[0][0],driving_test_points[0][1],driving_test_points[0][2],5.0);

	}
	else
	{

	    SendClientMessageA(playerid,COLOR_LIGHTRED,"No vehicles are available! Please come back later.");

	}

}

public InCopCar(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) { return false; }
	new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
	if(slot > -1)
	{

	    if(VehicleInfo[slot][vFaction])
	    {

	        if(FactionInfo[GetFactionSlot(VehicleInfo[slot][vFaction])][fType] == FAC_TYPE_LAW) { return true; }

	    }
	    else
	    {

	        return false;

	    }

	}
	return false;

}

public SendMegaphone(playerid,str[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(GetDistanceBetweenPlayers(playerid,i) < 60.0)
	        {

	            SendClientMessageA(i,COLOR_YELLOW,str);

	        }

	    }

	}

}

public InNewsVan(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) { return false; }
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488) { return true; }
	return false;

}

public IsNews(playerid)
{

	new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
	if(slot > -1)
	{

	    if(FactionInfo[slot][fType] == FAC_TYPE_NEWS)
	    {

	        return true;

		}

	}
	return false;

}

public SendNewsBroadcast(playerid,news[])
{

	new str[256];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"[News] %s: %s",name,news);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(!tog_news[i])
	    {

	        SendClientMessageA(i,COLOR_NEWS,str);

	    }

	}

}

public TazePlayer(shooter,target)
{

	SetPlayerDrunkLevel(target,6000);
	GameTextForPlayer(target,"~r~TAZED!!",5000,5);
	TogglePlayerControllable(target,0);
	taze_time[target] = 16;
	new oname[MAX_PLAYER_NAME];
	new str[128];
	GetCharacterName(target,oname);
	format(str,sizeof(str),"tazes %s.",oname);
	SendEmote(shooter,str);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(shooter,X,Y,Z);
	StreamLocalSound(X,Y,Z,"http://justrp.net/sounds/taser.mp3",30.0);

}

public ShowPlayerWeapons(playerid,forplayer)
{

	new weapons[13][2];
	new weapon_tmp_name[64];
	for (new i = 0; i < 13; i++)
	{
	    strdel(weapon_tmp_name,0,strlen(weapon_tmp_name));
	    GetPlayerWeaponData(forplayer, i, weapons[i][0], weapons[i][1]);
	    if(weapons[i][1] > 0 && weapons[i][0] > 0) { GetWeaponName(weapons[i][0],weapon_tmp_name,sizeof(weapon_tmp_name)); }
	    if(strlen(weapon_tmp_name)) SendClientMessageA(playerid,COLOR_WHITE,weapon_tmp_name);
	}

}

public ArrestPlayer(playerid,time,reason[],officer,bail)
{

	new seconds = (time * 60);
	CharacterInfo[playerid][active_character[playerid]][cJailTime] = seconds;
	CharacterInfo[playerid][active_character[playerid]][cBail] = bail;
	SetPlayerPos(playerid,265.0600,77.7319,1001.0391);
	SetPlayerInterior(playerid,6);
	new clean_reason[256];
	mysql_real_escape_string(reason,clean_reason);
	new str[512];
	format(str,sizeof(str),"INSERT INTO rp_criminal_records (reason,time,owner,location,officer) VALUES ('%s','%d','%d','Red County Jail','%d')",clean_reason,time,CharacterInfo[playerid][active_character[playerid]][cID],CharacterInfo[officer][active_character[officer]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_SEND_CRIME);
	ResetPlayerWeaponsEx(playerid);

}

public ToggleDuty(playerid,type)
{

	if(IsLaw(playerid))
	{
		if(duty[playerid] == 0)
		{

            SaveWeapons(playerid);
			GetPlayerArmour(playerid,CharacterInfo[playerid][active_character[playerid]][cArmor]);
		    switch(type)
		    {

		        case DUTY_TYPE_PRISON:
		        {

		        	duty[playerid] = 1;
				    new str[128];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"[Faction] %s has gone on PRISON duty.",name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
			        SetPlayerSkin(playerid,71);
					GivePlayerWeaponEx(playerid,3,1);
					GivePlayerWeaponEx(playerid,41,5000);
					SetPlayerHealth(playerid,100);
					SetPlayerArmour(playerid,0);
					SetPlayerColor(playerid,TEAM_BAR_COLOR);

		        }
		        case DUTY_TYPE_NORM:
		        {

				    duty[playerid] = 1;
				    new str[128];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"[Faction] %s has gone on duty.",name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
					SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cDutySkin]);
					ResetPlayerWeaponsEx(playerid);
					/*GivePlayerWeaponEx(playerid,24,42);
					GivePlayerWeaponEx(playerid,25,20);
					GivePlayerWeaponEx(playerid,41,1000);
					GivePlayerWeaponEx(playerid,3,1);*/
					SetPlayerHealth(playerid,100);
					SetPlayerArmour(playerid,100);
					SetPlayerColor(playerid,COLOR_LIGHTBLUE);
					toolkit[playerid] = 1;

				}
				case DUTY_TYPE_SWAT:
		        {
				    duty[playerid] = 1;
				    new str[128];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"[Faction] %s has gone on SWAT duty.",name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
					SetPlayerSkin(playerid,285);
					ResetPlayerWeaponsEx(playerid);
					/*GivePlayerWeaponEx(playerid,24,42);
					GivePlayerWeaponEx(playerid,29,256);
					GivePlayerWeaponEx(playerid,31,400);
					GivePlayerWeaponEx(playerid,27,50);
					GivePlayerWeaponEx(playerid,41,1000);
					GivePlayerWeaponEx(playerid,3,1);
					GivePlayerWeaponEx(playerid,34,20);*/
					SetPlayerHealth(playerid,100);
					SetPlayerArmour(playerid,200);
					SetPlayerColor(playerid,COLOR_LIGHTBLUE);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid,X,Y,Z);
					riot_shield[playerid] = 0;

				}
				case DUTY_TYPE_CSI:
		        {
				    duty[playerid] = 1;
				    new str[128];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"[Faction] %s has gone on UOD duty.",name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
					ResetPlayerWeaponsEx(playerid);
					/*GivePlayerWeaponEx(playerid,24,24);
					GivePlayerWeaponEx(playerid,43,500);*/
					SetPlayerHealth(playerid,100);
					SetPlayerArmour(playerid,0);

				}
				case DUTY_TYPE_MEDIC:
				{

					duty[playerid] = 1;
				    new str[128];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"[Faction] %s has gone on MEDIC duty.",name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
					ResetPlayerWeaponsEx(playerid);
					SetPlayerHealth(playerid,100);
					SetPlayerSkin(playerid,276);

				}
				case DUTY_TYPE_FIRE:
				{

					duty[playerid] = 1;
				    new str[128];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"[Faction] %s has gone on FIRE duty.",name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
					ResetPlayerWeaponsEx(playerid);
					SetPlayerHealth(playerid,100);
					SetPlayerSkin(playerid,277);

				}

			}

		}
		else
		{

		    duty[playerid] = 0;
		    SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cSkin]);
		    ResetPlayerWeaponsEx(playerid);
		    GiveSavedWeapons(playerid);
		    new str[128];
			new name[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			format(str,sizeof(str),"[Faction] %s has gone off duty.",name);
			SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
			SetPlayerColor(playerid,COLOR_WHITE);
			SetPlayerArmour(playerid,CharacterInfo[playerid][active_character[playerid]][cArmor]);

		}

	}
	else if(IsMedic(playerid))
	{

		if(duty[playerid] == 0)
		{


			new weaponstr2[256];
			new weapons2[13][2];
			new tmp2[64];
			for (new i = 0; i < 13; i++)
			{
			    GetPlayerWeaponData(playerid, i, weapons2[i][0], weapons2[i][1]);
			    if(i == 0) { format(tmp2,sizeof(tmp2),"%d=%d",weapons2[i][0],weapons2[i][1]); } else { format(tmp2,sizeof(tmp2),"|%d=%d",weapons2[i][0],weapons2[i][1]); }
			    strins(weaponstr2,tmp2,strlen(weaponstr2));
			}
			format(CharacterInfo[playerid][active_character[playerid]][cWeapons],256,weaponstr2);
		    switch(type)
		    {
		        case DUTY_TYPE_NORM:
		        {

				    duty[playerid] = 1;
				    new str[128];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"[Faction] %s has gone on duty.",name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
					SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cDutySkin]);
					ResetPlayerWeaponsEx(playerid);
					SetPlayerHealth(playerid,100);
					SetPlayerColor(playerid,COLOR_ALLDEPT);

				}

			}

		}
		else
		{

		    duty[playerid] = 0;
		    SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cSkin]);
		    ResetPlayerWeaponsEx(playerid);
		    GiveSavedWeapons(playerid);
		    new str[128];
			new name[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			format(str,sizeof(str),"[Faction] %s has gone off duty.",name);
			SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
			SetPlayerColor(playerid,COLOR_WHITE);

		}

	}
	else if(IsGov(playerid))
	{

		if(duty[playerid] == 0)
		{

			new weaponstr3[256];
			new weapons3[13][2];
			new tmp2[64];
			for (new i = 0; i < 13; i++)
			{
			    GetPlayerWeaponData(playerid, i, weapons3[i][0], weapons3[i][1]);
			    if(i == 0) { format(tmp2,sizeof(tmp2),"%d=%d",weapons3[i][0],weapons3[i][1]); } else { format(tmp2,sizeof(tmp2),"|%d=%d",weapons3[i][0],weapons3[i][1]); }
			    strins(weaponstr2,tmp2,strlen(weaponstr3));
			}
			format(CharacterInfo[playerid][active_character[playerid]][cWeapons],256,weaponstr3);
		    switch(type)
		    {
		        case DUTY_TYPE_NORM:
		        {

				    duty[playerid] = 1;
				    new str[128];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"[Faction] %s has gone on duty.",name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
					SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cDutySkin]);
					ResetPlayerWeaponsEx(playerid);
					SetPlayerHealth(playerid,100);
					SetPlayerArmour(playerid,100);
					GivePlayerWeaponEx(playerid,24,500);

				}

			}

		}
		else
		{

		    duty[playerid] = 0;
		    SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cSkin]);
		    ResetPlayerWeaponsEx(playerid);
		    GiveSavedWeapons(playerid);
		    new str[128];
			new name[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			format(str,sizeof(str),"[Faction] %s has gone off duty.",name);
			SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
			SetPlayerColor(playerid,COLOR_WHITE);

		}

	}

}

public TowFactionVehicles(factionid)
{

	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vFaction] == factionid && !IsAnyPlayerInVehicle(VehicleInfo[i][vVehicle]))
	    {

	        SetVehicleToRespawn(VehicleInfo[i][vVehicle]);

	    }

	}

}

public IsFactionVehicle(factionid,vehicleslot)
{

	if(VehicleInfo[vehicleslot][vFaction] == factionid && factionid > 0) { return true; }
	return false;

}

public IsLaw(playerid)
{

	new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
	if(slot > -1)
	{

	    if(FactionInfo[slot][fType] == FAC_TYPE_LAW) { return true; } else { return false; }

	}
	return false;

}

public CanBuyVehicle(playerid)
{

	new offset = vehicle_showroom_position[playerid];
	if(VehicleModelInfo[offset][vmEmerVeh] && CharacterInfo[playerid][active_character[playerid]][cFaction] == 0) { return false; }
	if(VehicleModelInfo[offset][vmEmerVeh] && !IsLaw(playerid) && !IsMedic(playerid)) { return false; }
	if(VehicleModelInfo[offset][vmNews] && !IsNews(playerid)) { return false; }
	return true;

}

public SendFactionMessage(factionid,msg[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(CharacterInfo[i][active_character[i]][cFaction] == factionid)
	        {

	            SendClientMessageA(i,COLOR_FACTION,msg);

	        }

	    }

	}

}

public GetFactionSlot(factionid)
{

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{

	    if(FactionInfo[i][fID] == factionid) { return i; }

	}
	return -1;

}

public GetFactionName(factionid,name[])
{

	new slot = GetFactionSlot(factionid);
	if(slot > -1)
	{

	    return format(name,256,"%s",FactionInfo[slot][fName]);

	}
	return format(name,256,"None",FactionInfo[slot][fName]);

}

public OnEndFishing(playerid,givepay)
{

    DisablePlayerCheckpoint(playerid);
	fish_state[playerid] = -1;
	fish_run[playerid] = -1;
	fish_stage[playerid] = -1;
	if(givepay)
	{
		new pay = (300 + random(300));
		new extrapay = 0;
		if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (10 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 100; }
		pay += extrapay;
		CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
		new str[128];
		format(str,sizeof(str),"fishing run complete!~n~~g~$%d~w~ added to paycheck",pay);
		GameTextForPlayer(playerid,str,5000,1);
	}

}

public OnFishRefresh(playerid)
{

	if(fish_stage[playerid] < 20)
	{
		SetPlayerCheckpoint(playerid,fishing_profiles[fish_run[playerid]][fish_stage[playerid]][0],fishing_profiles[fish_run[playerid]][fish_stage[playerid]][1],fishing_profiles[fish_run[playerid]][fish_stage[playerid]][2],5.0);
	}
	else if(fish_stage[playerid] >= 20) { fish_stage[playerid] = 0; fish_state[playerid] = 2; SetPlayerCheckpoint(playerid,2071.7712,-51.9612,-0.5518,5.0); SendClientMessageA(playerid,COLOR_GREEN,"Return to the dock to drop off your catch."); }

}

public OnStartFishing(playerid)
{

	new chain = random((sizeof(fishing_profiles) - 1));
	fish_run[playerid] = chain;
	fish_stage[playerid] = 0;
	fish_state[playerid] = 1;
	new str[256];
	format(str,sizeof(str),"~p~Fishing Started~n~ ~n~~w~Move to each checkpoint to trawl fish");
	TextDrawSetString(infotxt[playerid],str);
	TextDrawShowForPlayer(playerid,infotxt[playerid]);
	infotxt_expire[playerid] = 11;
	OnFishRefresh(playerid);

}

public InFish(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) { return false; }
	new id = GetPlayerVehicleID(playerid);
	for(new i = 0; i < sizeof(fish_vehicles); i ++)
	{

	    if(fish_vehicles[i] == id)
	    {

	        return true;

	    }

	}
	return false;

}


public OnPlayerDropGarbage(playerid)
{

	new pay = (50 + random(50));
	new extrapay = 0;
	if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (5 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 50; }
	pay += extrapay;
	DestroyObject(garbage_object[playerid]);
	garbage_object[playerid] = -1;
	DisablePlayerCheckpoint(playerid);
	SendClientMessageA(playerid,COLOR_GREEN,"Garbage placed in the truck. Move to your next pickup.");
	new str[128];
	format(str,sizeof(str),"~w~Garbage Removed~n~~g~$%d~w~ added to paycheck",pay);
	GameTextForPlayer(playerid,str,5000,1);
	CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
	garbage_run_state[playerid] = 0;
	garbage_run_stage[playerid] ++;
	RefreshGarbageStage(playerid);

}

public OnPlayerPickupGarbage(playerid)
{

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	garbage_object[playerid] = CreateObject(1265,X,Y,Z,0.0,0.0,0.0);
	AttachObjectToPlayer(garbage_object[playerid],playerid,0.0,0.7,0.0,0.0,0.0,0.0);
	SendClientMessageA(playerid,COLOR_GREEN,"Move to the back of your garbage truck to get rid of this garbage.");
	garbage_run_state[playerid] = 1;
    GetPosInFrontOfVehicle(garbage_run_vehicle[playerid], X, Y, -4.5);
	SetPlayerCheckpoint(playerid,X,Y,Z,2.0);

}

public RefreshGarbageStage(playerid)
{

	if(garbage_run_stage[playerid] < 10)
	{

		SetPlayerCheckpoint(playerid,garbage_profiles[garbage_run[playerid]][garbage_run_stage[playerid]][0],garbage_profiles[garbage_run[playerid]][garbage_run_stage[playerid]][1],garbage_profiles[garbage_run[playerid]][garbage_run_stage[playerid]][2],2.0);
		SendClientMessageA(playerid,COLOR_GREEN,"Move to the checkpoint to collect the garbage.");

	}
	else
	{

	    SendClientMessageA(playerid,COLOR_GREEN,"Garbage Run Complete, return to the depot.");
		SetPlayerCheckpoint(playerid,2397.6416,86.7572,26.335,5.0);
		garbage_run_state[playerid] = 3;

	}

}

public OnPlayerEndGarbage(playerid)
{

	if(garbage_object[playerid] > -1) { DestroyObject(garbage_object[playerid]); garbage_object[playerid] = -1; }
    garbage_run[playerid] = -1;
    garbage_run_stage[playerid] = -1;
    garbage_run_state[playerid] = -1;
    garbage_run_vehicle[playerid] = -1;
    DisablePlayerCheckpoint(playerid);

}

public OnPlayerStartGarbage(playerid)
{

	new run = random((sizeof(garbage_profiles) - 1));
	garbage_run[playerid] = run;
	garbage_run_stage[playerid] = 0;
	garbage_run_state[playerid] = 0;
	garbage_run_vehicle[playerid] = GetPlayerVehicleID(playerid);
	RefreshGarbageStage(playerid);
	new str[256];
	format(str,sizeof(str),"~p~Garbage Run~n~ ~w~Move to each garbage collection point as they appear~n~ leave you vehicle when arriving to collect garabage");
	TextDrawSetString(infotxt[playerid],str);
	TextDrawShowForPlayer(playerid,infotxt[playerid]);
	infotxt_expire[playerid] = 11;

}

public InGarbage(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) { return false; }
	new id = GetPlayerVehicleID(playerid);
	for(new i = 0; i < sizeof(taxi_vehicles); i ++)
	{

	    if(garbage_vehicles[i] == id)
	    {

	        return true;

	    }

	}
	return false;

}


public RefreshVehicleColorScreen(playerid)
{

	carchoose_color[playerid] = 1;
	SendClientMessageA(playerid,COLOR_GREEN,"Type the ID of the FIRST color for your car.");

}

public FuelCheck(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{

		if(VehicleInfo[slot][vFuel] <= 0 && !IsPushbike(GetVehicleModel(VehicleInfo[slot][vVehicle])))
		{

		    if(VehicleInfo[slot][vFuel] < 0) { VehicleInfo[slot][vFuel] = 0; }
		    StopEngine(vehicleid);
		    for(new i = 0; i < MAX_PLAYERS; i ++)
		    {

		        if(IsPlayerConnectedEx(i))
				{

				    if(IsPlayerInAnyVehicle(i))
				    {

						if(GetPlayerVehicleID(i) == vehicleid)
						{

							GameTextForPlayer(i,"~r~OUT OF FUEL!",5000,5);

						}

				    }

				}

		    }

		}

	}

}

public IsEngineOn(vehicleid)
{

    new params[7];
    GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
    return params[0] ? true : false;

}

public StopEngine(vehicleid)
{

	if(!IsPushbike(GetVehicleModel(vehicleid)))
	{

		new params[7];
		GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
		SetVehicleParamsEx(vehicleid,0,params[1],params[2],params[3],params[4],params[5],params[6]);

	} else { StartEngine(vehicleid); }

}

public StartEngine(vehicleid)
{

	new params[7];
	GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
	SetVehicleParamsEx(vehicleid,1,params[1],params[2],params[3],params[4],params[5],params[6]);

}

public IsInPub(playerid)
{

	if(in_biz[playerid] == -1) { return false; }
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_DRINK) { return true; }
	return false;

}

public InBus(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) { return false; }
	new id = GetPlayerVehicleID(playerid);
	for(new i = 0; i < sizeof(taxi_vehicles); i ++)
	{

	    if(bus_vehicles[i] == id)
	    {

	        return true;

	    }

	}
	return false;

}

public RefreshFareStage(playerid)
{

	if(fare_filler_stage[playerid] == 1) { SendClientMessageA(playerid,COLOR_GREEN,"Passenger on board, move to the destination."); SetPlayerCheckpoint(playerid,taxi_profiles[fare_filler[playerid]][fare_filler_stage[playerid]][0],taxi_profiles[fare_filler[playerid]][fare_filler_stage[playerid]][1],taxi_profiles[fare_filler[playerid]][fare_filler_stage[playerid]][2],5.0); }
	else if(fare_filler_stage[playerid] == 2)
	{

	    new pay = (100 + random(150));
	    new extrapay = 0;
		if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (20 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 200; }
		pay += extrapay;
		CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
		new str[128];
		format(str,sizeof(str),"Fare Complete~n~~g~$%d~w~ added to paycheck",pay);
		GameTextForPlayer(playerid,str,5000,1);
	    DisablePlayerCheckpoint(playerid);
		fare_time[playerid] = 0;
		fare_filler[playerid] = -1;
		fare_passenger[playerid] = -1;
		fare_cooldown[playerid] = 0;
		fare_pmission[playerid] = 0;
		fare_filler_stage[playerid] = 0;

	}

}

public SendTaxiMission(playerid)
{

	new mission = random((sizeof(taxi_profiles) - 1));
	SendClientMessageA(playerid,COLOR_PURPLE,"[Radio]: Any cars available? A guy has paid for a taxi but it didn't show up... (use /acceptcall to take this fare)");
	fare_pmission[playerid] = mission;

}

public LeaveTaxi(playerid)
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(fare_passenger[i] == playerid)
			{

				SendClientMessageA(i,COLOR_LIGHTRED,"Your passenger has left the vehicle.");
				if(fare_cooldown[i] == 0)
				{

				    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= (fare_time[i] -1))
				    {
					    CharacterInfo[playerid][active_character[playerid]][cMoney] -= (fare_time[i] - 1);
						CharacterInfo[i][active_character[i]][cPayday] += (fare_time[i] - 1);
						new str[256];
						format(str,sizeof(str),"~n~~n~~n~~n~~n~~n~Fare Complete~n~~g~$%d~w~ added to paycheck",(fare_time[i] - 1));
						GameTextForPlayer(i,str,5000,1);
						format(str,sizeof(str),"You have paid the taxi driver $%d",(fare_time[i] - 1));
						SendClientMessageA(playerid,COLOR_GREEN,str);
					}
					else
					{

						CharacterInfo[i][active_character[i]][cPayday] += CharacterInfo[playerid][active_character[playerid]][cMoney];
						CharacterInfo[playerid][active_character[playerid]][cMoney] = 0;
						new str[256];
						format(str,sizeof(str),"~n~~n~~n~~n~~n~~n~Fare Complete~n~~g~$%d~w~ added to paycheck",(fare_time[i] - 1));
						GameTextForPlayer(i,str,5000,1);
						format(str,sizeof(str),"You did not have enough money to pay the taxi driver the full amount. You paid all you could.");
						SendClientMessageA(playerid,COLOR_GREEN,str);
						SendClientMessageA(i,COLOR_LIGHTRED,"Your passenger did not have enough money to pay the full fee. They paid as much as they could.");

					}
					fare_time[i] = 0;
					fare_filler[i] = -1;
					fare_passenger[i] = -1;
					fare_cooldown[i] = 0;
					fare_pmission[i] = 0;
					fare_filler_stage[i] = 0;

				}

			}

		}

	}

}

public DisconnectTaxi(playerid)
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(fare_passenger[i] == playerid)
			{

				SendClientMessageA(i,COLOR_LIGHTRED,"Your passenger has disconnected.");
				fare_time[i] = 0;
				fare_filler[i] = -1;
				fare_passenger[i] = -1;
				fare_cooldown[i] = 0;
				fare_pmission[i] = 0;
				fare_filler_stage[i] = 0;

			}

		}

	}

}

public InTaxi(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) { return false; }
	new id = GetPlayerVehicleID(playerid);
	for(new i = 0; i < sizeof(taxi_vehicles); i ++)
	{

	    if(taxi_vehicles[i] == id)
	    {

	        return true;

	    }

	}
	return false;

}


public RefreshBusStage(playerid)
{

	if(bus_stage[playerid] >= 6)
	{
		new pay = (300 + random(121));
		new extrapay = 0;
		if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (20 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 200; }
		pay += extrapay;
		new str[128];
		format(str,sizeof(str),"~g~Bus Route Complete~n~~w~$%d added to paycheck",pay);
		GameTextForPlayer(playerid,str,5000,5);
		CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
		bus_active[playerid] = -1;
		bus_stage[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid,1);
		SendClientMessageA(playerid,COLOR_GREEN,"You have completed your bus route.");
	}
	else
	{
		SetPlayerCheckpoint(playerid,bus_profiles[bus_active[playerid]][bus_stage[playerid]][0],bus_profiles[bus_active[playerid]][bus_stage[playerid]][1],bus_profiles[bus_active[playerid]][bus_stage[playerid]][2],5.0);
		if(bus_stage[playerid] > 0) { SendClientMessageA(playerid,COLOR_GREEN,"You have waited long enough for passengers... Move to the next stop."); }
		TogglePlayerControllable(playerid,1);
	}

}

public RefreshDeliveryStage(playerid)
{

	if(delivery_stage[playerid] >= 3)
	{
		new pay = (121 + random(121));
		new extrapay = 0;
		if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (20 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 200; }
		pay += extrapay;
		new str[128];
		format(str,sizeof(str),"~g~Delivery Chain Complete~n~~w~$%d added to paycheck",pay);
		GameTextForPlayer(playerid,str,5000,5);
		CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
		delivery_active[playerid] = -1;
		delivery_stage[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid,1);
		SendClientMessageA(playerid,COLOR_GREEN,"You have completed your delivery chain.");
	}
	else
	{
		SetPlayerCheckpoint(playerid,delivery_profiles[delivery_active[playerid]][delivery_stage[playerid]][0],delivery_profiles[delivery_active[playerid]][delivery_stage[playerid]][1],delivery_profiles[delivery_active[playerid]][delivery_stage[playerid]][2],5.0);
		if(delivery_stage[playerid] > 0) { new pay = (100 + random(121)); new str[128]; format(str,sizeof(str),"~g~Delivery Complete~n~~w~$%d added to paycheck",pay); GameTextForPlayer(playerid,str,5000,1); CharacterInfo[playerid][active_character[playerid]][cPayday] += pay; 		SendClientMessageA(playerid,COLOR_GREEN,"Delivery complete, move to the next delivery spot"); }
		TogglePlayerControllable(playerid,1);
	}

}

public InDeliveryVan(playerid)
{

	new veh = GetPlayerVehicleID(playerid);
	for(new i = 0; i < sizeof(delivery_vans); i ++)
	{

	    if(delivery_vans[i] == veh) { return true; }

	}
	return false;

}

public IsInBank(playerid)
{

	if(in_biz[playerid] == -1) { return false; }
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_BANK) { return true; }
	return false;

}

public SendTransferWeaponsScreen(playerid,other)
{

	new weaponstr[256];
	new weapons[13][2];
	new tmp3[64]; new tmp2[64];
	for (new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
		GetWeaponName(weapons[i][0],tmp2,sizeof(tmp2));
		format(tmp3,sizeof(tmp3),"%s\n",tmp2);
		if(weapons[i][0] > 0 && weapons[i][1] > 0) { strins(weaponstr,tmp3,strlen(weaponstr)); }
	}
	if(!strlen(weaponstr)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have any weapons to transfer"); return 1; }
	ShowPlayerDialog(playerid,DIALOG_PASSGUN,DIALOG_STYLE_LIST,"What weapon do you want to transfer...",weaponstr,"Confirm","Cancel");
	TogglePlayerControllable(playerid,0);
	weapontransfer_other[playerid] = other;
	return 1;

}

public GiveSavedWeapons(playerid)
{

	new weapons[14][64];
    new iweapons[3][64];
	explode(weapons,CharacterInfo[playerid][active_character[playerid]][cWeapons],"|");
	for(new zz = 0; zz < sizeof(weapons); zz ++)
	{

		explode(iweapons,weapons[zz],"=");
		if(int_in_array(strval(iweapons[0]),banned_weapons) == -1)
		{

			GivePlayerWeaponEx(playerid,strval(iweapons[0]),strval(iweapons[1]));

		}

	}

}

public HideLetter(playerid)
{

	TextDrawHideForPlayer(playerid,mailtxt[playerid]);
	TextDrawHideForPlayer(playerid,mailnav);
	mail_reading[playerid] = -1;
	TogglePlayerControllable(playerid,1);

}

public ShowLetter(playerid,offset)
{

	new str[1024];
	format(str,sizeof(str),"~p~Mail~n~ ~n~~w~~p~Message From: ~w~%s~n~~p~Subject: ~w~%s~n~~p~Message: ~w~%s",
	MailInfo[playerid][offset][mSender],
	MailInfo[playerid][offset][mSubject],
	MailInfo[playerid][offset][mMsg]);
	TextDrawSetString(mailtxt[playerid],str);
	TextDrawShowForPlayer(playerid,mailtxt[playerid]);
	TextDrawShowForPlayer(playerid,mailnav);
	MailInfo[playerid][offset][mRead] = 1;
	SaveMail(playerid,offset);
	RefreshCharacterMail(GetCharacterID(playerid));
	TogglePlayerControllable(playerid,0);
	mail_reading[playerid] = offset;

}

public ListMail(playerid,forplayer)
{

	new str[1024];
	new tmp[64];
	new count = 0;
	for(new i = 0; i < MAX_MAIL; i ++)
	{

        if(MailInfo[playerid][i][mActive])
        {

			format(tmp,sizeof(tmp),"MAIL FROM: %s\n",MailInfo[playerid][i][mSender]);
			strins(str,tmp,strlen(str));
			count ++;

		}

	}
	if(count > 0)
	{
		ShowPlayerDialog(playerid,DIALOG_MAIL,DIALOG_STYLE_LIST,"Your Mail",str,"Read","Cancel");
	}
	else
	{

	    SendClientMessageA(playerid,COLOR_LIGHTRED,"You have no new messages");

	}

}

public GetCharacterID(playerid)
{

	return CharacterInfo[playerid][active_character[playerid]][cID];

}

public RefreshCharacterMail(character)
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	   	new active = false;
	    if(IsPlayerConnectedEx(i))
	    {

	        if(CharacterInfo[i][active_character[i]][cID] == character)
	        {

				for(new a = 0; a < MAX_MAIL; a ++)
				{

					if(MailInfo[i][a][mActive] == 1 && MailInfo[i][a][mRead] == 0)
					{

		            	TextDrawShowForPlayer(i,mailmsg);
		            	active = true;

					}
				}
				if(!active) { TextDrawHideForPlayer(i,mailmsg); }
	        }

	    }

	}

}

public SendMail(characterto,subject[],message[],sender[],thread)
{

	new str[256];
	format(str,sizeof(str),"INSERT INTO rp_mail (owning_character,sender,subject,msg,active) VALUES ('%d','%s','%s','%s',1)",characterto,sender,subject,message);
	mysql_query(str,thread,QUERY_SEND_MAIL);

}

public ProcessMailStage(playerid,text[])
{

    if(strfind(text,"~") > -1 || strfind(text,"'") > -1)
	{
		SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid Text, text cannot contain ~ or '");
	}
	else
	{
		switch(composing_mail[playerid])
		{

		    case 1:
		    {

		        new str[256];
		        new cleanname[256];
		        mysql_real_escape_string(text,cleanname);
				format(str,sizeof(str),"SELECT id FROM rp_characters WHERE name = '%s'",cleanname);
				mysql_query(str,player_threads[playerid],QUERY_FIND_MAIL);

		    }
		    case 2:
		    {

				if(strlen(text) > 60)
				{

					SendClientMessage(playerid,COLOR_LIGHTRED,"Title is too long. Max 60 characters.");

				}
				else
				{

			        new cleansubject[64];
			        mysql_real_escape_string(text,cleansubject);
					format(composing_subject[playerid],64,"%s",cleansubject);
					composing_mail[playerid] = 3;
					SendClientMessageA(playerid,COLOR_GREEN,"Finally, please type the text for your message");

				}

		    }
		    case 3:
			{

				new biz = in_biz[playerid];
				if(biz > -1 && BizInfo[biz][bType] == BIZ_TYPE_MAIL)
				{

				    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 100)
				    {

						if(strlen(text) > 200)
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"Message cannot be longer than 200 characters.");

						}
						else
						{

						    new cleanmessage[256];
						    new name[MAX_PLAYER_NAME];
						    GetCharacterName(playerid,name);
						    mysql_real_escape_string(text,cleanmessage);
							SendMail(composing_mail_to[playerid],composing_subject[playerid],cleanmessage,name,player_threads[playerid]);
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 100;
							BizInfo[biz][bBank] += 100;

						}

					}
					else
					{

						SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have $100");
						CallLocalFunction("cmd_cancelmail","is",playerid,"1");

					}

				}
				else
				{

				    SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not in a post office");
				    CallLocalFunction("cmd_cancelmail","is",playerid,"1");

				}

			}

		}
	}
}

public IsInMailRoom(playerid)
{

	new biz = in_biz[playerid];
	if(biz == -1) { return false; }
	if(BizInfo[biz][bType] == BIZ_TYPE_MAIL) { return true; }
	return false;

}

public SaveMail(playerid,mailid)
{

	new str[256];
	format(str,sizeof(str),"UPDATE rp_mail SET `read` = '%d', `active` = '%d' WHERE id = '%d' LIMIT 1",
	MailInfo[playerid][mailid][mRead],
	MailInfo[playerid][mailid][mActive],
	MailInfo[playerid][mailid][mID]);
	mysql_query(str,player_threads[playerid]);

}

public LoadMail(playerid)
{

	new str[1024];
	format(str,sizeof(str),"SELECT * FROM rp_mail WHERE owning_character = '%d' ORDER BY id DESC LIMIT 50",CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_LOGIN_MAIL);

}

public SendSMS(playerid,number,msg[])
{

	new str[256];
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(CharacterInfo[i][active_character[i]][cPhone] == number)
	        {

				if(CharacterInfo[playerid][active_character[playerid]][cBank] >= 10)
				{

				    if(!HasCell(i))
				    {
			            format(str,sizeof(str),"[Cellphone] SMS From %d: %s",CharacterInfo[playerid][active_character[playerid]][cPhone],msg);
			            SendClientMessageA(i,COLOR_YELLOW,str);
			            format(str,sizeof(str),"[Cellphone] SMS Sent to %d: %s",number,msg);
			            SendClientMessageA(playerid,COLOR_YELLOW,str);
			           	PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
			           	if(Audio_IsClientConnected(i)) { Audio_PlayStreamed(i,"http://46.23.70.18/sounds/smstone.mp3"); }
			           	CharacterInfo[playerid][active_character[playerid]][cBank] -= 10;
			           	SendClientMessage(playerid,COLOR_WHITE,"This Text Message Cost {FF0000}$10");
			           	if(last_text[i] != playerid)
						{

							SendClientMessage(i,COLOR_YELLOW,"Use /sr [message] to quickly respond to this text");
							last_text[i] = playerid;

						}
						SendEmote(playerid,"taps a SMS message into their phone.");
			            return 1;
			         }
			         else
			         {

			            SendClientMessage(playerid,COLOR_LIGHTRED,"SMS Message Failed!");
			            return 1;

			         }

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $10 in your bank account to send an SMS.");
				    return 1;

				}

	        }

	    }

	}
	SendClientMessageA(playerid,COLOR_YELLOW,"[Cellphone] Text Message Send Failed!");
	return 0;

}

public HangupCall(playerid)
{

	if(phone_incall[playerid] > -1 || calling_taxi[playerid] || calling_nonpolice[playerid] || calling_san[playerid] || in_911[playerid])
	{

	    if(!in_911[playerid] && !calling_san[playerid] && !calling_nonpolice[playerid] && !calling_taxi[playerid])
	    {

		    new bill = (phone_calling[playerid] > -1) ? playerid : phone_incall[playerid];
		    new str[128];
		    if(in_house[playerid] > -1)
		    {

				if(HouseInfo[in_house[playerid]][hUpgrades][HOUSE_UPGRADE_PHONE] > 0)
				{

			        phone_bill[bill] = (phone_bill[bill] / (HouseInfo[in_house[playerid]][hUpgrades][HOUSE_UPGRADE_PHONE] + 1));
			        if(phone_bill[bill] == 0) phone_bill[bill] = 1;

			  	}

		    }
		    format(str,sizeof(str),"The phone call costs {FF0000}$%d {FFFFFF}This has been taken from your bank account.",phone_bill[bill]);
		    SendClientMessage(bill,COLOR_WHITE,str);
		    CharacterInfo[bill][active_character[bill]][cBank] -= phone_bill[bill];
		    phone_bill[bill] = 0;
		    cl_RemovePhone(playerid);
			SendEmote(playerid,"has ended the call.");
			if(phone_incall[playerid] > -1) { if(Audio_IsClientConnected(phone_incall[playerid])) { Audio_Stop(phone_incall[playerid],audio_ringtone[phone_incall[playerid]]); audio_ringtone[phone_incall[playerid]] = 0; } }
			if(phone_incall[playerid] > -1)
			{
				phone_ringing[phone_incall[playerid]] = 0;
				phone_caller[phone_incall[playerid]] = -1;
				phone_calling[phone_incall[playerid]] = -1;
				phone_incall[phone_incall[playerid]] = -1;
				SendClientMessageA(phone_incall[playerid],COLOR_YELLOW,"The other end hung up.");

			}
			phone_ringing[playerid] = 0;
			phone_caller[playerid] = -1;
			phone_calling[playerid] = -1;
			phone_incall[playerid] = -1;
			calling_taxi[playerid] = 0;
			calling_nonpolice[playerid] = 0;
			calling_san[playerid] = 0;
			in_911[playerid] = 0;
			in_911_stage[playerid] = 0;
		}
		else
		{

			phone_ringing[playerid] = 0;
			phone_caller[playerid] = -1;
			phone_calling[playerid] = -1;
			phone_incall[playerid] = -1;
			calling_taxi[playerid] = 0;
			calling_nonpolice[playerid] = 0;
			calling_san[playerid] = 0;
			in_911[playerid] = 0;
			in_911_stage[playerid] = 0;
			cl_RemovePhone(playerid);
			SendEmote(playerid,"puts their phone away.");

		}

	}
	else if(phone_ringing[playerid] && phone_caller[playerid] > -1)
	{

	    SetPlayerSpecialAction(phone_incall[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		SendEmote(playerid,"hangs up their phone");
		phone_ringing[phone_caller[playerid]] = 0;
		phone_caller[phone_caller[playerid]] = -1;
		phone_calling[phone_caller[playerid]] = -1;
		phone_incall[phone_caller[playerid]] = -1;
		SendClientMessageA(phone_caller[playerid],COLOR_YELLOW,"The other end refuses the call.");
		phone_ringing[playerid] = 0;
		phone_caller[playerid] = -1;
		phone_calling[playerid] = -1;
		phone_incall[playerid] = -1;
		if(Audio_IsClientConnected(playerid)) { Audio_Stop(playerid,audio_ringtone[playerid]); audio_ringtone[playerid] = 0; }

	}
	else if(phone_calling[playerid] > -1)
	{

	   	if(Audio_IsClientConnected(phone_calling[playerid])) { Audio_Stop(playerid,audio_ringtone[playerid]); audio_ringtone[playerid] = 0; }
		cl_RemovePhone(playerid);
	    SetPlayerSpecialAction(phone_calling[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		SendEmote(playerid,"has ended the call.");
		phone_ringing[phone_calling[playerid]] = 0;
		phone_caller[phone_calling[playerid]] = -1;
		phone_calling[phone_calling[playerid]] = -1;
		phone_calling[phone_calling[playerid]] = -1;
		SendClientMessageA(phone_calling[playerid],COLOR_YELLOW,"The other end hung up.");
		phone_ringing[playerid] = 0;
		phone_caller[playerid] = -1;
		phone_calling[playerid] = -1;
		phone_calling[playerid] = -1;

	}

}

public ConnectCall(playerid)
{

	phone_incall[playerid] = phone_caller[playerid];
	phone_incall[phone_caller[playerid]] = playerid;
	SendEmote(playerid,"answers their phone.");
	SendClientMessageA(playerid,COLOR_YELLOW,"You answer your phone.");
	SendClientMessageA(phone_caller[playerid],COLOR_YELLOW,"The other end picks up the phone.");
	phone_ringing[playerid] = false;
	cl_GivePhone(playerid);

	if(Audio_IsClientConnected(playerid)) { Audio_Stop(playerid,audio_ringtone[playerid]); audio_ringtone[playerid] = 0; }
	if(tog_callerid[phone_caller[playerid]]) last_caller[playerid] = CharacterInfo[phone_caller[playerid]][active_character[phone_caller[playerid]]][cPhone];

}

public SendEmerCall(playerid)
{

	new str[128];
	new str2[1024];
	new tmp[3][64];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(in_911_type[playerid] == 1)
	        {

		        if(IsLaw(i) && duty[i])
		        {

		            SendClientMessageA(i,COLOR_GREEN,"|------911 Call------|");
					format(str,sizeof(str),"Caller: %s",name);
					SendClientMessageA(i,COLOR_WHITE,str);
					format(str,sizeof(str),"Phone: %d",CharacterInfo[playerid][active_character[playerid]][cPhone]);
					SendClientMessageA(i,COLOR_WHITE,str);
					format(str,sizeof(str),"Location: %s",in_911_location[playerid]);
					SendClientMessageA(i,COLOR_WHITE,str);
					format(str,sizeof(str),"Situation: %s",in_911_problem[playerid]);
					SendClientMessageA(i,COLOR_WHITE,str);
					PlayerPlaySound(i,1149,0.0,0.0,0.0);

				}

			}
			else
			{

				if(IsMedic(i) && duty[i])
		        {

		            SendClientMessageA(i,COLOR_GREEN,"|------911 Call------|");
					format(str,sizeof(str),"Caller: %s",name);
					SendClientMessageA(i,COLOR_WHITE,str);
					format(str,sizeof(str),"Phone: %d",CharacterInfo[playerid][active_character[playerid]][cPhone]);
					SendClientMessageA(i,COLOR_WHITE,str);
					format(str,sizeof(str),"Location: %s",in_911_location[playerid]);
					SendClientMessageA(i,COLOR_WHITE,str);
					format(str,sizeof(str),"Situation: %s",in_911_problem[playerid]);
					SendClientMessageA(i,COLOR_WHITE,str);
					PlayerPlaySound(i,1149,0.0,0.0,0.0);

				}

			}

	    }

	}
	if(in_911_type[playerid] == 1)
	{
		mysql_real_escape_string(name,tmp[0]);
		mysql_real_escape_string(in_911_location[playerid],tmp[1]);
		mysql_real_escape_string(in_911_problem[playerid],tmp[2]);
		format(str2,sizeof(str2),"INSERT INTO rp_calls (type,caller,phone,location,situation) VALUES (1,'%s','%d','%s','%s')",name,CharacterInfo[playerid][active_character[playerid]][cPhone],tmp[1],tmp[2]);
		mysql_query(str2,player_threads[playerid]);
	}
	else
	{

    	mysql_real_escape_string(name,tmp[0]);
    	mysql_real_escape_string(in_911_location[playerid],tmp[1]);
		mysql_real_escape_string(in_911_problem[playerid],tmp[2]);
		format(str2,sizeof(str2),"INSERT INTO rp_calls (type,caller,phone,location,situation) VALUES (2,'%s','%d','%s','%s')",name,CharacterInfo[playerid][active_character[playerid]][cPhone],tmp[1],tmp[2]);
		mysql_query(str2,player_threads[playerid]);

	}

}

public RefreshEmerCallStage(playerid,text[])
{

	switch(in_911_stage[playerid])
	{

	    case 1:
	    {

	        SendClientMessageA(playerid,COLOR_LIGHTBLUE,"911 Operator: 911, what service do you require? (police/medic)");

	    }
		case 2:
		{

			if(strcmp(text,"police",true) == 0)
			{

			    in_911_type[playerid] = 1;
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"911 Operator: And what is your emergency?");

			}
			else if(strcmp(text,"medic",true) == 0)
			{

			    in_911_type[playerid] = 2;
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"911 Operator: And what is your emergency?");

			}
			else
			{

			    in_911_stage[playerid] --;
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"911 Operator: Sorry, I didn't understand that.. What service do you require? (police/medic)");

			}

		}
	    case 3:
	    {

	        SendClientMessageA(playerid,COLOR_FACTION,"911 Operator: Thank you, and where are you?");
	        format(in_911_problem[playerid],256,"%s",text);

	    }
	    case 4:
	    {

	        SendClientMessageA(playerid,COLOR_FACTION,"911 Operator: Emergency services have been informed. Thank you for your call.");
	        format(in_911_location[playerid],256,"%s",text);
	        in_911[playerid] = 0;
			in_911_stage[playerid] = 0;
			SendEmerCall(playerid);
			cl_RemovePhone(playerid);

	    }

	}

}

public BeginCall(playerid,phonenumber)
{

	new call_rejected = 0;
	if(phonenumber != 911 && phonenumber != 123 && phonenumber != 555 && phonenumber != 119 && phonenumber != 726)
	{
		for(new i = 0; i < MAX_PLAYERS; i ++)
		{

		    if(IsPlayerConnectedEx(i))
	     	{

				if(CharacterInfo[i][active_character[i]][cPhone] == phonenumber && phonenumber != 0)
				{

					if(!phone_ringing[i] && phone_incall[i] == -1)
					{

						if(tog_phone[i])
						{
						    if(!HasCell(i))
						    {

								cl_GivePhone(playerid);
							    phone_ringing[i] = true;
							    phone_caller[i] = playerid;
							    phone_calling[playerid] = i;
							    SendEmote(i,"phone starts ringing.");
							    new str[128];
							    new tmp[64];
							    if(tog_callerid[playerid]) { format(tmp,sizeof(tmp),"%d",CharacterInfo[playerid][active_character[playerid]][cPhone]); } else { format(tmp,sizeof(tmp),"Unknown"); }
							    format(str,sizeof(str),"Your phone is ringing, use /pickup to answer. Caller ID: %s",tmp);
							    SendClientMessage(i,COLOR_YELLOW,str);
							    if(Audio_IsClientConnected(i)) { audio_ringtone[i] = Audio_PlayStreamed(i,ringtone_sys_stream[playerid],false,true); }
							    PlayerPlaySound(playerid,3600,0.0,0.0,0.0);

							}
							else
							{

							    SendClientMessage(playerid,COLOR_LIGHTRED,"This phone number is not currentlly active, please check back soon.");

							}

						}
						else
						{

						    SendClientMessage(playerid,COLOR_GREY,"Automated Voice: This persons phone is turned off, please hangup and try again later.");
						    call_rejected = 1;

						}

					}
					else
					{

					    SendClientMessage(playerid,COLOR_GREY,"Busy Tone.");

					}

				}

		    }

		}
		if(phone_calling[playerid] > -1)
		{

			SendEmote(playerid,"takes out a cellphone and begins dialing...");

		}
		else if(call_rejected == 0)
		{

		    SendClientMessageA(playerid,COLOR_YELLOW,"[Cellphone] The number you have dialed has not been recognised.");

		}
	}
	else if(phonenumber == 911)
	{

	    cl_GivePhone(playerid);
	    in_911[playerid] = 1;
		in_911_stage[playerid] = 1;
		RefreshEmerCallStage(playerid,"");
		PlayerPlaySound(playerid,3600,0.0,0.0,0.0);

	}
	/*else if(phonenumber == 123)
	{

	    cl_GivePhone(playerid);
	    calling_taxi[playerid] = 1;
	    SendClientMessage(playerid,COLOR_GREEN,"Operator: Los Santos Taxi Depot. Where would you like us to send a taxi?");

	}
	else if(phonenumber == 555)
	{

	    cl_GivePhone(playerid);
	    calling_mechanic[playerid] = 1;
	    SendClientMessage(playerid,COLOR_GREEN,"Operator: Los Santos Mechanic Depo. What is your problem and where are you?");

	}*/
	else if(phonenumber == 119)
	{

	    cl_GivePhone(playerid);
	    calling_nonpolice[playerid] = 1;
	    SendClientMessage(playerid,COLOR_GREEN,"Operator: Los Santos Police Department. What can I help you with?");
	    PlayerPlaySound(playerid,3600,0.0,0.0,0.0);

	}
	else if(phonenumber == 726)
	{

	    cl_GivePhone(playerid);
	    calling_san[playerid] = 1;
		SendClientMessage(playerid,COLOR_GREEN,"Operator: San Andreas News Network, what is your message?");
		PlayerPlaySound(playerid,3600,0.0,0.0,0.0);

	}

}

public GiveCellPhone(playerid)
{

	new number = random(9999999);
	if(number < 1000000) { number += 1000000; }
	CharacterInfo[playerid][active_character[playerid]][cPhone] = number;
	new str[256];
	format(str,sizeof(str),"You have just purchased a new cell phone! Your number is: %d",number);
	SendClientMessageA(playerid,COLOR_GREEN,str);

}

public ShowVehicleList(playerid,forplayer)
{

	new str[256];
	new name[MAX_PLAYER_NAME];
	new vname[256];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"|-------Vehicles For: %s-------|",name);
	SendClientMessage(forplayer,COLOR_YELLOW2,str);
	new count = 1;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	    {

	        GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
			new col = COLOR_YELLOW2;
	        if(VehicleInfo[i][vDeathTime] == 0 && !VehicleInfo[i][vImpounded])
	        {

	        	format(str,sizeof(str),"Slot #%d: Vehicle:[%s] Insurances:[%d] Mileage:[%d] Lock:[%d] Destroyed:[%d] Immobiliser:[%d]",count,vname,VehicleInfo[i][vInsurance],VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob]);

			}
			else if(VehicleInfo[i][vDeathTime] && !VehicleInfo[i][vImpounded])
			{

			    col = COLOR_LIGHTRED;
			    new redeemstr[64];
			    if(VehicleInfo[i][vDeathTime] > 60) { format(redeemstr,sizeof(redeemstr),"%d mins",(VehicleInfo[i][vDeathTime] / 60)); } else { format(redeemstr,sizeof(redeemstr),"less than a minute!"); }
			    format(str,sizeof(str),"Slot #%d: Vehicle:[%s] Insurances:[%d] Mileage:[%d] Lock:[%d] Destroyed:[%d] Immobiliser:[%d] Time To Redeem:[%s]",count,vname,VehicleInfo[i][vInsurance],VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],redeemstr);

			}
			else if(VehicleInfo[i][vImpounded])
			{

				col = COLOR_LIGHTRED;
			    format(str,sizeof(str),"[IMPOUNDED] Slot #%d: Vehicle:[%s] Insurances:[%d] Mileage:[%d] Lock:[%d] Destroyed:[%d] Immobiliser:[%d]",count,vname,VehicleInfo[i][vInsurance],VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vDestroyed]);

			}
	        SendClientMessage(forplayer,col,str);
	        count ++;

	    }

	}

}

public GetClosestVehicle(playerid)
{

	new winner = -1; new Float:windistance = 9999999.0;
	new Float:X, Float:Y, Float:Z;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vVehicle] > -1)
	    {

		    GetVehiclePos(VehicleInfo[i][vVehicle],X,Y,Z);
			new Float:distance = GetDistanceToPoint(playerid,X,Y,Z);
			if(distance < windistance && distance < 10.0)
			{

			    winner = VehicleInfo[i][vVehicle];
			    windistance = distance;

			}

		}

	}
	return winner;

}

public SendServerEmote(emote[], Float:X, Float:Y, Float:Z, Float:dis, world)
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(IsPlayerInRangeOfPoint(i,dis,X,Y,Z))
	        {

	            if(GetPlayerVirtualWorld(i) == world)
	            {

	            	SendClientMessageA(i,COLOR_PURPLE,emote);

				}

	        }

	    }

	}

}

public FetchVehicleInsurancePrice(model)
{

	for(new i = 0; i < sizeof(VehicleModelInfo); i ++)
	{

	    if(VehicleModelInfo[i][vmModel] == model)
	    {

	        return VehicleModelInfo[i][vmInsurancePrice];

	    }

	}
	return -1;

}

public IsAtUpgradeShop(playerid)
{

	new biz = GetClosestBiz(playerid);
	if(biz == -1) { return false; }
	if(BizInfo[biz][bType] == BIZ_TYPE_VUPGRADE) { return true; }
	return false;

}

public FetchNextVehicleSlot()
{

	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vModel] == 0)
	    {

	        return i;

	    }

	}
	return -1;

}

PurchaseVehicle(playerid,vehicle_model,ignoredonator=false)
{

	if(!vehicle_creating)
	{

		new biz = in_biz[playerid];
		new price = VehicleModelInfo[vehicle_model][vmPrice];
		new slot = FetchNextVehicleSlot();
		if(purchasing_vehicle[playerid] == -1)
		{

			if(slot > -1)
			{

				if(VehicleModelInfo[vehicle_model][vmDonatorVeh] == 0.0 || ignoredonator)
				{

				    if(CharacterInfo[playerid][active_character[playerid]][cLevel] >= 2 || VehicleModelInfo[vehicle_model][vmDonatorVeh] > 0.0)
				    {

						if(!buy_forfaction[playerid] && !buy_forcompany[playerid])
						{

						    vehicle_creating = 1;
							if(!ignoredonator) CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
							if(!ignoredonator) BizInfo[biz][bBank] += floatround((price / 2));
							VehicleInfo[slot][vOwner] = CharacterInfo[playerid][active_character[playerid]][cID];
							VehicleInfo[slot][vModel] = VehicleModelInfo[vehicle_model][vmModel];
							VehicleInfo[slot][vColor1] = tmp_carcolor1[playerid];
							VehicleInfo[slot][vColor2] = tmp_carcolor2[playerid];
							VehicleInfo[slot][vFuel] = 10;
							VehicleInfo[slot][vSpawnX] = BizInfo[biz][bVX];
							VehicleInfo[slot][vSpawnY] = BizInfo[biz][bVY];
							VehicleInfo[slot][vSpawnZ] = BizInfo[biz][bVZ];
							VehicleInfo[slot][vSpawnR] = BizInfo[biz][bVR];
							VehicleInfo[slot][vInsurance] = 2;
							VehicleInfo[slot][vDestroyed] = 0;
							VehicleInfo[slot][vLock] = 0;
							VehicleInfo[slot][vMileage] = 0;
							VehicleInfo[slot][vFaction] = 0;
							VehicleInfo[slot][vGps] = 0;
							VehicleInfo[slot][vCompany] = 0;
							VehicleInfo[slot][vHealth] = 1000.0;
							VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
							VehicleInfo[slot][vDeathTime] = 0;
							cp_target[playerid] = 1;
							SetPlayerCheckpoint(playerid,VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],5.0);
							FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);
							SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]);
							strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
							GameTextForPlayer(playerid,"~g~You have purchased this vehicle",5000,5);
							SendClientMessageA(playerid,COLOR_GREEN,"Sales Person: Thanks for your purchase, your vehicle is waiting outside.");
							vehicle_creating = 0;
							carchoose_color[playerid] = 0;
			                LockVehicle(VehicleInfo[slot][vVehicle]);
							new name[MAX_PLAYER_NAME];
							GetCharacterName(playerid,name);
							format(VehicleInfo[slot][vOwnerName],MAX_PLAYER_NAME,"%s",name);
							StopEngine(VehicleInfo[slot][vVehicle]);
							new str[256];
							purchasing_vehicle[playerid] = slot;
							format(str,sizeof(str),"INSERT INTO rp_vehicles (model,owning_character,color1,color2,spawn_x,spawn_y,spawn_z,spawn_r,insurance,hp,plate) VALUES ('%d','%d','%d','%d','%f','%f','%f','%f','%d','%f','%s')",
							VehicleInfo[slot][vModel],
							VehicleInfo[slot][vOwner],
							VehicleInfo[slot][vColor1],
							VehicleInfo[slot][vColor2],
							VehicleInfo[slot][vSpawnX],
							VehicleInfo[slot][vSpawnY],
							VehicleInfo[slot][vSpawnZ],
							VehicleInfo[slot][vSpawnR],
							VehicleInfo[slot][vInsurance],
							VehicleInfo[slot][vHealth],
							VehicleInfo[slot][vPlate]);
							mysql_query(str,player_threads[playerid],QUERY_PURCHASE_VEHICLE);
							if(donator_vehicle_purchasing[playerid] > -1) donator_vehicle_purchasing[playerid] = -1;

						}
						else if(buy_forfaction[playerid])
						{

							vehicle_creating = 1;
							if(!ignoredonator) CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
							if(!ignoredonator) BizInfo[biz][bBank] += floatround((price / 2));
							VehicleInfo[slot][vOwner] = 0;
							VehicleInfo[slot][vModel] = VehicleModelInfo[vehicle_model][vmModel];
							VehicleInfo[slot][vColor1] = tmp_carcolor1[playerid];
							VehicleInfo[slot][vColor2] = tmp_carcolor2[playerid];
							VehicleInfo[slot][vFuel] = 10;
							VehicleInfo[slot][vSpawnX] = BizInfo[biz][bVX];
							VehicleInfo[slot][vSpawnY] = BizInfo[biz][bVY];
							VehicleInfo[slot][vSpawnZ] = BizInfo[biz][bVZ];
							VehicleInfo[slot][vSpawnR] = BizInfo[biz][bVR];
							VehicleInfo[slot][vMileage] = 0;
							VehicleInfo[slot][vInsurance] = 2;
							VehicleInfo[slot][vLock] = 0;
							VehicleInfo[slot][vGps] = 0;
							VehicleInfo[slot][vCompany] = 0;
							VehicleInfo[slot][vDeathTime] = 0;
							VehicleInfo[slot][vHealth] = 1000.0;
							FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);
							strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
							VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
							cp_target[playerid] = 1;
							SetPlayerCheckpoint(playerid,VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],5.0);
							VehicleInfo[slot][vFaction] = CharacterInfo[playerid][active_character[playerid]][cFaction];
							FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);
							SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]);
							strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
							GameTextForPlayer(playerid,"~g~You have purchased this vehicle",5000,5);
							SendClientMessageA(playerid,COLOR_GREEN,"Sales Person: Thanks for your purchase, your vehicle is waiting outside.");
							vehicle_creating = 0;
							carchoose_color[playerid] = 0;
							LockVehicle(VehicleInfo[slot][vVehicle]);
							StopEngine(VehicleInfo[slot][vVehicle]);
							format(VehicleInfo[slot][vOwnerName],MAX_PLAYER_NAME,"Faction Vehicle");
							buy_forfaction[playerid] = 0;
							new str[256];
							purchasing_vehicle[playerid] = slot;
							format(str,sizeof(str),"INSERT INTO rp_vehicles (model,owning_character,color1,color2,spawn_x,spawn_y,spawn_z,spawn_r,insurance,hp,faction,plate) VALUES ('%d','%d','%d','%d','%f','%f','%f','%f','%d','%f','%d','%s')",
							VehicleInfo[slot][vModel],
							VehicleInfo[slot][vOwner],
							VehicleInfo[slot][vColor1],
							VehicleInfo[slot][vColor2],
							VehicleInfo[slot][vSpawnX],
							VehicleInfo[slot][vSpawnY],
							VehicleInfo[slot][vSpawnZ],
							VehicleInfo[slot][vSpawnR],
							VehicleInfo[slot][vInsurance],
							VehicleInfo[slot][vHealth],
							VehicleInfo[slot][vFaction],
							VehicleInfo[slot][vPlate]);
							mysql_query(str,player_threads[playerid],QUERY_PURCHASE_VEHICLE);
							if(donator_vehicle_purchasing[playerid] > -1) donator_vehicle_purchasing[playerid] = -1;


						}
						else if(buy_forcompany[playerid])
						{

							vehicle_creating = 1;
							if(!ignoredonator) CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
							if(!ignoredonator) BizInfo[biz][bBank] += floatround((price / 2));
							VehicleInfo[slot][vOwner] = 0;
							VehicleInfo[slot][vModel] = VehicleModelInfo[vehicle_model][vmModel];
							VehicleInfo[slot][vColor1] = tmp_carcolor1[playerid];
							VehicleInfo[slot][vColor2] = tmp_carcolor2[playerid];
							VehicleInfo[slot][vFuel] = 10;
							VehicleInfo[slot][vSpawnX] = BizInfo[biz][bVX];
							VehicleInfo[slot][vSpawnY] = BizInfo[biz][bVY];
							VehicleInfo[slot][vSpawnZ] = BizInfo[biz][bVZ];
							VehicleInfo[slot][vSpawnR] = BizInfo[biz][bVR];
							VehicleInfo[slot][vMileage] = 0;
							VehicleInfo[slot][vInsurance] = 2;
							VehicleInfo[slot][vLock] = 0;
							VehicleInfo[slot][vGps] = 0;
							VehicleInfo[slot][vCompany] = 0;
							VehicleInfo[slot][vHealth] = 1000.0;
							VehicleInfo[slot][vDeathTime] = 0;
							FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);
							strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
							VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
							cp_target[playerid] = 1;
							SetPlayerCheckpoint(playerid,VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],5.0);
							VehicleInfo[slot][vFaction] = 0;
							VehicleInfo[slot][vCompany] = CharacterInfo[playerid][active_character[playerid]][cCompany];
							FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);
							SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]);
							strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
							GameTextForPlayer(playerid,"~g~You have purchased this vehicle",5000,5);
							SendClientMessageA(playerid,COLOR_GREEN,"Sales Person: Thanks for your purchase, your vehicle is waiting outside.");
							vehicle_creating = 0;
							carchoose_color[playerid] = 0;
							LockVehicle(VehicleInfo[slot][vVehicle]);
							StopEngine(VehicleInfo[slot][vVehicle]);
							new cslot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
							format(VehicleInfo[slot][vOwnerName],64,"%s",CompanyInfo[cslot][ciName]);
						    buy_forcompany[playerid] = 0;
							new str[256];
							purchasing_vehicle[playerid] = slot;
							format(str,sizeof(str),"INSERT INTO rp_vehicles (model,owning_character,color1,color2,spawn_x,spawn_y,spawn_z,spawn_r,insurance,hp,comp,plate) VALUES ('%d','%d','%d','%d','%f','%f','%f','%f','%d','%f','%d','%s')",
							VehicleInfo[slot][vModel],
							VehicleInfo[slot][vOwner],
							VehicleInfo[slot][vColor1],
							VehicleInfo[slot][vColor2],
							VehicleInfo[slot][vSpawnX],
							VehicleInfo[slot][vSpawnY],
							VehicleInfo[slot][vSpawnZ],
							VehicleInfo[slot][vSpawnR],
							VehicleInfo[slot][vInsurance],
							VehicleInfo[slot][vHealth],
							VehicleInfo[slot][vCompany],
							VehicleInfo[slot][vPlate]);
							mysql_query(str,player_threads[playerid],QUERY_PURCHASE_VEHICLE);
							if(donator_vehicle_purchasing[playerid] > -1) donator_vehicle_purchasing[playerid] = -1;

						}
						LogVehiclePurchase(playerid,VehicleModelInfo[vehicle_model][vmModel]);

					}
					else
     				{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You must be at least level 2 to purchase a vehicle.");

					}

				}
				else
				{

					ProcessDonatorVehiclePurchase(playerid,vehicle_model);

				}

			}
			else
			{

			    SendClientMessageA(playerid,COLOR_LIGHTRED,"No Vehicle Slots Available");

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"The last vehicle you purchased is still processing, please try again.");

		}

 	}
 	else
 	{

 	    SendClientMessageA(playerid,COLOR_LIGHTRED,"Vehicle System Overload, please try again in a moment");

 	}

}

public NumberOfVehicles(playerid)
{

	new count = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	    {

			count ++;

	    }

	}
	return count;

}

public SendDoEmote(playerid,emote[])
{

	new Float:X, Float:Y, Float:Z;
	new world = GetPlayerVirtualWorld(playerid);
	new str[256];
	new name[MAX_PLAYER_NAME];
	GetCharacterNameEx(playerid,name);
	format(str,sizeof(str),"* %s ((%s))",emote,name);
	GetPlayerPos(playerid,X,Y,Z);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == world)
			{

			    SendClientMessageA(i,COLOR_PURPLE,str);

			}

	    }

	}

}


public SendEmote(playerid,emote[])
{

	new Float:X, Float:Y, Float:Z;
	new world = GetPlayerVirtualWorld(playerid);
	new str[256];
	new name[MAX_PLAYER_NAME];
 	GetCharacterNameEx(playerid,name);
	format(str,sizeof(str),"* %s %s",name,emote);
	GetPlayerPos(playerid,X,Y,Z);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == world)
			{

			    SendClientMessageA(i,COLOR_PURPLE,str);
				SetPlayerChatBubble(playerid,str,COLOR_PURPLE,30.0,7500);

			}

	    }

	}

}

public BillBiz(biz)
{

	switch(BizInfo[biz][bType])
	{

		case BIZ_TYPE_VAUCTION:
		{

		    BizInfo[biz][bBank] -= 1000;

		}
		case BIZ_TYPE_LIB:
		{

            BizInfo[biz][bBank] -= 450;

		}
	    case BIZ_TYPE_VEHICLE:
	    {

			BizInfo[biz][bBank] -= 9750;

	    }
	    case BIZ_TYPE_BOAT:
	    {

	    	BizInfo[biz][bBank] -= 5000;

	    }
	    case BIZ_TYPE_PLANE:
		{

			BizInfo[biz][bBank] -= 8000;

		}
		case BIZ_TYPE_GEN:
		{

			BizInfo[biz][bBank] -= 700;

		}
		case BIZ_TYPE_GUN:
		{

			BizInfo[biz][bBank] -= 1000;

		}
		case BIZ_TYPE_FOOD:
		{

		    BizInfo[biz][bBank] -= 500;

		}
		case BIZ_TYPE_FUEL:
		{

			BizInfo[biz][bBank] -= 700;

		}
		case BIZ_TYPE_VUPGRADE:
		{

			BizInfo[biz][bBank] -= 4900;

		}
		case BIZ_TYPE_MAIL:
		{

			BizInfo[biz][bBank] -= 300;

		}
		case BIZ_TYPE_BANK:
		{

			BizInfo[biz][bBank] -= 1050;

		}
		case BIZ_TYPE_DRINK:
		{

			BizInfo[biz][bBank] -= 250;

		}
		case BIZ_TYPE_SPRAY:
		{

			BizInfo[biz][bBank] -= 1200;

		}
		case BIZ_TYPE_AD:
		{

			BizInfo[biz][bBank] -= 200;

		}
		case BIZ_TYPE_WHEELS, BIZ_TYPE_TRANS:
		{

			BizInfo[biz][bBank] -= 1700;

		}
		case BIZ_TYPE_HOTEL:
		{

			BizInfo[biz][bBank] -= 800;

		}
		case BIZ_TYPE_RACES:
		{

			BizInfo[biz][bBank] -= 300;

		}
		case BIZ_TYPE_GYM:
		{

			BizInfo[biz][bBank] -= 150;

		}
		case BIZ_TYPE_FLYSCHOOL:
		{

		    BizInfo[biz][bBank] -= 900;

		}
		case BIZ_TYPE_STOCK:
		{

		    BizInfo[biz][bBank] -= 1100;

		}

	}

}

public ShowBusinessFinance(playerid,biz)
{

	new str[256];
	switch(BizInfo[biz][bType])
	{

		case BIZ_TYPE_VAUCTION:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~w~$300~n~~p~Restock: ~w~$400~n~~p~Employee Salery: ~w~$300~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
	    case BIZ_TYPE_LIB:
	    {

		    format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~w~$100~n~~p~Restock: ~w~$150~n~~p~Employee Salery: ~w~$200~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

	    }
	    case BIZ_TYPE_VEHICLE:
	    {

	        format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~w~$3750~n~~p~Restock: ~w~$1000~n~~p~Employee Salery: ~w~$5000~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

	    }
	    case BIZ_TYPE_BOAT:
	    {

	    	format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$3500~n~~p~Restock: ~r~$500~n~~p~Employee Salery: ~r~$1000~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

	    }
	    case BIZ_TYPE_PLANE:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$5500~n~~p~Restock: ~r~$1000~n~~p~Employee Salery: ~r~$1500~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_GEN:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$300~n~~p~Restock: ~r~$200~n~~p~Employee Salery: ~r~$200~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_GUN:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$600~n~~p~Restock: ~r~$200~n~~p~Employee Salery: ~r~$200~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_FOOD:
		{

		    format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$200~n~~p~Restock: ~r~$100~n~~p~Employee Salery: ~r~$200~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_FUEL:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$100~n~~p~Restock: ~r~$500~n~~p~Employee Salery: ~r~$100~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_VUPGRADE:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$300~n~~p~Restock: ~r~$4000~n~~p~Employee Salery: ~r~$600~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_MAIL:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$100~n~~p~Restock: ~r~$100~n~~p~Employee Salery: ~r~$100~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_BANK:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$300~n~~p~Restock: ~r~$0~n~~p~Employee Salery: ~r~$750~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_DRINK:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$100~n~~p~Restock: ~r~$100~n~~p~Employee Salery: ~r~$50~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_SPRAY:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$100~n~~p~Restock: ~r~$1000~n~~p~Employee Salery: ~r~$100~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_AD:
		{

			format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$50~n~~p~Restock: ~r~$50~n~~p~Employee Salery: ~r~$100~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_TRANS:
		{

		    format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$400~n~~p~Restock: ~r~$700~n~~p~Employee Salery: ~r~$600~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_WHEELS:
		{

		    format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$400~n~~p~Restock: ~r~$700~n~~p~Employee Salery: ~r~$600~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_HOTEL:
		{

		    format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$500~n~~p~Restock: ~r~$200~n~~p~Employee Salery: ~r~$100~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_RACES:
		{

		    format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$100~n~~p~Restock: ~r~$50~n~~p~Employee Salery: ~r~$150~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_GYM:
		{

		    format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$50~n~~p~Restock: ~r~$50~n~~p~Employee Salery: ~r~$50~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_FLYSCHOOL:
		{

		    format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$500~n~~p~Restock: ~r~$250~n~~p~Employee Salery: ~r~$150~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}
		case BIZ_TYPE_STOCK:
		{

		    format(str,sizeof(str),"~p~Business Finances~n~ ~n~Building Rent: ~r~$500~n~~p~Restock: ~r~$250~n~~p~Employee Salery: ~r~$350~n~ ~n~~p~Current Bank Balance: ~w~$%d",BizInfo[biz][bBank]);

		}

	}
	TextDrawSetString(infotxt[playerid],str);
	TextDrawShowForPlayer(playerid,infotxt[playerid]);
	infotxt_expire[playerid] = 11;
	return 1;

}

public IsBusinessOwner(playerid,biz)
{

	if(BizInfo[biz][bOwner] == CharacterInfo[playerid][active_character[playerid]][cID]) { return true; }
	return false;

}

public IsInGunShop(playerid)
{

	new biz = in_biz[playerid];
	if(biz == -1) { return false; }
	if(BizInfo[biz][bType] == BIZ_TYPE_GUN) { return true; }
	return false;

}

public IsInStore(playerid)
{

	new biz = in_biz[playerid];
	if(biz == -1) { return false; }
	if(BizInfo[biz][bType] == BIZ_TYPE_GEN) { return true; }
	return false;

}

public RefreshMaskStatus(playerid,togglefor)
{

	if(mask_on[playerid]) { ShowPlayerNameTagForPlayer(togglefor,playerid,false); }
	else { ShowPlayerNameTagForPlayer(togglefor,playerid,true); }
	if(aduty[togglefor]) { ShowPlayerNameTagForPlayer(togglefor,playerid,true); }

}

public IsAtGasStation(playerid)
{

	new biz = GetClosestBiz(playerid);
	if(biz == -1) { return false; }
	if(BizInfo[biz][bType] == BIZ_TYPE_FUEL) { return true; }
	return false;

}

public OnPlayerExitBusiness(playerid,bizid)
{
    if(!tutorial_stage[playerid])
	{
		switch(BizInfo[bizid][bType])
		{

			case BIZ_TYPE_LOCO:
			{

			    in_biz[playerid] = -1;
			    if(IsPlayerInAnyVehicle(playerid))
			    {

                    in_modshop[playerid] = 0;
				    new id = GetPlayerVehicleID(playerid);
					SetVehiclePosEx(id,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);
					SetPlayerVirtualWorld(playerid,0);
					SetVehicleVirtualWorld(id,0);
					FormatModString(id);

				}
				else
				{

				    SetPlayerPos(playerid,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);

				}

			}
			case BIZ_TYPE_WHEELS:
			{

			    in_biz[playerid] = -1;
			    if(IsPlayerInAnyVehicle(playerid))
			    {

                    in_modshop[playerid] = 0;
				    new id = GetPlayerVehicleID(playerid);
					SetVehiclePosEx(id,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);
					SetPlayerVirtualWorld(playerid,0);
					SetVehicleVirtualWorld(id,0);
					FormatModString(id);

				}
				else
				{

				    SetPlayerPos(playerid,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);

				}

			}
			case BIZ_TYPE_TRANS:
			{

			    in_biz[playerid] = -1;
			    if(IsPlayerInAnyVehicle(playerid))
			    {

			        in_modshop[playerid] = 0;
				    new id = GetPlayerVehicleID(playerid);
					SetVehiclePosEx(id,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);
					SetPlayerVirtualWorld(playerid,0);
					SetVehicleVirtualWorld(id,0);
					FormatModString(id);

				}
				else
				{

				    SetPlayerPos(playerid,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);

				}

			}
		    case BIZ_TYPE_VEHICLE:
		    {

				if(donator_vehicle_purchasing[playerid] == -1)
				{

	                vehicle_showroom_position[playerid] = -1;
	                carchoose_color[playerid] = 0;
			        in_biz[playerid] = -1;
			        SetPlayerPos(playerid,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);
			        SetPlayerVirtualWorld(playerid,0);
			        SetCameraBehindPlayer(playerid);
			        vehicle_showroom_position[playerid] = -1;
			        vehicle_showroom_type[playerid] = -1;
			        TogglePlayerControllable(playerid,1);
			        TextDrawHideForPlayer(playerid,infotxt[playerid]);

			     }
			     else
			     {

			        SendClientMessage(playerid,COLOR_LIGHTRED,"Please wait until your vehicle has finished purchasing.");

			     }

		    }
		    case BIZ_TYPE_BOAT:
		    {

				in_biz[playerid] = -1;
		        SetPlayerPos(playerid,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);
		        SetPlayerVirtualWorld(playerid,0);
		        SetCameraBehindPlayer(playerid);
		        vehicle_showroom_position[playerid] = -1;
		        vehicle_showroom_type[playerid] = -1;
		        TogglePlayerControllable(playerid,1);
		        TextDrawHideForPlayer(playerid,infotxt[playerid]);

		    }
		    case BIZ_TYPE_PLANE:
		    {

		    	in_biz[playerid] = -1;
		        SetPlayerPos(playerid,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);
		        SetPlayerVirtualWorld(playerid,0);
		        SetCameraBehindPlayer(playerid);
		        vehicle_showroom_position[playerid] = -1;
		        vehicle_showroom_type[playerid] = -1;
		        TogglePlayerControllable(playerid,1);
		        TextDrawHideForPlayer(playerid,infotxt[playerid]);

		    }
		    default:
		    {

				if(IsPlayerInRangeOfPoint(playerid,10.0,BizInfo[bizid][bInteriorX],BizInfo[bizid][bInteriorY],BizInfo[bizid][bInteriorZ]) && GetPlayerVirtualWorld(playerid) == (bizid + 2000))
				{

					if(IsPlayerInAnyVehicle(playerid) && AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
					{

						new veh = GetPlayerVehicleID(playerid);
						SetVehiclePosEx(veh,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);
						LinkVehicleToInterior(veh,0);
						SetPlayerInterior(playerid,0);
						in_biz[playerid] = -1;
						if(BizInfo[bizid][bType] == BIZ_TYPE_DRINK && strlen(BizInfo[bizid][bStream]))
				        {

				            StopAudioStreamForPlayer(playerid);

				        }

					}
					else
					{

					    SetPlayerPos(playerid,BizInfo[bizid][bSpawnX],BizInfo[bizid][bSpawnY],BizInfo[bizid][bSpawnZ]);
					    SetPlayerInterior(playerid,0);
				        SetPlayerVirtualWorld(playerid,0);
				        SetCameraBehindPlayer(playerid);
				        in_biz[playerid] = -1;
				        if(BizInfo[bizid][bType] == BIZ_TYPE_DRINK && strlen(BizInfo[bizid][bStream]))
				        {

				            StopAudioStreamForPlayer(playerid);

				        }

					}

				}
		    }
		}
	}
}

public OnPlayerEnterBusiness(playerid,bizid)
{

	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= BizInfo[bizid][bEntranceFee] && tutorial_stage[playerid] != 2)
	{
	    if(BizInfo[bizid][bType] != BIZ_TYPE_WHEELS && BizInfo[bizid][bType] != BIZ_TYPE_LOCO && BizInfo[bizid][bType] != BIZ_TYPE_TRANS)
	    {
		    CharacterInfo[playerid][active_character[playerid]][cMoney] -= BizInfo[bizid][bEntranceFee];
		    BizInfo[bizid][bBank] += BizInfo[bizid][bEntranceFee];
		}
		SendBizHelpText(playerid,BizInfo[bizid][bType]);
		switch(BizInfo[bizid][bType])
		{

			case BIZ_TYPE_FLYSCHOOL:
			{

			    if(!IsPlayerInAnyVehicle(playerid))
			    {

			        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10000)
			        {

			            if(CharacterInfo[playerid][active_character[playerid]][cFlyLic] == 0)
			            {

			                if(!vehicle_creating)
			                {

			                    new Float:X, Float:Y, Float:Z;
								new flyers = FetchNumFlyingLearners();
								if(flyers < 2)
								{
									if(flyers == 0) { X = 325.4180; Y = 2542.3489; Z = 17.2689; }
									else if(flyers == 1) { X = 290.4316; Y = 2542.3379; Z = 17.2820; }
				                    vehicle_creating = 1;
									in_fly_school[playerid] = 1;
									in_fly_school_veh[playerid] = CreateVehicle(593,X,Y,Z,180.0,random(126),random(126),-1);
									StopEngine(in_fly_school_veh[playerid]);
									PutPlayerInVehicle(playerid,in_fly_school_veh[playerid],0);
									SendClientMessage(playerid,COLOR_GREEN,"|-----Flight School-----|");
									SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: Welcome to flight school. You have just taken your first steps into becoming a pilot!");
									SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: The first thing we need to cover is ground movement. This is known as TAXIING");
									SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: While on the ground, aircraft use the RUDDER, the large vertical tail at the rear to stear the plane.");
									SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: In a moment, I will ask you to taxi to the start of the runway and prepare for takeoff.");
									fly_school_stage[playerid] = 0;
									fly_school_countdown[playerid] = 21;
				                    vehicle_creating = 0;
				                    in_biz[playerid] = bizid;
		 						}
		 						else
		 						{

		 						    SendClientMessage(playerid,COLOR_LIGHTRED,"There are already too many people learning to fly.");

		 						}

			                }
			                else
			                {

			                    SendClientMessage(playerid,COLOR_LIGHTRED,"Another vehicle is curentlly being created, please re-try");

			                }

			            }
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a flying license.");

						}

			        }
			        else
			        {

			            SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money to learn how to fly.");

			        }

			    }
			    else
			    {

			        SendErrorMsg(playerid,"Leave your vehicle first.");

			    }

			}
			case BIZ_TYPE_LOCO:
		    {

				if(IsPlayerInAnyVehicle(playerid))
		        {

		            if(CanModInShop(GetPlayerVehicleID(playerid),MOD_TYPE_LOCO))
		            {

		                new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
		                if(slot > -1)
		                {
			                in_modshop[playerid] = 1;
			                in_biz[playerid] = bizid;
			                new id = GetPlayerVehicleID(playerid);
						    SetVehiclePosEx(id,BizInfo[bizid][bVX],BizInfo[bizid][bVY],BizInfo[bizid][bVZ]);
						    SetVehicleZAngle(id,BizInfo[bizid][bVR]);
						    SetPlayerVirtualWorld(playerid,(playerid + 10000));
						    SetVehicleVirtualWorld(id,(playerid + 10000));
						    CharacterInfo[playerid][active_character[playerid]][cMoney] -= BizInfo[bizid][bEntranceFee];
		   					BizInfo[bizid][bBank] += BizInfo[bizid][bEntranceFee];
						}
						else
						{

						    SendErrorMsg(playerid,"This vehicle cannot be modded.");

						}

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You cannot mod this vehicle here.");

		            }

		        }
		        else
		        {

		            SendErrorMsg(playerid,"You are not in a vehicle.");

		        }


		    }
		    case BIZ_TYPE_WHEELS:
		    {

				if(IsPlayerInAnyVehicle(playerid))
		        {

		            if(CanModInShop(GetPlayerVehicleID(playerid),MOD_TYPE_WHEELS))
		            {

		                new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
		                if(slot > -1)
		                {
			                in_modshop[playerid] = 1;
			                in_biz[playerid] = bizid;
			                new id = GetPlayerVehicleID(playerid);
						    SetVehiclePosEx(id,BizInfo[bizid][bVX],BizInfo[bizid][bVY],BizInfo[bizid][bVZ]);
						    SetVehicleZAngle(id,BizInfo[bizid][bVR]);
						    SetPlayerVirtualWorld(playerid,(playerid + 10000));
						    SetVehicleVirtualWorld(id,(playerid + 10000));
						    CharacterInfo[playerid][active_character[playerid]][cMoney] -= BizInfo[bizid][bEntranceFee];
		    				BizInfo[bizid][bBank] += BizInfo[bizid][bEntranceFee];
						}
						else
						{

						    SendErrorMsg(playerid,"This vehicle cannot be modded.");

						}

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You cannot mod this vehicle here.");

		            }

		        }
		        else
		        {

		            SendErrorMsg(playerid,"You are not in a vehicle.");

		        }


		    }
		    case BIZ_TYPE_TRANS:
		    {

		        if(IsPlayerInAnyVehicle(playerid))
		        {

		            if(CanModInShop(GetPlayerVehicleID(playerid),MOD_TYPE_TRANS))
		            {

		                new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
		                if(slot > -1)
		                {
			                in_modshop[playerid] = 1;
			                in_biz[playerid] = bizid;
			                new id = GetPlayerVehicleID(playerid);
						    SetVehiclePosEx(id,BizInfo[bizid][bVX],BizInfo[bizid][bVY],BizInfo[bizid][bVZ]);
						    SetVehicleZAngle(id,BizInfo[bizid][bVR]);
						    SetPlayerVirtualWorld(playerid,(playerid + 10000));
						    SetVehicleVirtualWorld(id,(playerid + 10000));
						    CharacterInfo[playerid][active_character[playerid]][cMoney] -= BizInfo[bizid][bEntranceFee];
		    				BizInfo[bizid][bBank] += BizInfo[bizid][bEntranceFee];
						}
						else
						{

						    SendErrorMsg(playerid,"This vehicle cannot be modded.");

						}

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You cannot mod this vehicle here.");

		            }

		        }
		        else
		        {

		            SendErrorMsg(playerid,"You are not in a vehicle.");

		        }

		    }
			case BIZ_TYPE_SPRAY:
			{

			    if(IsPlayerInAnyVehicle(playerid))
			    {

				    in_biz[playerid] = bizid;
				    new id = GetPlayerVehicleID(playerid);
				    SetVehiclePosEx(id,BizInfo[bizid][bVX],BizInfo[bizid][bVY],BizInfo[bizid][bVZ]);
				    RepairVehicleEx(id);
				    SetVehicleZAngle(id,BizInfo[bizid][bVR]);
				    TogglePlayerControllable(playerid,0);
					new slot = GetVehicleSlot(id);
					if(slot > -1)
					{

				    	spraying_vehicle[playerid] = 1;
						TextDrawSetString(infotxt[playerid],"~p~Respraying~n~ ~n~~w~Use the ~p~~k~~VEHICLE_STEERLEFT~ ~w~and ~p~~k~~VEHICLE_STEERRIGHT~ ~w~keys to navigate between colors~n~Press ~p~~k~~VEHICLE_HANDBRAKE~ ~w~select this color");
						TextDrawShowForPlayer(playerid,infotxt[playerid]);
						infotxt_expire[playerid] = 11;
                        PlayerPlaySound(playerid,1139,0.0,0.0,0.0);

				    }
				    else
				    {

				        leave_spray[playerid] = 11;
				        SendClientMessageA(playerid,COLOR_GREEN,"You will be let out in 10 seconds.");

				    }

			    }
			    else
			    {

			        SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not in a vehicle.");

			    }

			}
		    case BIZ_TYPE_VEHICLE:
		    {

		        PutPlayerInShowroom(playerid,VEHICLE_MODEL_TYPE_CAR);
		        in_biz[playerid] = bizid;
		        vehicle_select_cooldown[playerid] = 3;
		        SendClientMessageA(playerid,COLOR_GREEN,"Use /exit to leave.");

		    }
		    case BIZ_TYPE_BOAT:
			{

			    PutPlayerInShowroom(playerid,VEHICLE_MODEL_TYPE_BOAT);
			    in_biz[playerid] = bizid;
			    vehicle_select_cooldown[playerid] = 3;
			    SendClientMessageA(playerid,COLOR_GREEN,"Use /exit to leave.");

			}
			case BIZ_TYPE_PLANE:
			{

				PutPlayerInShowroom(playerid,VEHICLE_MODEL_TYPE_PLANE);
			    in_biz[playerid] = bizid;
			    vehicle_select_cooldown[playerid] = 3;
			    SendClientMessageA(playerid,COLOR_GREEN,"Use /exit to leave.");

			}
			case BIZ_TYPE_FUEL:
			{

			    GameTextForPlayer(playerid,"~r~Use /fill while in a vehicle to fill your vehicle with fuel",5000,5);

			}
		    default:
		    {

				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
				{

				    new veh = GetPlayerVehicleID(playerid);
				    SetVehiclePosEx(veh,BizInfo[bizid][bInteriorX],BizInfo[bizid][bInteriorY],BizInfo[bizid][bInteriorZ]);
				    LinkVehicleToInterior(veh,BizInfo[bizid][bInterior]);
				    SetPlayerInterior(playerid,BizInfo[bizid][bInterior]);
				    in_biz[playerid] = bizid;
				    SetPlayerVirtualWorld(playerid,(bizid + 2000));
				    SetVehicleVirtualWorld(veh,(bizid + 2000));

				}
				else
				{

			    	SetPlayerInterior(playerid,BizInfo[bizid][bInterior]);
			        SetPlayerVirtualWorld(playerid,(bizid + 2000));
			        SetPlayerPos(playerid,BizInfo[bizid][bInteriorX],BizInfo[bizid][bInteriorY],BizInfo[bizid][bInteriorZ]);
			        in_biz[playerid] = bizid;
			        if(BizInfo[bizid][bType] == BIZ_TYPE_MAIL) { LoadMail(playerid); }
			        if(BizInfo[bizid][bType] == BIZ_TYPE_DRINK) { RefreshPlayerBizAudio(playerid); }

			 	}

		    }

		}
	}
	else
	{

	    SendErrorMsg(playerid,"You do not have enough money to enter this business.");

	}
	if(BizInfo[bizid][bType] == BIZ_TYPE_BANK && tutorial_stage[playerid] == 2) { tutorial_stage[playerid] ++; RefreshPlayerTutorial(playerid); }

}

public FetchNextVehiclePosition(playerid,type)
{

	for(new i = 0; i < sizeof(VehicleModelInfo); i ++)
	{

		if(i > vehicle_showroom_position[playerid] && VehicleModelInfo[i][vmType] == type)
		{

		    return i;

		}

	}
	return -1;

}

public FetchPrevVehiclePosition(playerid,type)
{

	for(new i = sizeof(VehicleModelInfo); i >= 0; i --)
	{

		if(i < vehicle_showroom_position[playerid] && VehicleModelInfo[i][vmType] == type)
		{

		    return i;

		}

	}
	return -1;

}

public RefreshPlayerShowroomPosition(playerid)
{

	new Float:X, Float:Y;
	new Float:vX, Float:vY, Float:vZ;
	new str[256];
	new Float:dis;
	new pricestr[128];
	if(VehicleModelInfo[vehicle_showroom_position[playerid]][vmDonatorVeh])
	{

	    format(pricestr,sizeof(pricestr),"~y~Credit Price: ~g~%.2f",VehicleModelInfo[vehicle_showroom_position[playerid]][vmDonatorVeh]);

	}
	else
	{

	    format(pricestr,sizeof(pricestr),"~p~Price: ~w~$%d",VehicleModelInfo[vehicle_showroom_position[playerid]][vmPrice]);

	}
	if(vehicle_showroom_type[playerid] == VEHICLE_MODEL_TYPE_CAR) { dis = 7.5; } else if(vehicle_showroom_type[playerid] == VEHICLE_MODEL_TYPE_BOAT) { dis = 15.0; } else if(vehicle_showroom_type[playerid] == VEHICLE_MODEL_TYPE_PLANE) { dis = 30.0; }
	GetPosInFrontOfVehicle(VehicleModelInfo[vehicle_showroom_position[playerid]][vmVehicle], X, Y, dis);
	GetVehiclePos(VehicleModelInfo[vehicle_showroom_position[playerid]][vmVehicle],vX,vY,vZ);
	SetPlayerCameraPos(playerid,(X - 5.0),(Y - 3.0),(vZ + 1.0));
	SetPlayerCameraLookAt(playerid,vX,vY,vZ);
	format(str,sizeof(str),"~p~Vehicle Information~n~ ~n~~p~Vehicle: ~w~%s~n~%s~n~ ~n~~r~Press ~k~~PED_SPRINT~ to~n~purchase this vehicle",VehicleModelInfo[vehicle_showroom_position[playerid]][vmName],pricestr);
	TextDrawSetString(infotxt[playerid],str);
	TextDrawShowForPlayer(playerid,infotxt[playerid]);
	SetPlayerVirtualWorld(playerid,(VIRTUAL_WORLD_CARCHOOSE + vehicle_showroom_position[playerid]));

}

public PutPlayerInShowroom(playerid,type)
{

	vehicle_showroom_type[playerid] = type;
	if(type == VEHICLE_MODEL_TYPE_CAR)
	{

	    SetPlayerPos(playerid,-1652.5516,1214.9998,0.000);
	    TogglePlayerControllable(playerid,0);
		SetPlayerVirtualWorld(playerid,VIRTUAL_WORLD_CARCHOOSE);
		vehicle_showroom_position[playerid] = 0;
	    RefreshPlayerShowroomPosition(playerid);

	}
	else if(type == VEHICLE_MODEL_TYPE_BOAT)
	{

		SetPlayerPos(playerid,-2228.9761,2390.2180,-20.2321);
	    TogglePlayerControllable(playerid,0);
		SetPlayerVirtualWorld(playerid,VIRTUAL_WORLD_CARCHOOSE);
		vehicle_showroom_position[playerid] = FetchNextVehiclePosition(playerid,VEHICLE_MODEL_TYPE_BOAT);
	    RefreshPlayerShowroomPosition(playerid);

	}
	else if(type == VEHICLE_MODEL_TYPE_PLANE)
	{

		SetPlayerPos(playerid,-1349.1178,-233.7980,0.8722);
	    TogglePlayerControllable(playerid,0);
		SetPlayerVirtualWorld(playerid,VIRTUAL_WORLD_CARCHOOSE);
		vehicle_showroom_position[playerid] = FetchNextVehiclePosition(playerid,VEHICLE_MODEL_TYPE_PLANE);
	    RefreshPlayerShowroomPosition(playerid);

	}

}

public SendConfirmationMsg(playerid,msg[],type,extra)
{

	confirm_dialog_extra[playerid] = extra;
	ShowPlayerDialog(playerid,type,DIALOG_STYLE_MSGBOX,"Confirm Action...",msg,"Confirm","Cancel");

}

public IsRentingHouse(playerid,houseid)
{

	if(CharacterInfo[playerid][active_character[playerid]][cRenting] == HouseInfo[houseid][hID]) { return true; }
	return false;

}

public IsHouseOwner(playerid,houseid)
{

	if(HouseInfo[houseid][hOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
 	{

	    return true;

 	}
 	else
 	{

 	    return false;

 	}

}

public GetClosestBiz(playerid)
{

	new Float:X, Float:Y, Float:Z;
	new winner = -1;
	new Float:windistance = 50;
	GetPlayerPos(playerid,X,Y,Z);
	for(new i = 0; i < MAX_BIZES; i ++)
	{

	    if(IsPlayerInRangeOfPoint(playerid,10.0,BizInfo[i][bSpawnX],BizInfo[i][bSpawnY],BizInfo[i][bSpawnZ]))
	    {

			if(GetDistanceToPoint(playerid,BizInfo[i][bSpawnX],BizInfo[i][bSpawnY],BizInfo[i][bSpawnZ]) < windistance && GetDistanceToPoint(playerid,BizInfo[i][bSpawnX],BizInfo[i][bSpawnY],BizInfo[i][bSpawnZ]) < 7.5)
			{

			    winner = i;
			    windistance = GetDistanceToPoint(playerid,BizInfo[i][bSpawnX],BizInfo[i][bSpawnY],BizInfo[i][bSpawnZ]);

			}

	    }

	}
	return winner;

}

public GetClosestHouse(playerid)
{

	new Float:X, Float:Y, Float:Z;
	new winner = -1;
	new Float:windistance = 50;
	GetPlayerPos(playerid,X,Y,Z);
	for(new i = 0; i < MAX_HOUSES; i ++)
	{

	    if(IsPlayerInRangeOfPoint(playerid,10.0,HouseInfo[i][hSpawnX],HouseInfo[i][hSpawnY],HouseInfo[i][hSpawnZ]))
	    {

			if(GetDistanceToPoint(playerid,HouseInfo[i][hSpawnX],HouseInfo[i][hSpawnY],HouseInfo[i][hSpawnZ]) < windistance)
			{

			    winner = i;
			    windistance = GetDistanceToPoint(playerid,HouseInfo[i][hSpawnX],HouseInfo[i][hSpawnY],HouseInfo[i][hSpawnZ]);

			}

	    }

	}
	if(winner == -1 && in_house[playerid] > -1) { winner = in_house[playerid]; }
	return winner;

}

public SendLocalICMessage(playerid,str[],Float:distance)
{

	new Float:X, Float:Y, Float:Z;
	new world = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid,X,Y,Z);
	new col;
	if(distance <= 30.0) { col = COLOR_GRAD1; } else { col = COLOR_WHITE; }
	new replacestr[128];
	new pname[MAX_PLAYER_NAME];
	GetCharacterName(playerid,pname);
	format(replacestr,sizeof(replacestr),"%s Says: [Unknown Language]",pname);
	if(active_language[playerid] > -1)
	{

		new pos = strfind(str,":");
		new lang[128];
		new name[64];
		FetchLanguageName(active_language[playerid],name);
		format(lang,128," [%s] ",name);
		strins(str,lang,(pos + 1),256);

	}
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(IsPlayerInRangeOfPoint(i,distance,X,Y,Z) && GetPlayerVirtualWorld(i) == world)
			{

				if(active_language[playerid] == -1 || CharacterInfo[i][active_character[i]][cLanguage] == active_language[playerid] || aduty[i])
				{

			    	SendClientMessageA(i,col,str);

			    }
			    else
			    {

					SendClientMessageA(i,col,replacestr);

			    }

			}

	    }

	}

}

public SendLocalOOCMessage(playerid,str[])
{

	new Float:X, Float:Y, Float:Z;
	new world = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid,X,Y,Z);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == world)
			{

			    SendClientMessageA(i,COLOR_SPEC,str);

			}

	    }

	}

}

public GetCharacterName(playerid,formatme[])
{

	if(!aduty[playerid])
	{

		new name[MAX_PLAYER_NAME];
		new data[2][MAX_PLAYER_NAME];
		explode(data,CharacterInfo[playerid][active_character[playerid]][cName],"_");
		format(name,sizeof(name),"%s %s",data[0],data[1]);
		return format(formatme,MAX_PLAYER_NAME,"%s",name);

	}
	else
	{

	    return format(formatme,MAX_PLAYER_NAME,"%s",AccountInfo[playerid][aName]);

	}

}

public CreatePlayerTextDraws(playerid)
{

	charchoosetxt[playerid] = TextDrawCreate(553.000000,118.000000,"Loading...");
	TextDrawUseBox(charchoosetxt[playerid],1);
	TextDrawBoxColor(charchoosetxt[playerid],0x00000066);
	TextDrawTextSize(charchoosetxt[playerid],0.000000,106.000000);
	TextDrawAlignment(charchoosetxt[playerid],2);
	TextDrawBackgroundColor(charchoosetxt[playerid],0x000000ff);
	TextDrawFont(charchoosetxt[playerid],3);
	TextDrawLetterSize(charchoosetxt[playerid],0.300000,1.300000);
	TextDrawColor(charchoosetxt[playerid],0xffffffff);
	TextDrawSetOutline(charchoosetxt[playerid],1);
	TextDrawSetProportional(charchoosetxt[playerid],1);
	TextDrawSetShadow(charchoosetxt[playerid],1);

	infotxt[playerid] = TextDrawCreate(145.000000,145.000000,"Loading House Information...");
	TextDrawUseBox(infotxt[playerid],1);
	TextDrawBoxColor(infotxt[playerid],0x00000066);
	TextDrawTextSize(infotxt[playerid],0.000000,252.000000);
	TextDrawAlignment(infotxt[playerid],2);
	TextDrawBackgroundColor(infotxt[playerid],0x000000ff);
	TextDrawFont(infotxt[playerid],3);
	TextDrawLetterSize(infotxt[playerid],0.299999,1.200000);
	TextDrawColor(infotxt[playerid],0xffffffff);
	TextDrawSetOutline(infotxt[playerid],1);
	TextDrawSetProportional(infotxt[playerid],1);
	TextDrawSetShadow(infotxt[playerid],1);

	mailtxt[playerid] = TextDrawCreate(180.000000,122.000000,"Loading Mail...");
	TextDrawUseBox(mailtxt[playerid],1);
	TextDrawBoxColor(mailtxt[playerid],0x00000066);
	TextDrawTextSize(mailtxt[playerid],478.000000,330.000000);
	TextDrawAlignment(mailtxt[playerid],1);
	TextDrawBackgroundColor(mailtxt[playerid],0x000000ff);
	TextDrawFont(mailtxt[playerid],1);
	TextDrawLetterSize(mailtxt[playerid],0.299999,2.100000);
	TextDrawColor(mailtxt[playerid],0xffffffff);
	TextDrawSetOutline(mailtxt[playerid],1);
	TextDrawSetProportional(mailtxt[playerid],1);
	TextDrawSetShadow(mailtxt[playerid],1);

	jail_timeleft[playerid] = TextDrawCreate(277.000000,371.000000,"~p~time left: ~w~Loading...");
	TextDrawAlignment(jail_timeleft[playerid],0);
	TextDrawBackgroundColor(jail_timeleft[playerid],0x000000ff);
	TextDrawFont(jail_timeleft[playerid],3);
	TextDrawLetterSize(jail_timeleft[playerid],0.299999,1.200000);
	TextDrawColor(jail_timeleft[playerid],0xffffffff);
	TextDrawSetOutline(jail_timeleft[playerid],1);
	TextDrawSetProportional(jail_timeleft[playerid],1);
	TextDrawSetShadow(jail_timeleft[playerid],1);

	errormsg[playerid] = TextDrawCreate(318.000000,112.000000,"~r~Error");
	TextDrawAlignment(errormsg[playerid],2);
	TextDrawBackgroundColor(errormsg[playerid],0x000000ff);
	TextDrawFont(errormsg[playerid],1);
	TextDrawLetterSize(errormsg[playerid],0.299999,1.300000);
	TextDrawColor(errormsg[playerid],0xffffffff);
	TextDrawSetOutline(errormsg[playerid],1);
	TextDrawSetProportional(errormsg[playerid],1);
	TextDrawSetShadow(errormsg[playerid],1);

	speedo_txt[playerid] = TextDrawCreate(500.000000,433.000000,"Loading Speed...");
	TextDrawAlignment(speedo_txt[playerid],0);
	TextDrawBackgroundColor(speedo_txt[playerid],0x000000ff);
	TextDrawFont(speedo_txt[playerid],1);
	TextDrawLetterSize(speedo_txt[playerid],0.199999,1.000000);
	TextDrawColor(speedo_txt[playerid],0xffffffff);
	TextDrawSetOutline(speedo_txt[playerid],1);
	TextDrawSetProportional(speedo_txt[playerid],1);
	TextDrawSetShadow(speedo_txt[playerid],1);

	payment_text[playerid] = TextDrawCreate(317.000000,346.000000," ~n~~p~payment~n~ ~n~~w~Loading......~n~ ~n~ ");
	TextDrawUseBox(payment_text[playerid],1);
	TextDrawBoxColor(payment_text[playerid],0x00000066);
	TextDrawTextSize(payment_text[playerid],564.000000,264.000000);
	TextDrawAlignment(payment_text[playerid],2);
	TextDrawBackgroundColor(payment_text[playerid],0x000000ff);
	TextDrawFont(payment_text[playerid],3);
	TextDrawLetterSize(payment_text[playerid],0.400002,1.400000);
	TextDrawColor(payment_text[playerid],0xffffffff);
	TextDrawSetOutline(payment_text[playerid],1);
	TextDrawSetProportional(payment_text[playerid],1);
	TextDrawSetShadow(payment_text[playerid],1);

	progress_bar[playerid] = CreateProgressBar(278.00, 379.00, 84.50, 7.50, COLOR_GREEN, 100.0);

}

public DestroyPlayerTextDraws(playerid)
{

	TextDrawDestroy(charchoosetxt[playerid]);
	TextDrawDestroy(infotxt[playerid]);
	TextDrawDestroy(mailtxt[playerid]);
	TextDrawDestroy(jail_timeleft[playerid]);
	TextDrawDestroy(errormsg[playerid]);
	TextDrawDestroy(speedo_txt[playerid]);
	TextDrawDestroy(payment_text[playerid]);
	DestroyProgressBar(progress_bar[playerid]);
	printf("Player Text Draws Destroyed");

}

public NumberOfCharacters(playerid)
{

	new i = 0; new count = 0;
	while(i < AccountInfo[playerid][aMaxChars])
	{

	    if(CharacterInfo[playerid][i][cSkin]) { count ++; }
	    i ++;

	}
	return count;

}

public RefreshCharSelection(playerid,offset)
{

	if(!NumberOfCharacters(playerid))
	{
		ShowPlayerDialog(playerid,999999,DIALOG_STYLE_MSGBOX,"No Characters Available!","You have no characters available. Please loginto the UCP to create a character","Close","");
		Kick(playerid);

	} else
 	{
		new str[256];
		new cars = CharNumberOfVehicles(playerid,offset);
		format(str,sizeof(str),"~p~character info~n~ ~n~ ~y~%s~n~~w~Money: ~p~$%d~n~ ~w~Cars: ~p~%d~n~ ~n~ ~r~Press ~k~~PED_SPRINT~ to choose this char",CharacterInfo[playerid][offset][cName],CharacterInfo[playerid][offset][cMoney],cars);
		TextDrawSetString(charchoosetxt[playerid],str);
		SetPlayerSkin(playerid,CharacterInfo[playerid][offset][cSkin]);
	}

}

public ProcessSpawn(playerid)
{

	ResetPlayerWeaponsEx(playerid);
	afk_reset[playerid] = 0;
    PreloadAnimLib(playerid,"KNIFE");
    PreloadAnimLib(playerid,"MEDIC");
    PreloadAnimLib(playerid,"MISC");
    PreloadAnimLib(playerid,"PED");
    PreloadAnimLib(playerid,"SMOKING");
    PreloadAnimLib(playerid,"BEACH");
    PreloadAnimLib(playerid,"BOMBER");
    PreloadAnimLib(playerid,"FOOD");
    PreloadAnimLib(playerid,"GHANDS");
    PreloadAnimLib(playerid,"CLOTHES");
    PreloadAnimLib(playerid,"ON_LOOKERS");
    PreloadAnimLib(playerid,"POLICE");
    PreloadAnimLib(playerid,"CRACK");
    PreloadAnimLib(playerid,"SMOKING");
    PreloadAnimLib(playerid,"CAR");
    PreloadAnimLib(playerid,"PLAYIDLES");
    PreloadAnimLib(playerid,"RAPPING");
	SetPlayerColor(playerid,COLOR_WHITE);
	SetPlayerDrunkLevel(playerid,0);
	in_train[playerid] = -1;
	if(!character_chosen[playerid] && !IsPlayerNPC(playerid))
	{
		TextDrawHideForPlayer(playerid,logo);
	    SetPlayerColor(playerid,COLOR_TIMEOUT);
		ResetPlayerMoney(playerid);
		ResetPlayerWeaponsEx(playerid);
	    choosing_character[playerid] = true;
	    SetPlayerInterior(playerid,2);
	    SetPlayerFacingAngle(playerid,90);
	    SetPlayerCameraPos(playerid,411.1651,-17.9206,1002.4047);
		SetPlayerCameraLookAt(playerid,414.1235,-17.7988,1001.8047);
		if(!logged[playerid])
		{
			SetPlayerPos(playerid,414.1235,-17.7988,991.8047);
		}
		else
		{
		 	if(NumberOfCharacters(playerid))
	 		{
			 	SetPlayerPos(playerid,414.1235,-17.7988,1001.8047);
			 	TextDrawShowForPlayer(playerid,logintxt);
			 	TextDrawShowForPlayer(playerid,charchoosetxt[playerid]);
			 	SetPlayerVirtualWorld(playerid,(playerid + 100));
	 		}
			else
			{
				SetPlayerPos(playerid,414.1235,-17.7988,991.8047);
			}
			RefreshCharSelection(playerid,0);
		}
		TogglePlayerControllable(playerid,0);

	}
	else if(registered[playerid])
	{

		cl_DressPlayer(playerid);
		if(!AccountInfo[playerid][aJailTime])
		{

			if(AccountInfo[playerid][aTutorial])
			{

				if(CharacterInfo[playerid][active_character[playerid]][cFstyle] > 0) SetPlayerFightingStyle(playerid,CharacterInfo[playerid][active_character[playerid]][cFstyle]);
			    if(!death_mode[playerid])
				{

		 			duty[playerid] = 0;
					audio_countdown[playerid] = 10;
				    if(!aduty[playerid]) { SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cSkin]); } else { SetPlayerSkin(playerid,217); }
					SetCameraBehindPlayer(playerid);
					TextDrawHideForPlayer(playerid,logintxt);
					TextDrawHideForPlayer(playerid,charchoosetxt[playerid]);
					SetPlayerVirtualWorld(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnWorld]);
					SetPlayerInterior(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnI]);
					TogglePlayerControllable(playerid,1);
					if(CharacterInfo[playerid][active_character[playerid]][cJailTime] == 0 && !HasCell(playerid))
					{

					    if(!nascar_sys_respawn[playerid] && !derby_sys_respawn[playerid])
					    {

							SetPlayerPos(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnX],CharacterInfo[playerid][active_character[playerid]][cSpawnY],CharacterInfo[playerid][active_character[playerid]][cSpawnZ]);
						    SetPlayerInterior(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnI]);

						}
						else
						{

						    if(nascar_sys_respawn[playerid]) { OnPlayerLeaveNascar(playerid); } else { OnPlayerLeaveDerby(playerid); }

						 }

					}
					else if(CharacterInfo[playerid][active_character[playerid]][cJailTime])
					{
					    SetPlayerPos(playerid,265.0600,77.7319,1001.0391);
						SetPlayerInterior(playerid,6);
					}
					else if(HasCell(playerid))
					{
						new cell = FetchPlayerCell(playerid);
						SetPlayerPos(playerid,prison_positions[cell][0],prison_positions[cell][1],prison_positions[cell][2]);
						SetPlayerFacingAngle(playerid,prison_positions[cell][3]);
						SetPlayerInterior(playerid,18);
						prisoner[playerid] = 1;
						in_interior[playerid] = 13;
						SetPlayerVirtualWorld(playerid,VIRTUAL_WORLD_INTERIORS);
					}
					SetPlayerFacingAngle(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnR]);
					GiveSavedWeapons(playerid);
					RefreshCharacterMail(GetCharacterID(playerid));
					if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1) && CharacterInfo[playerid][active_character[playerid]][cRadioChannel] > 0) { ConnectRadio(playerid,CharacterInfo[playerid][active_character[playerid]][cRadioChannel]); }
					SetTimerEx("StopTalk", 100, false, "i", playerid);
					death_hploss[playerid] = 60;

				}
				else if(death_respawn_time[playerid])
				{

				    SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,932.6558,-1078.8148,21.2618);
					SetPlayerCameraPos(playerid,932.6558,-1078.8148,31.2618);
					SetPlayerCameraLookAt(playerid,895.2780,-1101.9867,24.7031);
					TogglePlayerControllable(playerid,0);
					GameTextForPlayer(playerid,"~r~dead",60000,1);

					SetPlayerColor(playerid,COLOR_SPEC);
					duty[playerid] = 0;
					mask[playerid] = 0;
					toolkit[playerid] = 0;
					cpr_cooldown[playerid] = 0;
					death_cooldown[playerid] = 0;

					ResetPlayerWeaponsEx(playerid);
					strdel(CharacterInfo[playerid][active_character[playerid]][cWeapons],0,strlen(CharacterInfo[playerid][active_character[playerid]][cWeapons]));
					if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 20000 && !CharacterInfo[playerid][active_character[playerid]][cHealthInsurance])
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You have paid $20000 in funeral bills.");
					    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 20000;

					}
					else if(!CharacterInfo[playerid][active_character[playerid]][cHealthInsurance])
					{

					    new str[128];
					    format(str,sizeof(str),"You have paid $%d in funeral bills.",CharacterInfo[playerid][active_character[playerid]][cMoney]);
					    SendClientMessage(playerid,COLOR_LIGHTRED,str);
					    CharacterInfo[playerid][active_character[playerid]][cMoney] = 0;

					}
					else if(CharacterInfo[playerid][active_character[playerid]][cHealthInsurance])
					{

						new str[128];
					    format(str,sizeof(str),"Your health insurance has covered you for your funeral bills. You no longer have health insurance.");
					    SendClientMessage(playerid,COLOR_LIGHTRED,str);
	                    CharacterInfo[playerid][active_character[playerid]][cHealthInsurance] = 0;

					}
					SendClientMessage(playerid,COLOR_YELLOW,"You will respawn in 60 seconds.");
					CharacterInfo[playerid][active_character[playerid]][cDeaths] ++;

				}
				else
				{

				    SetCameraBehindPlayer(playerid);
				    SetPlayerPos(playerid,death_pos[playerid][0],death_pos[playerid][1],death_pos[playerid][2]);
				    SetPlayerFacingAngle(playerid,death_pos[playerid][3]);
				    SetPlayerInterior(playerid,death_stats[playerid][0]);
				    SetPlayerVirtualWorld(playerid,death_stats[playerid][1]);
				    SetPlayerSkin(playerid,death_stats[playerid][2]);
					GameTextForPlayer(playerid,"~r~INJURED!",5000,5);
            		SetTimerEx("SetDeathAnim", 1500, false, "i", playerid);
            		ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,1,1,1,1,1);
         			SendClientMessage(playerid,COLOR_LIGHTRED,"You have been wounded. You will slowly loose health until you die, unless a medic saves you.");
         			SendClientMessage(playerid,COLOR_LIGHTRED,"You can use /giveup in 2 minutes. To end your wait.");
					SetPlayerHealth(playerid,50);
					death_hploss[playerid] = 60;
					death_cooldown[playerid] = 120;

				}

			}
			else
			{

				tutorial_stage[playerid] = 1;
				SetPlayerPos(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnX],CharacterInfo[playerid][active_character[playerid]][cSpawnY],CharacterInfo[playerid][active_character[playerid]][cSpawnZ]);
				SetPlayerInterior(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnI]);
				SetPlayerFacingAngle(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnR]);
				SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cSkin]);
				SetCameraBehindPlayer(playerid);
				SetPlayerVirtualWorld(playerid,0);
				TextDrawHideForPlayer(playerid,logintxt);
				TextDrawHideForPlayer(playerid,charchoosetxt[playerid]);
				RefreshPlayerTutorial(playerid);

			}
		}
		else
		{

			duty[playerid] = 0;
			audio_countdown[playerid] = 10;
			if(!aduty[playerid]) { SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cSkin]); } else { SetPlayerSkin(playerid,217); }
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid,logintxt);
			TextDrawHideForPlayer(playerid,charchoosetxt[playerid]);
			TogglePlayerControllable(playerid,1);
			SetPlayerPos(playerid,265.0600,77.7319,1001.0391);
			SetPlayerInterior(playerid,6);
			SetPlayerVirtualWorld(playerid,(playerid + 2000));
			SetPlayerFacingAngle(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnR]);
			GiveSavedWeapons(playerid);
			RefreshCharacterMail(GetCharacterID(playerid));
			if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1) && CharacterInfo[playerid][active_character[playerid]][cRadioChannel] > 0) { ConnectRadio(playerid,CharacterInfo[playerid][active_character[playerid]][cRadioChannel]); }
			SetTimerEx("StopTalk", 100, false, "i", playerid);
			death_hploss[playerid] = 60;

		}
	}
	else
	{

		SendClientMessageA(playerid,COLOR_LIGHTRED,"Not registered");

	}
}

public LoadStats(playerid)
{

	player_thread_inuse[playerid] = QUERY_LOGIN_STATS;
	new str[256];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,sizeof(name));
	format(str,sizeof(str),"SELECT * FROM rp_users WHERE name = '%s' LIMIT 1",name);
	mysql_query(str,player_threads[playerid],QUERY_LOGIN_STATS);

}

public SaveStats(playerid)
{

	SaveLocation(playerid);
	SaveWeapons(playerid);
	if(!strlen(CharacterInfo[playerid][active_character[playerid]][cRadioAuth])) { format(CharacterInfo[playerid][active_character[playerid]][cRadioAuth],16,"none"); }
	new str[1024];
	new Float:hp, Float:armor;
	new rankname[128];
	new radioauth[128];
	new crank[32];
	new cleanaccent[16];
	mysql_real_escape_string(CharacterInfo[playerid][active_character[playerid]][cCompanyRank],crank);
	mysql_real_escape_string(CharacterInfo[playerid][active_character[playerid]][cRankName],rankname);
	mysql_real_escape_string(CharacterInfo[playerid][active_character[playerid]][cRadioAuth],radioauth);
	mysql_real_escape_string(accent[playerid],cleanaccent);
	GetPlayerHealth(playerid,hp);
 	if(!duty[playerid]) { GetPlayerArmour(playerid,armor); } else { armor = CharacterInfo[playerid][active_character[playerid]][cArmor]; }
	if(hp < 10.0) { hp = 10.0; }
	format(str,sizeof(str),"UPDATE rp_characters SET money = '%d', spawn_x = '%f', spawn_y = '%f', spawn_z = '%f', spawn_r = '%f', spawn_i = '%d', skin = '%d', renting = '%d', faction = '%d', phone_number = '%d', weapons = '%s', bank = '%d', payday = '%d', faction_perm = '%d', rank_name = '%s', jail_time = '%d', car_lic = '%d', wep_lic = '%d', pay_time = '%d', level = '%d', exp = '%d', spawn_world = '%d'",
	CharacterInfo[playerid][active_character[playerid]][cMoney],
	CharacterInfo[playerid][active_character[playerid]][cSpawnX],
	CharacterInfo[playerid][active_character[playerid]][cSpawnY],
	CharacterInfo[playerid][active_character[playerid]][cSpawnZ],
	CharacterInfo[playerid][active_character[playerid]][cSpawnR],
	CharacterInfo[playerid][active_character[playerid]][cSpawnI],
	CharacterInfo[playerid][active_character[playerid]][cSkin],
	CharacterInfo[playerid][active_character[playerid]][cRenting],
	CharacterInfo[playerid][active_character[playerid]][cFaction],
	CharacterInfo[playerid][active_character[playerid]][cPhone],
	CharacterInfo[playerid][active_character[playerid]][cWeapons],
	CharacterInfo[playerid][active_character[playerid]][cBank],
	CharacterInfo[playerid][active_character[playerid]][cPayday],
	CharacterInfo[playerid][active_character[playerid]][cFactionPermissions],
	rankname,
	CharacterInfo[playerid][active_character[playerid]][cJailTime],
	CharacterInfo[playerid][active_character[playerid]][cCarLic],
	CharacterInfo[playerid][active_character[playerid]][cWepLic],
	CharacterInfo[playerid][active_character[playerid]][cPayTime],
	CharacterInfo[playerid][active_character[playerid]][cLevel],
	CharacterInfo[playerid][active_character[playerid]][cExp],
	CharacterInfo[playerid][active_character[playerid]][cSpawnWorld]);
	new str2[512];
	format(str2,sizeof(str2),", rc = '%d', radio_auth = '%s', job = '%d', jcool = '%d', addict = '%d', alvl = '%d', savings = '%d', fly_lic = '%d', health = '%f', armor = '%f', duplicate = '%d', employed = '%d', hotel = '%d', lic_warns = '%d', badge = '%d', ccool = '%d', deaths = '%d', hins = '%d', fstyle = '%d', comp = '%d', comp_perms = '%d', comp_rank = '%s', acc = '%s', lang = '%d', skill = '%d', skill_lvl = '%d', pmodel = '%d', bail = '%d' WHERE id = '%d' LIMIT 1",
	CharacterInfo[playerid][active_character[playerid]][cRadioChannel],
	radioauth,
	CharacterInfo[playerid][active_character[playerid]][cJob],
	CharacterInfo[playerid][active_character[playerid]][cJobCooldown],
	CharacterInfo[playerid][active_character[playerid]][cAddiction],
	CharacterInfo[playerid][active_character[playerid]][cAddictionLevel],
	CharacterInfo[playerid][active_character[playerid]][cSavings],
	CharacterInfo[playerid][active_character[playerid]][cFlyLic],
	hp,
	armor,
	CharacterInfo[playerid][active_character[playerid]][cDuplicate],
	CharacterInfo[playerid][active_character[playerid]][cEmployed],
	CharacterInfo[playerid][active_character[playerid]][cHotel],
	CharacterInfo[playerid][active_character[playerid]][cCarLicWarnings],
	CharacterInfo[playerid][active_character[playerid]][cBadge],
	CharacterInfo[playerid][active_character[playerid]][cChopCooldown],
	CharacterInfo[playerid][active_character[playerid]][cDeaths],
	CharacterInfo[playerid][active_character[playerid]][cHealthInsurance],
	CharacterInfo[playerid][active_character[playerid]][cFstyle],
	CharacterInfo[playerid][active_character[playerid]][cCompany],
	CharacterInfo[playerid][active_character[playerid]][cCompanyPerms],
	crank,
	cleanaccent,
	CharacterInfo[playerid][active_character[playerid]][cLanguage],
	CharacterInfo[playerid][active_character[playerid]][cSkill],
	CharacterInfo[playerid][active_character[playerid]][cSkillLevel],
	CharacterInfo[playerid][active_character[playerid]][cPhoneModel],
	CharacterInfo[playerid][active_character[playerid]][cBail],
	CharacterInfo[playerid][active_character[playerid]][cID]);
	strcat(str,str2);
	mysql_query(str,player_save_threads[playerid],QUERY_SAVE_PLAYER);
	format(str,sizeof(str),"UPDATE rp_users SET admin = '%d', jail_time = '%d', tutorial = '%d', assistant = '%d', last_online = NOW(), bikeperm = '%d' WHERE id = '%d'",
	AccountInfo[playerid][aAdmin],
	AccountInfo[playerid][aJailTime],
	AccountInfo[playerid][aTutorial],
	AccountInfo[playerid][aAssistant],
	AccountInfo[playerid][aBikePerm],
	AccountInfo[playerid][aID]);
	mysql_query(str,player_threads_alt[playerid]);


}

/*******Misc*********/

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

public Float:GetPosInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, a);
 	GetVehicleZAngle(vehicleid, a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

public Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1) //By Gabriel "Larcius" Cordes
{
	if (IsPlayerConnectedEx(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return 999999999.9;
}

public Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius" Cordes
{
	new Float:val = floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
	return val;
}

public Float:GetDistanceBetweenPlayers(playerid,playerid2) //By Slick (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	if(IsPlayerConnectedEx(playerid) && IsPlayerConnectedEx(playerid2) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(playerid2))
	{
		new Float:x1,Float:y1,Float:z1;
		GetPlayerPos(playerid2,x1,y1,z1);
		return GetDistanceToPoint(playerid,x1,y1,z1);
	}
	return 99999999.9;
}

public GetPlayerMileage(playerid,bool:kmm)
{
    new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return kmm ? floatround((((rtn * 100 * 1.61) / 60) / 2) / 1.609) : floatround(rtn * 100);
}

public GetPlayerSpeed(playerid,bool:kmm)
{
    new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return kmm ? floatround(((rtn * 100 * 1.61) / 1.609)) : floatround(rtn * 100);
}

stock GetVehicleNameByModel(modelid,name[],length=256) //By Gabriel "Larcius" Cordes
{
	if(modelid < 400 || modelid > 611)
	{
		modelid=612;
	}
	return format(name,length,"%s",VehicleNames[(modelid-400)]);
}


public IsAnyPlayerInVehicle(vehicleid)
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(IsPlayerInAnyVehicle(i))
	        {

	            new veh = GetPlayerVehicleID(i);
	            if(veh == vehicleid)
	            {

	                return 1;

	            }

	        }

	    }

	}
	return 0;
}

stock int_in_array( needle, array[ ], arraylength = sizeof( array ) )
{
   for( new i = 0; i < arraylength; i++ ) if( needle == array[ i ] ) return i;
   return -1;
}

stock CountChars(txt[],ch='~')
{
    new d,cnt;
    while(txt[d] != EOS)
    {
        if(txt[d] == ch) cnt++;
        d++;
    }
    return cnt;
}

stock SetPlayerFacingPlayer(playerid, facingid)
{
    new Float:Px, Float:Py, Float: Pa;
    new Float:x,Float:y,Float:z;
    GetPlayerPos(facingid,x,y,z);
    #pragma unused z
    GetPlayerPos(playerid, Px, Py, Pa);
    Pa = floatabs(atan((y-Py)/(x-Px)));
    if (x <= Px && y >= Py) Pa = floatsub(180, Pa);
    else if (x < Px && y < Py) Pa = floatadd(Pa, 180);
    else if (x >= Px && y <= Py) Pa = floatsub(360.0, Pa);
    Pa = floatsub(Pa, 90.0);
    if (Pa >= 360.0) Pa = floatsub(Pa, 360.0);
    return SetPlayerFacingAngle(playerid, Pa);
}

forward Float:GetObjectFacingPointCoords(Float:Px,Float:Py,Float:x,Float:y);
public Float:GetObjectFacingPointCoords(Float:Px,Float:Py,Float:x,Float:y)
{
	new Float: Pa;
    Pa = floatabs(atan((y-Py)/(x-Px)));
    if (x <= Px && y >= Py) Pa = floatsub(180, Pa);
    else if (x < Px && y < Py) Pa = floatadd(Pa, 180);
    else if (x >= Px && y <= Py) Pa = floatsub(360.0, Pa);
    Pa = floatsub(Pa, 90.0);
    if (Pa >= 360.0) Pa = floatsub(Pa, 360.0);
    return Pa;

}

stock IsIp(const string[])
{
	return regex_match(string,"([0-9]{1,3}).{1,9}([0-9]{1,3}).{1,9}([0-9]{1,3}).([0-9]{1,3})");
}

stock CreateBiz(Float:X, Float:Y, Float:Z)
{

	new done = 0;
	for(new i = 0; i < MAX_BIZES; i ++)
	{

	    if(!done)
	    {

		    if(BizInfo[i][bSpawnX] == 0.0 && BizInfo[i][bSpawnY] == 0.0 && BizInfo[i][bSpawnZ] == 0.0)
		    {

		        BizInfo[i][bSpawnX] = X;
		        BizInfo[i][bSpawnY] = Y;
		        BizInfo[i][bSpawnZ] = Z;
				new str[256];
				if(BizInfo[i][bOwner] == 0)
				{

				    format(str,sizeof(str),"Business Information\n%s\n\nPrice: $%d\nThis business is for sale!\nUse /biz for a list of available actions",BizInfo[i][bName],BizInfo[i][bPrice]);

				}
				else
				{

					format(str,sizeof(str),"Business Information\n%s\n\nOwner: %s\nUse /enter to enter this building",BizInfo[i][bName],BizInfo[i][bOwnerName]);

				}
				BizInfo[i][bPickup] = Create3DTextLabel(str, COLOR_LIGHTBLUE, BizInfo[i][bSpawnX], BizInfo[i][bSpawnY], BizInfo[i][bSpawnZ], 30.0, 0, 0);
				stock_oldvalue[i] = BizInfo[i][bBank];
		        done = 1;

		    }

		}

	}

}

stock RemoveBiz(bizid) {

	BizInfo[bizid][bSpawnX] = 0.0;
	BizInfo[bizid][bSpawnY] = 0.0;
	BizInfo[bizid][bSpawnZ] = 0.0;
	BizInfo[bizid][bPrice] = 0;
	BizInfo[bizid][bType] = 0;
	BizInfo[bizid][bBank] = 0;
	Delete3DTextLabel(BizInfo[bizid][bPickup]);
	BizInfo[bizid][bPickup] = Create3DTextLabel("Loading..", COLOR_LIGHTBLUE, BizInfo[bizid][bSpawnX], BizInfo[bizid][bSpawnY], BizInfo[bizid][bSpawnZ], 30.0, 0, 0);

}

stock RemoveHouse(houseid) {

	HouseInfo[houseid][hSpawnX] = 0.0;
	HouseInfo[houseid][hSpawnY] = 0.0;
	HouseInfo[houseid][hSpawnZ] = 0.0;
	HouseInfo[houseid][hOwner] = 0;
	HouseInfo[houseid][hPrice] = 0;
	HouseInfo[houseid][hBank] = 0;
	Delete3DTextLabel(HouseInfo[houseid][hPickup]);
	HouseInfo[houseid][hPickup] = Create3DTextLabel("Loading...", TEAM_GROVE_COLOR, HouseInfo[houseid][hSpawnX], HouseInfo[houseid][hSpawnY], HouseInfo[houseid][hSpawnZ], 30.0, 0, 0);
	for(new i = 0; i < MAX_HOUSE_UPGRADES; i ++) {
	    HouseInfo[houseid][hUpgrades][i] = 0;
	}

}

stock CreateHouse(Float:X, Float:Y, Float:Z)
{

	new done = 0;
	for(new i = 0; i < MAX_HOUSES; i ++)
	{

	    if(!done)
	    {

		    if(HouseInfo[i][hSpawnX] == 0.0 && HouseInfo[i][hSpawnY] == 0.0 && HouseInfo[i][hSpawnZ] == 0.0)
		    {

		        HouseInfo[i][hSpawnX] = X;
		        HouseInfo[i][hSpawnY] = Y;
		        HouseInfo[i][hSpawnZ] = Z;
		        Delete3DTextLabel(HouseInfo[i][hPickup]);
		        new str[256];
				if(HouseInfo[i][hOwner] == 0)
				{

					format(str,sizeof(str),"House Information\nPrice: $%d\nThis house is for sale!\nUse /house for a list of available actions",HouseInfo[i][hPrice]);

				}
				else
				{

				    format(str,sizeof(str),"House Information\nOwner: %s\nUse /enter to enter this building",HouseInfo[i][hOwnerName]);

				}
				HouseInfo[i][hPickup] = Create3DTextLabel(str, TEAM_GROVE_COLOR, HouseInfo[i][hSpawnX], HouseInfo[i][hSpawnY], HouseInfo[i][hSpawnZ], 30.0, 0, 0);
		        done = 1;

		    }

		}

	}

}

stock ChannelAvailalbe(channel)
{

	for(new i = 0; i < MAX_RADIO; i ++)
	{

	    if(RadioInfo[i][rChannel] == channel)
	    {

	        return false;

	    }

	}
	return true;

}

stock SetChannelOwner(channel,playerid)
{

	new done = 0;
	for(new i = 0; i < MAX_RADIO; i ++)
	{

	    if(RadioInfo[i][rChannel] == 0 && !done)
	    {

	        RadioInfo[i][rChannel] = channel;
	        RadioInfo[i][rOwner] = CharacterInfo[playerid][active_character[playerid]][cID];
	        done = 1;

	    }

	}
	CreateChannel(channel);

}

stock CreateChannel(channel)
{

	new slot = FetchChannelSlot(channel);
	if(slot > -1)
	{

		new str[512];
		format(str,sizeof(str),"INSERT INTO rp_radio (channel,owning_character,password) VALUES ('%d','%d','%s')",
		RadioInfo[slot][rChannel],
		RadioInfo[slot][rOwner],
		RadioInfo[slot][rPassword]);
		mysql_query(str,slot,QUERY_RADIO_CREATE);

	}

}

stock FetchChannelSlot(channel)
{

	for(new i = 0; i < MAX_RADIO; i ++)
	{

	    if(RadioInfo[i][rChannel] == channel) return i;

	}
	return -1;

}

stock IsChannelOwner(playerid,channel)
{

	new slot = FetchChannelSlot(channel);
	if(RadioInfo[slot][rOwner] == CharacterInfo[playerid][active_character[playerid]][cID]) { return true; }
	return false;

}

stock UpdateChannel(channel)
{

	new slot = FetchChannelSlot(channel);
	new str[512];
	format(str,sizeof(str),"UPDATE rp_radio SET channel = '%d', owning_character = '%d', password = '%s' WHERE id = '%d' LIMIT 1",
	RadioInfo[slot][rChannel],
	RadioInfo[slot][rOwner],
	RadioInfo[slot][rPassword],
	RadioInfo[slot][rID]);
	mysql_query(str,QUERY_RADIO_SAVE,QUERY_RADIO_SAVE);

}

stock DeleteChannel(channel)
{

	new slot = FetchChannelSlot(channel);
	new str[256];
	format(str,sizeof(str),"DELETE FROM rp_radio WHERE id = '%d' LIMIT 1",
	RadioInfo[slot][rID]);
	mysql_query(str,QUERY_RADIO_SAVE,QUERY_RADIO_SAVE);
	RadioInfo[slot][rID] = 0;
	RadioInfo[slot][rChannel] = 0;
	RadioInfo[slot][rOwner] = 0;
	format(RadioInfo[slot][rPassword],16,"");

}

stock SendRadioTalk(playerid,talk[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1) && CharacterInfo[i][active_character[i]][cRadioChannel] == CharacterInfo[playerid][active_character[playerid]][cRadioChannel])
		    {

				SendClientMessageA(i,COLOR_PURPLE,talk);

		    }

		}

	}
	new name[MAX_PLAYER_NAME];
	GetCharacterNameEx(playerid,name);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(GetDistanceBetweenPlayers(playerid,i) < 30.0 && i != playerid)
			{

			    SendClientMessageA(i,COLOR_GRAD1,talk);

			}

	    }

	}

}

stock CheckRestartState()
{

	printf("Saved Vars: %d",saved_vars);
	printf("Player Saves: %d",active_player_saves);
	if(saved_vars == 8 && active_player_saves == 0) { SendRconCommand("exit"); }

}

stock IsValidSkin(skinid) // Creat de catre Simon.
{
    #define MAX_BAD_SKINS 14

    new badSkins[MAX_BAD_SKINS] =
    {
        3, 4, 5, 6, 8, 42, 65, 74, 86,
        119, 149, 208, 273, 289
    };

    if (skinid < 0 || skinid > 299)
            return 0;

    for (new i = 0; i < MAX_BAD_SKINS; i++)
    {
        if (skinid == badSkins[i])
        return 0;
    }
    #undef MAX_BAD_SKINS

    return 1;
}

stock ToggleGate(gate)
{

	if(object_data_status[gate] == 0)
	{

	    new Float:speed = (object_anim[gate]) ? 0.001 : 6.0;
	    new Float:offset = (object_anim[gate]) ? 0.001 : 0.0;
		MoveObject(object_data_instance[gate],object_open_data[gate][0],object_open_data[gate][1],(object_open_data[gate][2] + offset),speed,object_open_data[gate][3],object_open_data[gate][4],object_open_data[gate][5]);
		object_data_status[gate] = 1;

	}
	else
	{

        new Float:speed = (object_anim[gate]) ? 0.001 : 6.0;
        new Float:offset = (object_anim[gate]) ? 0.001 : 0.0;
		MoveObject(object_data_instance[gate],object_data[gate][0],object_data[gate][1],(object_data[gate][2] - offset),speed,object_data[gate][3],object_data[gate][4],object_data[gate][5]);
		object_data_status[gate] = 0;

	}

}

stock CharNumberOfVehicles(playerid,character)
{

	new count = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vOwner] == CharacterInfo[playerid][character][cID])
	    {

			count ++;

	    }

	}
	return count;

}

stock ShowFacMembers(playerid,factionid)
{

	new str[256];
	new name[MAX_PLAYER_NAME];
	SendClientMessage(playerid,COLOR_FACTION,"|-----Faction members online-----|");
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(CharacterInfo[i][active_character[i]][cFaction] == factionid)
			{

			    GetCharacterName(i,name);
			    format(str,sizeof(str),"%s %s",CharacterInfo[i][active_character[i]][cRankName],name);
				SendClientMessage(playerid,COLOR_FACTION,str);

			}

	    }

	}

}

stock SendTaxiRequest(playerid,msg[])
{

	new str[128];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(InTaxi(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{

				SendClientMessage(i,COLOR_GREEN,"|-----Taxi Call-----|");
				format(str,sizeof(str),"Caller: %s",name);
				SendClientMessage(i,COLOR_WHITE,str);
				format(str,sizeof(str),"Details: %s",msg);
				SendClientMessage(i,COLOR_WHITE,str);
				PlayerPlaySound(i,1149,0.0,0.0,0.0);

			}

	    }

	}
	SendClientMessage(playerid,COLOR_GREEN,"Operator: Thank you for contact us. We will dispatch the first available taxi.");
	calling_taxi[playerid] = 0;

}

stock SendMechanicRequest(playerid,msg[])
{

	new str[128];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

			if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_MECHANIC)
			{

				SendClientMessage(i,COLOR_GREEN,"|-----Mechanic Call-----|");
				format(str,sizeof(str),"Caller: %s",name);
				SendClientMessage(i,COLOR_WHITE,str);
				format(str,sizeof(str),"Details: %s",msg);
				SendClientMessage(i,COLOR_WHITE,str);
				PlayerPlaySound(i,1149,0.0,0.0,0.0);

			}

	    }

	}
	SendClientMessage(playerid,COLOR_GREEN,"Operator: Thank you for calling us. We will dispatch the first available mechanic.");
	calling_mechanic[playerid] = 0;

}


stock SendTaxiNotification(playerid)
{

	if(declare_fare_cooldown[playerid] == 0)
	{
		new str[128];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		format(str,sizeof(str),"[Taxi] %s is now on taxi duty, use /call 123 to call a taxi.",name);
		SendClientMessageToAll(TEAM_GROVE_COLOR,str);
		declare_fare_cooldown[playerid] = 300;
	}

}

public IsPlayerConnectedEx(playerid)
{

	if(IsPlayerConnected(playerid) && character_chosen[playerid]) { return true; }
	return false;

}

stock ResetRenters(vehicleid)
{

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++)
	{

	    if(IsPlayerConnectedEx(playerid))
	    {

	        if(renting_car[playerid] > -1)
	        {

	            if(renting_car[playerid] == vehicleid) { renting_car[playerid] = -1; }

	        }

	    }

	}

}

stock SaveLocation(playerid)
{

	   	new Float:X, Float:Y, Float:Z;
        new interior = GetPlayerInterior(playerid);
        GetPlayerPos(playerid,X,Y,Z);
        if(AccountInfo[playerid][aJailTime] == 0 && CharacterInfo[playerid][active_character[playerid]][cJailTime] == 0 && !aduty[playerid] && !server_restarting && !death_mode[playerid] && death_respawn_time[playerid] == 0)
		{

			if(in_interior[playerid] > -1)
			{
				CharacterInfo[playerid][active_character[playerid]][cSpawnX] = InteriorInfo[in_interior[playerid]][iSpawnX];
				CharacterInfo[playerid][active_character[playerid]][cSpawnY] = InteriorInfo[in_interior[playerid]][iSpawnY];
				CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = InteriorInfo[in_interior[playerid]][iSpawnZ];
				CharacterInfo[playerid][active_character[playerid]][cSpawnI] = 0;
				CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = 0;
			}
			else if(in_house[playerid] > -1)
			{

				CharacterInfo[playerid][active_character[playerid]][cSpawnX] = HouseInfo[in_house[playerid]][hSpawnX];
				CharacterInfo[playerid][active_character[playerid]][cSpawnY] = HouseInfo[in_house[playerid]][hSpawnY];
				CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = HouseInfo[in_house[playerid]][hSpawnZ];
				CharacterInfo[playerid][active_character[playerid]][cSpawnI] = 0;
				CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = 0;

			}
			else if(in_biz[playerid] > -1)
			{

				CharacterInfo[playerid][active_character[playerid]][cSpawnX] = BizInfo[in_biz[playerid]][bSpawnX];
				CharacterInfo[playerid][active_character[playerid]][cSpawnY] = BizInfo[in_biz[playerid]][bSpawnY];
				CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = BizInfo[in_biz[playerid]][bSpawnZ];
				CharacterInfo[playerid][active_character[playerid]][cSpawnI] = 0;
				CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = 0;

			}
			else
			{
				CharacterInfo[playerid][active_character[playerid]][cSpawnX] = X;
				CharacterInfo[playerid][active_character[playerid]][cSpawnY] = Y;
				CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = Z;
				CharacterInfo[playerid][active_character[playerid]][cSpawnI] = interior;
				GetPlayerFacingAngle(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnR]);
				CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = GetPlayerVirtualWorld(playerid);
			}

		}
		else if(death_mode[playerid] || death_respawn_time[playerid] > 0) { ResetSpawnLocation(playerid); }
		if(nascar_sys_driver[playerid])
		{

 			CharacterInfo[playerid][active_character[playerid]][cSpawnX] = 2695.8445;
			CharacterInfo[playerid][active_character[playerid]][cSpawnY] = -1704.9447;
			CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = 11.8438;
			CharacterInfo[playerid][active_character[playerid]][cSpawnI] = 0;
			CharacterInfo[playerid][active_character[playerid]][cSpawnR] = 0.0;
			CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = 0;

		}

}

stock SendAssistantNote(playerid,msg[])
{

	new str[256];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"[Assistance] %s (%d): %s",name,playerid,msg);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(AccountInfo[i][aAssistant] || AccountInfo[i][aAdmin])
	        {

	            SendClientMessage(i,COLOR_LIGHTBLUE,str);

	        }

	    }

	}

}

stock SendAssistantChat(playerid,text[])
{

	new str[256];
	format(str,sizeof(str),"[Assistant Chat] %s: %s",AccountInfo[playerid][aName],text);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(AccountInfo[i][aAssistant] || AccountInfo[i][aAdmin])
	        {

	            SendClientMessage(i,COLOR_LIGHTBLUE,str);

	        }

	    }

	}

}

stock ResetMail(playerid)
{

	for(new i = 0; i < MAX_MAIL; i ++)
	{

	    MailInfo[playerid][i][mActive] = 0;

	}

}

stock SendAdminAction(msg[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        //if(AccountInfo[i][aAdmin] || AccountInfo[i][aAssistant])
	        //{

	            SendClientMessage(i,COLOR_LIGHTRED,msg);

	        //}

	    }

	}

}

stock LoadNotes(playerid)
{

	new str[256];
	format(str,sizeof(str),"SELECT * FROM rp_notes WHERE owning_character = '%d' LIMIT %d",CharacterInfo[playerid][active_character[playerid]][cID],MAX_NOTES);
	mysql_query(str,player_threads[playerid],QUERY_LOGIN_NOTES);

}

stock FetchNextNoteSlot(playerid)
{

	for(new i = 0; i < MAX_NOTES; i ++)
	{

	    if(NoteInfo[playerid][i][nActive] == 0) { return i; }

	}
	return -1;

}

stock NoteSlotTaken(playerid,slot)
{

	if(NoteInfo[playerid][slot][nActive] == 0) { return false; }
	return true;

}

stock SaveNote(playerid,slot)
{

	new str[1024];
	format(str,sizeof(str),"UPDATE rp_notes SET text = '%s' WHERE id = '%d' LIMIT 1",NoteInfo[playerid][slot][nText],NoteInfo[playerid][slot][nID]);
	mysql_query(str,player_threads_alt[playerid],QUERY_SAVE_NOTE);

}

stock CreateNote(playerid,slot)
{

	creating_note[playerid] = slot;
	new str[1024];
	format(str,sizeof(str),"INSERT INTO rp_notes (text,owning_character) VALUES ('%s','%d')",NoteInfo[playerid][slot][nText],CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_CREATE_NOTE);

}

stock DeleteNote(playerid,slot)
{

	new str[256];
	format(str,sizeof(str),"DELETE FROM rp_notes WHERE id = '%d' LIMIT 1",NoteInfo[playerid][slot][nID]);
	mysql_query(str,player_threads_alt[playerid]);

}

stock ResetNotes(playerid)
{

	for(new i = 0; i < MAX_NOTES; i ++)
	{

	    NoteInfo[playerid][i][nActive] = 0;
	    strdel(NoteInfo[playerid][i][nText],0,strlen(NoteInfo[playerid][i][nText]));
	    NoteInfo[playerid][i][nID] = 0;

	}

}

stock GiveItem(type,instance,item,amount)
{

    new to_add = amount;
	switch(type)
	{

		case INVENTORY_TYPE_PLAYER:
		{

			if(adding_inventory[instance] == -1)
			{

				for(new i = 0; i < MAX_INVENTORY; i ++)
				{

					if(to_add > 0)
					{

						if(InventoryInfo[instance][i][inItem] == item && (InventoryInfo[instance][i][inAmount] + to_add) <= MAX_INVENTORY_SLOT)
						{

						    InventoryInfo[instance][i][inAmount] += to_add;
						    to_add = 0;
						    new itemname[256];
							GetItemName(item,itemname);
							new str[256];
							format(str,sizeof(str),"You have recieved: %d x %s",amount,itemname);
							SendClientMessage(instance,COLOR_YELLOW2,str);
							SavePlayerInventory(instance);
						    return true;

						}
						else if(InventoryInfo[instance][i][inItem] == -1)
						{

						    if(to_add <= MAX_INVENTORY_SLOT)
						    {
								InventoryInfo[instance][i][inItem] = item;
								InventoryInfo[instance][i][inAmount] = to_add;
							    to_add = 0;
							    new itemname[256];
								GetItemName(item,itemname);
								new str[256];
								format(str,sizeof(str),"You have recieved: %d x %s",amount,itemname);
								SendClientMessage(instance,COLOR_YELLOW2,str);
								SavePlayerInventory(instance);
							    return true;
							}
							else if((InventoryInfo[instance][i][inAmount] + to_add) > MAX_INVENTORY_SLOT)
							{

								new append_ammount = (MAX_INVENTORY_SLOT - InventoryInfo[instance][i][inAmount]);
							    InventoryInfo[instance][i][inItem] = item;
							    InventoryInfo[instance][i][inAmount] = append_ammount;
							    to_add -= append_ammount;
							    SavePlayerInventory(instance);

							}

						}
						else if(InventoryInfo[instance][i][inItem] == item && (InventoryInfo[instance][i][inAmount] + to_add) > MAX_INVENTORY_SLOT)
						{

                            new append_ammount = (MAX_INVENTORY_SLOT - InventoryInfo[instance][i][inAmount]);
						    InventoryInfo[instance][i][inAmount] += append_ammount;
						    to_add -= append_ammount;
						    SavePlayerInventory(instance);

						}
					}
				}
				if(to_add <= 0)
				{
                	new itemname[256];
					GetItemName(item,itemname);
					new str[256];
					format(str,sizeof(str),"You have recieved: %d x %s",amount,itemname);
					SendClientMessage(instance,COLOR_YELLOW2,str);
					return true;
			 	}

			}
			else
			{

			    SendClientMessage(instance,COLOR_LIGHTRED,"Error: Please wait 10 seconds and try again.");
			    return false;

			}

		}
		case INVENTORY_TYPE_VEHICLE:
		{

			if(adding_vinventory[instance] == -1)
			{

				for(new i = 0; i < MAX_INVENTORY; i ++)
				{

					if(VehicleInventory[instance][i][vinItem] == item && (VehicleInventory[instance][i][vinAmount] + amount) <= MAX_INVENTORY_SLOT && to_add > 0)
					{

					    VehicleInventory[instance][i][vinAmount] += amount;
					    SaveVehicleInventory(instance,i);
					    return true;

					}
					else if(VehicleInventory[instance][i][vinItem] == item && VehicleInventory[instance][i][vinAmount] < MAX_INVENTORY_SLOT && to_add > 0)
					{

					    new addon = to_add > VehicleInventory[instance][i][vinAmount] ? (to_add - VehicleInventory[instance][i][vinAmount]) : to_add;
					    VehicleInventory[instance][i][vinAmount] += addon;
					    to_add -= addon;
					    if(to_add == 0) { SaveVehicleInventory(instance,i); return true; }

					}
					else if(VehicleInventory[instance][i][vinItem] == -1 && to_add > 0)
					{

					    VehicleInventory[instance][i][vinItem] = item;
					    if(to_add > 10) { VehicleInventory[instance][i][vinAmount] = 10; to_add -= 10; } else { VehicleInventory[instance][i][vinAmount] = to_add; to_add = 0; }
					    SaveVehicleInventory(instance,i);

					}

				}
				if(to_add <= 0) { return true; }

			}
			else
			{

			    return false;

			}

		}

	}
	return false;

}


stock HasItem(type,instance,item,amount)
{

	switch(type)
	{

	    case INVENTORY_TYPE_PLAYER:
	    {

	        for(new i = 0; i < MAX_INVENTORY; i ++)
	        {

	            if(InventoryInfo[instance][i][inItem] == item && InventoryInfo[instance][i][inAmount] >= amount) { return true; }

	        }

	    }

	}
	return false;

}

stock RemoveItem(type,instance,item,amount)
{

	new to_remove = amount;
	switch(type)
	{

	    case INVENTORY_TYPE_PLAYER:
	    {

	        for(new i = 0; i < MAX_INVENTORY; i ++)
	        {

	            if(InventoryInfo[instance][i][inItem] == item && to_remove > 0)
	            {

	                if(InventoryInfo[instance][i][inAmount] <= to_remove)
	                {

	                    to_remove -= InventoryInfo[instance][i][inAmount];
	                    InventoryInfo[instance][i][inAmount] = 0;
	                    InventoryInfo[instance][i][inItem] = -1;
	                    SavePlayerInventory(instance);

	                }
	                else if(InventoryInfo[instance][i][inAmount] > to_remove)
	                {

	                    InventoryInfo[instance][i][inAmount] -= to_remove;
	                    to_remove = 0;
	                    SavePlayerInventory(instance);

	                }

	            }

	        }

	    }

	}

}

stock GetItemName(item,name[])
{

	switch(item)
	{

	    case INVENTORY_RADIO:
	    {

	        return format(name,256,"Radio");

	    }
	    case INVENTORY_DEAGLEPACK:
	    {

	        return format(name,256,"Deagle Pack");

	    }
	    case INVENTORY_MP5PACK:
	    {

	        return format(name,256,"MP5 Pack");

	    }
	    case INVENTORY_AK47PACK:
	    {

	        return format(name,256,"AK47 Pack");

	    }
	    case INVENTORY_TEC9PACK:
	    {

	        return format(name,256,"TEC9 Pack");

	    }
	    case INVENTORY_SPAZ12PACK:
	    {

	        return format(name,256,"SPAZ 12 Pack");

	    }
	    case INVENTORY_MAC10PACK:
	    {

	        return format(name,256,"MAC 10 Pack");

	    }
	    case INVENTORY_RIFLEPACK:
	    {

	        return format(name,256,"Rifle Pack");

	    }
	    case INVENTORY_SHOTGUN:
	    {

	        return format(name,256,"Shotgun Pack");

	    }
		case INVENTORY_WEEDSEED:
		{

		    return format(name,256,"Cannabis Seed");

		}
		case INVENTORY_HEROINSEED:
		{

		    return format(name,256,"Poppy Seeds");

		}
		case INVENTORY_COKESEED:
		{

			return format(name,256,"Coca Seeds");

		}
		case INVENTORY_WEED:
		{

		    return format(name,256,"Cannabis");

		}
		case INVENTORY_HEROIN:
		{

		    return format(name,256,"Heroin");

		}
		case INVENTORY_COKE:
		{

		    return format(name,256,"Cocain");

		}
		case INVENTORY_CANDY:
		{

		    return format(name,256,"Candy");

		}
		case INVENTORY_MATS:
		{

		    return format(name,256,"Raw weapons materials");

		}
		case INVENTORY_SNIPER:
		{

		    return format(name,256,"Sniper Pack");

		}
		case INVENTORY_GASCAN:
		{

			return format(name,256,"Gas Can");

		}
		case INVENTORY_BOOMBOX:
		{

		    return format(name,256,"Boom Box");

		}
		case INVENTORY_METAL:
		{

			return format(name,256,"Metal");

		}
		case INVENTORY_CARPART:
		{

		    return format(name,256,"Car Part");

		}
		case INVENTORY_FISHROD:
		{

			return format(name,256,"Fishing Rod");

		}
		case INVENTORY_FISH:
		{

		    return format(name,256,"Fish");

		}
		default:
		{

		   return format(name,256,"Nothing");

		}

	}
	return false;

}

stock ShowInventory(playerid,forplayer)
{

	new name[MAX_PLAYER_NAME];
	new sendstr[256];
	new itemname[128];
	new tmpstr[256];
	GetCharacterName(playerid,name);
	new str[128];
	format(str,sizeof(str),"|-----Inventory For: %s-----|",name);
	SendClientMessage(forplayer,COLOR_YELLOW2,str);
	new linecount = 0; new count = 1;
	for(new i = 0; i < MAX_INVENTORY; i ++)
	{

		GetItemName(InventoryInfo[playerid][i][inItem],itemname);
		format(sendstr,sizeof(sendstr),"[%d: %d x %s] ",count,InventoryInfo[playerid][i][inAmount],itemname);
		if(linecount < 5)
		{

		    strins(tmpstr,sendstr,strlen(tmpstr));
		    linecount ++;

		}
		else
		{

			SendClientMessage(forplayer,COLOR_WHITE,tmpstr);
			linecount = 0;
			strdel(tmpstr,0,strlen(tmpstr));
			strins(tmpstr,sendstr,strlen(tmpstr));

		}
		count ++;

	}
	if(linecount > 0) { SendClientMessage(forplayer,COLOR_WHITE,tmpstr); }

}

stock ResetInventory(playerid,save=false)
{

	for(new i = 0; i < MAX_INVENTORY; i ++)
	{

	    InventoryInfo[playerid][i][inItem] = -1;
	    InventoryInfo[playerid][i][inAmount] = 0;
	    InventoryInfo[playerid][i][inID] = 0;

	}
	if(save) SavePlayerInventory(playerid);

}

stock CanHaveItem(type,instance,item,amount)
{

	switch(type)
	{

		case INVENTORY_TYPE_PLAYER:
		{

		   	new to_allocate = amount;
			for(new i = 0; i < MAX_INVENTORY; i ++)
			{

				if(InventoryInfo[instance][i][inItem] == item && (InventoryInfo[instance][i][inAmount] + amount) <= MAX_INVENTORY_SLOT)
				{

				    return true;

				}
				else if(InventoryInfo[instance][i][inItem] == -1 && amount <= MAX_INVENTORY_SLOT)
				{

				    return true;

				}
				else if(InventoryInfo[instance][i][inItem] == -1)
				{

				    to_allocate -= 10;

				}

			}
			if(to_allocate <= 0) { return true; }

		}
		case INVENTORY_TYPE_VEHICLE:
		{

        	new to_allocate = amount;
			for(new i = 0; i < MAX_INVENTORY; i ++)
			{

				if(VehicleInventory[instance][i][vinItem] == item)
				{

				    to_allocate -= (MAX_INVENTORY_SLOT - VehicleInventory[instance][i][vinAmount]);

				}
				else if(VehicleInventory[instance][i][vinItem] == -1)
				{

				    to_allocate -= MAX_INVENTORY_SLOT;

				}


			}
			if(to_allocate <= 0) { return true; }

		}

	}
	return false;

}

stock SavePlayerInventory(playerid)
{

	new str[1024];
	new savestr[256];
	new tmp[32];
	for(new i = 0; i < MAX_INVENTORY; i ++)
	{

		if(i == 0)
		{

			format(tmp,sizeof(tmp),"%d=%d",InventoryInfo[playerid][i][inItem],InventoryInfo[playerid][i][inAmount]);

		}
		else
		{

		    format(tmp,sizeof(tmp),"|%d=%d",InventoryInfo[playerid][i][inItem],InventoryInfo[playerid][i][inAmount]);

		}
	    strins(savestr,tmp,strlen(savestr));

	}
	format(str,sizeof(str),"UPDATE rp_characters SET inventory = '%s' WHERE id = '%d'",savestr,CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_save_threads[playerid],QUERY_SAVE_INVENTORY);

}

stock SendGovMessage(msg[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	       SendClientMessageA(i,COLOR_LIGHTBLUE,msg);

	    }

	}

}

stock NearTowtruck(playerid)
{

	new Float:X, Float:Y, Float:Z;
	for(new i = 0; i < MAX_VEHICLES; i ++)
	{

	    if(GetVehicleModel(i) == 525)
	    {

	        GetVehiclePos(i,X,Y,Z);
	        if(IsPlayerInRangeOfPoint(playerid,10.0,X,Y,Z))
	        {

	            return true;

	        }

	    }

	}
	return false;

}

stock OpenBonnet(vehicleid)
{

	new params[7];
	GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
	SetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],1,params[5],params[6]);

}

stock EnterDeathMode(playerid)
{

	death_mode[playerid] = 1;
	GetPlayerPos(playerid,death_pos[playerid][0],death_pos[playerid][1],death_pos[playerid][2]);
	GetPlayerFacingAngle(playerid,death_pos[playerid][3]);
	death_stats[playerid][0] = GetPlayerInterior(playerid);
	death_stats[playerid][1] = GetPlayerVirtualWorld(playerid);
	death_stats[playerid][2] = GetPlayerSkin(playerid);
	death_cooldown[playerid] = 120;

}

stock ResetSpawnLocation(playerid)
{

	CharacterInfo[playerid][active_character[playerid]][cSpawnX] = 1929.0565;
	CharacterInfo[playerid][active_character[playerid]][cSpawnY] = 33.6534;
	CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = 33.9817;
	CharacterInfo[playerid][active_character[playerid]][cSpawnI] = 0;
	CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = 0;
	for(new i = 0; i < MAX_HOUSES; i ++)
	{

	    if(HouseInfo[i][hOwner] == CharacterInfo[playerid][active_character[playerid]][cID] && HouseInfo[i][hOwner] != 0)
	    {

	        CharacterInfo[playerid][active_character[playerid]][cSpawnX] = HouseInfo[i][hSpawnX];
	        CharacterInfo[playerid][active_character[playerid]][cSpawnY] = HouseInfo[i][hSpawnY];
	        CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = HouseInfo[i][hSpawnZ];

	    }
	    else if(IsRentingHouse(playerid,i))
	    {

	    	CharacterInfo[playerid][active_character[playerid]][cSpawnX] = HouseInfo[i][hSpawnX];
	        CharacterInfo[playerid][active_character[playerid]][cSpawnY] = HouseInfo[i][hSpawnY];
	        CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = HouseInfo[i][hSpawnZ];

	    }

	}

}

stock NearInjured(playerid)
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(death_mode[i])
	        {

	            if(GetDistanceBetweenPlayers(playerid,i) <= 1.25)
	            {

	                return i;

	            }

	        }

	    }

	}
	return -1;

}

stock IsMedic(playerid)
{

	/*new faction = CharacterInfo[playerid][active_character[playerid]][cFaction];
	new slot = GetFactionSlot(faction);
	if(FactionInfo[slot][fType] == FAC_TYPE_MEDIC) { return true; }
	return false;*/
	return IsLaw(playerid);

}

stock InAmbulance(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) { return false; }
	new veh = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(veh) == 416) { return true; }
	return false;

}

stock AnyoneInAmbulance(vehicleid)
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(GetPlayerVehicleID(i) == vehicleid)
	        {

	            if(GetPlayerVehicleSeat(i) == 3) { return true; }

	        }

	    }

	}
	return false;

}

stock PlantDrug(playerid,type)
{

	new slot = FetchNextDrugSlot();
	if(slot > -1)
	{

	    if(GetClosestDrug(playerid) == -1)
	    {
		    switch(type)
		    {

		        case DRUG_WEED:
		        {

		            new Float:X, Float:Y, Float:Z;
		            GetPlayerPos(playerid,X,Y,Z);
		            DrugInfo[slot][dObject] = F_CreateObject(3409,X,Y,(Z - 2.0),0.0,0.0,0.0);
	                RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEEDSEED,1);
	                SendClientMessage(playerid,COLOR_YELLOW2,"You have planted a Cannabis Seed here. Come back in a little while to collect it.");
	                DrugInfo[slot][dType] = DRUG_WEED;
	                DrugInfo[slot][dSpawnX] = X;
	                DrugInfo[slot][dSpawnY] = Y;
	                DrugInfo[slot][dSpawnZ] = Z;
	                DrugInfo[slot][dTime] = gettime();

		        }
				case DRUG_HEROIN:
				{

    		      	new Float:X, Float:Y, Float:Z;
		            GetPlayerPos(playerid,X,Y,Z);
		            DrugInfo[slot][dObject] = F_CreateObject(2895,X,Y,(Z - 1.0),0.0,0.0,0.0);
	                RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_HEROINSEED,1);
	                SendClientMessage(playerid,COLOR_YELLOW2,"You have planted a Poppy Seed here. Come back in a little while to collect it.");
	                DrugInfo[slot][dType] = DRUG_HEROIN;
	                DrugInfo[slot][dSpawnX] = X;
	                DrugInfo[slot][dSpawnY] = Y;
	                DrugInfo[slot][dSpawnZ] = Z;
	                DrugInfo[slot][dTime] = gettime();

				}
				case DRUG_COKE:
				{

    		      	new Float:X, Float:Y, Float:Z;
		            GetPlayerPos(playerid,X,Y,Z);
		            DrugInfo[slot][dObject] = F_CreateObject(2895,X,Y,(Z - 1.0),0.0,0.0,0.0);
	                RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_COKESEED,1);
	                SendClientMessage(playerid,COLOR_YELLOW2,"You have planted a Coca Seed here. Come back in a little while to collect it.");
	                DrugInfo[slot][dType] = DRUG_COKE;
	               	DrugInfo[slot][dSpawnX] = X;
	                DrugInfo[slot][dSpawnY] = Y;
	                DrugInfo[slot][dSpawnZ] = Z;
	                DrugInfo[slot][dTime] = gettime();

				}

		    }
		    F_ObjectUpdateForAll();

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are too close to another drug plant. Move further away first.");

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"No more drug slots available. Please try again later.");

	}

}

stock FetchNextDrugSlot()
{

	for(new i = 0; i < MAX_DRUGS; i ++)
	{

	    if(DrugInfo[i][dType] == 0)
	    {

	        return i;

	    }

	}
	return -1;

}

stock GetClosestDrug(playerid)
{

	new winner = -1; new windistance = 999999999;
	for(new i = 0; i < MAX_DRUGS; i ++)
	{

	    if(DrugInfo[i][dType] > 0)
	    {

			if(GetDistanceToPoint(playerid,DrugInfo[i][dSpawnX],DrugInfo[i][dSpawnY],DrugInfo[i][dSpawnZ]) < windistance && IsPlayerInRangeOfPoint(playerid,3.0,DrugInfo[i][dSpawnX],DrugInfo[i][dSpawnY],DrugInfo[i][dSpawnZ]))
			{

			    winner = i;

			}

	    }

	}
	return winner;

}

stock GatherDrug(playerid,slot)
{

	if(DrugInfo[slot][dTime] < 604800)
	{

	    switch(DrugInfo[slot][dType])
		{

	        case DRUG_WEED:
	        {

	            new amount = (random(9) + 1);
	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEED,amount))
	            {

	            	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEED,amount);
			    	if(rec)
			    	{

			    	    DrugInfo[slot][dTime] = 0;
					    DrugInfo[slot][dType] = 0;
					    F_DestroyObject(DrugInfo[slot][dObject]);
					    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);

	                }

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anything else!");

				}

	        }
	        case DRUG_HEROIN:
	        {

	            new amount = (random(4) + 1);
	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_HEROIN,amount))
	            {

	            	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_HEROIN,amount);
			    	if(rec)
			    	{

			    	    DrugInfo[slot][dTime] = 0;
					    DrugInfo[slot][dType] = 0;
					    F_DestroyObject(DrugInfo[slot][dObject]);
					    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);

	                }

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anything else!");

				}

	        }
	        case DRUG_COKE:
	        {

	            new amount = (random(4) + 1);
	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_COKE,amount))
	            {

	            	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_COKE,amount);
			    	if(rec)
			    	{

			    	    DrugInfo[slot][dTime] = 0;
					    DrugInfo[slot][dType] = 0;
					    F_DestroyObject(DrugInfo[slot][dObject]);
					    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);

	                }

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anything else!");

				}

	        }

	    }

	}
	else
	{

	    DrugInfo[slot][dTime] = 0;
	    DrugInfo[slot][dType] = 0;
	    F_DestroyObject(DrugInfo[slot][dObject]);
	    SendClientMessage(playerid,COLOR_YELLOW2,"This plant is old and useless.");
	    SendEmote(playerid,"begins gathering a nearby plant...");

	}

}

stock CreateDrugs()
{

	for(new i = 0; i < MAX_DRUGS; i ++)
	{

	    if(DrugInfo[i][dType] > 0)
	    {

	        switch(DrugInfo[i][dType])
		    {

		        case DRUG_WEED:
		        {

		            DrugInfo[i][dObject] = F_CreateObject(3409,DrugInfo[i][dSpawnX],DrugInfo[i][dSpawnY],(DrugInfo[i][dSpawnZ] - 2.0),0.0,0.0,0.0);

		        }
				case DRUG_HEROIN:
				{

		            DrugInfo[i][dObject] = F_CreateObject(2895,DrugInfo[i][dSpawnX],DrugInfo[i][dSpawnY],(DrugInfo[i][dSpawnZ] - 1.0),0.0,0.0,0.0);

				}
				case DRUG_COKE:
				{

		            DrugInfo[i][dObject] = F_CreateObject(2895,DrugInfo[i][dSpawnX],DrugInfo[i][dSpawnY],(DrugInfo[i][dSpawnZ] - 1.0),0.0,0.0,0.0);

				}

		    }

	    }

	}
	print("Drugs Created.");

}

stock SendAddictionAction(playerid)
{

	new item = random(4);
	if(item == 0)
	{

	    SendEmote(playerid,"begins nervously scratching his arm.");
	    CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] --;

	}
	else if(item == 1)
	{

	    SendEmote(playerid,"looks around nervously, rubbing his palms together.");
	    CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] --;

	}
	else if(item == 2)
	{

		SendEmote(playerid,"appears sweaty and nervous.");
		new Float:hp;
		GetPlayerHealth(playerid,hp);
		if((hp - 10) < 10) { SetPlayerHealth(playerid,10); } else { SetPlayerHealth(playerid,(hp - 10)); }
		SendClientMessage(playerid,COLOR_YELLOW,"You are loosing health due to your addiction to drugs.");
		CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] --;

	}
	else if(item == 3)
	{

		SendEmote(playerid,"looks appears dizzy.");
		new Float:hp;
		GetPlayerHealth(playerid,hp);
		if((hp - 10) < 10) { SetPlayerHealth(playerid,10); } else { SetPlayerHealth(playerid,(hp - 10)); }
		SendClientMessage(playerid,COLOR_YELLOW,"You are loosing health due to your addiction to drugs.");
		CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] --;
		new dlevel = GetPlayerDrunkLevel(playerid);
		SetPlayerDrunkLevel(playerid,(dlevel + 3000));

	}
	addiction_runtime[playerid] = (300 + random(300));

}

stock GetNextRoadblock()
{

	for(new i = 0; i < MAX_ROADBLOCKS; i ++)
	{

	    if(roadblock[i] == 0) { return i; }

	}
	return -1;

}

stock GetClosestRoadblock(playerid)
{

	new winner = -1; new windistance = 999999999;
	for(new i = 0; i < MAX_ROADBLOCKS; i ++)
	{

	    if(roadblock[i] > 0)
	    {

			if(GetDistanceToPoint(playerid,roadblock_pos[i][0],roadblock_pos[i][1],roadblock_pos[i][2]) < windistance && IsPlayerInRangeOfPoint(playerid,3.0,roadblock_pos[i][0],roadblock_pos[i][1],roadblock_pos[i][2]))
			{

			    winner = i;

			}

	    }

	}
	return winner;

}

stock InTruck(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) { return false; }
	if(GetPlayerVehicleID(playerid) == trucks[0] || GetPlayerVehicleID(playerid) == trucks[1] || GetPlayerVehicleID(playerid) == trucks[2]) { return true; }
	return false;

}

stock HasTrailer(vehicleid)
{

	if(GetVehicleTrailer(vehicleid)) { return true; }
	return false;

}

PreloadAnimLib(playerid, animlib[])
{

	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);

}

stock ShowVehicleInventory(playerid,slot)
{

	new name[MAX_PLAYER_NAME];
	new sendstr[256];
	new itemname[128];
	new tmpstr[256];
	GetCharacterName(playerid,name);
	new str[128];
	format(str,sizeof(str),"looks around the vehicle.");
	SendEmote(playerid,str);
	format(str,sizeof(str),"|-----Vehicle Inventory-----|",name);
	SendClientMessage(playerid,COLOR_YELLOW2,str);
	new linecount = 0; new count = 1;
	new wstr[256];
	new tmp[32];
	new tmp2[64];
	format(wstr,sizeof(wstr),"Weapons in vehicle: ");
	new wcount = 0;
	for(new a = 0; a < MAX_VEH_WEAPONS; a ++) { if(vehicle_weapons[slot][a] > 0 && vehicle_weapon_ammo[slot][a] > 0) { GetWeaponName(vehicle_weapons[slot][a],tmp,sizeof(tmp)); format(tmp2,sizeof(tmp2),"Slot %d: %s ",(a + 1),tmp); strins(wstr,tmp2,strlen(wstr)); wcount ++; } }
	if(wcount == 0) { strins(wstr,"None.",strlen(wstr)); }
	SendClientMessageA(playerid,COLOR_YELLOW2,wstr);
	for(new i = 0; i < MAX_INVENTORY; i ++)
	{

		GetItemName(VehicleInventory[slot][i][vinItem],itemname);
		format(sendstr,sizeof(sendstr),"[%d: %d x %s] ",count,VehicleInventory[slot][i][vinAmount],itemname);
		if(linecount < 5)
		{

		    strins(tmpstr,sendstr,strlen(tmpstr));
		    linecount ++;

		}
		else
		{

			SendClientMessage(playerid,COLOR_WHITE,tmpstr);
			linecount = 0;
			strdel(tmpstr,0,strlen(tmpstr));
			strins(tmpstr,sendstr,strlen(tmpstr));

		}
		count ++;

	}
	if(linecount > 0) { SendClientMessage(playerid,COLOR_WHITE,tmpstr); }

}

stock GetVehicleSlotFromID(id)
{

	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vID] == id) { return i; }

	}
	return -1;

}

stock SaveVehicleInventory(vehicle,slot)
{

	new str[512];
	if(VehicleInventory[vehicle][slot][vinID] > 0 && VehicleInventory[vehicle][slot][vinItem] > -1)
	{

	    format(str,sizeof(str),"UPDATE rp_vinventory SET item = '%d', amount = '%d' WHERE id = '%d' AND owning_vehicle = '%d' LIMIT 1",VehicleInventory[vehicle][slot][vinItem],VehicleInventory[vehicle][slot][vinAmount],VehicleInventory[vehicle][slot][vinID],VehicleInfo[vehicle][vID]);
	    mysql_query(str,(vehicle + 100000),QUERY_SAVE_VINVENTORY);

	}
	else if(VehicleInventory[vehicle][slot][vinID] == 0 && VehicleInventory[vehicle][slot][vinItem] > -1)
	{

		adding_vinventory[vehicle] = slot;
		format(str,sizeof(str),"INSERT INTO rp_vinventory (item,amount,owning_vehicle) VALUES ('%d','%d','%d')",VehicleInventory[vehicle][slot][vinItem],VehicleInventory[vehicle][slot][vinAmount],VehicleInfo[vehicle][vID]);
	    mysql_query(str,(vehicle + 100000),QUERY_CREATE_VINVENTORY);

	}
	else if(VehicleInventory[vehicle][slot][vinID] > 0 && VehicleInventory[vehicle][slot][vinItem] == -1)
	{

	    format(str,sizeof(str),"DELETE FROM rp_vinventory WHERE id = '%d' AND owning_vehicle = '%d' LIMIT 1",VehicleInventory[vehicle][slot][vinID],VehicleInfo[vehicle][vID]);
	    mysql_query(str,(vehicle + 100000),QUERY_DELETE_VINVENTORY);

	}

}

stock CheckAccountInuse(playerid)
{

	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,sizeof(name));
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(strcmp(AccountInfo[i][aName],name,true) == 0) { SendClientMessage(playerid,COLOR_LIGHTRED,"This account is already in use."); Kick(playerid); }

	    }

	}

}

stock GetJobName(job,name[])
{

	switch(job)
	{

	    case JOB_FARMER:
	    {

	    	return format(name,256,"Farmer");

	    }
	    case JOB_DEALER:
	    {

	        return format(name,256,"Weapons Dealer");

	    }
	    case JOB_SMUGGLE:
	    {

		    return format(name,256,"Weapons Smuggler");

	    }
	    case JOB_SWEEPER:
	    {

	    	return format(name,256,"Street Cleaner");

	    }
	    case JOB_DELIVER:
	    {

	        return format(name,256,"Delivery Man");

	    }
	    case JOB_MECHANIC:
	    {

	        return format(name,256,"Mechanic");

	    }
	    case JOB_TAXI:
	    {

	        return format(name,256,"Taxi Driver");

	    }
	    case JOB_FISH:
	    {

	        return format(name,256,"Fisherman");

	    }
	    case JOB_BUS:
	    {

	        return format(name,256,"Bus Driver");

	    }
	    case JOB_GARBAGE:
	    {

	        return format(name,256,"Garbage Man");

	    }
	    case JOB_TRUCKER:
	    {

	        return format(name,256,"Trucker");

	    }
	    case JOB_ENG:
	    {

	    	return format(name,256,"Engineer");

	    }
	    case JOB_PIZZA:
	    {

	        return format(name,256,"Pizza Boy");

	    }

	}
	return format(name,256,"None");

}

stock SaveWeapons(playerid)
{

	if(!duty[playerid])
	{
	    new weaponstr[256];
		new weapons[13][2];
		new tmp[64];
		for (new i = 0; i < 13; i++)
		{

		    GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
		    if(int_in_array(weapons[i][0],banned_weapons) == -1)
		    {

			    if(i == 0) { format(tmp,sizeof(tmp),"%d=%d",weapons[i][0],weapons[i][1]); } else { format(tmp,sizeof(tmp),"|%d=%d",weapons[i][0],weapons[i][1]); }
			    if(!duty[playerid]) { strins(weaponstr,tmp,strlen(weaponstr)); }

			}

		}
		format(CharacterInfo[playerid][active_character[playerid]][cWeapons],256,"%s",weaponstr);
	}

}

stock SendDisconnectMsg(playerid,reason)
{

	new str[256];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"[Connection] %s ",name);
	switch(reason)
	{

	    case 0:
	    {

	        strins(str,"has crashed from the server.",strlen(str));

		}
	    case 1:
	    {

	        strins(str,"has disconnected.",strlen(str));

	    }
	    case 2:
	    {

	        strins(str,"has been kicked from the server.",strlen(str));

	    }

	}
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid) || tog_con[i] == 0)
	        {

	        	SendClientMessage(i,COLOR_SPEC,str);

	        }

	    }

	}

}

stock GiveCarKey(playerid,other,slot)
{

	new cur_offset = 0; new done = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vModel] > 0)
	    {

	        if(VehicleInfo[i][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	        {

	            cur_offset ++;
	            if(cur_offset == slot)
	            {

					new name[MAX_PLAYER_NAME];
					new str[256]; new vname[128];
					GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
					GetCharacterName(other,name);
					format(str,sizeof(str),"gives %s a duplicate car key for their %s",name,vname);
					SendEmote(playerid,str);
					CharacterInfo[other][active_character[other]][cDuplicate] = VehicleInfo[i][vID];
					done = 1;

	            }

	        }

	    }

	}
	if(!done) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid vehicle slot."); }

}

stock SendErrorMsg(playerid,msg[])
{


	format(ErrorInfo[playerid][0][eMsg],80,"%s",ErrorInfo[playerid][1][eMsg]);
	ErrorInfo[playerid][0][eExpire] = ErrorInfo[playerid][1][eExpire];
	format(ErrorInfo[playerid][1][eMsg],80,"%s",ErrorInfo[playerid][2][eMsg]);
	ErrorInfo[playerid][1][eExpire] = ErrorInfo[playerid][2][eExpire];
	format(ErrorInfo[playerid][2][eMsg],80,"%s",msg);
	ErrorInfo[playerid][2][eExpire] = 11;
	PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
	RefreshErrorMsg(playerid);

}

stock RefreshErrorMsg(playerid)
{

	new sendstr[256];
	new tmp[80];
	new display = false;
	if(ErrorInfo[playerid][0][eExpire] || ErrorInfo[playerid][1][eExpire] || ErrorInfo[playerid][2][eExpire]) { display = true; }
	format(sendstr,sizeof(sendstr),"~r~");
	if(ErrorInfo[playerid][2][eExpire]) { format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][2][eMsg]); strins(sendstr,tmp,strlen(sendstr)); }
	if(ErrorInfo[playerid][1][eExpire]) { format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][1][eMsg]); strins(sendstr,tmp,strlen(sendstr)); }
	if(ErrorInfo[playerid][0][eExpire]) { format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][0][eMsg]); strins(sendstr,tmp,strlen(sendstr)); }
	TextDrawSetString(errormsg[playerid],sendstr);
	if(display) { TextDrawShowForPlayer(playerid,errormsg[playerid]); } else { TextDrawHideForPlayer(playerid,errormsg[playerid]); }

}

stock InHotel(playerid)
{

	if(in_biz[playerid] == -1) { return false; }
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_HOTEL) { return true; }
	return false;

}

stock SendBizHelpText(playerid,biztype)
{

	switch(biztype)
	{

		case BIZ_TYPE_RACES:
		{

		    SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /bet to bet on a race.");

		}
	    case BIZ_TYPE_VEHICLE, BIZ_TYPE_BOAT, BIZ_TYPE_PLANE:
	    {

	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use the arrow keys to navigate. Press your sprint key to purchase a vehicle.");

	    }
	    case BIZ_TYPE_FOOD:
	    {

	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /food to purchase food.");

	    }
	    case BIZ_TYPE_GEN:
	    {

	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /buy to purchase items from this store.");

	    }
	    case BIZ_TYPE_GUN:
	    {

	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /buy to purchase weapons from this store.");

	    }
	    case BIZ_TYPE_MAIL:
	    {

	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /mail to write a new message.");
	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /readmail to read your mail.");

	    }
	    case BIZ_TYPE_BANK:
	    {

	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /balance to check your bank balance.");
	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /withdraw to take money from your account.");
	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /deposit to put money into your account.");

	    }
	    case BIZ_TYPE_DRINK:
	    {

	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /drink to purchase a drink.");

	    }
	    case BIZ_TYPE_AD:
	    {

	        SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /(ad)vertisment to make an advertisment ($7 per character)");

		}
		case BIZ_TYPE_HOTEL:
		{

		    SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /rentroom to rent a room from this hotel.");

		}
		case BIZ_TYPE_CLOTHES:
		{

		    SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /clothes buy to purchase clothes.");

		}
		case BIZ_TYPE_GYM:
		{

		    SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /train buy to train your character.");

		}
		case BIZ_TYPE_STOCK:
		{

			SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /stockmarket to view the current stocks.");

		}
		case BIZ_TYPE_LIB:
		{

		    SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /buylanguage to buy a new language.");
		    SendClientMessage(playerid,COLOR_YELLOW,"HINT: Use /buyskill to buy a new skill.");

		}

	}

}

stock InClothesStore(playerid)
{

	if(in_biz[playerid] == -1) { return false; }
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_CLOTHES) { return true; }
	return false;

}

public Float:GetPosInFrontOfCoord(&Float:x, &Float:y, Float:r, Float:distance)
{
	x += (distance * floatsin(-r, degrees));
	y += (distance * floatcos(-r, degrees));
	return r;
}

public Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    if (IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    else GetPlayerFacingAngle(playerid, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
    return a;
}

stock ResyncColors(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	ChangeVehicleColor(vehicleid,VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2]);

}

stock SendEmerCalls(playerid,type)
{

	switch(type)
	{

	    case CALL_TYPE_PD:
	    {

			mysql_query("SELECT *, DATE_FORMAT(stamp,'%H:%i:%s') AS stamp2 FROM rp_calls WHERE type = 1 AND stamp > DATE_SUB(NOW(),INTERVAL 1 HOUR) ORDER BY ID desc LIMIT 10",player_threads[playerid],QUERY_REQCALLS);

	    }

	}

}

stock GivePlayerDrink(playerid,item,uses)
{

	drinking[playerid] = uses;
	SetPlayerSpecialAction(playerid,item);

}

stock bool:IsPlayerFacingPoint(playerid, Float:PointX, Float:PointY, Float:Range = 10.0)
{
	new Float:FacingAngle, Float:Angle;
	new Float:X, Float:Y, Float:Z;
	GetPlayerFacingAngle(playerid,FacingAngle);
	GetPlayerPos(playerid, X, Y, Z);
	if(X > PointX && Y > PointY) Angle = floatabs(atan2(floatsub(PointX, X), floatsub(PointY, Y)));
	if(X > PointX && Y <= PointY) Angle = floatadd(floatabs(atan2(floatsub(Y, PointY), floatsub(PointX, X))), 270.0);
	if(X <= PointX && Y > PointY) Angle = floatadd(floatabs(atan2(floatsub(PointY, Y), floatsub(X, PointX))), 90.0);
	if(X <= PointX && Y <= PointY) Angle = floatadd(floatabs(atan2(floatsub(X, PointX), floatsub(Y, PointY))), 180.0);
	Range /= 2.0;
	return floatabs(floatsub(FacingAngle, Angle)) <= floatabs(Range) || floatabs(floatsub(floatadd(FacingAngle, 360.0), Angle)) <= floatabs(Range);
}

stock SendEmerDetails(playerid,call,type)
{

	switch(type)
	{

	    case CALL_TYPE_PD:
	    {

	        new q[256];
	        format(q,sizeof(q),"SELECT * FROM rp_calls WHERE id = '%d' LIMIT 1",call);
	        mysql_query(q,player_threads[playerid],QUERY_GETCALL);

	    }

	}

}

stock SendInterviewMessage(playerid,text[])
{

	new str[256];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"[Live Interview] %s: %s",name,text);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i) && !tog_news[i])
	    {

	        SendClientMessageA(i,COLOR_GREEN,str);

	    }

	}

}

stock PutInSleep(playerid)
{

	sleeping[playerid] = 1;
	TogglePlayerControllable(playerid,0);
	CallLocalFunction("cmd_crack","is",playerid,"1");
	CallLocalFunction("cmd_crack","is",playerid,"1");
	SendEmote(playerid,"falls to sleep");

}

stock AccountReset(playerid)
{

    AccountInfo[playerid][aID] = 0;
	AccountInfo[playerid][aAdmin] = 0;
	registered[playerid] = false;
	logged[playerid] = false;

}

stock CanModInShop(vehicleid,type)
{

	new model = GetVehicleModel(vehicleid);
	for(new i = 0; i < sizeof(mod_restrictions); i ++)
	{

		if(mod_restrictions[i][0] == model && mod_restrictions[i][1] == type) { return true; }

	}
	return false;

}

stock FormatModString(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
	new comp[14][8];
	for(new i = 0; i < 14; i ++)
	{

        format(comp[i],8,"%d",GetVehicleComponentInSlot(vehicleid,i));

	}
	new tmp[256];
	tmp = implode(comp,"|");
	format(VehicleInfo[slot][vMods],128,"%s",tmp);

}

stock AddVehicleMods(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	new tmp[14][32];
	explode(tmp,VehicleInfo[slot][vMods],"|");
	for(new i = 0; i < sizeof(tmp); i ++)
	{
	    if(strval(tmp[i]) > 0)
	    {

			AddVehicleComponent(vehicleid,strval(tmp[i]));

		}

	}
	if(VehicleInfo[slot][vPaintjob]) { ChangeVehiclePaintjob(vehicleid,(VehicleInfo[slot][vPaintjob] - 1)); }

}

stock ClearMods(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
	VehicleInfo[slot][vPaintjob] = 0;

}

stock SetPlayerScreenSaver(playerid)
{

	screen_saver[playerid] = 1;
	TextDrawShowForPlayer(playerid,logo);
	new screen = random(sizeof(cam_screens));
	SetPlayerCameraPos(playerid,cam_screens[screen][0],cam_screens[screen][1],cam_screens[screen][2]);
	SetPlayerPos(playerid,cam_screens[screen][3],cam_screens[screen][4],cam_screens[screen][5]);
	SetPlayerCameraLookAt(playerid,cam_screens[screen][6],cam_screens[screen][7],cam_screens[screen][8]);
	InterpolateCameraPos(playerid,cam_screens[screen][0],cam_screens[screen][1],cam_screens[screen][2],cam_screens[screen][6],cam_screens[screen][7],cam_screens[screen][8],20000,CAMERA_MOVE);

    screen_saver_timer[playerid] = SetTimerEx("RunNextScreenSaver", 10000, 0, "%i %i", playerid, screen);

	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	TogglePlayerControllable(playerid,0);

}


public RunNextScreenSaver(playerid,lastscreen)
{

	if(screen_saver[playerid])
	{

		new i = 0;
		new newscreen = -1;
		while(newscreen == lastscreen && i < 100 || newscreen == -1 && i < 100)
		{

		    newscreen = random(sizeof(cam_screens));
		    i ++;

		}
		SetPlayerCameraPos(playerid,cam_screens[newscreen][0],cam_screens[newscreen][1],cam_screens[newscreen][2]);
		SetPlayerPos(playerid,cam_screens[newscreen][3],cam_screens[newscreen][4],cam_screens[newscreen][5]);
		SetPlayerCameraLookAt(playerid,cam_screens[newscreen][6],cam_screens[newscreen][7],cam_screens[newscreen][8]);
		InterpolateCameraPos(playerid,cam_screens[newscreen][0],cam_screens[newscreen][1],cam_screens[newscreen][2],cam_screens[newscreen][6],cam_screens[newscreen][7],cam_screens[newscreen][8],20000,CAMERA_MOVE);
		screen_saver_timer[playerid] = SetTimerEx("RunNextScreenSaver", 10000, 0, "%i %i", playerid, newscreen);
		F_PlayerObjectUpdate(playerid,cam_screens[newscreen][0],cam_screens[newscreen][1],cam_screens[newscreen][2]);

	}

}

stock LogMysqlError(str[])
{

	new File:log;
	new d,m,y,h,i,s;
	getdate(y,m,d);
	gettime(h,i,s);
	new logstr[256];
	format(logstr,sizeof(logstr),"[%d/%d/%d - %d:%d:%d] %s\n",d,m,y,h,i,s,str);
	log = fopen("logs/mysql.log",io_append);
	fwrite(log,logstr);
	fclose(log);

}

stock LogPlayerDeath(playerid,killerid,reason)
{

	new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	if(IsPlayerConnectedEx(killerid)) GetCharacterName(killerid,oname);

	new clean_name[MAX_PLAYER_NAME], clean_oname[MAX_PLAYER_NAME];
	mysql_real_escape_string(name,clean_name);
	if(IsPlayerConnectedEx(playerid)) { mysql_real_escape_string(oname,clean_oname); } else { format(clean_oname,sizeof(clean_oname),"No-one"); }

	new str[256];
	format(str,sizeof(str),"INSERT INTO rp_death_logs (killer,victim,reason) VALUES ('%s','%s','%d')",clean_oname,clean_name,reason);

	mysql_query(str,player_threads[killerid]);

}

stock LogVehicleDeath(vehicleid,killerid)
{

	new name[MAX_PLAYER_NAME];
	new clean_oname[MAX_PLAYER_NAME];

	if(IsPlayerConnectedEx(killerid))
	{
		GetCharacterName(killerid,name);
		mysql_real_escape_string(name,clean_oname);
	}
	else
 	{
		format(clean_oname,sizeof(clean_oname),"No-one");
	}

	new str[256];
	format(str,sizeof(str),"INSERT INTO rp_vehicle_death_logs (killer,vehicle_id) VALUES ('%s','%d')",clean_oname,vehicleid);

	mysql_query(str,QUERY_VEHICLE_DEATH);

}

stock LogWeaponsTransfer(playerid,other,weaponid)
{

	new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	GetCharacterName(other,oname);

	new clean_name[MAX_PLAYER_NAME], clean_oname[MAX_PLAYER_NAME];
	mysql_real_escape_string(name,clean_name);
	mysql_real_escape_string(oname,clean_oname);

	new str[256];
	format(str,sizeof(str),"INSERT INTO rp_weapon_transfer_logs (sender,reciever,weapon) VALUES ('%s','%s','%d')",clean_name,clean_oname,weaponid);

	mysql_query(str,player_threads[playerid]);

}

stock LogVehiclePurchase(playerid,model)
{

	new logstr[256];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(logstr,sizeof(logstr),"Purchased Vehicle Model: %d",model);
    SendPurchaseLog(playerid,logstr);

}

stock LogPayment(playerid,other,amount)
{

	new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
	new cleanname[MAX_PLAYER_NAME], cleanoname[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	GetCharacterName(other,oname);
	mysql_real_escape_string(name,cleanname);
	mysql_real_escape_string(oname,cleanoname);
	new str[256];
	format(str,sizeof(str),"INSERT INTO rp_paylogs (sender,reciever,amount) VALUES ('%s','%s','%d')",cleanname,cleanoname,amount);
	mysql_query(str,player_threads[playerid]);

}

stock IsAircraft (vehicleid)
{
        switch (GetVehicleModel(vehicleid))
        {
        case
                        465,425,417,497,563,592,
                        548,577,511,512,501,447,
                        460,513,520,469,487,488,
                        553,464,476,519,593,539
                :
                {
                        return 1;
                }
        }
        return 0;
}

stock LockVehicle(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{

	    VehicleInfo[slot][vLocked] = 1;
	    new params[7];
		GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
		SetVehicleParamsEx(vehicleid,params[0],params[1],params[2],1,params[4],params[5],params[6]);

	}

}

stock UnlockVehicle(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{

		VehicleInfo[slot][vLocked] = 0;
		new params[7];
		GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
		SetVehicleParamsEx(vehicleid,params[0],params[1],params[2],0,params[4],params[5],params[6]);

	}

}

stock FetchStartupDelay(vehicleslot)
{

	if(VehicleInfo[vehicleslot][vMileage] >= 10000)
	{

	    new delay = (VehicleInfo[vehicleslot][vMileage] / 10000);
	    if(delay > 5) { delay = 5; }
	    return delay;

	}
	else
	{

	    return 0;

	}

}

stock ResetVehicles()
{

    for(new i = 0; i < MAX_VEHICLES; i ++) { startup_delay_sender[i] = -1; vehicle_radio_volume[i] = 0; }

}

stock VehicleWeaponSlotsAvailable(slot)
{

	for(new i = 0; i < MAX_VEH_WEAPONS; i ++)
	{

	    if(vehicle_weapons[slot][i] == 0) { return true; }

	}
	return false;

}

stock HouseWeaponSlotsAvailable(slot)
{

	for(new i = 0; i < MAX_HOUSE_WEAPONS; i ++)
	{

	    if(house_weapons[slot][i] == 0) { return true; }

	}
	return false;

}


stock FetchNextVehicleWeaponSlot(slot)
{

	for(new i = 0; i < MAX_VEH_WEAPONS; i ++)
	{

	    if(vehicle_weapons[slot][i] == 0) { return i; }

	}
	return -1;

}

stock FetchNextHouseWeaponSlot(slot)
{

	for(new i = 0; i < MAX_VEH_WEAPONS; i ++)
	{

	    if(house_weapons[slot][i] == 0) { return i; }

	}
	return -1;

}

stock HasWeapon(playerid,weapon)
{

	new weapons[13][2];
	for(new i = 0; i < 13; i ++)
	{

	    GetPlayerWeaponData(playerid,i,weapons[i][0],weapons[i][1]);
	    if(weapons[i][0] == weapon && weapons[i][1] > 0) { return true; }

	}
	return false;

}

stock GivePlayerWeaponEx(playerid,weaponid,ammo)
{

	new slot = GetWeaponSlot(weaponid);
	cheat_weapons[playerid][slot] = weaponid;
	GivePlayerWeapon(playerid,weaponid,ammo);
	new oldweapon = cheat_weapons[playerid][slot];
	if(weaponid == oldweapon) { cheat_ammo[playerid][slot] += ammo; } else { cheat_ammo[playerid][slot] = ammo; }

}

stock AssignVehicleWeapons(slot,str[])
{

	new wtmp[MAX_VEH_WEAPONS][64];
	explode(wtmp,str,"|");
	for(new z = 0; z < sizeof(wtmp); z ++)
	{

	    new wtmp2[2][64];
	    explode(wtmp2,wtmp[z],"=");
		vehicle_weapons[slot][z] = strval(wtmp2[0]);
		vehicle_weapon_ammo[slot][z] = strval(wtmp2[1]);

	}

}

stock AssignHouseWeapons(slot,str[])
{

	new wtmp[MAX_HOUSE_WEAPONS][64];
	explode(wtmp,str,"|");
	for(new z = 0; z < sizeof(wtmp); z ++)
	{

	    new wtmp2[2][64];
	    explode(wtmp2,wtmp[z],"=");
		house_weapons[slot][z] = strval(wtmp2[0]);
		house_weapon_ammo[slot][z] = strval(wtmp2[1]);

	}

}

stock BannedWeaponsRemoval(playerid)
{

	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	new str[128];
	format(str,sizeof(str),"[Anti Cheat] %s has been banned by SERVER reason: illegal weapons",name);
	SendAdminAction(str);
	format(str,sizeof(str),"INSERT INTO rp_bans (banee,reason,perm) VALUES ('%d','illegal weapons',1)",AccountInfo[playerid][aID]);
	mysql_query(str,player_threads_alt[playerid]);
	SendClientMessage(playerid,COLOR_LIGHTRED,"BANNED BY SERVER: ILLEGAL WEAPONS");
	Kick(playerid);

}

stock BannedModsRemoval(playerid)
{

	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	new str[128];
	format(str,sizeof(str),"[Anti Cheat] %s has been banned by SERVER reason: illegal car modifications",name);
	SendAdminAction(str);
	format(str,sizeof(str),"INSERT INTO rp_bans (banee,reason,perm) VALUES ('%d','illegal car modifications',1)",AccountInfo[playerid][aID]);
	mysql_query(str,player_threads_alt[playerid]);
	SendClientMessage(playerid,COLOR_LIGHTRED,"BANNED BY SERVER: Illegal car mods");
	Kick(playerid);

}

stock BannedRecieveModsRemoval(playerid)
{

	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	new str[128];
	format(str,sizeof(str),"[Anti Cheat] %s has been banned by SERVER reason: recieving mods when not in a mod shop",name);
	SendAdminAction(str);
	format(str,sizeof(str),"INSERT INTO rp_bans (banee,reason,perm) VALUES ('%d','recieving mods when not in a mod shop',1)",AccountInfo[playerid][aID]);
	mysql_query(str,player_threads_alt[playerid]);
	SendClientMessage(playerid,COLOR_LIGHTRED,"BANNED BY SERVER: Recieving mods when not in a mod shop");
	Kick(playerid);

}

stock BannedJetpackRemoval(playerid)
{

	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	new str[128];
	format(str,sizeof(str),"[Anti Cheat] %s has been banned by SERVER reason: jetpack",name);
	SendAdminAction(str);
	format(str,sizeof(str),"INSERT INTO rp_bans (banee,reason,perm) VALUES ('%d','jetpack',1)",AccountInfo[playerid][aID]);
	mysql_query(str,player_threads_alt[playerid]);
	SendClientMessage(playerid,COLOR_LIGHTRED,"BANNED BY SERVER: Jetpack");
	Kick(playerid);

}

stock StopPlayerRadio(playerid)
{

	if(Audio_IsClientConnected(playerid)) { Audio_Stop(playerid,radio_handle[playerid]); }

}

stock SyncRadioPassengers(vehicleid)
{

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++)
	{
	    if(IsPlayerConnectedEx(playerid))
	    {
		    if(Audio_IsClientConnected(playerid))
			{
				if(IsPlayerInVehicle(playerid,vehicleid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
					if(radio_id[playerid] != vehicle_radioid[vehicleid] && vehicle_radioid[vehicleid] > 0){

						print("Syncing Passenger Radios");
				        Audio_Stop(playerid,radio_handle[playerid]);
				        radio_handle[playerid] = Audio_PlayStreamed(playerid,vehicle_radio[vehicleid]);
				        Audio_SetVolume(playerid,radio_handle[playerid],vehicle_radio_volume[vehicleid]);
				        format(player_radio[playerid],256,"%s",vehicle_radio[vehicleid]);

					}
				}
			}
		}
	}

}

stock SyncPlayerRadioVolume(vehicleid)
{

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++)
	{
	    if(IsPlayerConnectedEx(playerid))
	    {
		    if(Audio_IsClientConnected(playerid))
			{

    			if(IsPlayerInVehicle(playerid,vehicleid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{

				    Audio_SetVolume(playerid,radio_handle[playerid],vehicle_radio_volume[vehicleid]);

				}
			}
		}
	}

}

stock SyncRadioPassengersOff(vehicleid)
{

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++)
	{
	    if(IsPlayerConnectedEx(playerid))
	    {
		    if(Audio_IsClientConnected(playerid))
			{

    			if(IsPlayerInVehicle(playerid,vehicleid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{

				    Audio_Stop(playerid,radio_handle[playerid]);

				}
			}
		}
	}

}

stock IsGov(playerid)
{

	new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
	if(slot > -1)
	{

	    if(FactionInfo[slot][fType] == FAC_TYPE_GOV) { return true; } else { return false; }

	}
	return false;

}

stock NumOfBizes(playerid)
{

	new count = 0;
	for(new i = 0; i < MAX_BIZES; i ++)
	{

	    if(BizInfo[i][bOwner] == CharacterInfo[playerid][active_character[playerid]][cID]) { count ++; }

	}
	return count;

}

stock NumOfHouses(playerid)
{

	new count = 0;
	for(new i = 0; i < MAX_HOUSES; i ++)
	{

	    if(HouseInfo[i][hOwner] == CharacterInfo[playerid][active_character[playerid]][cID]) { count ++; }

	}
	return count;

}

stock GiveSavedInventory(playerid,inventorystr[])
{

	if(strlen(inventorystr))
	{

		new tmp[MAX_INVENTORY][32];
		explode(tmp,inventorystr,"|");
		for(new i = 0; i < MAX_INVENTORY; i ++)
		{

		    new tmp2[2][32];
		    explode(tmp2,tmp[i],"=");
		    InventoryInfo[playerid][i][inItem] = strval(tmp2[0]);
		    InventoryInfo[playerid][i][inAmount] = strval(tmp2[1]);

		}

	}

}

stock LoadInventory(playerid)
{

	new str[256];
	format(str,sizeof(str),"SELECT inventory FROM rp_characters WHERE id = '%d' LIMIT 1",CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads_inventory[playerid],QUERY_LOAD_INVENTORY);

}

stock GetHouseAddress(houseid,addr[])
{

	new tmp[MAX_ZONE_NAME];
    GetZone(HouseInfo[houseid][hSpawnX], HouseInfo[houseid][hSpawnY], tmp, sizeof(tmp));
    return format(addr,256,"%d %s",(houseid + 124),tmp);

}

stock RefreshHouseTag(id)
{

    new str[256];
	if(HouseInfo[id][hOwner] == 0)
	{

	    new addr[256];
	    GetHouseAddress(id,addr);
		format(str,sizeof(str),"%s\nHouse Information\nPrice: $%d\nLevel: %d\n\nThis house is for sale!\nUse /house for a list of available actions",addr,HouseInfo[id][hPrice],HouseInfo[id][hLevel]);

	}
	else
	{

	    new addr[256];
	    GetHouseAddress(id,addr);
	    format(str,sizeof(str),"%s\nHouse Information\nOwner: %s\n\nUse /enter to enter this building",addr,HouseInfo[id][hOwnerName]);

	}
    Update3DTextLabelText(HouseInfo[id][hPickup],TEAM_GROVE_COLOR,str);

}

InPizzaBoy(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) return false;
	new veh = GetPlayerVehicleID(playerid);
	for(new i = 0; i < sizeof(pizzaboy); i ++) { if(pizzaboy[i] == veh) { return true; } }
	return false;

}

stock GetXYInDirectionOfPosition(Float:direction, &Float:x, &Float:y, Float:dist)
{
	x += (dist * floatsin(-direction, degrees));
	y += (dist * floatcos(-direction, degrees));
}

stock FetchPizzaHouse(playerid)
{

	new h = pizza_mission[playerid];
	new runs = 0;
	do{

		h = random(MAX_HOUSES);
		runs ++;

	} while(h == pizza_mission[playerid] && runs < 250 || (HouseInfo[h][hSpawnX] == 0.0 && HouseInfo[h][hSpawnY] == 0.0) && runs < 250);
	return h;

}

stock UpdatePizzaStage(playerid)
{

	if(pizza_mission_num[playerid] < 5)
	{

		new base_pay = 20;
		new distancepay = random((floatround(pizza_mission_distance[playerid]) / 10));
		if(distancepay > 100) { distancepay = 100; }
		new timepay = (60 - pizza_mission_time[playerid]);
		if(timepay < 0) { timepay = 0; }
		new pay = (base_pay + distancepay + timepay);
		new extrapay = 0;
		if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (10 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 100; }
		pay += extrapay;
		new str[256];
		format(str,sizeof(str),"~g~Pizza Delivered!~n~~y~$%d~w~ added to paycheck!",pay);
	    GameTextForPlayer(playerid,str,5000,1);
		CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
		pizza_mission_time[playerid] = 0;
		pizza_mission_distance[playerid] = 0;
		pizza_mission_num[playerid] ++;
		SendPizzaMission(playerid);

	}
	else
	{

		new base_pay = 20;
		new distancepay = random((floatround(pizza_mission_distance[playerid]) / 10));
		if(distancepay > 150) { distancepay = 150; }
		new timepay = (60 - pizza_mission_time[playerid]);
		if(timepay < 0) { timepay = 0; }
		new pay = (base_pay + distancepay + timepay);
		new extrapay = 0;
		if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (10 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 100; }
		pay += extrapay;
		new str[256];
		format(str,sizeof(str),"~g~Pizza Delivered!~n~~w~Pizza Run Complete!~n~~y~$%d~w~ added to paycheck!",pay);
	    GameTextForPlayer(playerid,str,5000,5);
		CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
		pizza_mission[playerid] = -1;
		pizza_mission_time[playerid] = 0;
		pizza_mission_distance[playerid] = 0;
		pizza_mission_num[playerid] = 0;
		DisablePlayerCheckpoint(playerid);

	}

}

stock SendPizzaMission(playerid)
{

	new h = FetchPizzaHouse(playerid);
	new str[256];
	new zone[32];
	GetZone(HouseInfo[h][hSpawnX],HouseInfo[h][hSpawnY],zone,sizeof(zone));
	format(str,sizeof(str),"Your pizza delivery is at the following address: %d %s",(h + 124),zone);
	SendClientMessage(playerid,COLOR_WHITE,str);
	SetPlayerCheckpoint(playerid,HouseInfo[h][hSpawnX],HouseInfo[h][hSpawnY],HouseInfo[h][hSpawnZ],2.0);
	pizza_mission[playerid] = h;
	pizza_mission_distance[playerid] = GetDistanceToPoint(playerid,HouseInfo[h][hSpawnX],HouseInfo[h][hSpawnY],HouseInfo[h][hSpawnZ]);

}

stock IsABike(carid)
{
    if(carid == 509||carid == 481||carid == 510||carid == 462||carid == 448||carid == 581||carid == 522||carid == 461||carid == 521||carid == 523||carid == 463||carid == 586||carid == 468||carid == 471)
    {
        return 1;
    }
    return 0;
}

stock SendTrickTreat(playerid)
{

	new treat = random(4);
	switch(treat)
	{

	    case 0:
	    {

	        SendEmote(playerid,"recieves $1 from the nice looking person at the door");
			CharacterInfo[playerid][active_character[playerid]][cMoney] += 1;
	   		trick_treat_cooldown[playerid] = 60;

	    }
	    case 1:
	    {

	    	SendEmote(playerid,"recieves $10 from the dangerous looking person at the door");
			CharacterInfo[playerid][active_character[playerid]][cMoney] += 10;
			trick_treat_cooldown[playerid] = 60;

	    }
	    case 2:
	    {

    		new amount = 1;
            if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEED,amount))
            {

            	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEED,amount);
		    	if(rec)
		    	{

					SendEmote(playerid,"recieves some weed from the scary looking person at the door.");
					trick_treat_cooldown[playerid] = 60;

                }

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anything else!");

			}

	    }
	    case 3:
	    {

	   		new amount = random(5);
            if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CANDY,amount))
            {

            	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CANDY,amount);
		    	if(rec)
		    	{

					SendEmote(playerid,"recieves some candy from the nice looking person at the door.");
					trick_treat_cooldown[playerid] = 60;

                }

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anything else!");

			}

	    }

	}

}

stock GiveCheque(sender,reciever,amount)
{

	new str[256];
	format(str,sizeof(str),"INSERT INTO rp_cheques (sender,reciever,amount) VALUES ('%d','%d','%d')",CharacterInfo[sender][active_character[sender]][cID],CharacterInfo[reciever][active_character[reciever]][cID],amount);
	mysql_query(str,QUERY_SEND_CHEQUE);
	new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
	GetCharacterName(sender,name);
	GetCharacterName(reciever,oname);
	format(str,sizeof(str),"writes out a cheque and passes it to %s",oname);
	SendEmote(sender,str);
	format(str,sizeof(str),"%s has handed you a cheque for $%d you can cash this within a bank.",name,amount);
	SendClientMessage(reciever,COLOR_YELLOW2,str);
	format(str,sizeof(str),"You have handed %s a cheque for $%d",oname,amount);
	SendClientMessage(sender,COLOR_YELLOW2,str);

}

stock CashCheque(playerid,id)
{

	new str[256];
	format(str,sizeof(str),"SELECT * FROM rp_cheques WHERE reciever = '%d' ORDER BY id ASC",CharacterInfo[playerid][active_character[playerid]][cID]);
	requesting_cheque[playerid] = id;
	mysql_query(str,player_threads[playerid],QUERY_CASH_CHEQUE);

}

stock CompleteChequeCash(id,playerid,other,amount)
{

	new connected = IsCharacterOnline(other);
	if(connected > -1)
	{

	    if(CharacterInfo[connected][active_character[connected]][cBank] >= amount)
	    {

	    	CharacterInfo[connected][active_character[connected]][cBank] -= amount;
	    	CharacterInfo[playerid][active_character[playerid]][cMoney] += amount;
			new str[128];
			new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			GetCharacterName(connected,oname);
			format(str,sizeof(str),"%s has cashed the cheque you gave them for $%d",name,amount);
			SendClientMessage(connected,COLOR_YELLOW2,str);
			format(str,sizeof(str),"You have cashed your cheque from %s for $%d",oname,amount);
			SendClientMessage(playerid,COLOR_YELLOW2,str);
			format(str,sizeof(str),"DELETE FROM rp_cheques WHERE id = '%d' LIMIT 1",id);
			mysql_query(str,player_threads[playerid]);
			requesting_cheque[playerid] = 0;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"This player does not have enough money in their bank account.");

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"The person who issued your cheque is not connected.");

	}

}

stock Float:GetDistanceToVehicle(playerid,vehicleid) //By Darkrealm (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	if (IsPlayerConnected(playerid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetVehiclePos(vehicleid,x1,y1,z1);
		return GetDistanceToPoint(playerid,x1,y1,z1);
	}
	return 9999999.0;
}

stock IsTrain(vehicle)
{

	if(GetVehicleModel(vehicle) == 570) return true;
	return false;

}

stock IsInBettingShop(playerid)
{

	if(in_biz[playerid] == -1) return false;
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_RACES) return true;
	return false;

}

stock RunRaceWinner()
{

	new winner = -1;
	new runs = 0;
	new i = 0;
	do{

	    if(i >= RACE_ENTRIES) i = 0;
		new odds = random(racing_sys_odds[i][0]);
		if(odds == 1) winner = i;
		i ++;
	    runs ++;

	} while(winner == -1 && runs <= 250);
	for(new a = 0; a < 33; a ++) { racing_sys_namesused[a] = 0; }
	if(winner > -1) { AwardRaceWinners(winner); }

}

stock AwardRaceWinners(winner)
{

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++)
	{

	    if(IsPlayerConnected(playerid))
	    {

			if(racing_sys_ticket[playerid] == winner)
			{

				new prize = (racing_sys_odds[winner][0] * (racing_sys_stake[playerid] / racing_sys_odds[winner][1]));
				new str[128];
				format(str,sizeof(str),"|-----WINNER!-----|");
				SendClientMessage(playerid,COLOR_YELLOW,str);
				format(str,sizeof(str),"You bet on: %s",racing_sys_names[winner]);
				SendClientMessage(playerid,COLOR_YELLOW,str);
				format(str,sizeof(str),"Your bet: $%d",racing_sys_stake[playerid]);
				SendClientMessage(playerid,COLOR_YELLOW,str);
				format(str,sizeof(str),"Odds: %d/%d",racing_sys_odds[winner][0],racing_sys_odds[winner][1]);
				SendClientMessage(playerid,COLOR_YELLOW,str);
				format(str,sizeof(str),"Winnings: $%d",prize);
				SendClientMessage(playerid,COLOR_YELLOW,str);
				racing_sys_stake[playerid] = 0;
				racing_sys_ticket[playerid] = -1;
				CharacterInfo[playerid][active_character[playerid]][cMoney] += prize;

			}
			else if(racing_sys_ticket[playerid] > -1)
			{

			    SendClientMessage(playerid,COLOR_YELLOW,"Bad Luck! Your horse lost the race!");
			    racing_sys_stake[playerid] = 0;
			    racing_sys_ticket[playerid] = -1;

			}

	    }

	}

}

stock ConfigBuildings(playerid)
{

	/*********************Prison Exterior****************/

	RemoveBuildingForPlayer(playerid, 3682, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1392.1563, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1390.5703, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1387.8516, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 203.9531, 1409.9141, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 199.3828, 1407.1172, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 204.6406, 1409.8516, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1404.2344, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1400.6563, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1409.0000, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 16086, 232.2891, 1434.4844, 13.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 183.0391, 1455.7500, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 198.0000, 1462.0156, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.2422, 1460.3203, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.3047, 1461.0078, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 199.5859, 1463.7266, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 181.1563, 1463.7266, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 185.9219, 1462.8750, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 202.3047, 1462.8750, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 189.5000, 1462.8750, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1451.8281, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1454.5469, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1456.1328, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1468.2109, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1464.6328, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 247.5547, 1471.0938, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1472.9766, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.8125, 1473.8281, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.1250, 1473.8906, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 16091, 289.7422, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16087, 358.6797, 1430.4531, 11.6172, 0.25);

	/*********************Airport************************/

	RemoveBuildingForPlayer(playerid, 3299, 1446.8906, 380.4922, 18.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 3299, 1404.5313, 351.6172, 18.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 3301, 1416.0313, 388.1016, 20.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3301, 1433.5781, 338.3594, 19.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3301, 1492.1719, 359.8281, 20.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3300, 1410.1484, 367.8359, 20.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3300, 1442.7109, 358.7578, 19.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3300, 1461.1016, 361.1172, 19.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 3300, 1475.1875, 350.7500, 19.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 3297, 1427.4609, 360.1094, 19.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3297, 1404.5938, 337.4141, 19.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 3297, 1457.7891, 344.2891, 19.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3297, 1476.6641, 369.1875, 20.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3298, 1417.2188, 327.6484, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 785, 1490.0469, 312.3828, 18.2891, 0.25);
	//RemoveBuildingForPlayer(playerid, 13403, 1511.2031, 410.1641, 19.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 782, 1393.8672, 325.1328, 17.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 782, 1393.8672, 325.1328, 17.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 775, 1445.1563, 237.1797, 18.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 780, 1414.6484, 303.6875, 18.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 791, 1490.0469, 312.3828, 18.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3241, 1417.2188, 327.6484, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1436.3281, 329.1484, 18.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1404.0000, 329.9922, 17.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1421.8359, 321.8594, 18.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 3284, 1433.5781, 338.3594, 19.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3242, 1404.5938, 337.4141, 19.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1451.1563, 335.2656, 18.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1455.6484, 337.1016, 18.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1439.3047, 332.2969, 18.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1396.5703, 356.4531, 19.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1395.9688, 350.9766, 18.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1398.3750, 357.0469, 17.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 766, 1389.4688, 360.5078, 18.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3242, 1427.4609, 360.1094, 19.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3283, 1404.5313, 351.6172, 18.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1409.6406, 341.8516, 17.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1415.1328, 363.4141, 18.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1427.2578, 338.9609, 18.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, 1399.9219, 341.4766, 18.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 3242, 1457.7891, 344.2891, 19.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3285, 1442.7109, 358.7578, 19.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1450.8438, 344.3516, 17.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 766, 1440.0469, 349.3359, 17.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 766, 1434.7734, 362.5781, 17.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 3283, 1446.8906, 380.4922, 18.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 3285, 1410.1484, 367.8359, 20.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1400.1484, 368.3125, 19.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1443.0625, 385.1250, 18.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1409.3906, 384.9453, 19.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3284, 1416.0313, 388.1016, 20.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3242, 1476.6641, 369.1875, 20.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3285, 1461.1016, 361.1172, 19.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 3285, 1475.1875, 350.7500, 19.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1460.1875, 354.8203, 18.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, 1472.0938, 345.3672, 18.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1470.3672, 375.9453, 18.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 782, 1466.0703, 387.6016, 18.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 13442, 1478.2656, 380.7891, 25.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3284, 1492.1719, 359.8281, 20.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1495.4531, 368.5000, 19.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1491.1953, 352.5703, 18.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1495.5547, 354.7109, 18.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1493.8438, 368.2344, 18.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 782, 1488.0000, 351.6719, 17.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1487.5859, 355.0078, 18.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1502.7422, 366.6641, 19.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1503.0547, 358.3203, 18.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1502.5938, 364.5391, 18.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1496.8828, 364.2500, 18.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1511.9219, 364.2500, 18.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1507.3672, 365.5156, 18.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 1507.4844, 360.4922, 18.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 1511.6641, 362.5000, 18.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 780, 1509.2500, 376.3203, 18.5469, 0.25);

	/***********************Dock*************************/

	RemoveBuildingForPlayer(playerid, 13483, 2113.5781, -96.7344, 0.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 12990, 2113.5781, -96.7344, 0.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.8203, -84.4063, -0.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1369, 2104.0156, -105.2656, 1.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2122.3750, -83.3828, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.5313, -82.8906, -0.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2120.5156, -79.0859, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.4688, -69.7344, 0.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.4922, -73.6172, 0.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 12991, 2161.6328, -102.4766, 1.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 923, 2160.3516, -100.8594, 2.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 933, 2159.4063, -93.9219, 1.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 933, 2158.1094, -94.1406, 2.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 933, 2155.9141, -121.0391, 0.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2117.8438, -67.8359, 0.1328, 0.25);

	/***********************Sign*************************/

	RemoveBuildingForPlayer(playerid, 3335, 2141.5078, 33.3438, 25.3516, 0.25);

	/***********************Windows**********************/

	RemoveBuildingForPlayer(playerid, 13461, 2373.2344, 29.1719, 30.3438, 0.25);

	/***********************Vehicle Dealership***********/

	RemoveBuildingForPlayer(playerid, 3327, 2441.4297, -57.0469, 28.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3326, 2391.4297, -57.0469, 28.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3329, 2370.4688, -57.4766, 26.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3328, 2412.3750, -57.4766, 26.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2354.1250, -68.5859, 28.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2354.1250, -73.3203, 28.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2356.5234, -75.6719, 28.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2364.8203, -72.7578, 26.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2361.2969, -75.6719, 28.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2366.0625, -75.6719, 28.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2370.8359, -75.6719, 28.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2375.6016, -75.6719, 28.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 732, 2372.9609, -43.4844, 25.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2354.1250, -40.6875, 27.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2354.1250, -44.9531, 27.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2354.1250, -49.6563, 27.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2354.1250, -54.3828, 28.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2354.1250, -59.1250, 28.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2354.1250, -63.8516, 28.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3314, 2370.4688, -57.4766, 26.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 773, 2384.1875, -68.6328, 25.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 3317, 2391.4297, -57.0469, 28.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 780, 2402.4219, -41.5156, 25.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3315, 2412.3750, -57.4766, 26.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 727, 2432.7734, -70.5625, 26.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2431.6563, -38.5078, 26.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3316, 2441.4297, -57.0469, 28.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2450.0000, -72.9063, 25.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 773, 2450.0859, -45.0625, 24.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2451.1797, -38.5078, 26.2266, 0.25);

	/***********************PD Building******************/

	RemoveBuildingForPlayer(playerid, 3326, 2246.4141, 0.4219, 28.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3329, 2267.3750, 0.8516, 26.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 726, 2228.4141, 21.7578, 24.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3317, 2246.4141, 0.4219, 28.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3314, 2267.3750, 0.8516, 26.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 729, 2269.0938, 14.6875, 25.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 16.8906, 27.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 12.8125, 27.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 8.7266, 27.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 4.6484, 27.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 0.5625, 27.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2253.1563, -18.2656, 26.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2256.7188, -18.2656, 26.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2264.6016, -18.2656, 26.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2261.0391, -18.2656, 26.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2275.0156, -18.2656, 26.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2268.1172, -18.2656, 26.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1419, 2283.7734, -15.7891, 27.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 3407, 2282.8750, -18.2031, 25.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 782, 2252.6484, -13.5078, 25.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 765, 2260.6172, -10.6094, 25.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1419, 2283.7734, -11.7031, 27.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 733, 2224.6719, -8.5938, 24.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1419, 2283.7734, -3.5156, 27.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1419, 2283.7734, -7.6094, 27.5938, 0.25);

	/***********************Palamino Gas Station*******************/

	RemoveBuildingForPlayer(playerid, 13252, 2256.7266, -52.0000, 25.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2235.7813, -86.1016, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 12961, 2240.0938, -77.2813, 26.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 13438, 2240.1484, -75.8750, 27.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2244.4063, -86.1016, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2244.1328, -51.9844, 25.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2241.0625, -40.2734, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2235.5234, -44.0859, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2235.2031, -53.6094, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2234.8906, -60.2969, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 2266.6172, -59.8438, 23.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2248.6250, -65.6797, 25.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 12960, 2256.7266, -52.0000, 25.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2250.7891, -40.2734, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2261.6250, -40.2734, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 2274.7344, -60.3281, 25.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2274.3125, -40.2734, 25.6953, 0.25);

	/*************************Vending*********************/

	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);

}

stock RunNextRace()
{

	print("Running new race");
	for(new i = 0; i < RACE_ENTRIES; i ++)
	{

		racing_sys_odds[i][0] = (random(10) + 2);
		racing_sys_odds[i][1] = (random(4) + 1);
		new name = -1; new tmpruns = 0;
		do{

			new tmp = random(32);
			if(!racing_sys_namesused[tmp]) name = tmp;
			tmpruns ++;

		} while(name == -1 && tmpruns < 250);
		format(racing_sys_names[i],32,"%s",racing_sys_randnames[name]);
		racing_sys_namesused[name] = 1;

	}

}

stock ShowRace(playerid)
{

	if(racing_sys_ticket[playerid] == -1)
	{

	    new str[1024];
	    for(new i = 0; i < RACE_ENTRIES; i ++)
	    {

	        new tmp[64];
	        format(tmp,sizeof(tmp),"%s [ODDS: %d/%d]\n",racing_sys_names[i],racing_sys_odds[i][0],racing_sys_odds[i][1]);
	        strins(str,tmp,strlen(str));
			ShowPlayerDialog(playerid,DIALOG_RACES,DIALOG_STYLE_LIST,"Choose your horse!",str,"Confirm","Cancel");
			TogglePlayerControllable(playerid,0);

	    }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a racing ticket for this race.");
		PlayerPlaySound(playerid,1053,0.0,0.0,0.0);

	}

}

stock ImpoundVehicle(playerid,vehicle)
{

	new slot = GetVehicleSlot(vehicle);
	new str[128], vname[64], name[MAX_PLAYER_NAME];
	GetVehicleNameByModel(GetVehicleModel(vehicle),vname);
	GetCharacterName(playerid,name);
	VehicleInfo[slot][vImpounded] = 1;
	DestroyVehicle(VehicleInfo[slot][vVehicle]);
	VehicleInfo[slot][vVehicle] = -1;
	format(str,sizeof(str),"[Faction] %s %s has impounded a %s",CharacterInfo[playerid][active_character[playerid]][cRankName],name,vname);
	SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
	format(str,sizeof(str),"You have impounded this %s. People will be able to retrieve their vehicle by coming here.");
	SendClientMessage(playerid,COLOR_YELLOW,str);

}

stock UnimpoundVehicle(playerid,offset)
{

    new cur_offset = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vModel] > 0)
	    {

	        if(VehicleInfo[i][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	        {

	            if(VehicleInfo[i][vDeathTime] == 0)
	            {

		            cur_offset ++;
		            if(cur_offset == offset)
		            {

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 4000)
						{

							if(VehicleInfo[i][vImpounded])
							{

							    VehicleInfo[i][vSpawnX] = -483.1937;
								VehicleInfo[i][vSpawnY] = -604.7293;
								VehicleInfo[i][vSpawnZ] = 17.2256;
								VehicleInfo[i][vSpawnR] = 207.8428;
								VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],-483.1937,-604.7293,17.2256,207.8428,VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1);
								if(strlen(VehicleInfo[i][vPlate])) { SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]); }
								AddVehicleMods(VehicleInfo[i][vVehicle]); ResyncColors(VehicleInfo[i][vVehicle]);
								VehicleInfo[i][vImpounded] = 0;
								CharacterInfo[playerid][active_character[playerid]][cMoney] -= 4000;
								new vname[64], str[128];
								GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
								format(str,sizeof(str),"You have unimpounded your %s for $4000, dont forget to re-park it!",vname);
								SendClientMessage(playerid,COLOR_YELLOW,str);
								PlayerPlaySound(playerid,1052,0.0,0.0,0.0);

							}
							else
							{

							    SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle is not impounded.");

							}

						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $4000");

						}

		            }

				}
				else
				{

				    SendClientMessageA(playerid,COLOR_LIGHTRED,"Your vehicle cannot be towed at this time.");

				}

	        }

	    }

	}

}

stock IsAtDriveThru(playerid)
{

	for(new i = 0; i < MAX_BIZES; i ++)
	{

		if(IsPlayerInRangeOfPoint(playerid,15.0,BizInfo[i][bVX],BizInfo[i][bVY],BizInfo[i][bVZ]))
		{

		    if(BizInfo[i][bType] == BIZ_TYPE_FOOD) return i;

		}

	}
	return -1;

}

stock InSweeper(playerid)
{

	new veh = GetPlayerVehicleID(playerid);
	new model = GetVehicleModel(veh);
	if(model == 574) return true;
	return false;

}

stock OnPlayerStartSweeper(playerid)
{

	new run = random(3);
	sweeper_sys_run[playerid] = run;
	sweeper_sys_stage[playerid] = 0;
	SetPlayerCheckpoint(playerid,sweeper_sys_runs[run][0][0],sweeper_sys_runs[run][0][1],sweeper_sys_runs[run][0][2],2.0);
	SendClientMessage(playerid,COLOR_GREEN,"You have started a sweeper job. Follow the checkpoints to complete your run.");
	SendClientMessage(playerid,COLOR_GREEN,"Use /cancelsweep to end the run.");

}

stock OnPlayerSweeperUpdate(playerid)
{

	new run = sweeper_sys_run[playerid];
	sweeper_sys_stage[playerid] ++;
	new stage = sweeper_sys_stage[playerid];
	SetPlayerCheckpoint(playerid,sweeper_sys_runs[run][stage][0],sweeper_sys_runs[run][stage][1],sweeper_sys_runs[run][stage][2],2.0);
    new pay = 10;
	pay = (pay + random(10));
	new extrapay = 0;
	if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (2 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 20; }
	pay += extrapay;
	new str[128];
	format(str,sizeof(str),"~w~area cleaned~n~~g~$%d ~w~added to paycheck",pay);
	GameTextForPlayer(playerid,str,5000,1);
	CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
	if(stage == 14)
	{

	    SendClientMessage(playerid,COLOR_GREEN,"Sweeper Run Complete. Return to the depot to do another run!");
	    sweeper_sys_run[playerid] = -1;
	    sweeper_sys_stage[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);

	}

}

stock IsCharacterOnline(character)//Returns user ID
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
		{

	        if(CharacterInfo[i][active_character[i]][cID] == character)
	        {

	            return i;

	        }

	    }

	}
	return -1;

}

stock CardSlotsAvailable(playerid,amount)
{

	new ava = 0;
	for(new i = 0; i < 10; i ++)
	{

	    if(!strlen(card_sys_dealt[playerid][i])) ava ++;

	}
	if(ava >= amount) return true;
	return false;

}

stock IsBoat(vehicleid)
{
	switch(vehicleid)
	{
		case 472, 473, 493, 495, 484, 430, 454, 453, 452, 446: return 1;
	}
	return 0;
}

stock IsVehTrain(vehicleid)
{
	switch(vehicleid)
	{
		case 590, 569, 537, 538, 570, 449: return 1;
	}
	return 0;
}

stock IsHeli(vehicleid)
{
	switch(vehicleid)
	{
		case 417, 425, 447, 469, 487, 488, 497, 548, 563: return 1;
	}
	return 0;
}

stock IsPlane(vehicleid)
{
	switch(vehicleid)
	{
		case 460, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
	}
	return 0;
}

stock FetchVehiclePlate(slot,platestr[])
{

	if(!IsVehTrain(VehicleInfo[slot][vModel]) && !IsPlane(VehicleInfo[slot][vModel]) && !IsHeli(VehicleInfo[slot][vModel]) && !IsBoat(VehicleInfo[slot][vModel]))
	{
		new vname[64];
		new temp[4];
		new temp2[4];
		new final[9];
		RandStr(temp,3);
		GetVehicleNameByModel(VehicleInfo[slot][vModel],vname,3);
		vname = strtoupper(vname);
		if(slot < 10)
		{

			format(temp2,sizeof(temp2),"00%d",(slot + 1));

		}
		else if(slot < 100)
		{

			format(temp2,sizeof(temp2),"0%d",(slot + 1));

		}
		else
	 	{

		 	format(temp2,sizeof(temp2),"%d",(slot + 1));

		}
		format(final,9,"%s%s %s",vname,temp2,temp);
	    return format(platestr,9,"%s",final);

	}
	return false;

}

stock RandStr(str[],length)
{

	new tmp[64];
	new charac[26][2] = { "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z" };
	for(new i = 0; i < length; i ++)
	{
	    strins(tmp,charac[random(26)],strlen(tmp));

	}
	return format(str,length,"%s",tmp);

}

stock strtoupper(string[])
{
        new retStr[64];
		new i, j;
        while ((j = string[i])) retStr[i++] = chrtoupper(j);
        retStr[i] = '\0';
        return retStr;
}

stock ProcessAPB(playerid,str[])
{

	new tmp2[2][64];
	new sendstr[256];
	new clean2[64];
	new clean3[64];
	explode(tmp2,str,"||");
	if(strlen(tmp2[0]) && strlen(tmp2[1]))
	{

		mysql_real_escape_string(tmp2[0],clean2);
		mysql_real_escape_string(tmp2[1],clean3);
		format(sendstr,sizeof(sendstr),"INSERT INTO rp_apb (crime,suspect) VALUES ('%s','%s')",clean3,clean2);
		mysql_query(sendstr,player_threads[playerid],QUERY_APB_CREATE);

	}
	else
	{

		SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /apb create [suspect/vehicle] || [crime]");

	}

}

stock InUtility(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) return false;
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 552) return true;
	return false;

}

stock OnPlayerStartEngineer(playerid)
{

	new run = random(sizeof(engineer_sys_stops));
	if(run != engineer_sys_run[playerid])
	{

		SetPlayerCheckpoint(playerid,engineer_sys_stops[run][0],engineer_sys_stops[run][1],engineer_sys_stops[run][2],2.0);
		engineer_sys_object[playerid] = CreatePlayerObject(playerid,18718,engineer_sys_stops[run][0],engineer_sys_stops[run][1],(engineer_sys_stops[run][2] - 2.5),0.0,0.0,0.0);
		engineer_sys_run[playerid] = run;
		SendClientMessage(playerid,COLOR_GREEN,"Your next repair job has been marked on your map.");

	}
	else
	{

		OnPlayerStartEngineer(playerid);

	}

}

stock SendPoliceNote(playerid,msg[])
{

	new str[256];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"[Non-Emergency] %s: %s",name,msg);
	calling_nonpolice[playerid] = 0;
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

		    if(IsLaw(i) && duty[i])
		    {

		        SendClientMessageA(i,COLOR_WHITE,str);

		    }

		}

	}
	SendClientMessage(playerid,COLOR_WHITE,"Your message has been sent to the LSPD.");

}

stock FetchNumNascarDrivers()
{

	new num = 0;
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(nascar_sys_driver[i]) { num ++; }

	    }

	}
	return num;

}

stock FetchNumDerbyDrivers()
{

	new num = 0;
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(derby_sys_driver[i]) { num ++; }

	    }

	}
	return num;

}

stock RefreshNascarStage(playerid)
{

	nascar_sys_stage[playerid] ++;
	if(nascar_sys_stage[playerid] >= sizeof(nascar_sys_stages)) nascar_sys_stage[playerid] = 0;
	new nextstage = (nascar_sys_stage[playerid] + 1);
	if(nextstage >= sizeof(nascar_sys_stages)) nextstage = 0;
	new type = 0;
	if(nascar_sys_stage[playerid] == 0 && nascar_sys_laps[playerid] == MAX_NASCAR_LAPS) type = 1;
 	SetPlayerRaceCheckpoint(playerid,type,nascar_sys_stages[nascar_sys_stage[playerid]][0],nascar_sys_stages[nascar_sys_stage[playerid]][1],nascar_sys_stages[nascar_sys_stage[playerid]][2],nascar_sys_stages[nextstage][0],nascar_sys_stages[nextstage][1],nascar_sys_stages[nextstage][2],10.0);

}

stock RefreshNascarLapStage(playerid)
{

	if(nascar_sys_stage[playerid] == 0 && nascar_sys_laps[playerid] != MAX_NASCAR_LAPS)
	{

	    nascar_sys_laps[playerid] ++;
	    new str[128];
	    format(str,sizeof(str),"[NASCAR] Lap %d/%d",nascar_sys_laps[playerid],MAX_NASCAR_LAPS);
	    SendClientMessage(playerid,TEAM_GROVE_COLOR,str);

	}
	else if(nascar_sys_stage[playerid] == 0 && nascar_sys_laps[playerid] == MAX_NASCAR_LAPS)
	{

	    TogglePlayerControllable(playerid,0);
	    new name[MAX_PLAYER_NAME];
	    new str[128];
	    GetCharacterName(playerid,name);
	    format(str,sizeof(str),"[NASCAR] %s has come %d place in the NASCAR race!",name,nascar_sys_place);
	    SendNascarNews(str);
		if(nascar_sys_place == 1)
		{

		    new prize = (2000 * nascar_sys_entrants);
		    if(prize < 2000) prize = 2000;
		    new str2[128];
			format(str2,sizeof(str2),"You won the NASCAR race! You have won $%d!",prize);
			SendClientMessage(playerid,TEAM_GROVE_COLOR,str2);
			CharacterInfo[playerid][active_character[playerid]][cMoney] += prize;

		}
		OnPlayerLeaveNascar(playerid);
		nascar_sys_place ++;

	}

}

stock SendNascarNews(msg[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(tog_nascar[i])
	        {

	            SendClientMessage(i,TEAM_GROVE_COLOR,msg);

	        }

	    }

	}

}

stock SendDerbyNews(msg[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(tog_derby[i])
	        {

	            SendClientMessage(i,TEAM_GROVE_COLOR,msg);

	        }

	    }

	}

}

stock OnPlayerLeaveNascar(playerid)
{

    crash_detection_disabled[playerid] = 1;
	seatbelt[playerid] = 0;
	new tmp = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid)) { RemovePlayerFromVehicle(playerid); DestroyVehicle(tmp); }
	SetPlayerInterior(playerid,0);
	SetPlayerPos(playerid,2695.8445,-1704.9447,11.8438);
	TogglePlayerControllable(playerid,1);
    nascar_sys_driver[playerid] = 0;
	nascar_sys_stage[playerid] = 0;
	nascar_sys_laps[playerid] = 1;
	nascar_sys_respawn[playerid] = 0;
    SetTimerEx("ResetCrash",1000,0,"i",playerid);
    SetTimerEx("ResetRaceCheck",1000,0,"i",playerid);
	if(FetchNumNascarDrivers() == 0)
	{

	 	nascar_sys_open = 0;
		nascar_sys_started = 0;
		nascar_sys_countdown = 0;
		nascar_sys_place = 1;
		nascar_sys_entrants = 0;
	    SendNascarNews("[NASCAR] The race at Los Santos Stadium has come to a close!");
	    SendNascarNews("[NASCAR] A big thank you to our sponser: Windy Medows Retirement Centre. We care, so you don't have to.");

	}

}

stock OnPlayerLeaveDerby(playerid)
{

    crash_detection_disabled[playerid] = 1;
	seatbelt[playerid] = 0;
	new tmp = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid)) { RemovePlayerFromVehicle(playerid); DestroyVehicle(tmp); }
	SetPlayerInterior(playerid,0);
	SetPlayerPos(playerid,2695.8445,-1704.9447,11.8438);
	TogglePlayerControllable(playerid,1);
    derby_sys_driver[playerid] = 0;
    derby_sys_respawn[playerid] = 0;
    SetTimerEx("ResetRaceCheck",1000,0,"i",playerid);
	if(FetchNumDerbyDrivers() == 1)
	{

		SendDerbyWinner();
	 	derby_sys_open = 0;
		derby_sys_started = 0;
		derby_sys_countdown = 0;
		derby_sys_entrants = 0;
	    SendDerbyNews("[DERBY] The derby at Los Santos Stadium has come to a close!");
	    SendDerbyNews("[DERBY] A big thank you to out sponser: Clukin Bell, if you enjoyed it, the chicken didn't die in vein.");

	}

}


stock SaveFactions()
{

	new str[128];
	format(str,sizeof(str),"UPDATE rp_factions SET bank = '%d' WHERE id = '%d'",FactionInfo[active_faction_save][fBank],FactionInfo[active_faction_save][fID]);
	mysql_query(str,QUERY_SAVE_FACTIONS,QUERY_SAVE_FACTIONS);

}

public VerifyInteriorPos(playerid)
{

	new inter = in_interior[playerid];
	if(inter > -1)
	{

		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid,X,Y,Z);
		if(Z < (InteriorInfo[inter][iInteriorZ] - 5.0)) { OnPlayerEnterInterior(playerid,inter); }

	}


}

stock DestroyBuyVehicles()
{

	for(new i = 0; i < sizeof(VehicleModelInfo); i ++)
	{

	    if(VehicleModelInfo[i][vmModel] >= 400) DestroyVehicle(VehicleModelInfo[i][vmVehicle]);
	    VehicleModelInfo[i][vmModel] = 0;
	    VehicleModelInfo[i][vmVehicle] = -1;

	}
	printf("Destroying Buy Vehicles");

}

public ResetCrash(playerid)
{

    crash_detection_disabled[playerid] = 0;

}

public ResetRaceCheck(playerid)
{

	DisablePlayerRaceCheckpoint(playerid);

}

stock SendSANCall(playerid,msg[])
{

	new str[128]; new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"Caller: %s",name);
	new str2[128];
	format(str2,sizeof(str2),"Phone Number: %d",CharacterInfo[playerid][active_character[playerid]][cPhone]);
	new str3[128];
	format(str3,sizeof(str3),"Message: %s",msg);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(IsNews(i))
	        {

	            SendClientMessage(i,COLOR_GREEN,"|-----SAN Call-----|");
	            SendClientMessage(i,COLOR_WHITE,str);
	            SendClientMessage(i,COLOR_WHITE,str2);
	            SendClientMessage(i,COLOR_WHITE,str3);
	            PlayerPlaySound(i,1149,0.0,0.0,0.0);

	        }

	    }

	}
	SendClientMessage(playerid,COLOR_WHITE,"Operator: Thank you for contacting SAN. Your message has been forwarded to our reporters.");

}

stock SendConnectMessage(playerid)
{

	new str[128];
	format(str,sizeof(str),"[Connection] %s has logged in",AccountInfo[playerid][aName]);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(tog_con[i] == 0)
	        {

	            SendClientMessage(i,COLOR_GRAD1,str);

	        }

	    }

	}

}

stock FindPlayerVehicle(playerid,offset)
{

	new cur_offset = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vModel] > 0)
	    {

	        if(VehicleInfo[i][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	        {

	            if(VehicleInfo[i][vDeathTime] == 0)
	            {
		            cur_offset ++;
		            if(cur_offset == offset)
		            {

	                    if(!VehicleInfo[i][vImpounded])
	                    {

							if(VehicleInfo[i][vGps])
							{

							    new Float:X, Float:Y, Float:Z;
							    GetVehiclePos(VehicleInfo[i][vVehicle],X,Y,Z);
								cp_target[playerid] = 1;
								SetPlayerCheckpoint(playerid,X,Y,Z,5.0);
								SendClientMessage(playerid,COLOR_YELLOW,"The co-ordinates have been sent to your GPS.");
								PlayerPlaySound(i,1149,0.0,0.0,0.0);
								find_cooldown[playerid] = 300;

							}
							else
							{

							    SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle does not have a GPS.");

							}

						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle is impounded. You cannot find it it.");

						}

		            }

				}
				else
				{

				    SendClientMessageA(playerid,COLOR_LIGHTRED,"Your vehicle cannot be found at this time.");

				}

	        }

	    }

	}

}

stock GetCharacterNameEx(playerid,formatme[])
{

	if(!aduty[playerid])
	{

		new mask_name = (mask_salt + playerid);
		if(mask_on[playerid]) { return format(formatme,MAX_PLAYER_NAME,"Masked Person %d",mask_name); }
		new name[MAX_PLAYER_NAME];
		new data[2][MAX_PLAYER_NAME];
		explode(data,CharacterInfo[playerid][active_character[playerid]][cName],"_");
		format(name,sizeof(name),"%s %s",data[0],data[1]);
		return format(formatme,MAX_PLAYER_NAME,"%s",name);

	}
	else
	{

	    return format(formatme,MAX_PLAYER_NAME,"%s",AccountInfo[playerid][aName]);

	}

}

stock ShowClosestBiz(playerid,biztype)
{

	new winner = -1;
	new Float:windistance = 99999.0;
	for(new i = 0; i < MAX_BIZES; i ++)
	{

	    if(BizInfo[i][bSpawnX] != 0.0 && BizInfo[i][bSpawnY] != 0.0)
	    {

	       if(BizInfo[i][bType] == biztype)
	       {

				new Float:dis = GetDistanceToPoint(playerid,BizInfo[i][bSpawnX],BizInfo[i][bSpawnY],BizInfo[i][bSpawnZ]);
				if(dis < windistance)
				{

				    winner = i;
				    windistance = dis;

				}

	       }

	    }

	}
	if(winner == -1)
	{

	    SendClientMessage(playerid,COLOR_YELLOW,"Nothing found!");

	}
	else
	{

	    cp_target[playerid] = 1;
	    SetPlayerCheckpoint(playerid,BizInfo[winner][bSpawnX],BizInfo[winner][bSpawnY],BizInfo[winner][bSpawnZ],2.5);
	    new str[128];
	    new printdistance = floatround(0.01 * windistance);
	    format(str,sizeof(str),"Closest Business: %s - %d miles away",BizInfo[winner][bName],printdistance);
	    SendClientMessage(playerid,COLOR_YELLOW,str);
	    PlayerPlaySound(playerid,1149,0.0,0.0,0.0);

	}

}

stock ShowSpeedCameras(playerid)
{

	for(new i = 0; i < sizeof(speed_cameras); i ++)
	{

	    SetPlayerMapIcon(playerid,i,speed_cameras[i][0],speed_cameras[i][1],speed_cameras[i][2],56,0);

	}

}

stock HideSpeedCameras(playerid)
{

	for(new i = 0; i < sizeof(speed_cameras); i ++)
	{

	    RemovePlayerMapIcon(playerid,i);

	}

}

stock SendDerbyWinner()
{

	new done = 0;
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

		if(IsPlayerConnectedEx(i))
		{

		    if(derby_sys_driver[i] && !done)
		    {

		        OnPlayerLeaveDerby(i);
				new str[128]; new name[MAX_PLAYER_NAME];
				GetCharacterName(i,name);
				new prize = (1000 * derby_sys_entrants);
				CharacterInfo[i][active_character[i]][cMoney] += prize;
				format(str,sizeof(str),"You have won the demolition derby! Your prize: $%d",prize);
				SendClientMessage(i,TEAM_GROVE_COLOR,str);
				format(str,sizeof(str),"[DERBY] %s has won the derby!",name);
				SendDerbyNews(str);
				done = 1;

		    }

		}

	}

}

stock IsInGym(playerid)
{

	if(in_biz[playerid] == -1) { return false; }
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_GYM) { return true; }
	return false;

}

stock GetWeaponSlot(model)
{
   	switch(model)
	{

		case 0,1: return 0;
		case 2..9: return 1;
		case 10..15: return 10;
		case 16..18,39: return 8;
		case 22..24: return 2;
		case 25..27: return 3;
		case 28,29,32: return 4;
		case 30,31: return 5;
		case 33,34: return 6;
		case 35,36,37,38: return 7;
		case 41..43: return 9;
		case 44..46: return 11;

	}
    return -1;
}

stock StoreHouseItem(playerid,slot)
{

	new house = in_house[playerid];
	if(house > -1)
	{

		if(HouseInventorySlotsAvailable(house))
		{

			if(InventoryInfo[playerid][slot][inItem] != -1 && InventoryInfo[playerid][slot][inAmount] > 0)
			{

				new hslot = FetchNextHouseInventorySlot(house);
				HouseInventoryInfo[house][hslot][hiItem] = InventoryInfo[playerid][slot][inItem];
				HouseInventoryInfo[house][hslot][hiAmount] = InventoryInfo[playerid][slot][inAmount];
				InventoryInfo[playerid][slot][inItem] = -1;
				InventoryInfo[playerid][slot][inAmount] = 0;
				new iname[256]; new str[256];
				GetItemName(HouseInventoryInfo[house][hslot][hiItem],iname);
				format(str,sizeof(str),"stores some %s in the house",iname);
				SendEmote(playerid,str);

			}
			else
			{

			    SendErrorMsg(playerid,"You have no items in that inventory slot.");

			}

		}
		else
		{

		    SendErrorMsg(playerid,"There are no house inventory slots available.");

		}

	}

}

stock FetchNextHouseInventorySlot(house)
{

	for(new i = 0; i < GetHouseInventorySlots(house); i ++)
	{

	    if(HouseInventoryInfo[house][i][hiItem] == -1) return i;

	}
	return -1;

}

stock HouseInventorySlotsAvailable(house)
{

	new count = 0;
	for(new i = 0; i < GetHouseInventorySlots(house); i ++)
	{

	    if(HouseInventoryInfo[house][i][hiItem] == -1) count ++;

	}
	return count;

}

stock ShowHouseItems(playerid)
{

	new house = in_house[playerid];
	if(house > -1)
	{

		SendClientMessage(playerid,COLOR_YELLOW2,"|-----Items in the house-----|");
		new itemlinenum = 0;
		new str[256];
		new itemstr[64];
		new itemname[256];

		new wstr[256];
		new tmp[32];
		new tmp2[64];
		format(wstr,sizeof(wstr),"Weapons in house: ");
		new wcount = 0;
		for(new a = 0; a < MAX_HOUSE_WEAPONS; a ++) { if(house_weapons[house][a] > 0 && house_weapon_ammo[house][a] > 0) { GetWeaponName(house_weapons[house][a],tmp,sizeof(tmp)); format(tmp2,sizeof(tmp2),"Slot %d: %s ",(a + 1),tmp); strins(wstr,tmp2,strlen(wstr)); wcount ++; } }
		if(wcount == 0) { strins(wstr,"None.",strlen(wstr)); }
		SendClientMessage(playerid,COLOR_YELLOW2,wstr);

	    for(new i = 0; i < GetHouseInventorySlots(in_house[playerid]); i ++)
	    {

	    	GetItemName(HouseInventoryInfo[house][i][hiItem],itemname);
	        format(itemstr,sizeof(itemstr),"[#%d: %d x %s]",(i + 1),HouseInventoryInfo[house][i][hiAmount],itemname);
	        if(itemlinenum < 4)
	        {

	        	strins(str,itemstr,strlen(str),strlen(itemstr));
	        	itemlinenum += 1;

	        }
	        else
	        {

	        	SendClientMessage(playerid,COLOR_WHITE,str);
			    strdel(str,0,strlen(str));
			    itemlinenum = 0;
  		        strins(str,itemstr,strlen(str),strlen(itemstr));

	        }

	    }

	}

}



stock LoadHouseInventory(slot)
{

	new tmp[MAX_HOUSE_INVENTORY][6];
	explode(tmp,HouseInfo[slot][hInventory],"|");
	for(new i = 0; i < MAX_HOUSE_INVENTORY; i ++)
	{

		if(strlen(tmp[i]))
		{

		    new tmp2[2][3];
		    explode(tmp2,tmp[i],"=");
            HouseInventoryInfo[slot][i][hiItem] = strval(tmp2[0]);
            HouseInventoryInfo[slot][i][hiAmount] = strval(tmp2[1]);

		}
		else
		{

		    HouseInventoryInfo[slot][i][hiItem] = -1;
		    HouseInventoryInfo[slot][i][hiAmount] = 0;

		}

	}

}

stock TakeHouseItem(playerid,slot)
{

	new house = in_house[playerid];
	if(house > -1)
	{

		for(new i = 0; i < GetHouseInventorySlots(in_house[playerid]); i ++)
		{

		    if(i == slot)
		    {

		        if(HouseInventoryInfo[house][i][hiItem] != -1 && HouseInventoryInfo[house][i][hiAmount] > 0)
		        {

					if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,HouseInventoryInfo[house][i][hiItem],HouseInventoryInfo[house][i][hiAmount]))
					{

					    new res = GiveItem(INVENTORY_TYPE_PLAYER,playerid,HouseInventoryInfo[house][i][hiItem],HouseInventoryInfo[house][i][hiAmount]);
					    if(res)
					    {

					        new str[128];
					        new itemname[256];
							GetItemName(HouseInventoryInfo[house][i][hiItem],itemname);
					        format(str,sizeof(str),"takes some %s from the house",itemname);
					        SendEmote(playerid,str);
					        HouseInventoryInfo[house][i][hiItem] = -1;
					        HouseInventoryInfo[house][i][hiAmount] = 0;

					    }
					    else
					    {

					        SendErrorMsg(playerid,"Unable to recieve item.");

					    }

					}
					else
					{

					    SendErrorMsg(playerid,"You cannot carry anymore of this item.");

					}

		        }
		        else
		        {

		            SendErrorMsg(playerid,"There is no item in this slot.");

		        }

		    }

		}

	}

}

stock ClearVehicleInventory(slot)
{

	for(new i = 0; i < MAX_INVENTORY; i ++)
	{

		VehicleInventory[slot][i][vinItem] = -1;
		VehicleInventory[slot][i][vinAmount] = 0;
		SaveVehicleInventory(slot,i);

	}
	for(new a = 0; a < MAX_VEH_WEAPONS; a ++)
	{

		vehicle_weapons[slot][a] = 0;
		vehicle_weapon_ammo[slot][a] = 0;

	}

}

stock SendTPAlert(sender,target)
{

	new str[128];
	new name[MAX_PLAYER_NAME];
	new oname[MAX_PLAYER_NAME];
	GetCharacterName(sender,name);
	GetCharacterName(target,oname);
	format(str,sizeof(str),"[TP ALERT] %s has just used a TP command on %s",name,oname);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(togtp[i] && AccountInfo[i][aAdmin] >= ADMIN_LVL_TRAIN)
	        {

				SendClientMessage(i,COLOR_FACTION,str);

	        }

	    }

	}

}

stock FormatHouseInventoryString(houseid,string[])
{

	new str[512];
	for(new i = 0; i < MAX_HOUSE_INVENTORY; i ++)
	{

	    new tmp[32];
	    if(i == 0)
		{
			format(tmp,sizeof(tmp),"%d=%d",HouseInventoryInfo[houseid][i][hiItem],HouseInventoryInfo[houseid][i][hiAmount]);
		}
		else
		{
		    format(tmp,sizeof(tmp),"|%d=%d",HouseInventoryInfo[houseid][i][hiItem],HouseInventoryInfo[houseid][i][hiAmount]);
		}
		strins(str,tmp,strlen(str),sizeof(tmp));

	}
	return format(string,sizeof(str),str);

}

stock LoadCompanies()
{

	mysql_query("SELECT * FROM rp_companies ORDER BY id",QUERY_LOAD_COMPANIES,QUERY_LOAD_COMPANIES);

}

stock SaveCompanies()
{

	if(active_company_save < MAX_COMPANIES)
	{
		new str[256];
		format(str,sizeof(str),"UPDATE rp_companies SET bank = '%d', jobs_complete = '%d', pay_rate = '%d', job_money = '%d' WHERE id = '%d' LIMIT 1",
		CompanyInfo[active_company_save][ciBank],
		CompanyInfo[active_company_save][ciJobsComplete],
		CompanyInfo[active_company_save][ciPayRate],
		CompanyInfo[active_company_save][ciJobMoney],
		CompanyInfo[active_company_save][ciID]);
		mysql_query(str,QUERY_SAVE_COMPANY,QUERY_SAVE_COMPANY);
	}
	else
	{

	    if(reloading_companies) { LoadCompanies(); reloading_companies = 0; }
	    active_company_save = 0;
	    print("Companies Saved.");
	    SendAdminBroadcast("[SERVER] Companies Successfully Saved");
	    if(server_restarting) {
	        saved_vars ++;
	        CheckRestartState();
	    }

	}

}

stock FetchCompanySlot(companyid)
{

	for(new i = 0; i < MAX_COMPANIES; i ++)
	{

	    if(CompanyInfo[i][ciID] == companyid) { return i; }

	}
	return -1;

}

stock IsCompanyVehicle(companyid,vehicleslot)
{

	if(VehicleInfo[vehicleslot][vCompany] == companyid && companyid > 0) { return true; }
	return false;

}

stock IsInCompanyJobVehicle(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) return false;
	new veh = GetPlayerVehicleID(playerid);
	new slot = GetVehicleSlot(veh);
	if(slot == -1) return false;
	new cslot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
	if(!IsCompanyVehicle(CharacterInfo[playerid][active_character[playerid]][cCompany],slot)) return false;
	switch(CompanyInfo[cslot][ciType])
	{

	    case COMP_TYPE_AIRLINE:
	    {

	        if(IsPlane(GetVehicleModel(veh)) || IsHeli(GetVehicleModel(veh))) return true;

	    }
	    case COMP_TYPE_TRUCK:
	    {

	        if(GetVehicleModel(veh) == 455 || GetVehicleModel(veh) == 456) return true;

	    }
	    case COMP_TYPE_OIL:
	    {

	        if(GetVehicleModel(veh) == 455 || GetVehicleModel(veh) == 456) return true;

	    }

	}
	return false;

}

stock RefreshFlySchoolStage(playerid)
{

	switch(fly_school_stage[playerid])
	{

	    case 0:
	    {

	        SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: Ok, lets go. Taxi to the the start of the runway and prepare for takeoff.");
	        StartEngine(in_fly_school_veh[playerid]);
	        RefreshFlyCheckpoints(playerid);
	        fly_school_stage[playerid] ++;

	    }
	    case 1:
	    {

			StopEngine(in_fly_school_veh[playerid]);
			SendClientMessage(playerid,COLOR_GREEN,"----------");
			SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: Excellent Job, now we are ready for takeoff. But before we go, I need to tell you how");
			SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: to control the aircraft during flight. There are mutliple ways to control an aircraft. The first is through bank.");
			SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: Using the AILERONS on this arcraft will tilt or bank the aircraft in the appropriate direction causing it to turn.");
			SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: The other method of control is PITCH. Pushing forward or pulling back on the stick will cause the aircraft's nose to PITCH");
			SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: up or down, making the aircraft climb or decend as appropriate. Ok, now you know about the controls, lets start the test.");
			fly_school_countdown[playerid] = 21;
			fly_school_stage[playerid] ++;
			fly_school_step[playerid] ++;
		  	RefreshFlyCheckpoints(playerid);

	    }
	    case 2:
	    {

	        StartEngine(in_fly_school_veh[playerid]);
	        SendClientMessage(playerid,COLOR_WHITE,"Flight Instructor: Take off when ready");
	        fly_school_stage[playerid] ++;
	       	RefreshFlyCheckpoints(playerid);

	    }
	    default:
	    {

	        fly_school_stage[playerid] ++;
	        fly_school_step[playerid] ++;
	       	RefreshFlyCheckpoints(playerid);

	    }

	}

}

stock RefreshFlyCheckpoints(playerid)
{

	new stage = fly_school_step[playerid];
	new type = (fly_school_step[playerid] <= 2 || fly_school_step[playerid] >= 29) ? 0 : 3;
	if(stage == 30) type = 1;
	SetPlayerRaceCheckpoint(playerid,type,checkride_points[stage][0],checkride_points[stage][1],checkride_points[stage][2],checkride_points[(stage + 1)][0],checkride_points[(stage + 1)][1],checkride_points[(stage + 1)][2],10.0);
	if(stage == 30)
	{

	    new Float:hp;
	    GetVehicleHealth(in_fly_school_veh[playerid],hp);
	    if(hp >= 950.0)
	    {

			if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 10000)
			{

			    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10000;
			    BizInfo[in_biz[playerid]][bBank] += 10000;
			    CharacterInfo[playerid][active_character[playerid]][cFlyLic] = 1;
			    SendClientMessage(playerid,COLOR_GREEN,"|-----Checkride Complete------|");
			    SendClientMessage(playerid,COLOR_WHITE,"Congratulations, you have passed your flying test.");
			    SendClientMessage(playerid,COLOR_WHITE,"You can now operate aircraft within San Andreas.");

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money to pay for your flying license.");

			}

		}
		else
		{

	  		SendClientMessage(playerid,COLOR_GREEN,"|-----Checkride Complete------|");
		    SendClientMessage(playerid,COLOR_WHITE,"Unfortunatelly, you have failed your flying test.");
		    SendClientMessage(playerid,COLOR_WHITE,"You can take your test again at any time.");
		    SendClientMessage(playerid,COLOR_WHITE,"You have not been charged for this test.");

		}
		crash_detection_disabled[playerid] = 1;
		seatbelt[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		new veh = in_fly_school_veh[playerid];
		DestroyVehicle(veh);
		SetPlayerPos(playerid,BizInfo[in_biz[playerid]][bSpawnX],BizInfo[in_biz[playerid]][bSpawnY],BizInfo[in_biz[playerid]][bSpawnZ]);
		in_biz[playerid] = -1;
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		in_fly_school_veh[playerid] = -1;
		in_fly_school[playerid] = 0;
		fly_school_step[playerid] = 0;
		fly_school_stage[playerid] = 0;
		SetTimerEx("ResetCrash",1000,0,"i",playerid);

	}

}

stock SaveVehicleDamage(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{

	    new panels,doors,lights,tires;
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		VehicleInfo[slot][vDamage][0] = panels;
		VehicleInfo[slot][vDamage][1] = doors;
		VehicleInfo[slot][vDamage][2] = lights;
		VehicleInfo[slot][vDamage][3] = tires;
		GetVehicleHealth(vehicleid,VehicleInfo[slot][vHealth]);

	}

}

stock IsVehicleStreamedInForAnyone(vehicleid)
{

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid ++)
	{

	    if(IsPlayerConnectedEx(playerid))
	    {

	        if(IsVehicleStreamedIn(vehicleid, playerid))
	        {

	            return true;

	        }

	    }

	}
	return false;

}

stock SetVehicleDamage(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	UpdateVehicleDamageStatus(vehicleid,VehicleInfo[slot][vDamage][0],VehicleInfo[slot][vDamage][1],VehicleInfo[slot][vDamage][2],VehicleInfo[slot][vDamage][3]);
	if(VehicleInfo[slot][vHealth] > 310) { SetVehicleHealth(vehicleid,VehicleInfo[slot][vHealth]); } else { SetVehicleHealth(vehicleid,310); }

}

stock ResetVehicleDamage(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{

		VehicleInfo[slot][vDamage][0] = 0;
		VehicleInfo[slot][vDamage][1] = 0;
		VehicleInfo[slot][vDamage][2] = 0;
		VehicleInfo[slot][vDamage][3] = 0;
		VehicleInfo[slot][vHealth] = 1000.0;

	}

}

stock FetchNumFlyingLearners()
{

	new num = 0;
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(in_fly_school[i]) { num ++; }

	    }

	}
	return num;

}

stock ShowCompanyMembers(playerid)
{

	new company = CharacterInfo[playerid][active_character[playerid]][cCompany];
	new str[256];
	SendClientMessage(playerid,COLOR_YELLOW2,"|-----Company Members-----|");
	if(company)
	{

		format(str,sizeof(str),"SELECT id,name,comp_rank FROM rp_characters WHERE comp = '%d'",company);
		mysql_query(str,player_threads[playerid],QUERY_COMPMEMBERS);

	}

}

stock SendCompanyJob(playerid)
{

	new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
	if(slot > -1)
	{

	    switch(CompanyInfo[slot][ciType])
	    {

	        case COMP_TYPE_OIL:
	        {

				if(NumOfRigs(CharacterInfo[playerid][active_character[playerid]][cCompany]) >= 1)
				{

					DisplayRigs(playerid);

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"Your company does not have any rigs to interact with.");

				}

	        }
			case COMP_TYPE_AIRLINE:
			{

			    company_work[playerid] = 1;
				company_work_stage[playerid] = 1;
				new pos = random(sizeof(airline_stop_points));
				SetPlayerCheckpoint(playerid,airline_stop_points[pos][0],airline_stop_points[pos][1],airline_stop_points[pos][2],10.0);
				new str[128];
				format(str,sizeof(str),"Travel to {FF0000}%s {FFFFFF}to collect your passengers.",airline_stop_names[pos]);
				SendClientMessage(playerid,COLOR_WHITE,str);

			}
			case COMP_TYPE_TRUCK:
			{

				new load = random(sizeof(load_names));
				new tmp[128];
				new str[128];
				company_work[playerid] = 1;
				company_work_stage[playerid] = 1;
				company_work_load[playerid] = load;
				new pos = random(sizeof(del_stop_points));
				SetPlayerCheckpoint(playerid,del_stop_points[pos][0],del_stop_points[pos][1],del_stop_points[pos][2],5.0);
				GetZone(del_stop_points[pos][0], del_stop_points[pos][1], tmp, sizeof(tmp));
				format(str,sizeof(str),"Move to {FF0000}%s {FFFFFF}to pick up some {FF0000}%s",tmp,load_names[load]);
				SendClientMessage(playerid,COLOR_WHITE,str);

			}

	    }

	}

}

stock OnProgressBarFinish(playerid,type)
{

	switch(type)
	{

	    case PROGRESS_BAR_FISH:
	    {

	        if(IsPlayerInRangeOfPoint(playerid,10.0,2092.2117,-73.1122,0.8910) || IsPlayerInRangeOfPoint(playerid,10.0,2065.9541,-82.5474,0.8825))
	        {

	            RemoveMiscClothing(playerid);
	            StopTalk(playerid);
	            new response = random(100);
	            if(CharacterInfo[playerid][active_character[playerid]][cSkillLevel] < 50)
	            {

					if(response > 75)
					{

						if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1))
						{

						    GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1);
					    	SendEmote(playerid,"reels in their line and picks up a fish!");
					    	IncreaseSkill(playerid,1);

					    }
					    else
					    {

					        SendClientMessage(playerid,COLOR_LIGHTRED,"You can not carry any more fish!");

					    }

					}
					else
					{

						SendEmote(playerid,"reels in their line and picks up a boot.. Looks at it for a momment, and then throws it back.");

					}

	            }
	           	else if(CharacterInfo[playerid][active_character[playerid]][cSkillLevel] >= 50 && CharacterInfo[playerid][active_character[playerid]][cSkillLevel] < 100)
	            {

					if(response > 60)
					{

					    if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1))
						{

                            GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1);
					    	SendEmote(playerid,"reels in their line and picks up a fish!");
					    	IncreaseSkill(playerid,1);

					    }
					    else
					    {

					        SendClientMessage(playerid,COLOR_LIGHTRED,"You can not carry any more fish!");

					    }

					}
					else
					{

						SendEmote(playerid,"reels in their line and picks up a rag.. Looks at it for a momment, and then throws it back.");

					}

	            }
	            else if(CharacterInfo[playerid][active_character[playerid]][cSkillLevel] >= 100 && CharacterInfo[playerid][active_character[playerid]][cSkillLevel] < 150)
	            {

					if(response > 40)
					{

					    if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1))
						{

                            GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1);
					    	SendEmote(playerid,"reels in their line and picks up a fish!");
					    	IncreaseSkill(playerid,1);

					    }
					    else
					    {

					        SendClientMessage(playerid,COLOR_LIGHTRED,"You can not carry any more fish!");

					    }

					}
					else
					{

						SendEmote(playerid,"reels in their line and picks up a peice of wood.. Looks at it for a momment, and then throws it back.");

					}

	            }
	            else if(CharacterInfo[playerid][active_character[playerid]][cSkillLevel] >= 150 && CharacterInfo[playerid][active_character[playerid]][cSkillLevel] < 200)
	            {

					if(response > 25)
					{

					    if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1))
						{

                            GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1);
					    	SendEmote(playerid,"reels in their line and picks up a fish!");
					    	IncreaseSkill(playerid,1);

					    }
					    else
					    {

					        SendClientMessage(playerid,COLOR_LIGHTRED,"You can not carry any more fish!");

					    }

					}
					else
					{

						SendEmote(playerid,"reels in their line and picks up a peice of wood.. Looks at it for a momment, and then throws it back.");

					}

	            }
	           	else if(CharacterInfo[playerid][active_character[playerid]][cSkillLevel] >= 200)
	            {

					if(response > 15)
					{

						if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1))
						{

                            GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISH,1);
					    	SendEmote(playerid,"reels in their line and picks up a fish!");
					    	IncreaseSkill(playerid,1);

					    }
					    else
					    {

					        SendClientMessage(playerid,COLOR_LIGHTRED,"You can not carry any more fish!");

					    }

					}
					else
					{

						SendEmote(playerid,"reels in their line and picks up a peice of wood.. Looks at it for a momment, and then throws it back.");

					}

	            }

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_LIGHTRED,"You are no longer at the fishing point.");

	        }

	    }
	    case PROGRESS_BAR_VUPGRADE:
	    {

	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {

	            new biz = GetClosestBiz(playerid);
	            if(IsAtUpgradeShop(playerid))
	            {

	                new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
	                if(slot > -1)
	                {

	                    if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID]|| CharacterInfo[playerid][active_character[playerid]][cDuplicate] == VehicleInfo[slot][vID] || IsFactionVehicle(CharacterInfo[playerid][active_character[playerid]][cFaction],slot) || IsCompanyVehicle(CharacterInfo[playerid][active_character[playerid]][cCompany],slot))
	                    {
							switch(vu_upgrading[playerid])
							{

								case 1:
								{

									switch(vu_upgradelevel[playerid])
									{

									    case 1:
									    {

									        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 2500)
									        {

												CharacterInfo[playerid][active_character[playerid]][cMoney] -= 2500;
												BizInfo[biz][bBank] += 2500;
												VehicleInfo[slot][vLock] = 1;
												SendClientMessage(playerid,COLOR_GREEN,"You have upgraded your vehicle lock!");
												TogglePlayerControllable(playerid,1);
												vu_upgrading[playerid] = 0;
												vu_upgradelevel[playerid] = 0;

									        }
									        else
									        {

									            SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $2500");

									        }

									    }
									    case 2:
									    {

									        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 12000)
									        {

									        	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 1200;
												BizInfo[biz][bBank] += 1200;
									        	VehicleInfo[slot][vLock] = 2;
												SendClientMessage(playerid,COLOR_GREEN,"You have upgraded your vehicle lock!");
												TogglePlayerControllable(playerid,1);
												vu_upgrading[playerid] = 0;
												vu_upgradelevel[playerid] = 0;

									        }
									        else
									        {

									            SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $12000");

									        }

									    }
									    case 3:
									    {

									        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 25000)
									        {

												CharacterInfo[playerid][active_character[playerid]][cMoney] -= 25000;
												BizInfo[biz][bBank] += 25000;
									        	VehicleInfo[slot][vLock] = 3;
												SendClientMessage(playerid,COLOR_GREEN,"You have upgraded your vehicle lock!");
												TogglePlayerControllable(playerid,1);
												vu_upgrading[playerid] = 0;
												vu_upgradelevel[playerid] = 0;

									        }
									        else
									        {

									            SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $12000");

									        }

									    }
									    case 4:
									    {

									        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 50000)
									        {

												CharacterInfo[playerid][active_character[playerid]][cMoney] -= 50000;
												BizInfo[biz][bBank] += 50000;
									        	VehicleInfo[slot][vLock] = 4;
												SendClientMessage(playerid,COLOR_GREEN,"You have upgraded your vehicle lock!");
												TogglePlayerControllable(playerid,1);
												vu_upgrading[playerid] = 0;
												vu_upgradelevel[playerid] = 0;

									        }
									        else
									        {

									            SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $50000");

									        }

									    }

									}

								}

							}
						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not own this vehicle.");

						}
	                }
	                else
	                {

	                    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in an upgradable vehicle.");

	                }

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"You are no longer near an upgrade business.");

	            }

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a vehicle.");

	        }

	    }
	    case PROGRESS_BAR_REPAIR:
	    {

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{

		        new Float:hp;
		        GetVehicleHealth(GetPlayerVehicleID(playerid),hp);
		    	new Float:skill_interval = (CharacterInfo[playerid][active_character[playerid]][cSkillLevel] + 1);
				new Float:heal_amount = (5.0 * skill_interval);
				new Float:heal_level = (hp + heal_amount);
				if(heal_level > 1000) heal_level = 1000;
				SetVehicleHealth(GetPlayerVehicleID(playerid),heal_level);
				SendEmote(playerid,"finishes repairing the vehicle.");
				RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CARPART,4);
				IncreaseSkill(playerid,1);
				RepairVehicle(GetPlayerVehicleID(playerid));
				TogglePlayerControllable(playerid,1);

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not driving a vehicle.");

			}

	    }
	    case PROGRESS_BAR_METAL:
	    {

	        new skill = CharacterInfo[playerid][active_character[playerid]][cSkillLevel];
			new skill_interval = floatround((skill / 50),floatround_ceil);
			if(skill_interval < 1) skill_interval = 1;
		 	if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CARPART,skill_interval))
		 	{

		 	    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_METAL,1))
		 	    {

					RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_METAL,1);
					GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CARPART,skill_interval);
					IncreaseSkill(playerid,1);
					TogglePlayerControllable(playerid,1);

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have any metal.");
				    TogglePlayerControllable(playerid,1);

				}

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry any carparts!");
			    TogglePlayerControllable(playerid,1);

			}

	    }
	    case PROGRESS_BAR_MINE:
	    {

	        new skill = CharacterInfo[playerid][active_character[playerid]][cSkillLevel];
		    new skill_interval = floatround((skill / 50),floatround_ceil);
		    new maxmetal = (skill_interval);
		    if(maxmetal < 1) maxmetal = 1;
		    new minmetal = (maxmetal - 3);
		    if(minmetal < 1) minmetal = 1;
			new metal = (random((maxmetal + 1)) + minmetal);
			SendEmote(playerid,"leans down and picks up a chunk of metal");
			GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_METAL,metal);
			mining[playerid] = 0;
			IncreaseSkill(playerid,1);
			TogglePlayerControllable(playerid,1);

	    }
	    case PROGRESS_BAR_LEARNSKILL:
	    {

	        if(InLibrary(playerid))
	        {

				CharacterInfo[playerid][active_character[playerid]][cSkill] = learning_skill[playerid];
				CharacterInfo[playerid][active_character[playerid]][cSkillLevel] = 0;
				CharacterInfo[playerid][active_character[playerid]][cMoney] -= 2500;
				BizInfo[in_biz[playerid]][bBank] += 2500;
				learning_skill[playerid] = 0;
				SendClientMessage(playerid,COLOR_YELLOW,"You have learnt a new skill! Use /skillhelp for help with it.");

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_LIGHTRED,"You are no longer in the library!");

	        }
	        learning_skill[playerid] = 0;

	    }
	    case PROGRESS_BAR_LANGUAGE:
	    {

	        if(InLibrary(playerid))
	        {

				CharacterInfo[playerid][active_character[playerid]][cLanguage] = learning_language[playerid];
				learning_language[playerid] = 0;
				CharacterInfo[playerid][active_character[playerid]][cMoney] -= 5000;
				BizInfo[in_biz[playerid]][bBank] += 5000;
				SendClientMessage(playerid,COLOR_YELLOW,"You have learnt your new language, you can speak in it by using /language");
				TogglePlayerControllable(playerid,1);
				active_language[playerid] = -1;

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_LIGHTRED,"You left the library!");

	        }

	    }
	    case PROGRESS_BAR_TRUCK:
	    {

        	TogglePlayerControllable(playerid,1);
			UpdateTruckerStage(playerid);

	    }
	    case PROGRESS_BAR_FIX:
	    {

	    	new Float:hp;
			GetVehicleHealth(GetPlayerVehicleID(playerid),hp);
			SetVehicleHealth(GetPlayerVehicleID(playerid),(hp + 200.0));
			TogglePlayerControllable(playerid,1);
			new str[128], vname[32];
			GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
			format(str,sizeof(str),"turns a few screws in a poor attempt to fix the %s",vname);
			SendEmote(playerid,str);

	    }
	    case PROGRESS_BAR_OILJOB:
	    {

	        if(company_work_stage[playerid] == 1)
	        {

	            new rig = NearestRig(playerid);
	            if(oil_rig_levels[rig] > 0)
	            {

		            SetPlayerCheckpoint(playerid,-1017.7850, -644.1572, 31.7730,5.0);
		            company_work_stage[playerid] = 2;
					carrying_oil[playerid] = (oil_rig_levels[rig] > 10) ? 10 : oil_rig_levels[rig];
					oil_rig_levels[rig] -= carrying_oil[playerid];
		            SendClientMessage(playerid,COLOR_WHITE,"Transport the barrels of oil to {FF0000}Processing Plant {FFFFFF}for processing.");
		            TogglePlayerControllable(playerid,1);

				}
				else
				{

					SendClientMessage(playerid,COLOR_LIGHTRED,"This rig does not have any oil, collection cancelled.");
					company_work[playerid] = 0;
					company_work_stage[playerid] = 0;
					DisablePlayerCheckpoint(playerid);
					TogglePlayerControllable(playerid,1);

				}

	        }
			else if(company_work_stage[playerid] == 2)
			{

			    if(carrying_oil[playerid] > 0)
			    {

					if(IsInCompanyJobVehicle(playerid))
					{

					    new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
						new pay = (oil_price * carrying_oil[playerid]);
		                new player_pay = ((pay /100) * CompanyInfo[slot][ciPayRate]);
		                new str[128];
		                format(str,sizeof(str),"Oil Run Complete. You have earned: $%d for doing this run.",player_pay);
			     	    SendClientMessage(playerid,COLOR_YELLOW2,str);
			     	    CharacterInfo[playerid][active_character[playerid]][cPayday] += player_pay;
						format(str,sizeof(str),"Run Complete~n~~g~$%d ~w~added to paycheck",player_pay);
						GameTextForPlayer(playerid,str,5000,1);
						CompanyInfo[slot][ciBank] += (pay - player_pay);
						company_work_stage[playerid] = 0;
						company_work[playerid] = 0;
						TogglePlayerControllable(playerid,1);
						CompanyInfo[slot][ciJobsComplete] ++;
						CompanyInfo[slot][ciJobMoney] += (pay - player_pay);
						carrying_oil[playerid] = 0;
						WriteWorkLog(playerid,"Oil Run",pay);
						DisablePlayerCheckpoint(playerid);

					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a company vehicle! Run Cancelled");
						DisablePlayerCheckpoint(playerid);
						carrying_oil[playerid] = 0;
						company_work_stage[playerid] = 0;
						company_work[playerid] = 0;

					}

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You have no oil!");

				}

			}

	    }
	    case PROGRESS_BAR_TOWCAR:
	    {

	        if(!IsAnyPlayerInVehicle(vehicle_towing[playerid]) && CharacterInfo[playerid][active_character[playerid]][cMoney] >= 1500)
			{

			    SaveVehicleDamage(vehicle_towing[playerid]);
				SetVehicleToRespawn(vehicle_towing[playerid]);
				vehicle_towing[playerid] = -1;
			 	CharacterInfo[playerid][active_character[playerid]][cMoney] -= 1500;
				SendClientMessage(playerid,COLOR_YELLOW2,"Your vehicle has been towed to it's spawn location, that will be $1500");
				PlayerPlaySound(playerid,1054,0.0,0.0,0.0);

			}
			else if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 1500)
			{

				SendClientMessageA(playerid,COLOR_LIGHTRED,"Someone is in your vehicle. It cannot be towed.");
				vehicle_towing[playerid] = -1;
			 	PlayerPlaySound(playerid,1055,0.0,0.0,0.0);

			}
			else
			{

				SendClientMessageA(playerid,COLOR_LIGHTRED,"Your vehicle cannot be towed, you do not have enough money to tow it.");
				vehicle_towing[playerid] = -1;
			 	PlayerPlaySound(playerid,1055,0.0,0.0,0.0);

			}

	    }
	    case PROGRESS_BAR_BUS:
	    {

	        bus_stage[playerid] ++;
			RefreshBusStage(playerid);

	    }
	    case PROGRESS_BAR_DEL:
	    {

			delivery_stage[playerid] ++;
			RefreshDeliveryStage(playerid);

	    }
	    case PROGRESS_BAR_ENG:
	    {

	        new pay = (random(45) + 45);
			new extrapay = 0;
			if(CharacterInfo[playerid][active_character[playerid]][cEmployed] > 0) { extrapay = CharacterInfo[playerid][active_character[playerid]][cEmployed] < 10 ? (2 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 20; }
			pay += extrapay;
			new str[128];
			format(str,sizeof(str),"~w~Repair Complete~n~~g~$%d~w~ added to paycheck",pay);
			GameTextForPlayer(playerid,str,5000,1);
			CharacterInfo[playerid][active_character[playerid]][cPayday] += pay;
			TogglePlayerControllable(playerid,1);
			DestroyPlayerObject(playerid,engineer_sys_object[playerid]);
			engineer_sys_object[playerid] = -1;
            OnPlayerStartEngineer(playerid);

	    }
	    case PROGRESS_BAR_CHOP:
	    {

	        new veh = GetPlayerVehicleID(playerid);
    		CharacterInfo[playerid][active_character[playerid]][cChopCooldown] = 3600;
			new price = FetchVehiclePrice(GetVehicleModel(veh));
			price = ((price / 18) + (random(2270) + 500));
			if(price > 7500) price = 7500;
			CharacterInfo[playerid][active_character[playerid]][cMoney] += price;
			new str[128];
			new vname[64];
			GetVehicleNameByModel(GetVehicleModel(veh),vname);
			format(str,sizeof(str),"~g~You sold the ~w~%s~g~ for ~w~$%d",vname,price);
			GameTextForPlayer(playerid,str,5000,5);
			SetVehicleToRespawn(veh);
			TogglePlayerControllable(playerid,1);

	    }
	    case PROGRESS_BAR_AIRLINEJOB:
	    {

			if(company_work_stage[playerid] == 1)
		    {
				new a = 0;
				while(a < 50 && company_work_stage[playerid] == 1)
				{

				    new drop = random(sizeof(airline_stop_points));
					if(GetDistanceToPoint(playerid,airline_stop_points[drop][0],airline_stop_points[drop][1],airline_stop_points[drop][2]) > 250.0)
					{

					    SetPlayerCheckpoint(playerid,airline_stop_points[drop][0],airline_stop_points[drop][1],airline_stop_points[drop][2],10.0);
					    company_work_stage[playerid] = 2;
					    new str[128];
					    format(str,sizeof(str),"Travel to {FF0000}%s {FFFFFF}to drop off your passengers",airline_stop_names[drop]);
					    SendClientMessage(playerid,COLOR_WHITE,str);
					    TogglePlayerControllable(playerid,1);

					}
					a ++;

				}
			}
			else if(company_work_stage[playerid] == 2)
			{

				new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
			    DisablePlayerCheckpoint(playerid);
			    new planeamount = 1000;
			    new model = GetVehicleModel(GetPlayerVehicleID(playerid));
			    if(model == 593)//Dodo
			    {

			        planeamount = 1750;

			    }
			    else if(model == 511)//Beagle
			    {

			        planeamount = 2250;

			    }
			    else if(model == 553)//Juank Air
			    {

			        planeamount = 3000;

			    }
			    else if(model == 519)//Shamal
			    {

			        planeamount = 5000;

			    }
	    		new pay = (planeamount + random(1523));
	     	    new str[128];
	     	    new player_pay = ((pay /100) * CompanyInfo[slot][ciPayRate]);
	     	    format(str,sizeof(str),"Airline Run Complete. You have earned: $%d for doing this run.",player_pay);
	     	    SendClientMessage(playerid,COLOR_YELLOW2,str);
	     	    CharacterInfo[playerid][active_character[playerid]][cPayday] += player_pay;
				format(str,sizeof(str),"Flight Complete~n~~g~$%d ~w~added to paycheck",player_pay);
				GameTextForPlayer(playerid,str,5000,1);
				CompanyInfo[slot][ciBank] += (pay - player_pay);
				company_work_stage[playerid] = 0;
				company_work[playerid] = 0;
				TogglePlayerControllable(playerid,1);
				CompanyInfo[slot][ciJobsComplete] ++;
				CompanyInfo[slot][ciJobMoney] += (pay - player_pay);
				WriteWorkLog(playerid,"Flight",pay);

			}

	    }
	    case PROGRESS_BAR_DELJOB:
	    {

			if(company_work_stage[playerid] == 1)
		    {
				new a = 0;
				while(a < 50 && company_work_stage[playerid] == 1)
				{

				    new drop = random(sizeof(airline_stop_points));
					if(GetDistanceToPoint(playerid,del_stop_points[drop][0],del_stop_points[drop][1],del_stop_points[drop][2]) > 550.0)
					{

						new tmp[128];
						new str[128];
						GetZone(del_stop_points[drop][0],del_stop_points[drop][1], tmp, sizeof(tmp));
					    SetPlayerCheckpoint(playerid,del_stop_points[drop][0],del_stop_points[drop][1],del_stop_points[drop][2],5.0);
					    company_work_stage[playerid] = 2;
					    format(str,sizeof(str),"Move to the {FF0000}%s {FFFFFF}to drop off {FF0000}%s",tmp,load_names[company_work_load[playerid]]);
					    SendClientMessage(playerid,COLOR_WHITE,str);
					    TogglePlayerControllable(playerid,1);

					}
					a ++;

				}
			}
			else if(company_work_stage[playerid] == 2)
			{

				new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
			    DisablePlayerCheckpoint(playerid);
	    		new pay = (1250 + random(750));
	     	    new str[128];
	     	    new player_pay = ((pay /100) * CompanyInfo[slot][ciPayRate]);
	     	    format(str,sizeof(str),"Delivery Run Complete. You have earned: $%d for doing this run.",player_pay);
	     	    SendClientMessage(playerid,COLOR_YELLOW2,str);
	     	    CharacterInfo[playerid][active_character[playerid]][cPayday] += player_pay;
				format(str,sizeof(str),"Delivery Run Complete~n~~g~$%d ~w~added to paycheck",player_pay);
				GameTextForPlayer(playerid,str,5000,1);
				CompanyInfo[slot][ciBank] += (pay - player_pay);
				company_work_stage[playerid] = 0;
				company_work[playerid] = 0;
				company_work_load[playerid] = -1;
				TogglePlayerControllable(playerid,1);
				CompanyInfo[slot][ciJobsComplete] ++;
				CompanyInfo[slot][ciJobMoney] += (pay - player_pay);
				WriteWorkLog(playerid,"Delivery",pay);

			}

	    }

	}

}

stock SetPlayerProgressBar(playerid,type,max)
{

	progress_wait_max[playerid] = max;
	progress_wait[playerid] = 1;
	progress_wait_type[playerid] = type;

}

stock TowCompanyCars(company)
{

	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

		if(VehicleInfo[i][vModel] > 0)
		{

		    if(VehicleInfo[i][vCompany] == company)
		    {

		        if(!IsAnyPlayerInVehicle(VehicleInfo[i][vVehicle]))
		        {

		            SetVehicleToRespawn(VehicleInfo[i][vVehicle]);

		        }

		    }

		}

	}

}

stock SendCompanyMsg(company,str[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

		if(IsPlayerConnectedEx(i))
		{

		    if(CharacterInfo[i][active_character[i]][cCompany] == company)
		    {

		        SendClientMessage(i,COLOR_YELLOW2,str);

		    }

		}

	}

}

stock FetchCompanyRefuelPrice(company)
{

	new price = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

		if(VehicleInfo[i][vModel] > 0)
		{

		    if(VehicleInfo[i][vCompany] == company)
		    {

				new fuelneeded = (100 - VehicleInfo[i][vFuel]);
				if(fuelneeded > 0)
				{

					price += (5 * fuelneeded);

				}

		    }

		}

	}
	return price;

}

stock RefuelCompanyVehicles(company)
{

	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

		if(VehicleInfo[i][vModel] > 0)
		{

		    if(VehicleInfo[i][vCompany] == company)
		    {

				VehicleInfo[i][vFuel] = 100;

		    }

		}

	}

}

stock CreateStrip(Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 0)
  	    {
            SpikeInfo[i][sCreated]=1;
            SpikeInfo[i][sX]=x;
            SpikeInfo[i][sY]=y;
            SpikeInfo[i][sZ]=z-0.7;
            SpikeInfo[i][sObject] = CreateObject(2899, x, y, z-0.9, 0, 0, Angle-90);
	        return 1;
  	    }
  	}
  	return 0;
}

stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 1)
  	    {
  	        SpikeInfo[i][sCreated]=0;
            SpikeInfo[i][sX]=0.0;
            SpikeInfo[i][sY]=0.0;
            SpikeInfo[i][sZ]=0.0;
            DestroyObject(SpikeInfo[i][sObject]);
  	    }
	}
    return 0;
}

stock DeleteClosestStrip(playerid)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
        {
  	        if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated]=0;
                SpikeInfo[i][sX]=0.0;
                SpikeInfo[i][sY]=0.0;
                SpikeInfo[i][sZ]=0.0;
                DestroyObject(SpikeInfo[i][sObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}

encode_tires(tires1, tires2, tires3, tires4) {

	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);

}

stock SendWeatherBroadcast(str[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(IsNews(i))
	        {

	            SendClientMessage(i,COLOR_NEWS,str);
	            PlayerPlaySound(i,1149,0.0,0.0,0.0);

	        }

	    }

	}

}

stock WriteWorkLog(playerid,msg[],pay)
{

	new str[128];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	new cleanname[MAX_PLAYER_NAME];
	new cleanmsg[128];
	mysql_real_escape_string(msg,cleanmsg);
	mysql_real_escape_string(name,cleanname);
	format(str,sizeof(str),"INSERT INTO rp_work_logs (company,name,type,pay) VALUES ('%d','%s','%s','%d')",CharacterInfo[playerid][active_character[playerid]][cCompany],cleanname,cleanmsg,pay);
	mysql_query(str,QUERY_WORK_LOG,QUERY_WORK_LOG);

}

stock NearShamal(playerid)
{

	for(new i = 0; i < MAX_VEHICLES; i ++)
	{

	    if(GetVehicleModel(i) == 519)
	    {

		    new Float:X, Float:Y, Float:Z;
		    GetVehiclePos(i,X,Y,Z);
			if(IsPlayerInRangeOfPoint(playerid,7.5,X,Y,Z))
			{

				return i;

			}

		}

	}
	return -1;

}

stock SendPrivateAd(playerid,text[])
{

	new name[MAX_PLAYER_NAME];
	new str[256];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"[Private Advertisment]: %s",text);
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	       SendClientMessageA(i,TEAM_GROVE_COLOR,str);
	       if(AccountInfo[i][aAdmin] >= ADMIN_LVL_TRAIN)
	       {

	            new tmpstr[128];
	            format(tmpstr,sizeof(tmpstr),"[Private Ad] %s made the last private advertisment",name);
				SendClientMessage(i,COLOR_YELLOW,tmpstr);

	       }

	    }

	}
	ad_cooldown = 90;

}

stock LogConnection(playerid)
{

	new str[256];
	new ip[256];
	new name[MAX_PLAYER_NAME];
	new cleanname[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,sizeof(name));
	GetPlayerIp(playerid,ip,sizeof(ip));
	new cleanip[256];
	mysql_real_escape_string(ip,cleanip);
	mysql_real_escape_string(name,cleanname);
	format(str,sizeof(str),"INSERT INTO rp_connection_logs (name,ip) VALUES ('%s','%s')",name,ip);
	mysql_query(str,player_threads[playerid],QUERY_LOG_CON);

}

stock NearestRig(playerid)
{

	for(new i = 0; i < sizeof(oil_rigs); i ++)
	{

	    if(IsPlayerInRangeOfPoint(playerid,25.0,oil_rigs[i][0],oil_rigs[i][1],oil_rigs[i][2]))
	    {

	        return i;

	    }

	}
	return -1;

}

stock IsRigOwned(rig)
{

	if(oil_rig_owners[rig] == 0) return false;
	return true;

}

stock NumOfRigs(company)//UID not slot
{

	new count = 0;
	for(new i = 0; i < sizeof(oil_rigs); i ++)
	{

	    if(oil_rig_owners[i] == company)
	    {

			count ++;

	    }

	}
	return count;

}


stock DisplayRigs(playerid)
{

	new company = CharacterInfo[playerid][active_character[playerid]][cCompany];
	new str[512];
	for(new i = 0; i < sizeof(oil_rigs); i ++)
	{

		new tmp[128];
		new zone[128];
		GetZone(oil_rigs[i][0], oil_rigs[i][1], zone, sizeof(zone));
	    if(oil_rig_owners[i] == company)
	    {

			format(tmp,sizeof(tmp),"%s oil rig | Oil Level: %d Gallons\n",zone,oil_rig_levels[i]);
			strins(str,tmp,strlen(str));

	    }

	}
	ShowPlayerDialog(playerid,DIALOG_CHOOSERIG,DIALOG_STYLE_LIST,"Choose your rig...",str,"Confirm","Cancel");

}

stock SendOilJobFromOffset(playerid,offset)
{

	new company = CharacterInfo[playerid][active_character[playerid]][cCompany];
	new count = 0;
	for(new i = 0; i < sizeof(oil_rigs); i ++)
	{

	    if(oil_rig_owners[i] == company)
	    {

			if(count == offset)
			{

			    SetPlayerCheckpoint(playerid,(oil_rigs[i][0] + 10.0),oil_rigs[i][1],oil_rigs[i][2],5.0);
			    company_work[playerid] = 1;
			    company_work_stage[playerid] = 1;
				new zone[128]; new str[128];
				GetZone(oil_rigs[i][0],oil_rigs[i][1],zone,sizeof(zone));
				format(str,sizeof(str),"Move to the {FF0000}%s oil rig {FFFFFF}to gather the oil.",zone);
				SendClientMessage(playerid,COLOR_WHITE,str);
				return 1;

			}
			count ++;

	    }

	}
	return 0;

}

stock SaveRigs()
{

	if(active_rig_save < sizeof(oil_rigs))
	{

		new str[1024];
		format(str,sizeof(str),"UPDATE rp_oil_rigs SET owner = '%d', level = '%d' WHERE id = '%d'",oil_rig_owners[active_rig_save],oil_rig_levels[active_rig_save],(active_rig_save + 1));
		mysql_query(str,QUERY_SAVE_RIGS,QUERY_SAVE_RIGS);

	}
	else
	{

	    active_rig_save = 0;
	    printf("Rigs Saved.");
	    SendAdminBroadcast("[SERVER] Rigs Successfully Saved");
		if(server_restarting) {
		    saved_vars ++;
		    CheckRestartState();
		}
	}

}

stock LoadRigs()
{

	mysql_query("SELECT * FROM rp_oil_rigs ORDER BY id ASC",QUERY_LOAD_RIGS,QUERY_LOAD_RIGS);

}


stock CreatePlayerGates()
{

	for(new i = 0; i < sizeof(player_gates); i ++)
	{

		player_gates_object[i] = F_CreateObject(player_gates_objects[i],player_gates[i][0],player_gates[i][1],player_gates[i][2],player_gates[i][3],player_gates[i][4],player_gates[i][5]);

	}

}

stock NearOpenableGate(playerid)
{

	for(new i = 0; i < sizeof(player_gates); i ++)
	{

		if(IsPlayerInRangeOfPoint(playerid,10.0,player_gates[i][0],player_gates[i][1],player_gates[i][2])) return true;

	}
	return false;

}

stock OpenNearbyGates(playerid,password[])
{

	new done = 0;
	for(new i = 0; i < sizeof(player_gates); i ++)
	{

	    if(strcmp(password,player_gates_perms[i],true) == 0 && IsPlayerInRangeOfPoint(playerid,10.0,player_gates[i][0],player_gates[i][1],player_gates[i][2]) && strlen(password))
	    {

	        if(player_gates_state[i] == 0)
	        {

        	    new Float:speed = (player_gates_anim[i]) ? 0.001 : 6.0;
				F_MoveObject(player_gates_object[i],player_gates_open[i][0],player_gates_open[i][1],(player_gates_open[i][2] + 0.001),speed,player_gates_open[i][3],player_gates_open[i][4],player_gates_open[i][5]);
				player_gates_state[i] = 1;

	        }
	        else
	        {

	        	new Float:speed = (player_gates_anim[i]) ? 0.001 : 6.0;
	   			F_MoveObject(player_gates_object[i],player_gates[i][0],player_gates[i][1],(player_gates[i][2] - 0.001),speed,player_gates[i][3],player_gates[i][4],player_gates[i][5]);
				player_gates_state[i] = 0;

	        }
	        done = 1;

	    }

	}
	if(!done) SendErrorMsg(playerid,"Invalid Password.");

}

stock FetchCompanyRepairPrice(company)
{

	new price = 0;
	if(company > 0)
	{

		for(new i = 0; i < MAX_RP_VEHICLES; i ++)
		{

			if(VehicleInfo[i][vCompany] == company && VehicleInfo[i][vModel] > 0)
			{

			    new Float:hp;
			    GetVehicleHealth(VehicleInfo[i][vVehicle],hp);
			    if(hp < 1000.0 && !IsAnyPlayerInVehicle(VehicleInfo[i][vVehicle]) && hp > 250.0)
			    {

			        price += 1000;

			    }

			}

		}

	}
	return price;

}

stock RepairCompanyVehicles(company)
{

	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

		if(VehicleInfo[i][vCompany] == company && VehicleInfo[i][vModel] > 0)
		{

		    new Float:hp;
		    GetVehicleHealth(VehicleInfo[i][vVehicle],hp);
		    if(hp < 1000.0 && !IsAnyPlayerInVehicle(VehicleInfo[i][vVehicle]) && hp > 250.0)
		    {

		        RepairVehicleEx(VehicleInfo[i][vVehicle]);

		    }

		}

	}

}

stock PlayerUpdateListener(playerid)
{

	/*new Float:armor;
	GetPlayerArmour(playerid,armor);
	if(armor > 0.0)
	{

		if(!armor_display_enabled[playerid] && armor_display_tog[playerid])
		{

	    	armor_display_enabled[playerid] = 1;

	    }


	}
	else if(armor <= 0.0)
	{

	    if(armor_display_enabled[playerid])
	    {

	        armor_display_enabled[playerid] = 0;

	    }

	}*/
	if(driving_test[playerid] && driving_test_reversing[playerid])
	{

	    new key, leftright, updown;
        GetPlayerKeys(playerid,key,updown,leftright);
	    if(key == KEY_UP)
	    {

	        driving_test_failed[playerid] = 1;

	    }

	}
	if(spraying_vehicle[playerid])
	{

	    new key, leftright, updown;
		GetPlayerKeys(playerid,key,updown,leftright);
		if(leftright == KEY_RIGHT)
		{

		    new newcol = (spraying_vehicle_color[playerid] + 1);
			if(newcol > 0 && newcol < 126)
			{

			    spraying_vehicle_color[playerid] ++;
			    RefreshSprayPos(playerid);
			    PlayerPlaySound(playerid,1083,0.0,0.0,0.0);

			}
			else
			{

			    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);

			}

		}
		else if(leftright == KEY_LEFT)
		{

		    new newcol = (spraying_vehicle_color[playerid] - 1);
			if(newcol > 0 && newcol < 126)
			{

				spraying_vehicle_color[playerid] --;
				RefreshSprayPos(playerid);
				PlayerPlaySound(playerid,1083,0.0,0.0,0.0);

			}
			else
			{

			    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);

			}

		}
		else if(key == KEY_SPRINT)
		{

		    new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
		    if(spraying_vehicle[playerid] == 1)
		    {

				VehicleInfo[slot][vColor1] = spraying_vehicle_color[playerid];
				SendClientMessage(playerid,COLOR_GREEN,"First color set, please choose your second color.");
				spraying_vehicle[playerid] = 2;

			}
			else
			{

			    VehicleInfo[slot][vColor2] = spraying_vehicle_color[playerid];
			    spraying_vehicle[playerid] = 0;
			    spraying_vehicle_color[playerid] = 0;
			    SendClientMessage(playerid,COLOR_GREEN,"Your vehicle has been repainted, please come again.");
			    leave_spray[playerid] = 1;

			}

		}

	}
    if(vehicle_showroom_position[playerid] > -1)
	{

		if(donator_vehicle_purchasing[playerid] == -1)
		{
	        new key, leftright, updown;
	        GetPlayerKeys(playerid,key,updown,leftright);
	        if(leftright == KEY_RIGHT)
	        {

	            new tmp = FetchNextVehiclePosition(playerid,vehicle_showroom_type[playerid]);
	            if(tmp != -1) { vehicle_showroom_position[playerid] = tmp; } else { PlayerPlaySound(playerid,1085,0.0,0.0,0.0); }
	            RefreshPlayerShowroomPosition(playerid);
				PlayerPlaySound(playerid,1083,0.0,0.0,0.0);

	        }
	        else if(leftright == KEY_LEFT)
	        {

	            new tmp = FetchPrevVehiclePosition(playerid,vehicle_showroom_type[playerid]);
	            if(tmp != -1) { vehicle_showroom_position[playerid] = tmp; } else { PlayerPlaySound(playerid,1085,0.0,0.0,0.0); }
	            RefreshPlayerShowroomPosition(playerid);
	            PlayerPlaySound(playerid,1083,0.0,0.0,0.0);

	        }
	        else if(key == KEY_SPRINT && !(key & KEY_WALK))
	        {

				if(vehicle_select_cooldown[playerid] == 0)
				{
		            new vehicle = vehicle_showroom_position[playerid];
		            new price = VehicleModelInfo[vehicle][vmPrice];
		            if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price || IsDonatorVehicle(VehicleModelInfo[vehicle][vmModel]))
		            {

		                if(NumberOfVehicles(playerid) < 10)
		                {

							if(CharacterInfo[playerid][active_character[playerid]][cFaction] == 0 || CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] != FAC_PERM_LEAD)
							{

							    if(CanBuyVehicle(playerid) && !VehicleModelInfo[vehicle][vmEmerVeh] && !VehicleModelInfo[vehicle][vmNews])
							    {

							    	RefreshVehicleColorScreen(playerid);

								}
								else
								{

								    SendClientMessageA(playerid,COLOR_LIGHTRED,"You cannot purchase this vehicle.");

								}

							}
							else if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD)
							{

							    if(CanBuyVehicle(playerid))
							    {

							    	ShowPlayerDialog(playerid,DIALOG_BUYFAC,DIALOG_STYLE_MSGBOX,"Do you want to buy for your faction?","You can purchase this vehicle for your faction, do you want to do that?","Yes","No");

								}
								else
								{

								    SendClientMessageA(playerid,COLOR_LIGHTRED,"You cannot purchase this vehicle.");

								}

							}
							else
							{

							   	if(CanBuyVehicle(playerid))
							    {

							    	RefreshVehicleColorScreen(playerid);

								}
								else
								{

								    SendClientMessageA(playerid,COLOR_LIGHTRED,"You cannot purchase this vehicle.");

								}

							}

		                }
		                else
		                {

		                    SendClientMessageA(playerid,COLOR_LIGHTRED,"You have too many vehicles already (10 max)");

		                }

		            }
		            else
		            {

		                SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have enough money to purchase this vehicle");
		                PlayerPlaySound(playerid,1085,0.0,0.0,0.0);

					}

		        }
		    }
		}

	}
    if(choosing_character[playerid])
	{
        new key, leftright, updown;
        GetPlayerKeys(playerid,key,updown,leftright);
        if(leftright == KEY_RIGHT)
        {

            new tmp = (character_offset[playerid] + 1);
		    if(tmp < NumberOfCharacters(playerid))
			{
			    character_offset[playerid] ++;
				RefreshCharSelection(playerid,character_offset[playerid]);
				PlayerPlaySound(playerid,1083,0.0,0.0,0.0);
			}
			else
			{
				PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
			}
		}
		else if(leftright == KEY_LEFT)
        {
			new tmp = (character_offset[playerid] - 1);
		    if(tmp >= 0)
			{
				character_offset[playerid] --;
				RefreshCharSelection(playerid,character_offset[playerid]);
				PlayerPlaySound(playerid,1083,0.0,0.0,0.0);
			}
			else
			{
				PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
			}
		}
		else if(key == KEY_SPRINT)
		{

		    active_character[playerid] = character_offset[playerid];
		    choosing_character[playerid] = false;
		    SetPlayerName(playerid,CharacterInfo[playerid][active_character[playerid]][cName]);
		    character_chosen[playerid] = true;
		    ProcessSpawn(playerid);
		  	LoadMail(playerid);
		    LoadNotes(playerid);
		    LoadInventory(playerid);
		    LoadRingtone(playerid);
		    format(accent[playerid],16,"%s",CharacterInfo[playerid][active_character[playerid]][cAccent]);
			SetPlayerHealth(playerid,CharacterInfo[playerid][active_character[playerid]][cHealth]);
			SetPlayerArmour(playerid,CharacterInfo[playerid][active_character[playerid]][cArmor]);
			character_offset[playerid] = 0;

		}
	}
	/**************SPIKES*************/
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        for(new i = 0; i < sizeof(SpikeInfo); i++)
  	    {
  	        if(IsPlayerInRangeOfPoint(playerid, 3.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
            {
  	            if(SpikeInfo[i][sCreated] == 1)
  	            {
  	                new panels, doors, lights, tires;
  	                new carid = GetPlayerVehicleID(playerid);
		            GetVehicleDamageStatus(carid, panels, doors, lights, tires);
		            tires = encode_tires(1, 1, 1, 1);
		            UpdateVehicleDamageStatus(carid, panels, doors, lights, tires);
  	            }
  	        }
  	    }
  	}
  	/***********END SPIKES************/

}

stock RepairVehicleEx(vehicleid)
{

	RepairVehicle(vehicleid);
	ResetVehicleDamage(vehicleid);

}

stock RefreshNeon(slot)
{

	RemoveNeons(VehicleInfo[slot][vVehicle]);
	if(VehicleInfo[slot][vNeon] && VehicleInfo[slot][vNeonState]) AttachNeons(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vNeon]);

}

stock InStockMarket(playerid)
{

	if(in_biz[playerid] == -1) return false;
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_STOCK) return true;
	return false;

}

stock RefreshStockMarket()
{

	print("Refreshing Stock Market..");
	new changestr[64];
	new str[512];
	for(new i = 0; i < MAX_BIZES; i ++)
	{

		new stock_sys_profit = (BizInfo[i][bBank] - stock_sys_oldbank[i]);
		new stock_value_change = 0;
		new log_oldval = true;
		if(stock_sys_profit > 0)
		{

			stock_value_change = (stock_sys_profit / 100);
			if(stock_value_change < stock_value_oldchange[i])
			{

				stock_value_change = (stock_value_change - stock_value_oldchange[i]);

			}

		}
		else
		{

		    stock_value_change = (stock_value_oldchange[i] > 999) ? -(stock_value_oldchange[i] / 100) : -stock_value_oldchange[i];
		    log_oldval = false;

		}
		switch(BizInfo[i][bType])
		{

		    case BIZ_TYPE_VEHICLE:
		    {

		        stock_value[STOCK_VEHICLE] += stock_value_change;

		    }
		    case BIZ_TYPE_FOOD:
		    {

		        stock_value[STOCK_FOOD] += stock_value_change;

		    }
		    case BIZ_TYPE_TRANS, BIZ_TYPE_WHEELS, BIZ_TYPE_LOCO:
		    {

		        stock_value[STOCK_MOD] += stock_value_change;

		    }
		    case BIZ_TYPE_GEN:
		    {

		        stock_value[STOCK_STORE] += stock_value_change;

		    }
		    case BIZ_TYPE_DRINK:
		    {

		        stock_value[STOCK_DRINK] += stock_value_change;

		    }
		    case BIZ_TYPE_AD:
		    {

		        stock_value[STOCK_AD] += stock_value_change;

		    }
		    case BIZ_TYPE_BANK:
		    {

		        stock_value[STOCK_BANK] += stock_value_change;

		    }

		}
		stock_sys_oldbank[i] = BizInfo[i][bBank];
		if(log_oldval) stock_value_oldchange[i] = stock_value_change;

	}
	for(new i = 0; i < MAX_STOCK; i ++)
	{

		strdel(changestr,0,strlen(changestr));
		if(stock_value[i] <= 0) { stock_value[i] = 0; }
		if(stock_value[i] > stock_oldvalue[i])
		{

		    new stockname[64];
		    GetStockName(i,stockname);
		    if(i == 0)
			{

				format(changestr,sizeof(changestr),"%s ~y~($%d) ~g~($%d)~w~",stockname,stock_value[i],(stock_value[i] - stock_oldvalue[i]));

			}
			else
			{

			    format(changestr,sizeof(changestr),"~n~%s ~y~($%d) ~g~($%d)~w~",stockname,stock_value[i],(stock_value[i] - stock_oldvalue[i]));

			}
		    strins(str,changestr,strlen(str));

		}
		else if(stock_value[i] == stock_oldvalue[i])
		{

			new stockname[64];
		    GetStockName(i,stockname);
			if(i == 0)
			{

		    	format(changestr,sizeof(changestr),"%s ~y~($%d) ~y~($%d)~w~",stockname,stock_value[i],(stock_value[i] - stock_oldvalue[i]));

		    }
		    else
		    {

		        format(changestr,sizeof(changestr),"~n~%s ~y~($%d) ~y~($%d)~w~",stockname,stock_value[i],(stock_value[i] - stock_oldvalue[i]));

		    }
		    strins(str,changestr,strlen(str));

		}
		else if(stock_value[i] < stock_oldvalue[i])
		{

			new stockname[64];
		    GetStockName(i,stockname);
		    if(i == 0)
		    {

				format(changestr,sizeof(changestr),"%s ~y~($%d) ~r~($%d)~w~",stockname,stock_value[i],(stock_value[i] - stock_oldvalue[i]));

			}
			else
			{

				format(changestr,sizeof(changestr),"~n~%s ~y~($%d) ~r~($%d)~w~",stockname,stock_value[i],(stock_value[i] - stock_oldvalue[i]));

			}
		    strins(str,changestr,strlen(str));

		}
		stock_oldvalue[i] = stock_value[i];

	}
	TextDrawSetString(stockcontent,str);

}

stock GetStockName(item,str[])
{

	switch(item)
	{

	    case STOCK_VEHICLE:
	    {

	        return format(str,64,"Vehicle Dealerships");

	    }
	    case STOCK_FOOD:
	    {

	        return format(str,64,"Resteraunts");

	    }
	    case STOCK_MOD:
	    {

	        return format(str,64,"Vehicle Mod Shops");

	    }
	    case STOCK_STORE:
	    {

	        return format(str,64,"24/7s");

	    }
	    case STOCK_DRINK:
	    {

	        return format(str,64,"Bars and Clubs");

	    }
	    case STOCK_AD:
	    {

	        return format(str,64,"Advertisment Agencies");

	    }
	    case STOCK_BANK:
	    {

	        return format(str,64,"Banks");

	    }

	}
	return format(str,64,"N/A");

}

public SendMsg(playerid, color,const str[], define)
{
	new tmpbuf[256];
	format(tmpbuf, sizeof(tmpbuf), str, define);
	SendClientMessage(playerid, color, tmpbuf);
}

public SendStrMsg(playerid,color,const str[], define[])
{

	new tmpbuf[256];
	format(tmpbuf, sizeof(tmpbuf), str, define);
	SendClientMessage(playerid, color, tmpbuf);

}

stock BuyStock(playerid,type,amount)
{

	new price = ((stock_value[type] * amount) + 50);
	TakeMoney(playerid,price);
	SendBizMoney(in_biz[playerid],50);
	new str[256];
	format(str,sizeof(str),"SELECT id FROM rp_stock WHERE owner = '%d' AND type = '%d'",CharacterInfo[playerid][active_character[playerid]][cID],type);
	mysql_query(str,player_threads[playerid],QUERY_BUY_STOCK);
	buying_stock[playerid] = type;
	buying_stock_amount[playerid] = amount;
	new name[64];
	GetStockName(type,name);
	SendClientMessage(playerid,COLOR_GREEN,"|-----Stock Purchase Slip-----|");
	SendMsg(playerid,COLOR_WHITE,"Stocks Purchased: %d",amount);
	SendMsg(playerid,COLOR_WHITE,"Price: $%d per stock",stock_value[type]);
	SendClientMessage(playerid,COLOR_WHITE,"Fee: $50");
	SendMsg(playerid,COLOR_WHITE,"Total: $%d",price);

}

stock TakeMoney(playerid,amount)
{

	CharacterInfo[playerid][active_character[playerid]][cMoney] -= amount;

}

stock SendMoney(playerid,amount)
{

	CharacterInfo[playerid][active_character[playerid]][cMoney] += amount;

}

stock SendBizMoney(bizid,amount)
{

	BizInfo[bizid][bBank] += amount;

}

stock TakeBizMoney(bizid,amount)
{

    BizInfo[bizid][bBank] -= amount;

}

stock SetCooldown(playerid,type,amount)
{

	cooldowns[playerid][type] = gettime();
	cooldowns_expire[playerid][type] = amount;

}

stock HasCooldown(playerid,type)
{

	new diff = (gettime() - cooldowns[playerid][type]);
	if(diff >= cooldowns_expire[playerid][type]) return false;
	return true;

}

stock ResetCooldowns(playerid)
{

	for(new i = 0; i < MAX_COOLDOWNS; i ++)
	{

		cooldowns[playerid][i] = 0;

	}

}

stock GetCooldownLevel(playerid,type)
{

	new diff = (cooldowns_expire[playerid][type] - (gettime() - cooldowns[playerid][type]));
	return diff;

}

stock InStock(playerid)
{

	if(in_biz[playerid] == -1) return false;
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_STOCK) return true;
	return false;

}

stock SellStock(playerid,item)
{

	new str[256];
	format(str,sizeof(str),"SELECT id,amount,type FROM rp_stock WHERE owner = '%d'",CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_SELL_STOCK);
	selling_stock_slot[playerid] = item;

}

stock ShowFoodDialog(playerid)
{

	new str[256];
	if(IsPlayerInRangeOfPoint(playerid,45.0,363.4129,-74.5786,1001.5078))//Burger Shot
	{

		format(str,sizeof(str),"Clutch Cooger [$5]\nThe Super Sloppy [$10]\nSmokestack El Ropo [$15]\nAl Kaseltzer [$25]");

	}
	else if(IsPlayerInRangeOfPoint(playerid,45.0,365.7158,-9.8873,1001.8516))//Clukin Bell
	{

		format(str,sizeof(str),"The little cluckers kids meal [$5]\nDouble barrelled chicken breasts [$10]\nThe chickens bell [$15]\nWhole live chicken [$25]");

	}
	else if(IsPlayerInRangeOfPoint(playerid,45.0,372.3520,-131.6510,1001.4922))//Pizza Stack
	{

		format(str,sizeof(str),"The Buster [$5]\nThe double delux [$10]\nThe full rack [$15]\n20 inch pizza [$25]");

	}
	else if(IsPlayerInRangeOfPoint(playerid,45.0,378.9657,-185.3163,1000.6328))//Donut Shop
	{

		format(str,sizeof(str),"A battered ring [$5]\nTwo battered rings [$10]\nA lump of dough [$15]\nBakers dozen [$25]");

	}
	else
	{

		format(str,sizeof(str),"Small Meal [$5]\nMedium Meal [$10]\nLarge Meal [$15]\nSuper-sized meal [$25]");

	}
	ShowPlayerDialog(playerid,DIALOG_FOOD,DIALOG_STYLE_LIST,"Choose your meal...",str,"Confirm","Cancel");

}

stock ShowHouseUpgradeDialog(playerid,houseid)
{

	new str[512];
	for(new i = 0; i < MAX_HOUSE_UPGRADES; i ++)
	{

	    new name[64];
	    new tmp[128];
		GetHouseUpgradeName(i,name,sizeof(name));
		if(HouseInfo[houseid][hUpgrades][i] < 5)
		{

			format(tmp,sizeof(tmp),"%s [Level: %d] [Next Level: $%d]\n",name,(HouseInfo[houseid][hUpgrades][i] + 1),GetHouseUpgradePrice(houseid,i));

		}
		else
		{

			format(tmp,sizeof(tmp),"%s [Level: %d] [This upgrade is at max level]\n",name,(HouseInfo[houseid][hUpgrades][i] + 1),GetHouseUpgradePrice(houseid,i));

		}
		strins(str,tmp,strlen(str));

	}
	ShowPlayerDialog(playerid,DIALOG_HOUSEUPGRADE,DIALOG_STYLE_LIST,"Choose your upgrade..",str,"Confirm","Cancel");
	SendClientMessage(playerid,COLOR_YELLOW,"Use /help to get information about house upgrades");

}

stock GetHouseUpgradeName(upgrade,name[],length)
{

	switch(upgrade)
	{

	    case HOUSE_UPGRADE_BED:
	    {

			return format(name,length,"Bed");

	    }
	    case HOUSE_UPGRADE_STORAGE:
	    {

	        return format(name,length,"Storage");

	    }
	    case HOUSE_UPGRADE_FRIDGE:
	    {

			return format(name,length,"Fridge");

	    }
	    case HOUSE_UPGRADE_PHONE:
	    {

			return format(name,length,"Phone");

	    }
	    case HOUSE_UPGRADE_ALARM:
	    {

	        return format(name,length,"Security");

	    }

	}
	return format(name,length,"None");

}

stock GetHouseUpgradePrice(houseid,item)
{

	switch(item)
	{

		case HOUSE_UPGRADE_BED:
	    {

			return (5000 * (HouseInfo[houseid][hUpgrades][item] + 1));

	    }
	    case HOUSE_UPGRADE_STORAGE:
	    {

	        return (6500 * (HouseInfo[houseid][hUpgrades][item] + 1));

	    }
	    case HOUSE_UPGRADE_FRIDGE:
	    {

			return (2000 * (HouseInfo[houseid][hUpgrades][item] + 1));

	    }
	    case HOUSE_UPGRADE_PHONE:
	    {

			return (5500 * (HouseInfo[houseid][hUpgrades][item] + 1));

	    }
	    case HOUSE_UPGRADE_ALARM:
	    {

	        return (7500 * (HouseInfo[houseid][hUpgrades][item] + 1));

	    }

	}
	return 99999999;

}

stock SendCopMsg(msg[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(IsLaw(i) && duty[i])
	        {

	            SendClientMessage(i,COLOR_FACTION,msg);
	            PlayerPlaySound(i,1054,0.0,0.0,0.0);

	        }

	    }

	}

}

stock SendHouseAlarm(houseid)
{

	switch(HouseInfo[houseid][hUpgrades][HOUSE_UPGRADE_ALARM])
	{

	    case 1:
	    {

	        SendServerEmote("***House Alarm Sounds***", HouseInfo[houseid][hSpawnX], HouseInfo[houseid][hSpawnY], HouseInfo[houseid][hSpawnZ], 30.0, 0);

	    }
	    case 2:
	    {

	        SendServerEmote("***House Alarm Sounds***", HouseInfo[houseid][hSpawnX], HouseInfo[houseid][hSpawnY], HouseInfo[houseid][hSpawnZ], 60.0, 0);

	    }
	    case 3:
	    {

	        new zone[128];
	        new str[128];
	        GetZone(HouseInfo[houseid][hSpawnX], HouseInfo[houseid][hSpawnY], zone, sizeof(zone));
	        format(str,sizeof(str),"[House Alarm] %s",zone);
	        SendCopMsg(str);
	        SendServerEmote("***House Alarm Sounds***", HouseInfo[houseid][hSpawnX], HouseInfo[houseid][hSpawnY], HouseInfo[houseid][hSpawnZ], 120.0, 0);

	    }
	    case 4:
	    {

	    	new zone[128];
	    	new str[128];
            GetHouseAddress(houseid,zone);
	        format(str,sizeof(str),"[House Alarm] %s",zone);
	        SendCopMsg(str);
	        SendServerEmote("***House Alarm Sounds***", HouseInfo[houseid][hSpawnX], HouseInfo[houseid][hSpawnY], HouseInfo[houseid][hSpawnZ], 120.0, 0);

	    }
	    case 5:
	    {

	    	new zone[128];
	    	new str[128];
            GetHouseAddress(houseid,zone);
	        format(str,sizeof(str),"[House Alarm] %s",zone);
	        SendCopMsg(str);
	        SendServerEmote("***House Alarm Sounds***", HouseInfo[houseid][hSpawnX], HouseInfo[houseid][hSpawnY], HouseInfo[houseid][hSpawnZ], 120.0, 0);
            new other = IsCharacterOnline(HouseInfo[houseid][hOwner]);
            if(other > -1)
            {

                if(CharacterInfo[other][active_character[other]][cPhone] > 0)
                {

                    SendClientMessage(other,COLOR_YELLOW,"[Cellphone] SMS from House Alarm Service: Your house alarm has just sounded!");
                    PlayerPlaySound(other,1054,0.0,0.0,0.0);

                }

            }

	    }

	}

}

stock GetHouseLockpickChance(houseid)
{

	return (40 + (10 * HouseInfo[houseid][hUpgrades][HOUSE_UPGRADE_ALARM]));

}

stock GetHouseMaxSleepHp(houseid)
{

	return (50 + (10 * HouseInfo[houseid][hUpgrades][HOUSE_UPGRADE_BED]));

}

stock GetHouseInventorySlots(houseid)
{

	new amount = (10 + (10 * HouseInfo[houseid][hUpgrades][HOUSE_UPGRADE_STORAGE]));
	if(amount >= MAX_HOUSE_INVENTORY) amount = (MAX_HOUSE_INVENTORY - 1);
	return amount;

}

stock GetMaxHouseHeal(houseid)
{

	return (50 + (10 * HouseInfo[houseid][hUpgrades][HOUSE_UPGRADE_FRIDGE]));

}

stock FormatHouseUpgradeString(houseid,str[])
{

	new upstr[256];
	new tmp[64];
    for(new b = 0; b < MAX_HOUSE_UPGRADES; b ++)
    {

    	if(b == 0)
		{

			format(tmp,sizeof(tmp),"%d",HouseInfo[houseid][hUpgrades][b]);

		}
		else
		{

		    format(tmp,sizeof(tmp),"|%d",HouseInfo[houseid][hUpgrades][b]);

		}
		strins(upstr,tmp,strlen(upstr));

    }
    return format(str,256,"%s",upstr);

}

stock AssignHouseUpgrades(houseid,str[])
{

	new tmp[MAX_HOUSE_UPGRADES][32];
	explode(tmp,str,"|");
	for(new i = 0; i < sizeof(tmp); i ++)
	{

	    HouseInfo[houseid][hUpgrades][i] = strval(tmp[i]);

	}

}

stock SendPurchaseLog(playerid,log[])
{

	new str[512];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	new cleanname[MAX_PLAYER_NAME];
	mysql_real_escape_string(name,cleanname);
	format(str,sizeof(str),"INSERT INTO rp_purchase_logs (player,log) VALUES ('%s','%s')",cleanname,log);
	mysql_query(str,player_threads[playerid]);

}

stock InFood(playerid)
{

	if(in_biz[playerid] == -1) return false;
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_FOOD) return true;
	return false;

}

stock StreamLocalSound(Float:X,Float:Y,Float:Z,stream[],Float:distance)
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

		if(IsPlayerConnected(i))
		{

			if(IsPlayerInRangeOfPoint(i,distance,X,Y,Z))
			{

				new feed = Audio_PlayStreamed(i,stream);
				Audio_SetVolume(i,feed,100);

			}

		}

	}

}

stock fetchNextFireSlot()
{

	for(new i = 0; i < sizeof(fire_sys_pos); i ++)
	{

	    if(fire_sys_pos[i][0] == 0.0 && fire_sys_pos[i][1] == 0.0) return i;

	}
	return -1;

}

stock IgniteFires()
{

	for(new i = 0; i < sizeof(fire_sys_pos); i ++)
	{

	    if(fire_sys_pos[i][0] != 0.0 || fire_sys_pos[i][1] != 0.0)
	    {

	        if(fire_sys_objects[i] == 0)
	        {

				fire_sys_objects[i] = fire_sys_objectids[random(sizeof(fire_sys_objectids))];
				fire_sys_object[i] = CreateObject(fire_sys_objects[i],fire_sys_pos[i][0],fire_sys_pos[i][1],fire_sys_pos[i][2],0.0,0.0,0.0);

			}

	    }

	}

}

stock RemoveFires()
{

	for(new i = 0; i < sizeof(fire_sys_pos); i ++)
	{

	    if(fire_sys_objects[i] != 0)
	    {

			DestroyObject(fire_sys_object[i]);
			fire_sys_pos[i][0] = 0.0;
			fire_sys_pos[i][1] = 0.0;
			fire_sys_pos[i][2] = 0.0;
			fire_sys_objects[i] = 0;
			fire_sys_object[i] = 0;

	    }

	}

}

stock LoadRingtone(playerid)
{

	new str[256];
	format(str,sizeof(str),"SELECT stream FROM rp_active_ringtones WHERE owner = '%d' ORDER BY id DESC LIMIT 1",CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_LOAD_RINGTONE);

}

stock ShowRingtones(playerid)
{

	new str[256];
	format(str,sizeof(str),"SELECT name FROM rp_ringtones ORDER BY name");
	mysql_query(str,player_threads[playerid],QUERY_RINGTONES);


}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{

	if(strlen(cl_editcallback[playerid]))
	{


	    CallLocalFunction(cl_editcallback[playerid],"iiiiifffffffff",playerid,response,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
	    strdel(cl_editcallback[playerid],0,strlen(cl_editcallback[playerid]));

	}
	return 1;

}

public HttpPlateFinaliseReciever(index, response_code, data[])
{

	new playerid = index;
	if(response_code == 200)
	{

		if(strcmp(data,"true",true) == 0)
		{

			TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~g~your transaction has been complete! your license plate will now be added.~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
			TogglePlayerControllable(playerid,1);
			SetTimerEx("HidePayment",5000,0,"i",playerid);
			buying_plate_ignoredonator[playerid] = 1;
			new param_str[128];
			format(param_str,sizeof(param_str),"buyplate %s",purchase_plate_cmd[playerid]);
			CallLocalFunction("cmd_vehicle","is",playerid,param_str);

		}
		else
		{

			TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~we could not complete your transaction, please try again~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
		 	TogglePlayerControllable(playerid,1);
		 	SetTimerEx("HidePayment",5000,0,"i",playerid);

		}

	}
	else
	{

	  	TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~an error occured when processing your transaction~n~ ~n~ ");
		TextDrawShowForPlayer(playerid,payment_text[playerid]);
		PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
	 	TogglePlayerControllable(playerid,1);
	 	SetTimerEx("HidePayment",5000,0,"i",playerid);

	}

}

public HttpPlateReciever(index, response_code, data[])
{

	new playerid = index;
	if(response_code == 200)
	{

		if(strcmp(data,"true",true) == 0)
		{

			new str[256];
			format(str,sizeof(str),"user=%d&amount=%f",AccountInfo[playerid][aID],0.50);
			str = str_replace(".","|",str);
			HTTP(playerid,HTTP_POST,URL_MAKE_PURCHASE,str,"HttpPlateFinaliseReciever");
            TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~w~you have enough funds, finalising transaction...~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			PlayerPlaySound(playerid,1058,0.0,0.0,0.0);

		}
		else
		{

		  	TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~you do not have enough funds to purchase this item, you can add more at: ucp.countrysidegaming.com~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
			TogglePlayerControllable(playerid,1);
			SetTimerEx("HidePayment",5000,0,"i",playerid);

		}

	}
	else
	{

		TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~an error occured when processing your transaction~n~ ~n~ ");
		TextDrawShowForPlayer(playerid,payment_text[playerid]);
		PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
		TogglePlayerControllable(playerid,1);
		SetTimerEx("HidePayment",5000,0,"i",playerid);

	}

}

public HttpNeonFinaliseReciever(index, response_code, data[])
{

	new playerid = index;
	if(response_code == 200)
	{

		if(strcmp(data,"true",true) == 0)
		{

			TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~g~your transaction has been complete! your neons will now be added.~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
			new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
			VehicleInfo[slot][vNeon] = buying_neon[playerid];
			RefreshNeon(slot);
			buying_neon[playerid] = 0;
			TogglePlayerControllable(playerid,1);
			SetTimerEx("HidePayment",5000,0,"i",playerid);
			new biz = GetClosestBiz(playerid);
			BizInfo[biz][bBank] += 20000;

		}
		else
		{

			TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~we could not complete your transaction, please try again~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
			buying_neon[playerid] = 0;
		 	TogglePlayerControllable(playerid,1);
		 	SetTimerEx("HidePayment",5000,0,"i",playerid);

		}

	}
	else
	{

	  	TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~an error occured when processing your transaction~n~ ~n~ ");
		TextDrawShowForPlayer(playerid,payment_text[playerid]);
		PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
		buying_neon[playerid] = 0;
	 	TogglePlayerControllable(playerid,1);
	 	SetTimerEx("HidePayment",5000,0,"i",playerid);

	}

}

public HttpNeonReciever(index, response_code, data[])
{

	new playerid = index;
	if(response_code == 200)
	{

		if(strcmp(data,"true",true) == 0)
		{

			new str[256];
			format(str,sizeof(str),"user=%d&amount=%f",AccountInfo[playerid][aID],0.50);
			str = str_replace(".","|",str);
			HTTP(playerid,HTTP_POST,URL_MAKE_PURCHASE,str,"HttpNeonFinaliseReciever");
            TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~w~you have enough funds, finalising transaction...~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			PlayerPlaySound(playerid,1058,0.0,0.0,0.0);

		}
		else
		{

		  	TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~you do not have enough funds to purchase this item, you can add more at: ucp.countrysidegaming.com~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
			buying_neon[playerid] = 0;
			TogglePlayerControllable(playerid,1);
			SetTimerEx("HidePayment",5000,0,"i",playerid);

		}

	}
	else
	{

		TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~an error occured when processing your transaction~n~ ~n~ ");
		TextDrawShowForPlayer(playerid,payment_text[playerid]);
		PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
		buying_neon[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		SetTimerEx("HidePayment",5000,0,"i",playerid);

	}

}

public HttpVehicleReciever(index, response_code, data[])
{

	new playerid = index;
	if(response_code == 200)
	{

		new can_purchase = false;
		if(strcmp(data,"true",true) == 0) can_purchase = true;
		ProcessDonatorVehiclePurchase(playerid,donator_vehicle_purchasing[playerid],PURCHASE_VALIDATION,can_purchase);

	}
	else
	{

		ProcessDonatorVehiclePurchase(playerid,donator_vehicle_purchasing[playerid],PURCHASE_ERROR,false);

	}

}

public HttpVehicleFinaliseReciever(index, response_code, data[])
{

	new playerid = index;
	if(response_code == 200)
	{

		if(strcmp(data,"true",true) == 0)
		{


			ProcessDonatorVehiclePurchase(playerid,donator_vehicle_purchasing[playerid],PURCHASE_FINAL,true);


		}
		else
		{

            ProcessDonatorVehiclePurchase(playerid,donator_vehicle_purchasing[playerid],PURCHASE_FINAL,false);

		}

	}
	else
	{

		ProcessDonatorVehiclePurchase(playerid,donator_vehicle_purchasing[playerid],PURCHASE_ERROR,false);

	}

}

ProcessDonatorVehiclePurchase(playerid,vehicle_model,type=PURCHASE_CHECK,can_purchase=false)
{

	switch(type)
	{

	    case PURCHASE_CHECK:
		{

		    donator_vehicle_purchasing[playerid] = vehicle_model;
			new str[256];
			format(str,sizeof(str),"user=%d&amount=%f",AccountInfo[playerid][aID],VehicleModelInfo[vehicle_model][vmDonatorVeh]);
			str = str_replace(".","|",str);
		    HTTP(playerid,HTTP_POST,URL_CHECK_PURCHASE,str,"HttpVehicleReciever");
			TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~w~checking your wallet for funds...~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			PlayerPlaySound(playerid,1058,0.0,0.0,0.0);

		}
		case PURCHASE_VALIDATION:
		{

			if(can_purchase)
			{

				new str[256];
				format(str,sizeof(str),"user=%d&amount=%f",AccountInfo[playerid][aID],VehicleModelInfo[vehicle_model][vmDonatorVeh]);
				str = str_replace(".","|",str);
				HTTP(playerid,HTTP_POST,URL_MAKE_PURCHASE,str,"HttpVehicleFinaliseReciever");
                TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~w~you have enough funds, finalising transaction...~n~ ~n~ ");
				TextDrawShowForPlayer(playerid,payment_text[playerid]);
				PlayerPlaySound(playerid,1058,0.0,0.0,0.0);

			}
			else
			{

			 	TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~you dont have enough funds to purchase this vehicle, add funds at ucp.countrysidegaming.com~n~ ~n~ ");
				TextDrawShowForPlayer(playerid,payment_text[playerid]);
				SetTimerEx("HidePayment",5000,0,"i",playerid);
			    donator_vehicle_purchasing[playerid] = -1;
			    PlayerPlaySound(playerid,1058,0.0,0.0,0.0);

			}

		}
		case PURCHASE_ERROR:
		{

		    TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~an error occured when processing your transaction~n~ ~n~ ");
			TextDrawShowForPlayer(playerid,payment_text[playerid]);
			SetTimerEx("HidePayment",5000,0,"i",playerid);
		    donator_vehicle_purchasing[playerid] = -1;
		    PlayerPlaySound(playerid,1058,0.0,0.0,0.0);

		}
		case PURCHASE_FINAL:
		{

			if(can_purchase)
			{

			    TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~g~your transaction has been finalised.. Your vehicle will be created shortly~n~ ~n~ ");
				TextDrawShowForPlayer(playerid,payment_text[playerid]);
				SetTimerEx("HidePayment",5000,0,"i",playerid);
				PurchaseVehicle(playerid,donator_vehicle_purchasing[playerid],true);
				PlayerPlaySound(playerid,1058,0.0,0.0,0.0);

			}
			else
			{

			    TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~r~an error occured when processing your transaction~n~ ~n~ ");
				TextDrawShowForPlayer(playerid,payment_text[playerid]);
				SetTimerEx("HidePayment",5000,0,"i",playerid);
				PlayerPlaySound(playerid,1058,0.0,0.0,0.0);

			}
			donator_vehicle_purchasing[playerid] = -1;

		}

	}

}

stock RunDisconnect(playerid)
{

	if(AccountInfo[playerid][aConnectionID])
	{

		new str[256];
		format(str,sizeof(str),"UPDATE rp_connection_logs SET disconnected = NOW() WHERE id = '%d'",AccountInfo[playerid][aConnectionID]);
		mysql_query(str,player_threads_alt[playerid]);

	}

}

stock RefreshBizAudio(biz)
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(in_biz[i] == biz)
	        {

	            RefreshPlayerBizAudio(i);

	        }

	    }

	}

}

stock RefreshPlayerBizAudio(playerid)
{

	new biz = in_biz[playerid];
	if(BizInfo[biz][bStream])
	{

	    PlayAudioStreamForPlayer(playerid, BizInfo[biz][bStream]);

	}
	else
	{

	    StopAudioStreamForPlayer(playerid);

	}

}

stock RefreshPopulation() {

	print("Refreshing Population");
    mysql_query("SELECT id FROM rp_characters",QUERY_SIGN,QUERY_SIGN);

}

stock CreateBoomBox(playerid,Float:X, Float:Y, Float:Z, Float:R)
{

	Z -= 1.0;
	new slot = FetchNextBoomBoxSlot();
	if(slot > -1)
	{

	    BoomBoxInfo[slot][boX] = X;
	    BoomBoxInfo[slot][boY] = Y;
	    BoomBoxInfo[slot][boZ] = Z;
		BoomBoxInfo[slot][boObject] = CreateObject(2103,X,Y,Z,0.0,0.0,R);
		BoomBoxInfo[slot][boUsed] = 1;
		BoomBoxInfo[slot][boPlacer] = CharacterInfo[playerid][active_character[playerid]][cID];
		RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_BOOMBOX,1);

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"An error occured when creating your boom box.");

	}

}

stock FetchNextBoomBoxSlot()
{

	for(new i = 0; i < MAX_BOOMBOXES; i ++)
	{

	    if(BoomBoxInfo[i][boUsed] == 0)
	    {

	        return i;

	    }

	}
	return -1;

}

stock HasPlacedBoomBox(playerid)
{

	for(new i = 0; i < MAX_BOOMBOXES; i ++)
	{

		if(BoomBoxInfo[i][boUsed])
		{

		    if(BoomBoxInfo[i][boPlacer] == CharacterInfo[playerid][active_character[playerid]][cID]) return true;

		}

	}
	return false;

}

stock GetClosestBoomBox(playerid,Float:maxdistance)
{

	new winner = -1;
	new Float:winning_distance = 99999.9;
	for(new i = 0; i < MAX_BOOMBOXES; i ++)
	{

	    if(BoomBoxInfo[i][boUsed])
	    {

			new Float:distance = GetDistanceToPoint(playerid,BoomBoxInfo[i][boX],BoomBoxInfo[i][boY],BoomBoxInfo[i][boZ]);
		    if(distance < winning_distance && distance < maxdistance)
		    {

				winner = i;
				winning_distance = distance;

		    }

		}

	}
	return winner;

}

stock RefreshBoomBoxListeners(box) {

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(streaming_boombox[i] == box)
	        {

				Audio_Stop(i,boom_box_handle[i]);
	            streaming_boombox[i] = -1;
	            boom_box_handle[i] = -1;

	        }

	    }

	}

}

stock FetchFuelInterval(vehicleid)
{

	new model = GetVehicleModel(vehicleid);
	for(new i = 0; i < sizeof(VehicleModelInfo); i ++)
	{

	    if(VehicleModelInfo[i][vmModel] == model)
	    {

	        return VehicleModelInfo[i][vmFuelInterval];

	    }

	}
	return 180;

}

stock FetchLanguageName(language,name[])
{

	switch(language)
	{

	    case LANGUAGE_SPANISH:
	    {

	        return format(name,64,"Spanish");

	    }
	    case LANGUAGE_ITALIAN:
	    {

	        return format(name,64,"Italian");

	    }
	    case LANGUAGE_CHINESE:
     	{

	        return format(name,64,"Chinese");

	    }
	    case LANGUAGE_GERMAN:
     	{

	        return format(name,64,"German");

	    }
	    case LANGUAGE_FRENCH:
	    {

	        return format(name,64,"French");

	    }

	}
	return format(name,64,"None");

}

stock InLibrary(playerid)
{

	if(in_biz[playerid] == -1) return false;
	if(BizInfo[in_biz[playerid]][bType] == BIZ_TYPE_LIB) return true;
	return false;

}

stock IsInPizzaBoy(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) return false;
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 448) return true;
	return false;

}

stock IsFactionMemberDoingGunRun(factionid)
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(CharacterInfo[i][active_character[i]][cFaction] == factionid && gunrun[i]) return true;

	    }

	}
	return false;

}

stock GetSkillName(name[],skill)
{

	switch(skill)
	{

	    case SKILL_MINER:
	    {

	        return format(name,128,"Miner");

	    }
	    case SKILL_MANUFACTER:
	    {

	        return format(name,128,"Manufacturer");

	    }
	    case SKILL_MECHANIC:
	    {

	        return format(name,128,"Mechanic");

	    }
	    case SKILL_FISHER:
	    {

	        return format(name,128,"Fisherman");

	    }

	}
	return format(name,128,"None");

}

stock IncreaseSkill(playerid,amount)
{

	if(CharacterInfo[playerid][active_character[playerid]][cSkillLevel] < 200)
	{

		CharacterInfo[playerid][active_character[playerid]][cSkillLevel] += amount;
		new str[128];
		new name[128];
		GetSkillName(name,CharacterInfo[playerid][active_character[playerid]][cSkill]);
		format(str,sizeof(str),"Your skill as a %s has increased to %d",name,CharacterInfo[playerid][active_character[playerid]][cSkillLevel]);
		SendClientMessage(playerid,COLOR_YELLOW2,str);

	}

}

public HidePayment(playerid)
{

	TextDrawHideForPlayer(playerid,payment_text[playerid]);

}

stock FetchParamText(result[],string[],idx)
{

	new length = strlen(string);
	while ((idx < length) && (string[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result2[256];
	while ((idx < length) && ((idx - offset) < (sizeof(result2) - 1)))
	{
		result2[idx - offset] = string[idx];
		idx++;
	}
	result2[idx - offset] = EOS;
	new tmp[256];
	tmp = trim(result2);
	return format(result,256,"%s",tmp);

}

COMMAND:removebiz(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
	{
		new house = GetClosestBiz(playerid);
		RemoveBiz(house);
		SendClientMessage(playerid,COLOR_GREEN,"You have removed this business.");
		new logstr[128];
		format(logstr,sizeof(logstr),"Removed business %d",house);
		logAdminEditAction(playerid,"BIZ_EDIT",logstr);
		return 1;
	} else {
	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
	    return 1;
	}

}

COMMAND:removehouse(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
	{
		new house = GetClosestHouse(playerid);
		RemoveHouse(house);
		clearHouseInventory(house);
		SendClientMessage(playerid,COLOR_GREEN,"You have removed this house.");
		new logstr[128];
		format(logstr,sizeof(logstr),"Removed house %d",house);
		logAdminEditAction(playerid,"HOUSE_EDIT",logstr);
		return 1;
	} else {
	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
	    return 1;
	}

}

COMMAND:armory(playerid,params[])
{

	if(IsLaw(playerid) && duty[playerid]) {
	
		if(IsPlayerInRangeOfPoint(playerid,5.0,255.3259,74.4255,1003.6406))
		{
		
			ShowPlayerDialog(playerid,DIALOG_ARMORY,DIALOG_STYLE_LIST,"Choose a tool to arm yourself with...","Nightstick\nPepper Spray\nDesert Eagle\nShotgun\nCombat Shotgun\nMP5\nM4\nSniper Rifle\nCamera\nMask\nToolkit\nFire Extinguisher","Confirm","Cancel");
			return 1;
		
		} else {
		
		    SendErrorMsg(playerid,"You are not at the Armory.");
		    return 1;
		
		}
	
 	} else {
	
	    SendErrorMsg(playerid,"You are not a cop or are not on duty.");
	    return 1;
	
	}

}

COMMAND:adminhelp(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
	{
	
		SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Trainee Admin: {FFFFFF} /kick /ban /jail /slap /sethp /goto /gethere /spectate /cancelspectate");
		SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Trainee Admin: {FFFFFF} /sendafk /localrespawn /freeze /thaw /infovar /interiorvars /vworld /atravel /tpvehicle");
		SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Trainee Admin: {FFFFFF} /mark /tpmark /clearmarks /ao /setinterior /setworld /setdrunk /timeban /respawn");
		SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Trainee Admin: {FFFFFF} /afrisk /adminhelp /unjail /demask /revokebikepermission /respawn /aduty /blockpm");
		SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Trainee Admin: {FFFFFF} /a /ac /revive /togtp /carvars /oldvehicle /announce /setdrunk");
		if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
		{

			SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Administrator: {FFFFFF} /charstats /viewcars /moveto /entervehicle /tpvehiclehere /togooc /unban");
			SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Administrator: {FFFFFF} /stopstream /setstream /up /down /interiorid /towrentcars /entervehicle /respawnallcars");
			if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
			{
			
			    SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Supervisor: {FFFFFF} /agiveweapon /editplayer /saveweapons /saveplayer /editvehicle /createbiz /ahouse /abiz");
			    SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Supervisor: {FFFFFF} /setskin /bizid /houseid /removeassistant /makeassistant /givemoney /savestuff /setarmor");
			    SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Supervisor: {FFFFFF} /grantbikepermission /createhouse /prisonrelease /agive /opennascar /openderby /closenascar");
			    SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Supervisor: {FFFFFF} /closederby /startnascar /startderby");
			    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
				{

					SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Lead Administrator: {FFFFFF} /restartserver /setadmin /hideadmin /reloadmodels /reloadfactions /reloadcompanies");
					SendClientMessage(playerid,COLOR_WHITE,"{FFFF00} Lead Administrator: {FFFFFF} /tpvehicleuid /refresh (DO NOT SPAM THIS CMD, EVER!)");

				}
			
			}
		
		}
		return 1;
	
	}
	else
	{
	
	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
	    return 1;
	
	}

}

COMMAND:hideadmin(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
	{
	
		if(GetPVarInt(playerid,"adminHidden")) {
		
		    SetPVarInt(playerid,"adminHidden",0);
		    SendClientMessage(playerid,COLOR_GREEN,"Admin status revealed.");
		    return 1;
		
		} else {
		
		    SetPVarInt(playerid,"adminHidden",1);
		    SendClientMessage(playerid,COLOR_GREEN,"Admin status hidden.");
		    return 1;
		
		}
	
	} else {
	
	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a lead administrator.");
	    return 1;
	
	}

}

COMMAND:prisonrelease(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
	{

	    new idx = 0;
	    new tmp[32];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /prisonrelease [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(!HasCell(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player in prison."); return 1; }
		new cell = FetchPlayerCell(other);
		prisoner[other] = 0;
		PrisonInfo[cell][pExpire] = gettime();
		new str[128];
		new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		GetCharacterName(other,oname);
		format(str,sizeof(str),"[AdminCmd] %s has released %s from prison.",name,oname);
		SendAdminBroadcast(str);
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
	    return 1;

	}

}

COMMAND:lock(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cFaction])
	{

	    new closeinterior = GetClosestInterior(playerid);
        new inter = (closeinterior > -1) ? closeinterior : in_interior[playerid];
        if(inter > -1)
        {

            if(InteriorInfo[inter][iFaction] == CharacterInfo[playerid][active_character[playerid]][cFaction])
            {

                if(InteriorInfo[inter][iLock] == 0)
                {

					InteriorInfo[inter][iLock] = 1;
				    GameTextForPlayer(playerid,"~r~Interior Locked",5000,6);
					PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					return 1;

				}
			  	else
                {

					InteriorInfo[inter][iLock] = 0;
				    GameTextForPlayer(playerid,"~g~Interior Unlocked",5000,6);
					PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					return 1;

				}

            }
            else
            {

                SendClientMessage(playerid,COLOR_LIGHTRED,"Your faction does not own this interior.");
                return 1;

            }

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near an interior.");
            return 1;

        }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a faction.");
	    return 1;

	}

}

COMMAND:eat(playerid,params[])
{

	if(IsPlayerInRangeOfPoint(playerid,25.0,154.89, 1433.04, 12.67))
	{

	    if(HasCell(playerid))
	    {

	        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
	        SendEmote(playerid,"picks up some disgusting looking food, and begins eating it.");
	        SetPlayerHealth(playerid,100);
	        return 1;

	    }
	    else
     	{

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in prison.");
	        return 1;

	    }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at the eating position.");
	    return 1;

	}

}

COMMAND:paybail(playerid,params[])
{

	if(IsPlayerInRangeOfPoint(playerid,10.0,246.7684,67.1489,1003.6406))
	{

		new idx = 0;
	    new tmp[32];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /paybail [playerid/player name]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(CharacterInfo[other][active_character[other]][cJailTime] > 0 && CharacterInfo[other][active_character[other]][cBail] > 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= CharacterInfo[other][active_character[other]][cBail])
		    {

		        if(other != playerid)
		        {

			        CharacterInfo[playerid][active_character[playerid]][cMoney] -= CharacterInfo[other][active_character[other]][cBail];
					CharacterInfo[other][active_character[other]][cJailTime] = 1;
					new name[MAX_PLAYER_NAME];
					GetCharacterName(other,name);
					SendStrMsg(playerid,COLOR_GREEN,"You have paid %s's bail, they have been released.",name);
					GetCharacterName(playerid,name);
					SendStrMsg(other,COLOR_YELLOW,"%s has paid your bail, you have been released.",name);
					FactionInfo[0][fBank] += CharacterInfo[other][active_character[other]][cBail];
					return 1;

	 			}
	 			else
	 			{

	 			    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot bail yourself out.");
	 			    return 1;

	 			}

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money to pay this players bail.");
		        return 1;

		    }

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in jail or he does not have bail.");
		    return 1;

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in the police department.");
	    return 1;

	}

}

COMMAND:prisoners(playerid,params[])
{

	if(IsPlayerInRangeOfPoint(playerid,10.0,246.7684,67.1489,1003.6406))
	{

	    ShowPrisoners(playerid);
	    return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in the police department.");
	    return 1;

	}

}

COMMAND:tickets(playerid,params[])
{
	new idx = 0;
	new tmp[32];
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_FACTION,"USAGE: /tickets [action] [value(if required)]"); SendClientMessage(playerid,COLOR_FACTION,"Actions: pay, view, list"); return 1; }
	if(strcmp(tmp,"list",true) == 0)
	{
		if(!death_mode[playerid])
		{

		    ShowPlayerTickets(playerid);
		    return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot do this while in death mode.");
		    return 1;

		}
	}
	else if(strcmp(tmp,"view",true) == 0)
	{

	    if(!death_mode[playerid])
     	{

	        new tmp2[32];
	        tmp2 = strtok(params,idx);
			new slot = strval(tmp2);
			if(slot >= 1)
			{

	        	ViewTicket(playerid,slot);
	        	return 1;

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid slot (/tickets view)");
	            return 1;

	        }

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot do this while in death mode.");
	        return 1;

	    }

	}
	else if(strcmp(tmp,"pay",true) == 0)
	{

		if(!death_mode[playerid])
     	{

			if(IsPlayerInRangeOfPoint(playerid,10.0,246.7684,67.1489,1003.6406))
			{
		        new tmp2[32];
		        tmp2 = strtok(params,idx);
				new slot = strval(tmp2);
				if(slot >= 1)
				{

		        	PayTicket(playerid,slot);
		        	return 1;

		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid slot (/tickets view)");
		            return 1;

		        }
			}
			else {

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in the Police Department.");
			    return 1;

			}

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot do this while in death mode.");
	        return 1;

	    }

	}
	SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown action.");
	return 1;
}

COMMAND:timeleft(playerid,params[])
{

	if(HasCell(playerid))
	{

	    new cell = FetchPlayerCell(playerid);
		new secsleft = (PrisonInfo[cell][pExpire] - gettime());
		new str[128];
		new timeleft = (secsleft / 60);
		if(timeleft < 60) {

			format(str,sizeof(str),"You have %d minutes left in prison.",timeleft);

		}
		else {

		    timeleft = (timeleft / 60);
		    format(str,sizeof(str),"You have %d hours left in prison.",timeleft);

		}
		SendClientMessage(playerid,COLOR_GREEN,str);
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in prison.");
	    return 1;

	}

}

COMMAND:prison(playerid,params[])
{

	if(IsLaw(playerid) && duty[playerid])
	{

		if(IsPlayerInRangeOfPoint(playerid,7.5,1807.1791,-1539.6235,5700.4302))
		{

		    new idx = 0;
		    new tmp[32];
			tmp = strtok(params,idx);
			if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_FACTION,"USAGE: /prison [action] [value(if required)]"); SendClientMessage(playerid,COLOR_FACTION,"Actions: alarm, lockdown, unlock, imprison"); return 1; }
			if(strcmp(tmp,"announce",true) == 0)
			{

				new result[128];
				FetchParamText(result,params,idx);
				if(!strlen(result)) { SendClientMessage(playerid,COLOR_FACTION,"USAGE: /prison announce [announcement text]"); return 1; }
				new str[128];
				new name[MAX_PLAYER_NAME];
				GetCharacterName(playerid,name);
				format(str,sizeof(str),"[Prison Announcement] %s %s: %s",CharacterInfo[playerid][active_character[playerid]][cRankName],name,result);
				SendPrisonAnnouncement(str);
				return 1;

			}
			if(strcmp(tmp,"imprison",true) == 0)
			{

			    new tmp2[32];
			    tmp2 = strtok(params,idx);
			    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /prison imprison [playerid/name] [time(hours)] [reason]"); return 1; }
			    new other = ReturnUser(tmp2);
			    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
				new tmp3[32];
				tmp3 = strtok(params,idx);
				if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /prison imprison [playerid/name] [time(hours)] [reason]"); return 1; }
				new hours = strval(tmp3);
				if(hours < 1 || hours > 72) { SendClientMessage(playerid,COLOR_LIGHTRED,"Time cannot be below 1 hour or above 72"); return 1; }
				new result[128];
				FetchParamText(result,params,idx);
				if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /prison imprison [playerid/name] [time(hours)] [reason]"); return 1; }
				if(GetDistanceBetweenPlayers(playerid,other) > 7.5) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near this player."); return 1; }
				new clean_result[128];
				mysql_real_escape_string(result,clean_result);
				new cell = FetchNextCell();
				if(cell > -1)
				{

				    PrisonInfo[cell][pExpire] = (gettime() + (3600 * hours));
				    PrisonInfo[cell][pOwner] = CharacterInfo[other][active_character[other]][cID];
				    new str[256];
				    format(str,sizeof(str),"INSERT INTO rp_criminal_records (owner,time,reason,location,officer) VALUES ('%d','%d','%s','Fort Carson Prison','%d')",
				    CharacterInfo[other][cID],
					hours,
					clean_result,
					CharacterInfo[playerid][active_character[playerid]][cID]);
					mysql_query(str,player_threads[playerid]);
					new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					GetCharacterName(other,oname);
					format(str,sizeof(str),"[Prison] %s %s has justed booked %s into Fort Carson Prison",CharacterInfo[playerid][active_character[playerid]][cRankName],name,oname);
					SendClientMessageToAll(COLOR_LIGHTRED,str);
					format(CharacterInfo[other][active_character[other]][cWeapons],256,"0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0");
					ResetInventory(other);
					SetPlayerHealth(other,100);
					format(str,sizeof(str),"You have just been placed into prison for %d hours, you will be automatically released when your time is finished. Your time will continue to countdown when offline.",hours);
					SendClientMessageA(other,COLOR_GREEN,str);
					SendMsg(playerid,COLOR_LIGHTBLUE,"This criminal has been booked into cell %d",(cell + 1));
					prisoner[other] = 1;
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"No cells are available.");
				    return 1;

				}

			}
			if(strcmp(tmp,"unlock",true) == 0)
			{

				SendEmote(playerid,"Presses a button to open all cell doors.");
				OpenAllCells();
				return 1;

			}
			if(strcmp(tmp,"lockdown",true) == 0)
			{

				SendEmote(playerid,"Presses a button to close all cell doors.");
				CloseAllCells();
				return 1;

			}
			if(strcmp(tmp,"alarm",true) == 0)
			{

				if(!prison_alarm) {

				    prison_alarm = 1;
				    SendEmote(playerid,"Presses a button to activate the prison alarm.");
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					new str[128];
					format(str,sizeof(str),"[Faction] %s %s has just sounded the prison alarm!",CharacterInfo[playerid][active_character[playerid]][cRankName],name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
				    return 1;

				}
				else {

				    prison_alarm = 0;
				    SendEmote(playerid,"Presses a button to de-activate the prison alarm.");
				    new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					new str[128];
					format(str,sizeof(str),"[Faction] %s %s has just de-activated the prison alarm",CharacterInfo[playerid][active_character[playerid]][cRankName],name);
					SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
				    return 1;

				}

			}
			SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown action.");
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You are not at the prison control point.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not a cop or are not on duty.");
	    return 1;

	}

}

COMMAND:prisonduty(playerid,params[])
{

	if(IsLaw(playerid))
	{

	    if(IsPlayerInRangeOfPoint(playerid,15.0,1823.0186,-1535.9657,5700.4302))
		{

			ToggleDuty(playerid,DUTY_TYPE_PRISON);
			return 1;

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You are not in the prison duty room.");
	        return 1;

	    }

	}
	else
	{

	    SendErrorMsg(playerid,"You are not a cop or are not on duty.");
	    return 1;

	}

}

COMMAND:unjail(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
	{

		new tmp[32];
		new idx = 0;
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USER: /unjail [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(AccountInfo[other][aJailTime] <= 0) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in admin jail."); return 1; }
		AccountInfo[other][aJailTime] = 1;
		new str[256];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(other,name);
		format(str,sizeof(str),"[Admin] %s has unjailed %s",AccountInfo[playerid][aName],name);
		SendAdminAction(str);
		LogAdminAction("Unjail","",playerid,other);
		return 1;

	}
	else{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
	    return 1;

	}

}

COMMAND:fish(playerid,params[])
{

	if(IsPlayerInRangeOfPoint(playerid,10.0,2092.2117,-73.1122,0.8910) || IsPlayerInRangeOfPoint(playerid,10.0,2065.9541,-82.5474,0.8825))
	{

		if(CharacterInfo[playerid][active_character[playerid]][cSkill] == SKILL_FISHER)
		{

		    if(IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot do this while in a vehicle."); return 1; }
		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_FISHROD,1))
		    {

		    	cl_SetClothing(playerid,CLOTHING_MISC,18632,6,0.1,0.03,0.0,0.0,180.0,0.0,1.0,1.0,1.0);
			    cmd_aimgun(playerid,"");
			    SendEmote(playerid,"gets out a fishing rod and begins fishing.");
				SetPlayerProgressBar(playerid,PROGRESS_BAR_FISH,35);
			    return 1;

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have a fishing rod!");
		        return 1;

		    }

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have the fisherman skill.");
   	    	return 1;

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at a pier.");
	    return 1;

	}

}

COMMAND:market(playerid,params[])
{

	if(IsPlayerInRangeOfPoint(playerid,10.0,2249.9968,52.8400,26.6671))
	{

		mk_menulevel[playerid] = 0;
		mk_menudirection[playerid] = 0;
		ShowPlayerDialog(playerid,DIALOG_MARKET,DIALOG_STYLE_LIST,"Please choose an action...","Sell Items\nBuy Items\n","Confirm","Cancel");
		return 1;

	}
	else
	{

		SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near the market.");
		return 1;

	}

}

COMMAND:demask(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
	{

		new idx = 0;
		new tmp[32];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /demask [mask id]"); return 1; }
		new other = (strval(tmp) - mask_salt);
		if(other < 0 || other > MAX_PLAYERS || !IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid mask id"); }
		new name[MAX_PLAYER_NAME];
		GetCharacterName(other,name);
		SendStrMsg(playerid,COLOR_YELLOW,"Mask ID is used by %s",name);
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
	    return 1;

	}

}

COMMAND:revokebikepermission(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
	{

	    new idx = 0;
	    new tmp[32];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /revokebikepermission [playerid/player name]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
	    AccountInfo[other][aBikePerm] = 0;
		new str[256];
		format(str,sizeof(str),"[AdminCmd] %s has revoked %s bike permission.",AccountInfo[playerid][aName],AccountInfo[other][aName]);
		SendAdminBroadcast(str);
		format(str,sizeof(str),"%s has revoked your bike permission.",AccountInfo[playerid][aName]);
		SendClientMessage(other,COLOR_YELLOW,str);
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
	    return 1;

	}

}

COMMAND:grantbikepermission(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
	{

	    new idx = 0;
	    new tmp[32];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /grantbikepermission [playerid/player name]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
	    AccountInfo[other][aBikePerm] = 1;
		new str[256];
		format(str,sizeof(str),"[AdminCmd] %s has granted %s bike permission.",AccountInfo[playerid][aName],AccountInfo[other][aName]);
		SendAdminBroadcast(str);
		format(str,sizeof(str),"%s has granted you bike permission.",AccountInfo[playerid][aName]);
		SendClientMessage(other,COLOR_YELLOW,str);
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
	    return 1;

	}

}

COMMAND:dropphone(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cPhone] > 0)
	{

	    CharacterInfo[playerid][active_character[playerid]][cPhone] = 0;
	    CharacterInfo[playerid][active_character[playerid]][cPhoneModel] = 0;
	    SendEmote(playerid,"drops his phone onto the floor, smashing it.");
	    return 1;

	}
	else
	{

		SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have a phone.");
		return 1;

	}

}

COMMAND:setaction(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
	{

		new tmp[64];
		new idx = 0;
		tmp = strtok(params,idx);
		new action = strval(tmp);
		SetPlayerSpecialAction(playerid,action);
		return 1;

	}
	return 1;

}

COMMAND:takeerrand(playerid,params[])
{

	qs_ProcessNPCStart(playerid);
	return 1;

}

COMMAND:talk(playerid,params[])
{

	qs_ProcessNPCIntro(playerid);
	return 1;

}

COMMAND:buyvehicle(playerid,params[])
{

	if(IsInAuctionHouse(playerid))
	{

	    new veh = GetClosestSellVehicle(playerid);
	    if(veh > -1)
	    {

	        new price = VehicleInfo[veh][vSellingPrice];
	        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
	        {

	            if(!vehicle_creating)
	            {

					new biz = in_biz[playerid];
				    vehicle_creating = 1;
		            CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
		            new other = IsCharacterOnline(VehicleInfo[veh][vOwner]);
		            if(other > -1)
		            {

		                new vname[128];
		                GetVehicleNameByModel(VehicleInfo[veh][vModel],vname);
	                    SendStrMsg(other,COLOR_YELLOW,"[Cellphone] SMS From Used Vehicle Dealership: We have just sold your %s!",vname);
	                    CharacterInfo[other][active_character[other]][cBank] += price;

		            }
		            else
		            {

		                new str[256];
		                format(str,sizeof(str),"UPDATE rp_characters SET bank = (bank + %d) WHERE id = '%d'",price,VehicleInfo[veh][vOwner]);
		                mysql_query(str,player_threads[playerid]);

		            }
		            SendMail(VehicleInfo[veh][vOwner],"Your vehicle has been sold!","Congratulations your vehicle has been sold, the money has been transfered to your bank account.","Used Vehicle Dealership",player_threads_alt[playerid]);
		            VehicleInfo[veh][vOwner] = CharacterInfo[playerid][active_character[playerid]][cID];
		            DestroyVehicle(VehicleInfo[veh][vVehicle]);
		            VehicleInfo[veh][vSpawnX] = BizInfo[biz][bVX];
		            VehicleInfo[veh][vSpawnY] = BizInfo[biz][bVY];
		            VehicleInfo[veh][vSpawnZ] = BizInfo[biz][bVZ];
		            VehicleInfo[veh][vSpawnR] = BizInfo[biz][bVR];
		            VehicleInfo[veh][vVehicle] = CreateVehicle(VehicleInfo[veh][vModel],VehicleInfo[veh][vSpawnX],VehicleInfo[veh][vSpawnY],VehicleInfo[veh][vSpawnZ],VehicleInfo[veh][vSpawnR],VehicleInfo[veh][vColor1],VehicleInfo[veh][vColor2],-1);
		            VehicleInfo[veh][vSelling] = -1;
		            VehicleInfo[veh][vSellingPrice] = 0;
		            sync_attribs[VehicleInfo[veh][vVehicle]] = 1;
					sync_engine_off[VehicleInfo[veh][vVehicle]] = 1;
		            vehicle_creating = 0;
		            SendClientMessage(playerid,COLOR_GREEN,"You have purchased this vehicle! It is waiting outside for you.");
				    for(new z = 0; z < 5; z ++)
				    {

				        if(used_vehicle_slots[biz][z] == veh)
				        {

				            DestroyPickup(used_vehicle_pickups[biz][z]);
				            used_vehicle_slots[biz][z] = -1;
				            used_vehicle_pickups[biz][z] = 0;

				        }

				    }
		            return 1;

		      	}
		      	else
		      	{

		      	    SendClientMessage(playerid,COLOR_LIGHTRED,"There is a vehicle currentlly being processed, please try again.");
		      	    return 1;

		      	}

	        }
	        else
	        {

	            SendErrorMsg(playerid,"You do not have enough money to purchase this vehicle.");
	            return 1;

	        }

	    }
	    else
		{

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a purchasable vehicle.");
	        return 1;

	    }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a used vehicle dealership.");
	    return 1;

	}

}

COMMAND:calllog(playerid,params[])
{

	if(last_caller[playerid])
	{

		SendMsg(playerid,COLOR_YELLOW2,"The last person to call you was: %d",last_caller[playerid]);
		SendEmote(playerid,"looks down, pressing a few button on their cellphone");
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"No one has phoned you, or their number was withheld.");
	    return 1;

	}

}

COMMAND:cancelfarming(playerid,params[])
{

	if(farming[playerid])
	{

		DisablePlayerCheckpoint(playerid);
		farming[playerid] = 0;
		farming_stage[playerid] = 0;
		SendClientMessage(playerid,COLOR_GREEN,"Farming cancelled.");
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not farming.");
	    return 1;

	}

}

COMMAND:startfarming(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_FARMER)
	{

		if(IsPlayerInRangeOfPoint(playerid,25.0,1987.2389,246.2704,27.4225))
		{

		    if(InFarmerVehicle(playerid))
		    {

		        if(!farming[playerid])
		        {

					farming[playerid] = 1;
			        farming_stage[playerid] = 0;
			        SendClientMessage(playerid,COLOR_GREEN,"You have started farming, move to each checkpoint to collect crops.");
			        RefreshFarmingStage(playerid);
			        return 1;

			 	}
			 	else
			 	{

			 	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are already farming, use /cancelfarming first.");
			 	    return 1;

			 	}

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a combine harvester.");
		        return 1;

		    }

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at the farmer depot.");
		    return 1;

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a farmer.");
	    return 1;

	}

}

COMMAND:respawn(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
	{

	    if(IsPlayerInAnyVehicle(playerid))
	    {

			new veh = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(veh);
			SendClientMessage(playerid,COLOR_GREEN,"Vehicle respawned.");
			return 1;

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a vehicle.");
	        return 1;

	    }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
	    return 1;

	}

}

COMMAND:afrisk(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
	{

		new idx = 0;
	    new tmp[32];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /afrisk [playerid/player name]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
	    if(AccountInfo[other][aAdmin] > AccountInfo[playerid][aAdmin]) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot do this to higher level admins."); return 1; }
	    new pname[MAX_PLAYER_NAME];
	    new namestr[128];
  	    GetCharacterName(other,pname);
	    format(namestr,sizeof(namestr),"|-----Weapons on %s-----|",pname);
	    SendClientMessage(playerid,COLOR_GREEN,namestr);
	    for(new i = 0; i < 13; i ++)
	    {

	        new name[64];
	        new weapon, ammo;
	        GetPlayerWeaponData(other,i,weapon,ammo);
	        if(weapon > 0)
	        {
		        GetWeaponName(weapon,name,sizeof(name));
		        new str[128];
		        format(str,sizeof(str),"Weapon slot %d: %s (ammo: %d)",i,name,ammo);
		        SendClientMessage(playerid,COLOR_WHITE,str);

		  	}

		}
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
	    return 1;

	}

}

COMMAND:login(playerid,params[])
{

    if(registered[playerid])
    {

        if(!player_thread_inuse[playerid])
        {

            if(!logged[playerid])
            {

                new idx = 0;
		        new pass[128];
				pass = strtok(params,idx);
				if(strlen(pass))
				{

					new query[256];
					new clean_password[64];
					new name[MAX_PLAYER_NAME];
					new formatted_password[129];
					mysql_real_escape_string(pass,clean_password);
					WP_Hash(formatted_password, sizeof(formatted_password), clean_password);
					GetPlayerName(playerid,name,sizeof(name));
					format(query,sizeof(query),"SELECT * FROM rp_users WHERE name = '%s' AND password = '%s'",name,formatted_password);
					player_thread_inuse[playerid] = QUERY_LOGIN_SEND;
					mysql_query(query,player_threads[playerid],QUERY_LOGIN_SEND);
					return 1;

				}
				else
				{

				    SendClientMessageA(playerid,COLOR_RED,"USAGE: /login [password]");
				    ShowPlayerDialog(playerid,1,DIALOG_STYLE_PASSWORD,"Login","Enter your password below:","Login","Cancel");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You are already logged in.");
			    return 1;

			}

		}
		else
		{
		   	SendClientMessageA(playerid,COLOR_RED,"Player Thread Limit Reached, try again in a moment");
		   	ShowPlayerDialog(playerid,1,DIALOG_STYLE_PASSWORD,"Login","Enter your password below:","Login","Cancel");
			return 1;
		}

    }
    else
    {
        SendClientMessageA(playerid,COLOR_RED,"You are not registered! Use /register first");
        ShowPlayerDialog(playerid,1,DIALOG_STYLE_PASSWORD,"Login","Enter your password below:","Login","Cancel");
		return 1;
	}

}

COMMAND:time(playerid,params[])
{

    if(character_chosen[playerid])
    {

		timetxt_expire[playerid] = 6;
		TextDrawShowForPlayer(playerid,timetxt);
		return 1;

    }
    else
    {

        SendClientMessageA(playerid,COLOR_LIGHTRED,"Please choose your character first!");
        return 1;

    }

}

COMMAND:o(playerid,params[])
{

	return cmd_ooc(playerid,params);

}

COMMAND:ooc(playerid,params[])
{

    if(character_chosen[playerid])
    {

        if(ooc_status || AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
        {

			new timediff = (gettime() - GetPVarInt(playerid,"last_ooc_ts"));
			if(timediff < 3) { new new_warnings = (GetPVarInt(playerid,"ooc_warnings") + 1); SetPVarInt(playerid,"ooc_warnings",new_warnings); }
			if(GetPVarInt(playerid,"ooc_warnings") >= 3 && timediff < 30) { SendClientMessage(playerid,COLOR_LIGHTRED,"Too many chat messages in quick succession"); return 1; }
			if(timediff > 30 && GetPVarInt(playerid,"ooc_warnings") > 0) { SetPVarInt(playerid,"ooc_warnings",0); }
			new result[256];
			FetchParamText(result,params,0);
			if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /(o)oc [OOC Chat]"); return 1; }
			if(IsIp(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"You can not post IP addresses in OOC."); return 1; }
			new str[256];
			format(str,sizeof(str),"[Global OOC] %s (%d): %s",AccountInfo[playerid][aName],playerid,result);
			new col = COLOR_OOC;
			for(new i = 0; i < MAX_PLAYERS; i ++)
			{

			    if(IsPlayerConnectedEx(i))
			    {

					if(!tog_ooc[i])
					{

						SendClientMessageA(i,col,str);

					}

			    }

			}
			SetPVarInt(playerid,"last_ooc_ts",gettime());
			print(str);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"OOC is currentlly disabled.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"Please choose a character first.");
        return 1;

    }

}

COMMAND:b(playerid,params[])
{

	if(character_chosen[playerid])
	{

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /b [Local OOC]"); return 1; }
		new str[256];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		format(str,sizeof(str),"(([Local OOC] %s (%d): %s ))",name,playerid,result);
		SendLocalOOCMessage(playerid,str);
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"Please choose a character first.");
	    return 1;

	}

}

COMMAND:pm(playerid,params[])
{
	new idx = 0;
	new tmp[256];
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /pm [playerid/player name] [message]"); return 1; }
	new other = ReturnUser(tmp);
	if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Player not connected"); return 1; }
	new result[256];
	FetchParamText(result,params,idx);
	if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /pm [playerid/player name] [message]"); return 1; }
	if(!block_pm[other] || AccountInfo[playerid][aAdmin] > 0)
	{
		new name[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		new name2[MAX_PLAYER_NAME];
		GetCharacterName(other,name2);
		new str[256];
		format(str,sizeof(str),"[PM] To: %s(%d): %s",name2,other,result);
		SendClientMessageA(playerid,COLOR_YELLOW2,str);
		format(str,sizeof(str),"[PM] From: %s(%d): %s",name,playerid,result);
		SendClientMessageA(other,COLOR_YELLOW2,str);
		LogPM(name,name2,result,playerid);
		if(reply_to[other] != playerid) { SendClientMessage(other,COLOR_YELLOW2,"use /(re)ply [message] to quick-reply to this PM."); }
		reply_to[other] = playerid;
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"This person has blocked PMs.");
	    return 1;

	}

}

COMMAND:house(playerid,params[])
{

    new house = GetClosestHouse(playerid);
    if(house == -1) { house = in_house[playerid]; }
    if(house > -1)
    {

        if(!IsHouseOwner(playerid,house) && !IsRentingHouse(playerid,house))
        {

            new str[256];
            format(str,sizeof(str),"Buy House [$%d]\nRent House [$%d]",HouseInfo[house][hPrice],HouseInfo[house][hRentPrice]);
			ShowPlayerDialog(playerid,DIALOG_STYLE_LIST,DIALOG_HOUSE,"Choose your action",str,"Ok","Cancel");
			return 1;

        }
        else
        {

            new str[256]; new tmp[256];
			if(HouseInfo[house][hLocked]) { strins(str,"Unlock Door\n",strlen(str)); } else { strins(str,"Lock Door\n",strlen(str)); }
			new rentable[16];
			if(HouseInfo[house][hRentable])
			{

				format(rentable,sizeof(rentable),"Yes");

			}
			else
			{

			    format(rentable,sizeof(rentable),"No");

			}
			if(IsRentingHouse(playerid,house)) { strins(str,"Unrent House\n",strlen(str)); } else if(IsHouseOwner(playerid,house)) { format(tmp,sizeof(tmp),"Sell House [$%d]\nWithdraw Money [$%d]\nSet Rent\n\nTenants\nUpgrades\nSet Rentable [%s]",((60 * HouseInfo[house][hPrice]) / 100),HouseInfo[house][hBank],rentable); strins(str,tmp,strlen(str)); }
			ShowPlayerDialog(playerid,DIALOG_STYLE_LIST,DIALOG_HOUSE,"Choose your action",str,"Ok","Cancel");
			return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not near a house.");
        return 1;

    }

}

COMMAND:s(playerid,params[])
{

	return cmd_shout(playerid,params);

}

COMMAND:shout(playerid,params[])
{

    if(character_chosen[playerid])
    {

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /(s)hout [Shout Text]"); return 1; }
        new str[256];
	    new name[MAX_PLAYER_NAME];
		GetCharacterNameEx(playerid,name);
		format(str,sizeof(str),"%s Shouts: %s",name,result);
		SendLocalICMessage(playerid,str,50.0);
		printf("%s",str);
		return 1;

    }
    else
    {

        SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /(s)hout [Shout Text]");
        return 1;

    }

}

COMMAND:enter(playerid,params[])
{

	new house = GetClosestHouse(playerid);
	if(house > -1)
	{

	    if(HouseInfo[house][hLocked]) { GameTextForPlayer(playerid,"~r~Locked",5000,6); PlayerPlaySound(playerid,1145,0.0,0.0,0.0); return 1; }
	    SetPlayerInterior(playerid,HouseInfo[house][hInterior]);
	    SetPlayerVirtualWorld(playerid,house);
	    SetPlayerPos(playerid,HouseInfo[house][hInteriorX],HouseInfo[house][hInteriorY],HouseInfo[house][hInteriorZ]);
	    in_house[playerid] = house;
	    return 1;

	}

	new biz = GetClosestBiz(playerid);
	if(biz > -1)
	{

	    if(!BizInfo[biz][bOpen]) { GameTextForPlayer(playerid,"~r~Closed",5000,6); PlayerPlaySound(playerid,1145,0.0,0.0,0.0); return 1; }
	    OnPlayerEnterBusiness(playerid,biz);
	    return 1;

	}

	new inter = GetClosestInterior(playerid);
	if(inter > -1)
	{

	    OnPlayerEnterInterior(playerid,inter);
	    return 1;

	}
	return 1;

}

COMMAND:exit(playerid,params[])
{

	new house = in_house[playerid];
	if(house > -1)
	{

	    if(HouseInfo[house][hLocked]) { GameTextForPlayer(playerid,"~r~Locked",5000,6); PlayerPlaySound(playerid,1145,0.0,0.0,0.0); return 1; }
	    SetPlayerInterior(playerid,0);
	    SetPlayerVirtualWorld(playerid,0);
	    SetPlayerPos(playerid,HouseInfo[house][hSpawnX],HouseInfo[house][hSpawnY],HouseInfo[house][hSpawnZ]);
	    in_house[playerid] = -1;
	    return 1;

	}

	new biz = in_biz[playerid];
	if(biz > -1)
	{

	    OnPlayerExitBusiness(playerid,biz);
	    return 1;

	}

  	OnPlayerExitInterior(playerid);
	return 1;

}

COMMAND:food(playerid,params[])
{

	new biz = in_biz[playerid];
	if(biz > -1)
	{

		if(BizInfo[biz][bType] == BIZ_TYPE_FOOD)
		{

			ShowFoodDialog(playerid);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You cannot purchase food here..");
		    return 1;

		}

	}
	if(in_house[playerid] > -1)
	{

		new Float:maxhp;
		maxhp = GetMaxHouseHeal(in_house[playerid]);
		new Float:hp;
		GetPlayerHealth(playerid,hp);
		if(hp < maxhp)
		{

			SetPlayerHealth(playerid,maxhp);
			SendClientMessage(playerid,COLOR_GREEN,"You have been healed to the maximum this house can provide.");
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"This house is out of food.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in any business.");
	    return 1;

	}

}

COMMAND:fill(playerid,params[])
{

    if(IsAtGasStation(playerid))
    {

        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {

			new veh = GetPlayerVehicleID(playerid);
			new slot = GetVehicleSlot(veh);
			if(slot > -1)
			{

			    if(VehicleInfo[slot][vFuel] < 100)
			    {

			        new biz = GetClosestBiz(playerid);
					if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= BizInfo[biz][bFuelPrice])
					{

						if(!IsPushbike(GetVehicleModel(veh)))
						{

							filling[playerid] = 1;
							filling_started[playerid] = 0;
							filling_biz[playerid] = biz;
							TextDrawSetString(infotxt[playerid],"~p~Re-Fueling~n~ ~n~~w~Hold ~p~~k~~VEHICLE_HANDBRAKE~ ~w~to fuel your vehicle.~n~When you have enough fuel release ~p~~k~~VEHICLE_HANDBRAKE~.");
							TextDrawShowForPlayer(playerid,infotxt[playerid]);
							infotxt_expire[playerid] = 11;
							PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
					        return 1;

					   	}
					   	else
					   	{

					   	    SendErrorMsg(playerid,"This vehicle does not need fuel.");
					   	    return 1;

					   	}

					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money to purchase fuel from this gas station.");
					    return 1;

					}

			    }
			    else
			    {

			        SendErrorMsg(playerid,"You do not need any fuel");
			        return 1;

			    }

			}
			else
			{

				SendErrorMsg(playerid,"This vehicle is not re-fuelable.");
				return 1;

			}

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a vehicle");
            return 1;

        }

    }
    else if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_GASCAN,1))
    {

        new veh = GetClosestVehicle(playerid);
        new slot = GetVehicleSlot(veh);
        if(slot > -1)
        {

            if(VehicleInfo[slot][vFuel] < 100)
            {

                VehicleInfo[slot][vFuel] = 100;
                SendEmote(playerid,"poors the contents of a gas can into a nearby vehicle's fuel tank.");
                RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_GASCAN,1);
                return 1;

            }
            else
            {

                SendErrorMsg(playerid,"This vehicle does not need re-filling.");
                return 1;

            }

        }
        else
        {

            SendErrorMsg(playerid,"This vehicle does not need re-filling.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not at a gas station");
        return 1;

    }

}

COMMAND:buy(playerid,params[])
{

    if(IsInStore(playerid))
    {

		new str[512];
		format(str,sizeof(str),"Cell Phone [$150]\nMask [$50]\nGas Can [$1000]\n6 Eggs [$10]\nBread [$10]\nMeat [$20]\n5 Cheese [$15]\nRice [$10]\nSpicy Chilli [$25]\nReady To Go Dough [$5]\nToolkit [$200]\nRadio [$500]\nRope [$50]\nBaseball Bat [$50]\nShovel [$50]\nFlowers [$25]\nCamera [$100]\nDice [$5]\nGPS [$250]\nCup of coffee [$10]\nBoom Box [$1250]\nFishing Rod [$500]");
		ShowPlayerDialog(playerid,DIALOG_BUY,DIALOG_STYLE_LIST,"What would you like to buy?",str,"Confirm","Cancel");
		return 1;

    }
    else if(IsInGunShop(playerid))
    {

        if(CharacterInfo[playerid][active_character[playerid]][cWepLic])
        {
	        new str[256];
	        format(str,sizeof(str),"Desert Eagle [$3000]\nShotgun [$5000]\nRifle [$6500]\nBody Armor [$250]\nSilenced Pistol [$1500]");
	        ShowPlayerDialog(playerid,DIALOG_BUY_GUN,DIALOG_STYLE_LIST,"What weapon are you looking for?",str,"Confirm","Cancel");
	        return 1;
		}
		else
		{

		    SendErrorMsg(playerid,"You do not have a weapons license.");
		    return 1;

		}

    }
    else
    {

        SendClientMessageA(playerid,COLOR_LIGHTRED,"You're not in a shop/weapon store.");
        return 1;

    }

}

COMMAND:mask(playerid,params[])
{

    if(mask[playerid])
    {

        if(!mask_on[playerid])
        {

            mask_on[playerid] = true;
            for(new i = 0; i < MAX_PLAYERS; i ++)
            {

                if(IsPlayerConnectedEx(i))
                {

	                if(i != playerid)
	                {

						RefreshMaskStatus(playerid,i);

					}

				}

            }
            SendClientMessageA(playerid,COLOR_LIGHTRED,"You have put your mask on.");
            return 1;
        }
        else
        {

            mask_on[playerid] = false;
            for(new i = 0; i < MAX_PLAYERS; i ++)
            {

                if(IsPlayerConnectedEx(i))
                {

	                if(i != playerid)
	                {

						RefreshMaskStatus(playerid,i);

					}

				}

            }
            SendClientMessageA(playerid,COLOR_LIGHTRED,"You have taken your mask off.");
            return 1;
        }

    }
    else
    {

        SendErrorMsg(playerid,"You do not have a mask!");
        return 1;

    }

}

COMMAND:biz(playerid,params[])
{

	new biz = GetClosestBiz(playerid);
    if(biz == -1) { biz = in_biz[playerid]; }
    if(biz > -1)
    {

        if(BizInfo[biz][bOwner] == 0)
        {

            new str[256];
            format(str,sizeof(str),"Buy Business [$%d]",BizInfo[biz][bPrice]);
            ShowPlayerDialog(playerid,DIALOG_BIZ,DIALOG_STYLE_LIST,"Choose your action...",str,"Confirm","Cancel");
            return 1;

        }
        else if(IsBusinessOwner(playerid,biz))
        {

			new str[256];
			new tmp[256];
			if(BizInfo[biz][bOpen]) { strins(str,"Close Business\n",strlen(str)); } else { strins(str,"Open Business\n",strlen(str)); }
			if(BizInfo[biz][bType] == BIZ_TYPE_FUEL) { strins(str,"Set Fuel Price\n",strlen(str)); }
			strins(str,"Business Finance\n",strlen(str));
			format(tmp,sizeof(tmp),"Sell Business [$%d]\n",((60 * BizInfo[biz][bPrice]) / 100));
			strins(str,tmp,strlen(str));
			format(tmp,sizeof(tmp),"Edit Business Name\n");
			strins(str,tmp,strlen(str));
			format(tmp,sizeof(tmp),"Withdraw Money\n");
			strins(str,tmp,strlen(str));
			if(BizInfo[biz][bType] != BIZ_TYPE_FUEL) { format(tmp,sizeof(tmp),"Set Entrance Price\n"); strins(str,tmp,strlen(str)); }
			ShowPlayerDialog(playerid,DIALOG_BIZ,DIALOG_STYLE_LIST,"Business Actions",str,"Confirm","Cancel");
			return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not near a business");
        return 1;

    }
    return 1;

}

COMMAND:setstream(playerid,params[])
{

	new biz = in_biz[playerid];
	if(BizInfo[biz][bType] == BIZ_TYPE_DRINK)
	{

		if(BizInfo[biz][bOwner] == CharacterInfo[playerid][active_character[playerid]][cID] || AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
		{

			new result[256];
			FetchParamText(result,params,0);
			if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setstream [stream URL]"); return 1; }
			format(BizInfo[biz][bStream],256,"%s",result);
			RefreshBizAudio(biz);
			SendClientMessage(playerid,COLOR_GREEN,"Stream Set.. Connecting to audio server");
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You do not own this club.");
		    return 1;

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a bar / club");
	    return 1;

	}

}

COMMAND:stopstream(playerid,params[])
{

	new biz = in_biz[playerid];
	if(BizInfo[biz][bType] == BIZ_TYPE_DRINK)
	{

		if(BizInfo[biz][bOwner] == CharacterInfo[playerid][active_character[playerid]][cID] || AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
		{

			strdel(BizInfo[biz][bStream],0,strlen(BizInfo[biz][bStream]));
			RefreshBizAudio(biz);
			SendClientMessage(playerid,COLOR_GREEN,"Stream Cancelled");
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You do not own this club.");
		    return 1;

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a bar / club");
	    return 1;

	}

}

COMMAND:me(playerid,params[])
{

	new result[256];
	FetchParamText(result,params,0);
	if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /me [action]"); return 1; }
	SendEmote(playerid,result);
	return 1;

}

COMMAND:do(playerid,params[])
{

	new result[256];
	FetchParamText(result,params,0);
	if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /do [action]"); return 1; }
	SendDoEmote(playerid,result);
	return 1;

}

COMMAND:pay(playerid,params[])
{

    if(character_chosen[playerid])
    {

        if(CharacterInfo[playerid][active_character[playerid]][cMoney] > 0)
        {
			new idx = 0;
            new tmp[64];
            tmp = strtok(params,idx);
            if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /pay [playerid/player name] [amount]"); return 1; }
			new other = ReturnUser(tmp);
			if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Player Not Connected"); return 1; }
			if(other != playerid)
			{
				new tmp2[64];
				tmp2 = strtok(params,idx);
				if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /pay [playerid/player name] [amount]"); return 1; }
				if(CharacterInfo[playerid][active_character[playerid]][cExp] > 3 || CharacterInfo[playerid][active_character[playerid]][cLevel] > 1) // Jordan v.14
				{
	            	new amount = strval(tmp2);
	            	if(amount < 1 || amount > 999999) { SendErrorMsg(playerid,"Cannot transfer less than $1 or more than $999999"); return 1; }
					if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
					{

						if(CharacterInfo[playerid][active_character[playerid]][cMoney] < amount) { SendErrorMsg(playerid,"You do not have this much money."); return 1; }
				    	new str[256];
				    	new name[MAX_PLAYER_NAME];
						new othername[MAX_PLAYER_NAME];
						GetCharacterName(playerid,name);
						GetCharacterName(other,othername);
						CharacterInfo[playerid][active_character[playerid]][cMoney] -= amount;
						CharacterInfo[other][active_character[other]][cMoney] += amount;
						format(str,sizeof(str),"%s has given you $%d.",name,amount);
						SendClientMessageA(other,COLOR_YELLOW2,str);
						PlayerPlaySound(other,1054,0.0,0.0,0);
						format(str,sizeof(str),"You have given %s $%d.",othername,amount);
					    PlayerPlaySound(playerid,1055,0.0,0.0,0.0);
						SendClientMessageA(playerid,COLOR_YELLOW2,str);
						format(str,sizeof(str),"takes out some money and hands it to %s.",othername);
						SendEmote(playerid,str);
						LogPayment(playerid,other,amount);
						return 1;

					}
					else
					{

						SendErrorMsg(playerid,"You are not near this player");
						return 1;

					}
				}
				else
				{
				    SendErrorMsg(playerid,"(( A minimum of 4 experience is required to use /pay. ))");
					return 1;
				}
            }
            else
            {

                SendErrorMsg(playerid,"You cannot pay yourself");
                return 1;

            }
		}
		else
		{

			SendErrorMsg(playerid,"You do not have enough money");
			return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"Please choose your character first");
        return 1;

    }

}

COMMAND:v(playerid,params[])
{

	return cmd_vehicle(playerid,params);

}

COMMAND:vehicle(playerid,params[])
{

	new idx = 0;
	new tmp[256];
	tmp = strtok(params,idx);
	if(!strlen(tmp))
	{
		SendClientMessageA(playerid,COLOR_YELLOW2,"USAGE: /(v)ehicle [action] [value(if required)]");
		SendClientMessageA(playerid,COLOR_YELLOW2,"[Actions] list, buylock, buyinsurance, buyplate, givekey, sellused");
		SendClientMessageA(playerid,COLOR_YELLOW2,"[Actions] paintplate, tow, lock, park, sell, scrap, lights");
		SendClientMessageA(playerid,COLOR_YELLOW2,"[Actions] trunk, hood, find, buygps, buyneon, neon, buyimmob, goldrims");
		SendClientMessageA(playerid,COLOR_YELLOW2,"[Prices] License Plates: 0.50 Credits");
		return 1;
	}
	if(strcmp(tmp,"sellused",true) == 0)
	{

		new veh = GetPlayerVehicleID(playerid);
		new slot = GetVehicleSlot(veh);
		if(slot > -1)
		{

		  	if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	  	    {

	  	        if(IsAtAuctionHouse(playerid))
	  	        {

	  	            new biz = GetClosestBiz(playerid);
	  	            if(CanHaveMoreSales(biz))
	  	            {

	  	                if(!IsDonatorVehicle(GetVehicleModel(veh)))
	  	                {

	  	                    if(!IsPushbike(GetVehicleModel(veh)))
	  	                    {

								ShowPlayerDialog(playerid,DIALOG_VAUCTION,DIALOG_STYLE_INPUT,"Enter a price","Please enter a price for your vehicle.","Confirm","Cancel");
								return 1;

							}
							else
							{

								SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle cannot be put up for sale (Bycicle)");
						  		return 1;

							}

						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle cannot be put up for sale (Donator Vehicle)");
						    return 1;

						}

	  	            }
	  	            else
	  	            {

	  	                SendClientMessage(playerid,COLOR_LIGHTRED,"This business cannot stock any more cars at this time, come back later.");
	  	                return 1;

	  	            }

	  	        }
	  	        else
	  	        {

	  	            SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at a used vehicle dealership.");
	  	            return 1;

	  	        }

	  	    }
	  	    else
	  	    {

	  	        SendClientMessage(playerid,COLOR_LIGHTRED,"You do not own this vehicle.");
	  	        return 1;

	  	    }

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a vehicle or this vehicle cannot be sold.");
		    return 1;

		}

	}
	if(strcmp(tmp,"buyimmob",true) == 0)
	{

		new veh = GetPlayerVehicleID(playerid);
	  	new slot = GetVehicleSlot(veh);
	  	if(slot > -1)
	  	{

	  	    if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	  	    {

	  	        if(IsAtUpgradeShop(playerid))
	  	        {

	  	            new tmp2[32];
					tmp2 = strtok(params,idx);
	  	            if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"Usage: /(v)ehicle buyimmob [level(1 - 4)]"); SendClientMessage(playerid,COLOR_YELLOW2,"[Prices] Level 1: $5000, Level 2: $10000, Level 3: $15000, Level 4: $20000"); return 1; }
	  	            new level = strval(tmp2);
	  	            if(level < 1 || level > 4) { SendClientMessage(playerid,COLOR_YELLOW2,"Level cannot be below 1 or above 4"); return 1; }
	  	            new price = (5000 * level);
	  	            if(CharacterInfo[playerid][active_character[playerid]][cMoney] < price) { SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d",price); return 1; }
					if(CharacterInfo[playerid][active_character[playerid]][cID] == VehicleInfo[slot][vOwner])
					{

						new biz = GetClosestBiz(playerid);
						CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
						VehicleInfo[slot][vImmob] = level;
						new str[128];
						format(str,sizeof(str),"You have bought a level %d immobiliser for $%d",level,price);
						BizInfo[biz][bBank] += price;
						SendClientMessage(playerid,COLOR_GREEN,str);
						return 1;

					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not own this vehicle.");
					    return 1;

					}

				}
				else
				{

				    SendErrorMsg(playerid,"You are not at an upgrade shop.");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You do not own this vehicle.");
			    return 1;

			}

		}
		else
		{

		    SendErrorMsg(playerid,"You cannot upgrade this vehicle.");
		    return 1;

		}

	}
	if(strcmp(tmp,"neon",true) == 0)
	{

	    if(IsPlayerInAnyVehicle(playerid))
	    {

	        new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
	        if(slot > -1)
	        {

	            if(VehicleInfo[slot][vNeon] > 0)
	            {

	                VehicleInfo[slot][vNeonState] = !VehicleInfo[slot][vNeonState];
	                RefreshNeon(slot);
	                return 1;

	            }
	            else
	            {

					SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle does not have neon-lights.");
					return 1;

	            }

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle cannot have neons.");
			    return 1;

			}

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a vehicle.");
	        return 1;

	    }

	}
	if(strcmp(tmp,"buyneon",true) == 0)
	{

		new veh = GetPlayerVehicleID(playerid);
	  	new slot = GetVehicleSlot(veh);
	  	if(slot > -1)
	  	{

	  	    if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	  	    {

                if(IsAtUpgradeShop(playerid))
	            {

		            ShowPlayerDialog(playerid,DIALOG_BUYNEON,DIALOG_STYLE_LIST,"Choose your Neon color","Red [$20000]\nBlue [$20000]\nGreen [0.50 Credits]\nYellow [0.50 Credits]\nPink [0.50 Credits]\nWhite [0.50 Credits]","Confirm","Cancel");
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at an upgrade shop.");
				    return 1;

				}

	  	    }
	  	    else
	  	    {

				SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle does not belong to you.");
				return 1;

	  	    }

	  	}
	  	else
	  	{

	  	    SendErrorMsg(playerid,"You are not in a customizable vehicle.");
	  	    return 1;

	  	}

	}
	if(strcmp(tmp,"buygps",true) == 0)
	{

		if(IsPlayerInAnyVehicle(playerid))
	    {

	        new veh = GetPlayerVehicleID(playerid);
	        new slot = GetVehicleSlot(veh);
	        if(slot > -1)
	        {

	            if(IsAtUpgradeShop(playerid))
	            {

	                if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	                {

	                    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 5000)
	                    {

	                        if(!VehicleInfo[slot][vGps])
	                        {

	                            CharacterInfo[playerid][active_character[playerid]][cMoney] -= 5000;
	                            new biz = GetClosestBiz(playerid);
	                            BizInfo[biz][bBank] += 5000;
	                            VehicleInfo[slot][vGps] = 1;
	                            SendClientMessage(playerid,COLOR_YELLOW2,"You have installed a GPS on your vehicle, use /(v)ehicle find to activate it.");
	                            return 1;

	                        }
	                        else
	                        {

	                            SendClientMessage(playerid,COLOR_LIGHTRED,"You already have a GPS installed on this vehicle.");
	                            return 1;

	                        }

	                    }
	                    else
	                    {

	                        SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $5000");
	                        return 1;

	                    }

					}
					else
					{

					    SendErrorMsg(playerid,"You do not own this vehicle");
					    return 1;

					}

	            }
	            else
	            {

	                SendErrorMsg(playerid,"You are not at an upgrade shop");
	                return 1;

	            }

	        }
	        else
	        {

	            SendErrorMsg(playerid,"You do not own this vehicle");
	            return 1;

	        }

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You are not in your vehicle");
	        return 1;

	    }

	}
	if(strcmp(tmp,"find",true) == 0)
	{

		if(find_cooldown[playerid] == 0)
		{

		    new tmp2[64];
		    tmp2 = strtok(params,idx);
		    if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_YELLOW2,"USAGE: /(v)ehicle find [vehicle slot (/v list)]"); return 1; }
		    new offset = strval(tmp2);
		    if(offset < 1) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid vehicle slot."); return 1; }
			FindPlayerVehicle(playerid,offset);
			return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You can only use you vehicle's GPS once every 5 minutes.");
		    return 1;

		}

	}
	if(strcmp(tmp,"hood",true) == 0)
	{

		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{

		    new vehicleid = GetPlayerVehicleID(playerid);
		    new param[7];
			GetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
			if(param[4])
			{
				SetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],0,param[5],param[6]);
				new vname[64];
				GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
				new str[128];
				format(str,sizeof(str),"closes the %s's hood",vname);
				SendEmote(playerid,str);
				return 1;
			}
			else
			{

				SetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],1,param[5],param[6]);
				new vname[64];
				GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
				new str[128];
				format(str,sizeof(str),"opens the %s's hood",vname);
				SendEmote(playerid,str);
				return 1;

			}

		}
		else
		{

			SendErrorMsg(playerid,"You are not in a vehicle.");
			return 1;

		}

	}
	if(strcmp(tmp,"trunk",true) == 0)
	{

		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{

		    new vehicleid = GetPlayerVehicleID(playerid);
		    new param[7];
			GetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
			if(param[5])
			{
				SetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],0,param[6]);
				new vname[64];
				GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
				new str[128];
				format(str,sizeof(str),"closes the %s's trunk",vname);
				SendEmote(playerid,str);
				return 1;
			}
			else
			{

				SetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],1,param[6]);
				new vname[64];
				GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
				new str[128];
				format(str,sizeof(str),"opens the %s's trunk",vname);
				SendEmote(playerid,str);
				return 1;

			}

		}
		else
		{

			SendErrorMsg(playerid,"You are not in a vehicle.");
			return 1;

		}

	}
	if(strcmp(tmp,"lights",true) == 0)
	{

		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{

		    new vehicleid = GetPlayerVehicleID(playerid);
		    new param[7];
			GetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
			if(param[1])
			{
				SetVehicleParamsEx(vehicleid,param[0],0,param[2],param[3],param[4],param[5],param[6]);
				SendEmote(playerid,"turns the lights in their vehicle off.");
				return 1;
			}
			else
			{

				SetVehicleParamsEx(vehicleid,param[0],1,param[2],param[3],param[4],param[5],param[6]);
				SendEmote(playerid,"turns the lights in their vehicle on.");
				return 1;

			}

		}
		else
		{

			SendErrorMsg(playerid,"You are not in a vehicle.");
			return 1;

		}

	}
	if(strcmp(tmp,"givekey",true) == 0)
	{

		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(v)ehicle duplicate [playerid/player name] [slot]"); return 1; }
		new other = ReturnUser(tmp2);
		if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
		{

		    new tmp3[64];
		    tmp3 = strtok(params,idx);
		    if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(v)ehicle duplicate [playerid/player name] [slot]"); return 1; }
		    new slot = strval(tmp3);
			GiveCarKey(playerid,other,slot);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You are not near this player.");
		    return 1;

		}

	}
	if(strcmp(tmp,"scrap",true) == 0)
	{

	    if(IsPlayerInAnyVehicle(playerid))
	    {

	        new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
	        if(slot > -1)
	        {

	            if(VehicleInfo[slot][vOwner] == GetCharacterID(playerid) || (IsFactionVehicle(CharacterInfo[playerid][active_character[playerid]][cFaction],slot) && CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD))
	            {

	                if(IsPlayerInRangeOfPoint(playerid,10.0,205.8219,-255.8818,1.3429))
	                {

						new vname[128];
	                    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
	                    new str[256];
	                    new scrapprice = floatround((FetchVehiclePrice(VehicleInfo[slot][vModel]) * 0.20));
	                    if(IsDonatorVehicle(GetVehicleModel(GetPlayerVehicleID(playerid)))) scrapprice = 0;
	                    format(str,sizeof(str),"You are about to scrap your your %s for $%d are you sure you wish to continue?",vname,scrapprice);
	                    ShowPlayerDialog(playerid,DIALOG_SCRAPCAR,DIALOG_STYLE_MSGBOX,"You are about to scrap your vehicle.",str,"Confirm","Cancel");
	                    return 1;

					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at the scrap point.. Marked on map.");
						SetPlayerCheckpoint(playerid,205.8219,-255.8818,1.3429,5.0);
						going_to_scrap[playerid] = 1;
						return 1;

					}

	            }
	            else
	            {

	                SendErrorMsg(playerid,"You are not in one of your vehicles.");
	                return 1;

	            }

	        }
	        else
	        {

	            SendErrorMsg(playerid,"You are not in a scrapable vehicle.");
	            return 1;

	        }

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You are not in your vehicle.");
	        return 1;

	    }

	}
	if(strcmp(tmp,"sell",true) == 0)
	{

		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(v)ehicle sell [playerid/player name] [slot] [price]"); return 1; }
		new other = ReturnUser(tmp2);
		if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
		{

		    new tmp3[64];
		    tmp3 = strtok(params,idx);
		    if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(v)ehicle sell [playerid/player name] [slot] [price]"); return 1; }
		    new slot = strval(tmp3);
		    new tmp4[64];
		    tmp4 = strtok(params,idx);
		    if(!strlen(tmp4)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(v)ehicle sell [playerid/player name] [slot] [price]"); return 1; }
		    new amount = strval(tmp4);
		    if(amount < 1 || amount > 9999999) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid price."); return 1; }
			OfferSellCar(playerid,other,slot,amount);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You are not near this player.");
		    return 1;

		}

	}
	if(strcmp(tmp,"paintplate",true) == 0)
	{

		if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 2500)
		{

			if(IsAtUpgradeShop(playerid))
			{

				if(IsPlayerInAnyVehicle(playerid))
				{

					new veh = GetPlayerVehicleID(playerid);
					new slot = GetVehicleSlot(veh);
					if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
					{

						new str[256];
						format(str,sizeof(str),"Red [$2500]\nPink [$2500]\nBlue [$2500]\nPurple [$2500]\nBrown [$2500]\nYellow [$2500]");
						ShowPlayerDialog(playerid,DIALOG_PAINTPLATE,DIALOG_STYLE_LIST,"Choose your color...",str,"Confirm","Cancel");
						return 1;

					}
					else
					{

					    SendErrorMsg(playerid,"You do not own this vehicle.");
					    return 1;

					}

				}
				else
				{

				    SendErrorMsg(playerid,"You are not in a vehicle.");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You are not at an upgrade shop");
			    return 1;

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $2500");
		    return 1;

		}

	}
	if(strcmp(tmp,"buyplate",true) == 0)
	{

		if(IsAtUpgradeShop(playerid))
		{

			if(IsPlayerInAnyVehicle(playerid))
			{

				new veh = GetPlayerVehicleID(playerid);
				new slot = GetVehicleSlot(veh);
				if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
				{

			        new biz = GetClosestBiz(playerid);
					new result[256];
					FetchParamText(result,params,idx);
					if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /(v)ehicle buyplate [plate]"); return 1; }
					if(strlen(result) > 32) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Plate cannot be longer than 32 characters."); return 1; }
					if(buying_plate_ignoredonator[playerid])
					{

						new platestr[128];
						mysql_real_escape_string(result,platestr);
						format(VehicleInfo[slot][vPlate],128,"%s",platestr);
						SetVehicleNumberPlate(veh,platestr);
						new str[128];
						format(str,sizeof(str),"Vehicle number plate set to: %s this vehicle must re-spawn for changes to take effect.",platestr);
						SendClientMessageA(playerid,COLOR_GREEN,str);
						BizInfo[biz][bBank] += 2500;
						buying_plate_ignoredonator[playerid] = 0;
						return 1;

					}
					else
					{

						new str[256];
						format(str,sizeof(str),"user=%d&amount=%f",AccountInfo[playerid][aID],0.50);
						str = str_replace(".","|",str);
					    HTTP(playerid,HTTP_POST,URL_CHECK_PURCHASE,str,"HttpPlateReciever");
						TextDrawSetString(payment_text[playerid]," ~n~~p~payment~n~ ~n~~w~checking your wallet for funds...~n~ ~n~ ");
						TextDrawShowForPlayer(playerid,payment_text[playerid]);
						PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
						TogglePlayerControllable(playerid,0);
						format(purchase_plate_cmd[playerid],256,"%s",result);
						return 1;

					}

				}
				else
				{

				    SendErrorMsg(playerid,"You do not own this vehicle.");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You are not in a vehicle.");
			    return 1;

			}

		}
		else
		{

		    SendErrorMsg(playerid,"You are not at an upgrade shop");
		    return 1;

		}

	}
	if(strcmp(tmp,"tow",true) == 0)
	{

	    new tmp2[64];
	    tmp2 = strtok(params,idx);
	    if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_YELLOW2,"USAGE: /(v)ehicle tow [vehicle slot (/v list)]"); return 1; }
	    new offset = strval(tmp2);
	    if(offset < 1) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid vehicle slot."); return 1; }
		if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 1500)
		{

		    TowPlayerVehicle(playerid,offset);
		    return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You do not have $1500 to tow your car.");
		    return 1;

		}

	}
	if(strcmp(tmp,"list",true) == 0)
	{

	    ShowVehicleList(playerid,playerid);
	    return 1;

	}
	if(strcmp(tmp,"lock",true) == 0)
	{

	    new veh = GetClosestVehicle(playerid);
	    if(veh > -1)
	    {
		    new slot = GetVehicleSlot(veh);
		    if(slot > -1 && !IsPushbike(GetVehicleModel(VehicleInfo[slot][vVehicle])))
			{

			    if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID] || CharacterInfo[playerid][active_character[playerid]][cDuplicate] == VehicleInfo[slot][vID] || IsFactionVehicle(CharacterInfo[playerid][active_character[playerid]][cFaction],slot) || IsCompanyVehicle(CharacterInfo[playerid][active_character[playerid]][cCompany],slot))
			    {
					if(!VehicleInfo[slot][vLocked])
					{

					    GameTextForPlayer(playerid,"~r~Vehicle Locked",5000,6);
					    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					    LockVehicle(veh);
						new vname[64]; new str[128];
						GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
						format(str,sizeof(str),"locks the nearby %s",vname);
						SendEmote(playerid,str);
					    return 1;

					}
					else
					{

					    GameTextForPlayer(playerid,"~g~Vehicle Unlocked",5000,6);
					    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					    UnlockVehicle(veh);
					    new vname[64]; new str[128];
						GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
						format(str,sizeof(str),"unlocks the nearby %s",vname);
						SendEmote(playerid,str);
					    return 1;

					}

				}
			    else
			    {

			        SendErrorMsg(playerid,"You are not near one of your vehicles.");
			        return 1;

			    }
			}
			else
			{

			    SendErrorMsg(playerid,"You are not near one of your lockable vehicles.");
			    return 1;

			}
	    }
	    else
	    {

	        SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not near a vehicle.");
	        return 1;

	    }
	}
	if(strcmp(tmp,"buylock",true) == 0)
	{

	    if(IsPlayerInAnyVehicle(playerid))
	    {

	        new veh = GetPlayerVehicleID(playerid);
	        new slot = GetVehicleSlot(veh);
	        if(slot > -1)
	        {

    		   	if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID] || CharacterInfo[playerid][active_character[playerid]][cDuplicate] == VehicleInfo[slot][vID] || IsFactionVehicle(CharacterInfo[playerid][active_character[playerid]][cFaction],slot) || IsCompanyVehicle(CharacterInfo[playerid][active_character[playerid]][cCompany],slot))
			    {

		            if(IsAtUpgradeShop(playerid))
		            {

						new str[256];
						format(str,sizeof(str),"The Alertanator [$2500]\nLockDown [$12000]\nLocknLoad [$25000]\nPremiumLock [$50000]");
						ShowPlayerDialog(playerid,DIALOG_LOCK,DIALOG_STYLE_LIST,"Choose your lock",str,"Confirm","Cancel");
		                return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You are not at an upgrade shop");
		                return 1;

		            }

		      	}
		      	else
		      	{

		      	    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not own this vehicle.");
		      	    return 1;

		      	}

	        }
	        else
	        {

	            SendErrorMsg(playerid,"You do not own this vehicle");
	            return 1;

	        }

	    }
	    else
	    {

	        SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not in your vehicle");
	        return 1;

	    }

	}
	if(strcmp(tmp,"buyinsurance",true) == 0)
	{

	    if(IsPlayerInAnyVehicle(playerid))
	    {

	        new veh = GetPlayerVehicleID(playerid);
	        new slot = GetVehicleSlot(veh);
	        if(slot > -1)
	        {

	            if(IsAtUpgradeShop(playerid))
	            {

	                if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID])
	                {

						new price = FetchVehicleInsurancePrice(VehicleInfo[slot][vModel]);
						if(price > -1)
						{

							new upgrade_price = VehicleInfo[slot][vInsurance] ? ((price * VehicleInfo[slot][vInsurance]) * (VehicleInfo[slot][vDestroyed] + 1)) : price;
							new str[256];
							format(str,sizeof(str),"You are about to add 1 more insurance to your vehicle for $%d, are you sure you wish to proceed?",upgrade_price);
	                        SendConfirmationMsg(playerid,str,DIALOG_INSURANCE,upgrade_price);
	                        return 1;

						}
						else
						{

						    SendErrorMsg(playerid,"No price available, contact administrator");
						    return 1;

						}

					}
					else
					{

					    SendErrorMsg(playerid,"You do not own this vehicle");
					    return 1;

					}

	            }
	            else
	            {

	                SendErrorMsg(playerid,"You are not at an upgrade shop");
	                return 1;

	            }

	        }
	        else
	        {

	            SendErrorMsg(playerid,"You do not own this vehicle");
	            return 1;

	        }

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You are not in your vehicle");
	        return 1;

	    }

	}
	if(strcmp(tmp,"park",true) == 0)
	{

	    if(IsPlayerInAnyVehicle(playerid))
	    {

			new veh = GetPlayerVehicleID(playerid);
			new slot = GetVehicleSlot(veh);
			if(slot > -1)
			{
				if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID] || (IsFactionVehicle(CharacterInfo[playerid][active_character[playerid]][cFaction],slot) && CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD) || (IsCompanyVehicle(CharacterInfo[playerid][active_character[playerid]][cCompany],slot) && CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] == COMP_PERMS_LEADER))
				{

				    if(!vehicle_creating)
				    {

				        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 2000)
				        {

					        vehicle_creating = 1;
							new Float:X, Float:Y, Float:Z, Float:R;
							SaveVehicleDamage(veh);
							GetVehiclePos(veh,X,Y,Z);
							GetVehicleZAngle(veh,R);
							VehicleInfo[slot][vSpawnX] = X;
							VehicleInfo[slot][vSpawnY] = Y;
							VehicleInfo[slot][vSpawnZ] = Z;
							VehicleInfo[slot][vSpawnR] = R;
							DestroyVehicle(VehicleInfo[slot][vVehicle]);
							VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
							if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
							StopEngine(VehicleInfo[slot][vVehicle]);
							vehicle_creating = 0;
							SetVehicleDamage(veh);
							AddVehicleMods(VehicleInfo[slot][vVehicle]);
							SendClientMessageA(playerid,COLOR_GREEN,"You have parked your vehicle here.");
							CharacterInfo[playerid][active_character[playerid]][cMoney] -= 2000;
							return 1;

						}
						else
						{

						    SendErrorMsg(playerid,"You do not have $2000 to park your vehicle.");
						    return 1;

						}

					}
					else
					{

					    SendErrorMsg(playerid,"Vehicle System Overload, please try again in a moment");
					    return 1;

					}

				}
				else
				{

				    SendErrorMsg(playerid,"You do not own this vehicle");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You do not own this vehicle");
			    return 1;

			}

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You are not in your vehicle");
	        return 1;

	    }

	}
	if(strcmp(tmp,"goldrims",true) == 0) // Jordan v1.3
	{

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        if(IsAtUpgradeShop(playerid))
         	{

				new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
				if(slot > -1)
	        	{
	            	if(VehicleInfo[slot][vOwner] == GetCharacterID(playerid))
	            	{

						AddVehicleComponent(GetPlayerVehicleID(playerid),1080);
						CharacterInfo[playerid][active_character[playerid]][cMoney] -= 10000;
	                	return 1;

	            	}
	            	else
	            	{

	                	SendErrorMsg(playerid,"You are not in one of your vehicles.");
	                	return 1;

	            	}

	        	}
	        	else
	        	{

	            	SendErrorMsg(playerid,"You are not in one of your vehicles.");
	            	return 1;

	        	}
			}
			else
			{
				SendErrorMsg(playerid,"You are not at an upgrade shop");
				return 1;
			}

		}
		else
	    {
			SendErrorMsg(playerid,"You are not in your vehicle.");
			return 1;
		}

	}
	return 1;

}

COMMAND:call(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cPhone] > 0 || in_house[playerid] > -1)
	{
	    if(tog_phone[playerid] || in_house[playerid] > -1)
	    {
		    if(!death_mode[playerid])
		    {
		        if(!HasCell(playerid))
		        {
					new idx = 0;
				    new tmp[64];
				    tmp = strtok(params,idx);
				    if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /call [phone number]"); return 1; }
				    new number = strval(tmp);
				    if(number > 0)
					{

						BeginCall(playerid,number);
						return 1;

					}
					else
					{

					    SendErrorMsg(playerid,"Invalid phone number.");
					    return 1;

					}
				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot do this while in Prison.");
				    return 1;

				}
			}
			else
			{

			    SendErrorMsg(playerid,"You cannot call people whilst dead.");
			    return 1;

			}
	    }
	    else
	    {

	        SendErrorMsg(playerid,"Your phone is switched off! (/toggle)");
	        return 1;

	    }
	}
	else
	{

	    SendErrorMsg(playerid,"You do not have a cell phone and are not in a house");
	    return 1;

	}

}

COMMAND:pickup(playerid,params[])
{

    if(phone_caller[playerid] > -1)
    {

        ConnectCall(playerid);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"No one is calling you.");
        return 1;

    }

}

COMMAND:hangup(playerid,params[])
{

	if(phone_incall[playerid] > -1 || phone_ringing[playerid] || phone_calling[playerid] > -1 || calling_taxi[playerid] || calling_nonpolice[playerid] || calling_san[playerid] || in_911[playerid])
    {

        HangupCall(playerid);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a call");
        return 1;

    }

}

COMMAND:sms(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cPhone] > 0)
	{

		new idx = 0;
		new tmp[128];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /sms [phone number] [message]"); return 1; }
		new number = strval(tmp);
		new result[256];
		FetchParamText(result,params,idx);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /sms [phone number] [message]"); return 1; }
		if(number > 0)
		{

			if(!HasCell(playerid))
			{

				SendSMS(playerid,number,result);
				return 1;

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You can not do this while in Prison.");
			    return 1;

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"Target number must be above 0");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You do not have a phone.");
	    return 1;

	}

}

COMMAND:mail(playerid,params[])
{

	if(IsInMailRoom(playerid))
	{

		composing_mail[playerid] = 1;
		SendClientMessageA(playerid,COLOR_GREEN,"Please type the name of the person you are sending this message to. You can use /cancelmail to stop sending.");
		TogglePlayerControllable(playerid,0);
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a post office");
	    return 1;

	}

}

COMMAND:cancelmail(playerid,params[])
{

    if(composing_mail[playerid] > 0)
    {

		composing_mail[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		SendClientMessageA(playerid,COLOR_LIGHTRED,"Message sending cancelled.");
		return 1;

    }
    else
    {

		SendErrorMsg(playerid,"You are not writing a message.");
		return 1;

	}

}

COMMAND:deposit(playerid,params[])
{

    if(IsInBank(playerid))
    {

		new idx = 0;
        new tmp[256];
        new str[256];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /deposit [amount]"); return 1; }
        new amount = strval(tmp);
        if(amount < 1 || amount > CharacterInfo[playerid][active_character[playerid]][cMoney]) { SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have enough money"); return 1; }
        CharacterInfo[playerid][active_character[playerid]][cMoney] -= amount;
		CharacterInfo[playerid][active_character[playerid]][cBank] += amount;
		SendClientMessageA(playerid,COLOR_WHITE,"|-----Bank Slip-----|");
		format(str,sizeof(str),"Deposit Amount: $%d",amount);
		SendClientMessageA(playerid,COLOR_WHITE,str);
		format(str,sizeof(str),"New Balance: $%d",CharacterInfo[playerid][active_character[playerid]][cBank]);
		SendClientMessageA(playerid,COLOR_WHITE,str);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a bank");
        return 1;

    }

}

COMMAND:withdraw(playerid,params[])
{

	if(IsInBank(playerid) || IsInStore(playerid))
    {

		new idx = 0;
        new biz = in_biz[playerid];
        new str[256];
		new tmp[256];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /withdraw [amount]"); return 1; }
		new amount = strval(tmp);
		if(amount < 1 || amount > CharacterInfo[playerid][active_character[playerid]][cBank]) { SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have enough money in your account"); return 1; }
		new tax = floatround((amount * 0.03));
		CharacterInfo[playerid][active_character[playerid]][cBank] -= amount;
		CharacterInfo[playerid][active_character[playerid]][cMoney] += (amount - tax);
		BizInfo[biz][bBank] += tax;
		SendClientMessageA(playerid,COLOR_WHITE,"|-----Bank Slip-----|");
		format(str,sizeof(str),"Widthdraw Amount: $%d",amount);
		SendClientMessageA(playerid,COLOR_WHITE,str);
		format(str,sizeof(str),"Tax: $%d",tax);
		SendClientMessageA(playerid,COLOR_WHITE,str);
		format(str,sizeof(str),"New Balance: $%d",CharacterInfo[playerid][active_character[playerid]][cBank]);
		SendClientMessageA(playerid,COLOR_WHITE,str);
		if(tutorial_stage[playerid] == 3) { tutorial_stage[playerid] ++; RefreshPlayerTutorial(playerid); }
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a bank");
        return 1;

    }

}

COMMAND:balance(playerid,params[])
{

    if(IsInBank(playerid) || IsInStore(playerid))
    {

		new str[256];
		format(str,sizeof(str),"~p~San Andreas Bank~n~ ~n~~w~Your balance is: $%d",CharacterInfo[playerid][active_character[playerid]][cBank]);
		TextDrawSetString(infotxt[playerid],str);
		TextDrawShowForPlayer(playerid,infotxt[playerid]);
		infotxt_expire[playerid] = 11;
		PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a bank");
        return 1;

    }

}

COMMAND:takejob(playerid,params[])
{

	if(IsPlayerInRangeOfPoint(playerid,7.5,1925.6642,170.8058,37.2813))
	{

	   if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_FARMER;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Farmer job. Use /startfarming to begin farming.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

	}
    /*if(IsPlayerInRangeOfPoint(playerid,7.5,2320.4155,35.0751,26.4844))
    {

        if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_SMUGGLE;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Weapons Smuggler job. Use /smuggle to begin smuggling.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }*/
    /*if(IsPlayerInRangeOfPoint(playerid,7.5,2321.5620,54.6961,26.4862))
    {

        if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_DEALER;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Weapons Dealer job. Talk to a weapons smuggler to get materials.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }*/
    if(IsPlayerInRangeOfPoint(playerid,7.5,2248.8794,-78.2331,26.5129))
    {

        if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_DELIVER;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Delivery Driver job. Enter a burrito to start delivering items.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }
	else if(IsPlayerInRangeOfPoint(playerid,7.5,1324.5885,287.9557,20.0452))
    {

    	if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_SWEEPER;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Street Cleaner job.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }
    /*else if(IsPlayerInRangeOfPoint(playerid,7.5,1085.4576,-1226.3864,15.8203))
    {

    	if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_TAXI;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Taxi Driver job.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }
    else if(IsPlayerInRangeOfPoint(playerid,7.5,912.5792,-1230.0784,16.9766))
    {

    	if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_BUS;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Bus Driver job. Get into a bus to start a trip.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }*/
    else if(IsPlayerInRangeOfPoint(playerid,7.5,2404.4587,83.3811,26.4742))
    {

    	if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_GARBAGE;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Garbage Man job. Get into a garbage truck to start a trip.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }
    else if(IsPlayerInRangeOfPoint(playerid,7.5,2131.0662,-106.8137,3.8547))
    {

    	if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_FISH;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Fisher Man job. Get into a reefer to start a trip.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }
    else if(IsPlayerInRangeOfPoint(playerid,7.5,2272.1875,-55.3477,26.4487))
    {

    	if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_MECHANIC;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Mechanic job. Get into a tow truck to start assisting people.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }
    else if(IsPlayerInRangeOfPoint(playerid,7.5,-77.6213,-1136.4148,1.0781))
    {

    	if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_TRUCKER;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Trucker job. Get into a Linerunner to start some runs.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }
    else if(IsPlayerInRangeOfPoint(playerid,7.5,2323.7251,76.6891,26.4957))
    {

    	if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_PIZZA;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Pizza Boy. Get into a Pizzaboy to start some runs.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }
    /*else if(IsPlayerInRangeOfPoint(playerid,7.5,2770.6843,-1628.5165,12.1775))
    {

    	if(CharacterInfo[playerid][active_character[playerid]][cJob] == 0)
        {

        	CharacterInfo[playerid][active_character[playerid]][cJob] = JOB_ENG;
        	SendClientMessageA(playerid,COLOR_GREEN,"You have accepted the Engineer job. Get into a Utility Van to start working.");
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You already have a job, use /leavejob first.");
		    return 1;

		}

    }*/
    SendErrorMsg(playerid,"You are not near a job point.");
    return 1;

}

COMMAND:startdelivery(playerid,params[])
{

    if(IsPlayerInAnyVehicle(playerid))
    {

        if(InDeliveryVan(playerid))
        {

            if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_DELIVER)
            {

				if(delivery_stage[playerid] == -1)
				{

				    if(IsPlayerInRangeOfPoint(playerid,20.0,2248.8794,-78.2331,26.5129))
				    {

						delivery_active[playerid] = random(sizeof(delivery_profiles));
						delivery_stage[playerid] = 0;
						new str[256];
						format(str,sizeof(str),"~p~Delivery Chain~n~ ~n~~w~Make delivery drops around the city. Each drop will get you~n~a small amount of money.~n~ ~n~ use ~p~/stopdelivery~w~ to leave the chain");
						TextDrawSetString(infotxt[playerid],str);
						TextDrawShowForPlayer(playerid,infotxt[playerid]);
						infotxt_expire[playerid] = 11;
						RefreshDeliveryStage(playerid);
						return 1;

					}
					else
					{

					    SendErrorMsg(playerid,"You are not at the delivery depot.");
					    return 1;

					}

				}
				else
				{

				    SendErrorMsg(playerid,"You are already on a delivery mission. Use /stopdelivery to cancel");
				    return 1;

				}

            }
            else
            {

                SendErrorMsg(playerid,"You are not a delivery man");
                return 1;

            }

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a delivery van");
            return 1;

        }

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a delivery van.");
	    return 1;

	}

}

COMMAND:stopdelivery(playerid,params[])
{


    if(delivery_stage[playerid] > -1)
    {

        delivery_stage[playerid] = -1;
        delivery_active[playerid] = -1;
        TogglePlayerControllable(playerid,1);
        DisablePlayerCheckpoint(playerid);
        SendClientMessageA(playerid,COLOR_LIGHTRED,"Delivery Chain Cancelled");
        return 1;

    }
    return 1;

}

COMMAND:fare(playerid,params[])
{


    if(InTaxi(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_TAXI)
    {

        if(fare_time[playerid] == 0)
        {

			new idx = 0;
            new tmp[256];
            tmp = strtok(params,idx);
            if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /fare [playerid/player name]"); return 1; }
            new other = ReturnUser(tmp);
            if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
			if(!IsPlayerInAnyVehicle(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not in your taxi."); return 1; }
			if(playerid == other) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot fare yourself."); return 1; }
			new veh = GetPlayerVehicleID(playerid);
			new veh2 = GetPlayerVehicleID(other);
			if(veh != veh2) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not in your taxi."); return 1; }
			new name[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			new oname[MAX_PLAYER_NAME];
			GetCharacterName(other,oname);
			new str[256];
			format(str,sizeof(str),"%s has started a taxi fare with you. You will be charged $1 per 2 seconds until you leave the taxi. The charge starts in 5 seconds.",name);
			SendClientMessage(other,COLOR_YELLOW,str);
			PlayerPlaySound(other,1055,0.0,0.0,0.0);
			format(str,sizeof(str),"You have started a fare with %s.",oname);
			SendClientMessageA(playerid,COLOR_YELLOW,str);
			PlayerPlaySound(playerid,1055,0.0,0.0,0.0);
			fare_time[playerid] = 1;
			fare_passenger[playerid] = other;
			fare_cooldown[playerid] = 5;
			speedo_active[playerid] = 0;
			return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are already in a fare. Use /cancelfare to end the fare.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a taxi, or are not a taxi driver");
        return 1;

    }

}

COMMAND:cancelfare(playerid,params[])
{

	if(fare_passenger[playerid] > -1)
	{

	    LeaveTaxi(fare_passenger[playerid]);
	    return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a fare.");
	    return 1;

	}


}

COMMAND:leavejob(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cJob] > 0)
    {

		if(CharacterInfo[playerid][active_character[playerid]][cJobCooldown] == 0)
		{

	        if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_GARBAGE) { OnPlayerEndGarbage(playerid); }
	        if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_DELIVER) { delivery_active[playerid] = -1;	delivery_stage[playerid] = -1; DisablePlayerCheckpoint(playerid); }
	        if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_TAXI) { fare_time[playerid] = 0; fare_filler[playerid] = -1; fare_passenger[playerid] = -1; fare_cooldown[playerid] = 0; fare_pmission[playerid] = 0; fare_filler_stage[playerid] = 0; DisablePlayerCheckpoint(playerid); }
	        if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_FISH) { fish_run[playerid] = -1; fish_stage[playerid] = -1; fish_state[playerid] = -1; DisablePlayerCheckpoint(playerid); }
	        if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_BUS) { bus_active[playerid] = -1; bus_stage[playerid] = -1; DisablePlayerCheckpoint(playerid); }
	        CharacterInfo[playerid][active_character[playerid]][cJob] = 0;
	        CharacterInfo[playerid][active_character[playerid]][cEmployed] = 0;
	        SendClientMessageA(playerid,COLOR_GREEN,"You have left your job.");
	        return 1;

		}
		else
		{

            SendErrorMsg(playerid,"Please wait 3 hours between changing jobs.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You do not have a job.");
        return 1;

    }

}

COMMAND:acceptcall(playerid,params[])
{

    if(InTaxi(playerid) && CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_TAXI)
    {

        if(fare_time[playerid] == 0 && fare_pmission[playerid] && fare_filler[playerid] == -1)
        {

            fare_filler[playerid] = fare_pmission[playerid];
            SetPlayerCheckpoint(playerid,taxi_profiles[fare_filler[playerid]][fare_filler_stage[playerid]][0],taxi_profiles[fare_filler[playerid]][fare_filler_stage[playerid]][1],taxi_profiles[fare_filler[playerid]][fare_filler_stage[playerid]][2],5.0);
            SendClientMessageA(playerid,COLOR_GREEN,"Move to the checkpoint to pickup your passenger.");
            fare_pmission[playerid] = 0;
            return 1;

        }
        else
        {

            SendClientMessageA(playerid,COLOR_LIGHTRED,"You are in a fare, cannot accept a call.");
            fare_pmission[playerid] = 0;
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a taxi, or are not a taxi driver.");
        return 1;

    }

}

COMMAND:startroute(playerid,params[])
{

	if(IsPlayerInAnyVehicle(playerid))
    {

        if(InBus(playerid))
        {

            if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_BUS)
            {

				if(bus_stage[playerid] == -1)
				{

					bus_active[playerid] = random((sizeof(delivery_profiles) - 1));
					bus_stage[playerid] = 0;
					SendClientMessageA(playerid,COLOR_GREEN,"Bus Route Started. Follow all instructions sent to you. Use /stoproute to leave the route.");
					RefreshBusStage(playerid);
					return 1;

				}
				else
				{

				   	SendErrorMsg(playerid,"You are already on a bus route. Use /stoproute to cancel");
				    return 1;

				}

            }
            else
            {

                SendErrorMsg(playerid,"You are not a bus driver");
                return 1;

            }

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a bus.");
            return 1;

        }

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a bus.");
	    return 1;

	}

}

COMMAND:drink(playerid,params[])
{

    if(IsInPub(playerid))
    {

        new str[256];
        format(str,sizeof(str),"Water [$1]\nJust Cola [$3]\nSprunk [$3]\nBeer [$5]\nWhiskey [$7]\nCocktail [$10]");
        ShowPlayerDialog(playerid,DIALOG_DRINK,DIALOG_STYLE_LIST,"Choose your drink",str,"Confirm","Cancel");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a pub/club");
        return 1;

    }

}

COMMAND:engine(playerid,params[])
{

    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid))))
    {

        new veh = GetPlayerVehicleID(playerid);
		new slot = GetVehicleSlot(veh);
		new param[7];
		GetVehicleParamsEx(veh,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
		if(slot == -1 && !InRentCar(playerid)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This vehicles engine cannot be started."); return 1; }
		if(slot == -1 && InRentCar(playerid) && renting_car[playerid] != veh) { SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not renting this vehicle."); return 1; }
		if(slot == -1 && InRentCar(playerid) && renting_car[playerid] == veh && !params[0]) { StartEngine(veh); SendEmote(playerid,"turns the key, starting the engine."); return 1; }
		if(!param[0] && slot > -1)
		{

			if(VehicleInfo[slot][vOwner] == CharacterInfo[playerid][active_character[playerid]][cID] || CharacterInfo[playerid][active_character[playerid]][cDuplicate] == VehicleInfo[slot][vID] || IsFactionVehicle(CharacterInfo[playerid][active_character[playerid]][cFaction],slot) || aduty[playerid] || IsCompanyVehicle(CharacterInfo[playerid][active_character[playerid]][cCompany],slot))
			{

				if(VehicleInfo[slot][vFuel] > 0)
				{
				    new delay = FetchStartupDelay(slot);
				    if(delay == 0)
				    {
			    		StartEngine(veh);
						new vname[128];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"starts the %s's engine",vname);
						SendEmote(playerid,str);
					}
					else
					{

					    SendEmote(playerid,"turns the key, and waits for the engine to start");
					    startup_delay[veh] = delay;
					    startup_delay_sender[veh] = playerid;

					}
					return 1;
				}
				else
				{

				    SendErrorMsg(playerid,"This vehicle is out of fuel, cannot start the engine.");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You do not own this vehicle, use /hotwire to try and hotwire the vehicle.");
			    return 1;

			}

		}
		else
		{

		    if(slot > -1)
		    {
			    StopEngine(veh);
			    SendEmote(playerid,"turns the key, stopping the engine.");
			    return 1;
			}
			else if(InRentCar(playerid) && renting_car[playerid] == veh)
			{

			    if(!param[0])
			    {
				    StartEngine(veh);
		    		new vname[128];
					GetVehicleNameByModel(GetVehicleModel(veh),vname);
					new str[128];
					format(str,sizeof(str),"starts the %s's engine",vname);
					SendEmote(playerid,str);
				    return 1;
				}
				else
				{

					StopEngine(veh);
			    	SendEmote(playerid,"turns the key, stopping the engine.");
				    return 1;

				}

			}
			else
			{

				SendErrorMsg(playerid,"The engine for this vehicle cannot be stopped.");
				return 1;

			}

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a vehicle, or this vehicle does not have an engine.");
	    return 1;

	}


}

COMMAND:hotwire(playerid,params[])
{

    if(HasCooldown(playerid,COOLDOWN_HOTWIRE)) { SendMsg(playerid,COLOR_LIGHTRED,"Please wait another %d seconds before doing this command",GetCooldownLevel(playerid,COOLDOWN_HOTWIRE)); return 1; }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {

    	new param[7];
    	new veh = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(veh,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
		if(!param[0])
		{

		    new slot = GetVehicleSlot(veh);
		    new success_chance = 50;
		    new chance = random(100);
		    if(VehicleInfo[slot][vImmob] == 1) { success_chance = 60; }
		    if(VehicleInfo[slot][vImmob] == 2) { success_chance = 70; }
		    if(VehicleInfo[slot][vImmob] == 3) { success_chance = 80; }
		    if(VehicleInfo[slot][vImmob] == 4) { success_chance = 90; }
		    if(slot > -1)
		    {

				if(chance >= success_chance)
				{

					if(VehicleInfo[slot][vFuel] > 0)
					{

						StartEngine(veh);
						SendEmote(playerid,"successfully hotwires the vehicle.");
						return 1;

					}
					else
					{

					    SendErrorMsg(playerid,"This vehicle has no fuel, cannot start the engine.");
					    return 1;

					}

				}
				else
				{

					SendEmote(playerid,"attempts to hotwire the vehicle, but fails.");
					SetCooldown(playerid,COOLDOWN_HOTWIRE,10);
					return 1;

				}

		    }
		    else
		    {

				return 1;

		    }

		}
		else
		{

		    SendErrorMsg(playerid,"The engine is already on.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a vehicle.");
        return 1;

    }

}

COMMAND:fuel(playerid,params[])
{

	if(IsPlayerInAnyVehicle(playerid))
	{

	    new veh = GetPlayerVehicleID(playerid);
	    if(IsPushbike(GetVehicleModel(veh))) { SendErrorMsg(playerid,"This vehicle does not have fuel."); return 1; }
		new slot = GetVehicleSlot(veh);
		if(slot > -1)
		{

		    new str[128];
		    format(str,sizeof(str),"~w~Fuel: ~p~%d%",VehicleInfo[slot][vFuel]);
		    GameTextForPlayer(playerid,str,5000,1);
		    return 1;

		}
		else { return 1; }

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a vehicle");
	    return 1;

	}


}

COMMAND:startrun(playerid,params[])
{

	if(!HasCooldown(playerid,COOLDOWN_GARBAGE))
	{

		if(InGarbage(playerid))
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_GARBAGE)
		    {

				if(garbage_run[playerid] == -1)
				{

				    if(IsPlayerInRangeOfPoint(playerid,20.0,2404.4587,83.3811,26.4742))
				    {

			        	OnPlayerStartGarbage(playerid);
	 		           	SetCooldown(playerid,COOLDOWN_GARBAGE,60);
				     	return 1;

					}
					else
					{

					    SendErrorMsg(playerid,"You are not at the garbage depot.");
					    return 1;

					}

				}
				else
				{

				    SendErrorMsg(playerid,"You are already in a garbage run! Use /cancelrun first.");
				    return 1;

				}

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You are not a garbage man");
		        return 1;

		    }

		}
		else
		{

		    SendErrorMsg(playerid,"You are not in a garbage truck.");
		    return 1;

		}

	}
	else
	{

	    SendMsg(playerid,COLOR_LIGHTRED,"Please wait %d seconds before attempting to start another garbage run",GetCooldownLevel(playerid,COOLDOWN_GARBAGE));
	    return 1;

	}

}

COMMAND:cancelrun(playerid,params[])
{

    if(garbage_run[playerid] > -1)
    {

       	GameTextForPlayer(playerid,"~r~Garbage Run Cancelled",5000,5);
        OnPlayerEndGarbage(playerid);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a garbage run");
        return 1;

    }

}

COMMAND:startfish(playerid,params[])
{

    if(InFish(playerid) && CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_FISH)
    {

		OnStartFishing(playerid);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a fishing boat or are not a fisherman.");
        return 1;

    }

}

COMMAND:cancelfish(playerid,params[])
{

    if(fish_run[playerid] > -1)
    {

        OnEndFishing(playerid,0);
        return 1;

    }
    else
 	{

        SendErrorMsg(playerid,"You are not on a fishing run");
        return 1;

    }

}

COMMAND:invite(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

		if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD)
		{

			new idx = 0;
		    new tmp[MAX_PLAYER_NAME];
			tmp = strtok(params,idx);
			if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /invite [playerid/player name]"); return 1; }
			new other = ReturnUser(tmp);
			if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Player not connected"); return 1; }
			if(CharacterInfo[other][active_character[other]][cLevel] < 2) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not level 2, you cannot invite them to your faction"); return 1; }
			faction_invite[other] = CharacterInfo[playerid][active_character[playerid]][cFaction];
			new str[256];
			new name[MAX_PLAYER_NAME];
			new facname[256];
			GetCharacterName(playerid,name);
			GetFactionName(CharacterInfo[playerid][active_character[playerid]][cFaction],facname);
			format(str,sizeof(str),"%s has invited you to faction: %s (use /acceptinvite to join).",name,facname);
			SendClientMessageA(other,COLOR_FACTION,str);
			GetCharacterName(other,name);
			format(str,sizeof(str),"Faction invite sent to %s.",name);
			SendClientMessageA(playerid,COLOR_FACTION,str);
			return 1;


		}
		else
		{

		    SendErrorMsg(playerid,"You are not the leader of this faction");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a faction.");
        return 1;

	}

}

COMMAND:acceptinvite(playerid,params[])
{

    if(faction_invite[playerid] > 0)
	{

		CharacterInfo[playerid][active_character[playerid]][cFaction] = faction_invite[playerid];
		CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] = FAC_PERM_MEMBER;
		SendClientMessageA(playerid,COLOR_FACTION,"You have accepted the faction invite.");
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You have not been invited to a faction.");
	    return 1;

	}

}

COMMAND:uninvite(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

		if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD)
		{

			new idx = 0;
		    new tmp[MAX_PLAYER_NAME];
			tmp = strtok(params,idx);
			if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /uninvite [playerid/player name]"); return 1; }
			new other = ReturnUser(tmp);
			if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Player not connected"); return 1; }
			if(CharacterInfo[playerid][active_character[playerid]][cFaction] == CharacterInfo[other][active_character[other]][cFaction])
			{
			    CharacterInfo[other][active_character[other]][cFaction] = 0;
			    CharacterInfo[other][active_character[other]][cBadge] = 0;
			    CharacterInfo[other][active_character[other]][cFactionPermissions] = 0;
				strdel(CharacterInfo[other][active_character[other]][cRankName],0,strlen(CharacterInfo[other][active_character[other]][cRankName]));
				new str[256];
				new name[MAX_PLAYER_NAME];
				GetCharacterName(playerid,name);
				format(str,sizeof(str),"%s has removed you from the faction.",name);
				SendClientMessageA(other,COLOR_FACTION,str);
				GetCharacterName(other,name);
				format(str,sizeof(str),"You have uninvited %s.",name);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				return 1;

			}
			else
			{

			    SendErrorMsg(playerid,"This player is not in your faction.");
			    return 1;

			}

		}
		else
		{

		    SendErrorMsg(playerid,"You are not the leader of this faction");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a faction.");
        return 1;

    }

}

COMMAND:setrank(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

		if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD || CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_SUPER)
		{

			new idx = 0;
			new tmp[MAX_PLAYER_NAME];
			tmp = strtok(params,idx);
			if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /setrank [playerid/player name] [rank name]"); return 1; }
			new other = ReturnUser(tmp);
			if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Player not connected"); return 1; }
			new result[256];
			FetchParamText(result,params,idx);
			if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /setrank [playerid/player name] [rank name]"); return 1; }
			if(strlen(result) > 64) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Rank name too long"); return 1; }
			if(CharacterInfo[playerid][active_character[playerid]][cFaction] == CharacterInfo[other][active_character[other]][cFaction])
			{
			    format(CharacterInfo[other][active_character[other]][cRankName],64,"%s",result);
				new str[256];
				new name[MAX_PLAYER_NAME];
				GetCharacterName(playerid,name);
				format(str,sizeof(str),"%s has set your rank to %s.",name,result);
				SendClientMessageA(other,COLOR_FACTION,str);
				GetCharacterName(other,name);
				format(str,sizeof(str),"You set %s's rank.",name);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				return 1;
			}
			else
			{

			    SendErrorMsg(playerid,"This player is not in your faction.");
			    return 1;

			}

		}
		else
		{

		    SendErrorMsg(playerid,"You are not the leader of this faction");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a faction");
	    return 1;

	}

}

COMMAND:readmail(playerid,params[])
{

    if(IsInMailRoom(playerid))
    {

        HideLetter(playerid);
        ListMail(playerid,playerid);
        return 1;

    }
    else if(in_house[playerid] > -1)
    {

        if(HouseInfo[in_house[playerid]][hOwner] == CharacterInfo[playerid][active_character[playerid]][cID] || IsRentingHouse(playerid,in_house[playerid]))
        {

            HideLetter(playerid);
        	ListMail(playerid,playerid);
        	return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a post office, or your house");
        return 1;

    }
    return 1;

}

COMMAND:giveweapon(playerid,params[])
{

	new idx = 0;
    new tmp[256];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /giveweapon [playerid/player name]"); return 1; }
    new other = ReturnUser(tmp);
    if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected"); return 1; }
    if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
    {

		SendTransferWeaponsScreen(playerid,other);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not near this player");
        return 1;

    }


}

COMMAND:takedrugs(playerid,params[])
{

	new idx = 0;
	new tmp[64];
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /takedrugs [weed/heroin/coke]"); return 1; }
	if(strcmp(tmp,"coke",true) == 0)
	{

	    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_COKE,1))
	    {

	        SendEmote(playerid,"creates a line and begins snorting coke.");
	        RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_COKE,1);
			heroin[playerid] = 1;
			heroin_stage[playerid] = 1;
			heroin_expire[playerid] = 5;
			SetPlayerWeather(playerid,heroin_stages[heroin_stage[playerid]]);
			new adic = random(100);
			if(adic > 75 && !CharacterInfo[playerid][active_character[playerid]][cAddiction])
			{

				SendClientMessage(playerid,COLOR_YELLOW,"You have become addicted to cocain.");
				CharacterInfo[playerid][active_character[playerid]][cAddiction] = DRUG_COKE;
				CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] = 20;

			}
			if(CharacterInfo[playerid][active_character[playerid]][cAddiction]) { CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] ++; addiction_runtime[playerid] = 600; }
	        return 1;

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You do not have any coke.");
	        return 1;

	    }

	}
	if(strcmp(tmp,"heroin",true) == 0)
	{

	    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_HEROIN,1))
	    {

	        SendEmote(playerid,"takes out a needle and begins injecting themself with heroin.");
	        RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_HEROIN,1);
			heroin[playerid] = 1;
			heroin_stage[playerid] = 1;
			heroin_expire[playerid] = 5;
			SetPlayerWeather(playerid,heroin_stages[heroin_stage[playerid]]);
			new adic = random(50);
			if(adic > 40 && !CharacterInfo[playerid][active_character[playerid]][cAddiction])
			{
			    SendClientMessage(playerid,COLOR_YELLOW,"You have become addicted to heroin.");
				CharacterInfo[playerid][active_character[playerid]][cAddiction] = DRUG_HEROIN;
				CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] = 10;
			}
			if(CharacterInfo[playerid][active_character[playerid]][cAddiction]) { CharacterInfo[playerid][active_character[playerid]][cAddictionLevel] ++; addiction_runtime[playerid] = 600; }
	        return 1;

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You do not have any heroin.");
	        return 1;

	    }

	}
	if(strcmp(tmp,"weed",true) == 0)
	{

	    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEED,1))
	    {

	        SendEmote(playerid,"takes out a lighter and lights a spliff.");
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
	        RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEED,1);
	        weed[playerid] = 1;
	        return 1;

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You do not have any weed.");
	        return 1;

	    }

	}
	SendErrorMsg(playerid,"Unrecognized Item.");
	return 1;

}

COMMAND:setpermissions(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

		if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD)
		{

			new idx = 0;
			new tmp[MAX_PLAYER_NAME];
			tmp = strtok(params,idx);
			if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /setpermissions [playerid/player name] [member/supervisor/leader]"); return 1; }
			new other = ReturnUser(tmp);
			if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Player not connected"); return 1; }
			new tmp2[128];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /setpermissions [playerid/player name] [member/supervisor/leader]"); return 1; }
			if(CharacterInfo[playerid][active_character[playerid]][cFaction] == CharacterInfo[other][active_character[other]][cFaction])
			{
				if(strcmp(tmp2,"member",true) == 0)
				{
				    CharacterInfo[other][active_character[other]][cFactionPermissions] = FAC_PERM_MEMBER;
					new str[256];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"%s has set your permissions to MEMBER.",name);
					SendClientMessageA(other,COLOR_FACTION,str);
					GetCharacterName(other,name);
					format(str,sizeof(str),"You set %s's permissions",name);
					SendClientMessageA(playerid,COLOR_FACTION,str);
					return 1;
				}
				else if(strcmp(tmp2,"supervisor",true) == 0)
				{
				    CharacterInfo[other][active_character[other]][cFactionPermissions] = FAC_PERM_SUPER;
					new str[256];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"%s has set your permissions to SUPERVISOR.",name);
					SendClientMessageA(other,COLOR_FACTION,str);
					GetCharacterName(other,name);
					format(str,sizeof(str),"You set %s's permissions",name);
					SendClientMessageA(playerid,COLOR_FACTION,str);
					return 1;
				}
				else if(strcmp(tmp2,"leader",true) == 0)
				{
				    CharacterInfo[other][active_character[other]][cFactionPermissions] = FAC_PERM_LEAD;
					new str[256];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"%s has set your permissions to LEADER.",name);
					SendClientMessageA(other,COLOR_FACTION,str);
					GetCharacterName(other,name);
					format(str,sizeof(str),"You set %s's permissions",name);
					SendClientMessageA(playerid,COLOR_FACTION,str);
					return 1;
				}

			}
			else
			{

			    SendErrorMsg(playerid,"This player is not in your faction.");
			    return 1;

			}

		}
		else
		{

		    SendErrorMsg(playerid,"You are not the leader of this faction");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a faction");
	    return 1;

	}
	return 1;

}

COMMAND:fooc(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
   	{

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /(f)action [faction ooc chat]"); return 1; }
		new str[256];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		format(str,sizeof(str),"[F-OOC] (( %s %s: %s ))",CharacterInfo[playerid][active_character[playerid]][cRankName],name,result);
		SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a faction.");
	    return 1;

	}

}

COMMAND:f(playerid,params[]) // Jordan v1.3
{

	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
   	{

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /(f)action [faction chat]"); return 1; }
		new str[256];
		new stric[256];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		format(str,sizeof(str),"[Faction Chat] %s %s: %s",CharacterInfo[playerid][active_character[playerid]][cRankName],name,result);
		SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
		if(strlen(accent[playerid])) { format(stric,sizeof(stric),"(radio) %s Says: [%s] %s",name,accent[playerid],result); } else { format(stric,sizeof(stric),"(radio) %s Says: %s",name,result);}
		SendLocalICMessage(playerid,stric,20.0);
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a faction.");
	    return 1;

	}

}

COMMAND:faction(playerid,params[])
{

	new tmp[32];
	new idx = 0;
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_FACTION,"USAGE: /faction [action]"); SendClientMessage(playerid,COLOR_FACTION,"Actions: tow, repair, refuel"); return 1; }
	if(strcmp(tmp,"tow",true) == 0)
	{

		if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
	    {

	        if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_SUPER || CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD)
	        {

				TowFactionVehicles(CharacterInfo[playerid][active_character[playerid]][cFaction]);
				new name[MAX_PLAYER_NAME];
				new str[128];
				GetCharacterName(playerid,name);
				format(str,sizeof(str),"[Faction] %s %s has towed all empty faction vehicles.",CharacterInfo[playerid][active_character[playerid]][cRankName],name);
				SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
				return 1;

	        }
	        else
	        {

	            SendErrorMsg(playerid,"You are not a faction supervisor.");
	            return 1;

	        }

		}
		else
		{

		    SendErrorMsg(playerid,"You are not in a faction");
		    return 1;

		}

	}
	if(strcmp(tmp,"refuel",true) == 0)
	{

	    if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD && CharacterInfo[playerid][active_character[playerid]][cFaction] > 0 || CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_SUPER && CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
	    {

	        for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	        {

	            if(VehicleInfo[i][vFaction] == CharacterInfo[playerid][active_character[playerid]][cFaction])
	            {

	                VehicleInfo[i][vFuel] = 100;

	            }

	        }
	        SendClientMessage(playerid,COLOR_GREEN,"Faction Vehicles Re-Fueled.");
	        new str[128];
	        new name[MAX_PLAYER_NAME];
	        GetCharacterName(playerid,name);
	        format(str,sizeof(str),"[Faction] %s %s has re-fueled all faction vehicles.",CharacterInfo[playerid][active_character[playerid]][cRankName],name);
	        SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
	        return 1;

	    }
	    else
		{

			SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have permissions to do this.");
			return 1;

		}

	}
	if(strcmp(tmp,"repair",true) == 0)
	{

		if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0 && (CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_SUPER || CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD))
	    {

	        for(new i = 0; i < MAX_PLAYERS; i ++)
	        {

	            if(VehicleInfo[i][vFaction] == CharacterInfo[playerid][active_character[playerid]][cFaction])
	            {

	                if(VehicleInfo[i][vVehicle] > -1)
	                {

						new Float:hp;
						GetVehicleHealth(VehicleInfo[i][vVehicle],hp);
						if(hp < 1000.0)
						{

						    if(!IsAnyPlayerInVehicle(VehicleInfo[i][vVehicle]))
						    {

						        RepairVehicleEx(VehicleInfo[i][vVehicle]);

						    }

						}

				    }

	            }

	        }
	        new str[128];
			new name[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
	        format(str,sizeof(str),"[Faction] %s %s has repaired all un-occupied faction vehicles.",CharacterInfo[playerid][active_character[playerid]][cRankName],name);
	        SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
			return 1;

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a faction or are not a faction leader.");
	        return 1;

	    }

	}
	SendClientMessage(playerid,COLOR_LIGHTRED,"Uknown action");
	return 1;

}

COMMAND:duty(playerid,params[])
{


    if(IsLaw(playerid) || IsMedic(playerid) || IsGov(playerid))
    {

        if(IsPlayerInRangeOfPoint(playerid,7.5,255.1412,74.9140,1003.6406) && IsLaw(playerid) || IsPlayerInRangeOfPoint(playerid,7.5,255.1412,74.9140,1003.6406) && IsMedic(playerid) || IsPlayerInRangeOfPoint(playerid,7.5,-688.4454,937.7852,13.6328) && IsGov(playerid))
        {

            ToggleDuty(playerid,DUTY_TYPE_NORM);
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not in the locker room");
            return 1;

        }

    }
    else
    {

		SendErrorMsg(playerid,"You are not a cop/medic/gov");
        return 1;

    }

}

COMMAND:medicduty(playerid,params[])
{

    if(IsLaw(playerid) || IsMedic(playerid) || IsGov(playerid))
    {

        if(IsPlayerInRangeOfPoint(playerid,7.5,255.1412,74.9140,1003.6406) && IsLaw(playerid) || IsPlayerInRangeOfPoint(playerid,7.5,223.3596,183.8123,1028.8789) && IsMedic(playerid) || IsPlayerInRangeOfPoint(playerid,7.5,-688.4454,937.7852,13.6328) && IsGov(playerid))
        {

            ToggleDuty(playerid,DUTY_TYPE_MEDIC);
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not in the locker room");
            return 1;

        }

    }
    else
    {

		SendErrorMsg(playerid,"You are not a cop/medic/gov");
        return 1;

    }

}

COMMAND:fireduty(playerid,params[])
{

    if(IsLaw(playerid) || IsMedic(playerid) || IsGov(playerid))
    {

        if(IsPlayerInRangeOfPoint(playerid,7.5,255.1412,74.9140,1003.6406) && IsLaw(playerid) || IsPlayerInRangeOfPoint(playerid,7.5,223.3596,183.8123,1028.8789) && IsMedic(playerid) || IsPlayerInRangeOfPoint(playerid,7.5,-688.4454,937.7852,13.6328) && IsGov(playerid))
        {

            ToggleDuty(playerid,DUTY_TYPE_FIRE);
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not in the locker room");
            return 1;

        }

    }
    else
    {

		SendErrorMsg(playerid,"You are not a cop/medic/gov");
        return 1;

    }

}

COMMAND:swatduty(playerid,params[])
{

    if(IsLaw(playerid))
    {

        if(IsPlayerInRangeOfPoint(playerid,7.5,255.1412,74.9140,1003.6406))
        {

            ToggleDuty(playerid,DUTY_TYPE_SWAT);
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not in the locker rooms");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop");
        return 1;

    }

}

COMMAND:uodduty(playerid,params[])
{

    if(IsLaw(playerid))
    {

        if(IsPlayerInRangeOfPoint(playerid,7.5,255.1412,74.9140,1003.6406))
        {

            ToggleDuty(playerid,DUTY_TYPE_CSI);
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not in the locker rooms");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop");
        return 1;

    }

}

COMMAND:arrest(playerid,params[])
{

    if(IsLaw(playerid) && duty[playerid])
    {

		if(IsPlayerInRangeOfPoint(playerid,10.0,267.3027,77.1092,1001.0391))
		{

			new idx = 0;
		    new tmp[128];
		    tmp = strtok(params,idx);
		    if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /arrest [playerid/player name] [time(mins)] [bail(0 for none)] [reason]"); return 1; }
		    new other = ReturnUser(tmp);
		    if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Player not connected"); return 1; }
			new tmp2[128];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /arrest [playerid/player name] [time(mins)] [bail(0 for none)] [reason]"); return 1; }
			new time = strval(tmp2);
			if(time < 1 || time > 60) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Time cannot be below 1 or above 60"); return 1; }
			new tmp3[128];
			tmp3 = strtok(params,idx);
			new bail = strval(tmp3);
			if(bail < 0 || bail > 1000000) { SendClientMessage(playerid,COLOR_LIGHTRED,"Bail cannot be below $0 or above $1000000"); return 1; }
			new result[256];
			FetchParamText(result,params,idx);
			if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /arrest [playerid/player name] [times(mins)] [reason]"); return 1; }
			if(GetDistanceBetweenPlayers(playerid,other) > 7.5) { SendErrorMsg(playerid,"You are not near this player."); return 1; }
			ArrestPlayer(other,time,result,playerid,bail);
			new str[256];
			new name[MAX_PLAYER_NAME];
			new othername[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			GetCharacterName(other,othername);
			format(str,sizeof(str),"[Jail] %s %s has just arrested %s",CharacterInfo[playerid][active_character[playerid]][cRankName],name,othername);
			SendClientMessageToAll(COLOR_LIGHTRED,str);
			format(CharacterInfo[other][active_character[other]][cWeapons],256,"0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0");
			ResetInventory(other);
			SetPlayerHealth(other,100);
			new bailstr[128];
			if(bail == 0) { format(bailstr,sizeof(bailstr),"Not available"); } else { format(bailstr,sizeof(bailstr),"$%d",bail); }
			format(str,sizeof(str),"You have been arrested for %d minutes, bail: %s",time,bailstr);
			SendClientMessage(other,COLOR_GREEN,str);
			return 1;

		}
		else
		{

		   	SendErrorMsg(playerid,"You are not at the cells.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop, or are not on duty.");
        return 1;

    }

}

COMMAND:frisk(playerid,params[])
{

    if(IsLaw(playerid) && duty[playerid] || IsGov(playerid) && duty[playerid])
    {

		new idx = 0;
		new tmp[128];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /frisk [playeird/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(GetDistanceBetweenPlayers(playerid,other) > 3.0) { SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not close enough to this player."); return 1; }
		new str[128];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(other,name);
		format(str,sizeof(str),"|----Items on %s----|",name);
		SendClientMessageA(playerid,COLOR_WHITE,str);
		ShowPlayerWeapons(playerid,other);
		ShowInventory(other,playerid);
		format(str,sizeof(str),"frisks %s",name);
		SendEmote(playerid,str);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop or are not on duty.");
        return 1;

    }

}

COMMAND:tazer(playerid,params[])
{

    if(IsLaw(playerid) && duty[playerid])
    {

        if(tazer_out[playerid])
        {

            tazer_out[playerid] = 0;
			new name[MAX_PLAYER_NAME];
			new str[128];
			GetCharacterName(playerid,name);
			format(str,sizeof(str),"%s holsters his tazer");
			SendEmote(playerid,str);
			if(GetPlayerSkin(playerid) != 71) GivePlayerWeaponEx(playerid,WEAPON_DEAGLE,500);
			return 1;

        }
        else
        {

        	tazer_out[playerid] = 1;
			new name[MAX_PLAYER_NAME];
			new str[128];
			GetCharacterName(playerid,name);
			format(str,sizeof(str),"%s unholsters his tazer");
			SendEmote(playerid,str);
			GivePlayerWeaponEx(playerid,WEAPON_SILENCED,12);
			return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop, or are not on duty.");
        return 1;

    }

}

COMMAND:mdc(playerid,params[])
{

	if((InCopCar(playerid) && duty[playerid]) || IsPlayerInRangeOfPoint(playerid,50.0,246.6959,118.3634,1003.2188) && duty[playerid])
	{

		new idx = 0;
	    new tmp[64];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /mdc [action] [value(if required)]"); SendClientMessage(playerid,COLOR_YELLOW2,"[Action] person, clear, issue, calls, callinfo, plate"); return 1; }
	    if(strcmp(tmp,"plate",true) == 0)
	    {

			new result[256];
			FetchParamText(result,params,idx);
	        if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /mdc plate [license plate]"); return 1; }
	        new slot = -1;
			for(new i = 0; i < MAX_RP_VEHICLES; i ++)
			{

			    if(VehicleInfo[i][vModel] > 0)
			    {

			        if(strlen(VehicleInfo[i][vPlate]))
			        {

				        if(strcmp(VehicleInfo[i][vPlate],result,true) == 0) { slot = i; }

				   	}

			    }

			}
			if(slot == -1) { SendClientMessage(playerid,COLOR_LIGHTRED,"A vehicle with this license plate could not be found."); return 1; }
			SendClientMessage(playerid,COLOR_YELLOW2,"|-----MDC-----|");
			new str[128];
			format(str,sizeof(str),"{808080}Vehicle Reg To: {FFFFFF}%s",VehicleInfo[slot][vOwnerName]);
			SendClientMessage(playerid,COLOR_WHITE,str);
			format(str,sizeof(str),"{808080}Insurances: {FFFFFF}%d",VehicleInfo[slot][vInsurance]);
			SendClientMessage(playerid,COLOR_WHITE,str);
			return 1;

	    }
	    if(strcmp(tmp,"vehicle",true) == 0)
	    {

			new tmp2[64];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /mdc vehicle [playerid/player name]"); return 1; }
			new other = ReturnUser(tmp2);
			if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
			if(!IsPlayerInAnyVehicle(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in a vehicle."); return 1; }
			new slot = GetVehicleSlot(GetPlayerVehicleID(other));
			if(slot > -1)
			{

				SendClientMessage(playerid,COLOR_YELLOW2,"|-----MDC-----|");
				new str[128];
				format(str,sizeof(str),"{808080}Vehicle Reg To: {FFFFFF}%s",VehicleInfo[slot][vOwnerName]);
				SendClientMessage(playerid,COLOR_WHITE,str);
				format(str,sizeof(str),"{808080}Insurances: {FFFFFF}%d",VehicleInfo[slot][vInsurance]);
				SendClientMessage(playerid,COLOR_WHITE,str);
				return 1;

			}
			else
			{

				SendClientMessage(playerid,COLOR_LIGHTRED,"This is a public vehicle and cannot be checked.");
				return 1;

			}

	    }
	    if(strcmp(tmp,"clear",true) == 0)
	    {

			new tmp2[64];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /mdc clear [playerid/player name]"); return 1; }
			new other = ReturnUser(tmp2);
			if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
			new q[1024];
			new clean_name[MAX_PLAYER_NAME];
			mysql_real_escape_string(CharacterInfo[other][active_character[other]][cName],clean_name);
			format(q,sizeof(q),"DELETE FROM rp_crimes WHERE suspect = '%s'",clean_name);
			mysql_query(q,player_threads[playerid]);
			SendClientMessage(playerid,COLOR_YELLOW2,"All warrants cleared for this person.");
			return 1;

	    }
	    if(strcmp(tmp,"issue",true) == 0)
	    {

	        new tmp2[64];
	        tmp2 = strtok(params,idx);
	        if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /mdc issue [warrant] [playerid/player name]"); return 1; }
			if(strcmp(tmp2,"warrant",true) == 0)
			{

				new tmp3[64];
				tmp3 = strtok(params,idx);
				if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /mdc issue warrant [playerid/player name] [crime]"); return 1; }
				new other = ReturnUser(tmp3);
				if(!IsPlayerConnectedEx(other)) { SendErrorMsg(playerid,"This player is not connected."); return 1; }
				new result[256];
				FetchParamText(result,params,idx);
				if(!strlen(result)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /mdc issue warrant [playerid/player name] [crime]"); return 1; }
				new clean_name[MAX_PLAYER_NAME];
				new clean_reason[128];
				mysql_real_escape_string(CharacterInfo[other][active_character[other]][cName],clean_name);
				mysql_real_escape_string(result,clean_reason);
				new q[1024];
				format(q,sizeof(q),"INSERT INTO rp_crimes (suspect,crime) VALUES ('%s','%s')",clean_name,clean_reason);
				mysql_query(q,player_threads[playerid]);
				SendClientMessage(playerid,COLOR_FACTION,"Warrant Issued.");
				return 1;

			}

	    }
		if(strcmp(tmp,"callinfo",true) == 0)
		{

		    if(callreq_cooldown[playerid] == 0)
		    {
			    new tmp2[64];
			    tmp2 = strtok(params,idx);
				if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"/mdc callinfo [call ID]"); return 1; }
				new call = strval(tmp2);
				if(call < 1 || call > 9999999) { SendErrorMsg(playerid,"Invalid call ID"); return 1; }
			    SendEmerDetails(playerid,call,CALL_TYPE_PD);
			    callreq_cooldown[playerid] = 10;
			    return 1;
			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"Please wait 10 seconds before attempting to request more details.");
				return 1;

			}

		}
	    if(strcmp(tmp,"calls",true) == 0)
		{

			SendEmerCalls(playerid,CALL_TYPE_PD);
			return 1;

	    }
	    if(strcmp(tmp,"person",true) == 0)
  		{

			new tmp2[64];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /mdc person [playerid/player name]"); return 1; }
			new other = ReturnUser(tmp2);
			if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
			SetPVarInt(playerid,"mdc_otherid",CharacterInfo[other][active_character[other]][cID]);
			new str[128];
			new name[MAX_PLAYER_NAME];
			GetCharacterName(other,name);
			SendClientMessage(playerid,COLOR_YELLOW2,"|-----MDC-----|");
			format(str,sizeof(str),"{808080}MDC Report For: {FFFFFF}%s",name);
			SendClientMessage(playerid,COLOR_WHITE,str);
			if(CharacterInfo[other][active_character[other]][cCarLic]) { format(str,sizeof(str),"Yes"); } else { format(str,sizeof(str),"No"); }
			if(CharacterInfo[other][active_character[other]][cCarLicWarnings] > 0) { new wtmp[64]; format(wtmp,sizeof(wtmp)," {FF0033}Warnings: %d",CharacterInfo[other][active_character[other]][cCarLicWarnings]); strins(str,wtmp,strlen(str)); }
			format(str,sizeof(str),"{808080}Drivers License: {FFFFFF}%s",str);
			SendClientMessage(playerid,COLOR_WHITE,str);
			if(CharacterInfo[other][active_character[other]][cWepLic]) { format(str,sizeof(str),"Yes"); } else { format(str,sizeof(str),"No"); }
			format(str,sizeof(str),"{808080}Weapons License: {FFFFFF}%s",str);
			SendClientMessage(playerid,COLOR_WHITE,str);
			if(CharacterInfo[other][active_character[other]][cFlyLic]) { format(str,sizeof(str),"Yes"); } else { format(str,sizeof(str),"No"); }
			format(str,sizeof(str),"{808080}Flying License: {FFFFFF}%s",str);
			SendClientMessage(playerid,COLOR_WHITE,str);
			new clean_name[MAX_PLAYER_NAME];
			mysql_real_escape_string(CharacterInfo[other][active_character[other]][cName],clean_name);
			new q[256];
			format(q,sizeof(q),"SELECT * FROM rp_crimes WHERE suspect = '%s' ORDER BY id DESC",clean_name);
			mysql_query(q,player_threads[playerid],QUERY_WARRANTS);
			return 1;

	    }
		SendErrorMsg(playerid,"Action not found.");
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a cop car/PD building or are not on duty.");
	    return 1;

	}

}

COMMAND:broadcast(playerid,params[])
{

    if(IsNews(playerid) && InNewsVan(playerid))
    {

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /broadcast [news]"); return 1; }
		SendNewsBroadcast(playerid,result);
		return 1;

    }
    else
	{

	    SendErrorMsg(playerid,"You are not in a news van or are not a news reporter.");
	    return 1;

	}

}

COMMAND:m(playerid,params[])
{

	return cmd_megaphone(playerid,params);

}

COMMAND:megaphone(playerid,params[])
{

    if(InCopCar(playerid))
    {

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /(m)egaphone [Megaphone text]"); return 1; }
		new name[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		new str[256];
		format(str,sizeof(str),"[Megaphone] %s %s: %s",CharacterInfo[playerid][active_character[playerid]][cRankName],name,result);
		SendMegaphone(playerid,str);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a cop car.");
        return 1;

    }

}

COMMAND:ticket(playerid,params[])
{

    if(IsLaw(playerid) && duty[playerid])
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /ticket [playerid/player name] [amount] [reason]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected"); return 1; }
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /ticket [playerid/player name] [amount] [reason]"); return 1; }
		new amount = strval(tmp2);
		if(amount < 1 || amount > 50000) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Amount cannot be below $1 or above $50000"); return 1; }
		new result[256];
		FetchParamText(result,params,idx);
		if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /ticket[playerid/player name] [amount] [reason]"); return 1; }
		new fname[256];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(other,name);
        GetFactionName(CharacterInfo[playerid][active_character[playerid]][cFaction],fname);
		IssueFine(other,fname,result,amount);
		new str[128];
		format(str,sizeof(str),"takes out a ticket and hands it to %s",name);
		SendEmote(playerid,str);
		GetCharacterName(playerid,name);
		format(str,sizeof(str),"%s has issued you a ticket for $%d, reason: %s. You can see your tickets by using /tickets list",name,amount,result);
		SendClientMessage(other,COLOR_FACTION,str);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop, or are not on duty.");
        return 1;

    }

}

COMMAND:acceptticket(playerid,params[])
{

    if(ticket_price[playerid] > 0)
    {

        new other = ticket_sender[playerid];
        if(!IsPlayerConnectedEx(other) || !IsLaw(other) || !duty[other]) { SendClientMessageA(playerid,COLOR_LIGHTRED,"The person who issued your ticket is no longer available."); return 1; }
        if(CharacterInfo[playerid][active_character[playerid]][cMoney] < ticket_price[playerid]) { SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have enough money to pay your ticket."); return 1; }
		CharacterInfo[playerid][active_character[playerid]][cMoney] -= ticket_price[playerid];
		new name[MAX_PLAYER_NAME];
		new str[256];
		GetCharacterName(playerid,name);
		format(str,sizeof(str),"%s has paid their ticket.",name);
		SendClientMessageA(ticket_sender[playerid],COLOR_FACTION,str);
		format(str,sizeof(str),"You have paid your ticket.");
		SendClientMessageA(playerid,COLOR_FACTION,str);
		ticket_price[playerid] = 0;
		ticket_sender[playerid] = -1;
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You have not been issued a ticket.");
        return 1;

    }

}

COMMAND:taketest(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cCarLic] == 0)
    {

        if(IsPlayerInRangeOfPoint(playerid,7.5,2436.5339,-50.8632,26.6416	))
        {

            if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 800)
            {

           		OnPlayerEnterVehicleTest(playerid);

			}
			else
			{

			    SendErrorMsg(playerid,"You do not have $800");

			}
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not at the DMV.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You already have a drivers license.");
        return 1;

    }

}

COMMAND:sellweapon(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_DEALER)
    {
        new idx = 0;
	    new tmp[64];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /sellweapon [playerid/player name] [price] [deagle/mp5/ak47/spaz/rifle/shotgun]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
	    new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /sellweapon [playerid/player name] [price] [deagle/mp5/ak47/spaz/rifle/shotgun]"); return 1; }
		new amount = strval(tmp2);
		if(amount < 1000 || amount > 50000) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Price cannot be below $1000 or above $50000"); return 1; }
		if(GetDistanceBetweenPlayers(playerid,other) > 7.5) { SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not near this player"); return 1; }
		new tmp3[64];
		tmp3 = strtok(params,idx);
		if(!strlen(tmp3)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /sellweapon [playerid/player name] [price] [deagle/mp5/ak47/spaz/rifle/shotgun]"); return 1; }
		if(strcmp(tmp3,"sniper",true) == 0)
		{

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_SNIPER,1))
		    {

				sellgun_sender[other] = playerid;
				sellgun_sendgun[other] = WEAPON_SNIPER;
				sellgun_price[other] = amount;
				new name[MAX_PLAYER_NAME];
				new oname[MAX_PLAYER_NAME];
				new str[256];
				GetCharacterName(playerid,name);
				GetCharacterName(other,oname);
				format(str,sizeof(str),"You have offered %s a Sniper for $%d wait to see if they accept.",oname,amount);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"%s has offered you a Sniper for $%d (use /acceptweapon to accept the offer)",name,amount);
				SendClientMessageA(other,COLOR_FACTION,str);
				return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You do not have any of these weapons.");
		        return 1;

		    }

		}
		if(strcmp(tmp3,"deagle",true) == 0)
		{

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_DEAGLEPACK,1))
		    {

				sellgun_sender[other] = playerid;
				sellgun_sendgun[other] = WEAPON_DEAGLE;
				sellgun_price[other] = amount;
				new name[MAX_PLAYER_NAME];
				new oname[MAX_PLAYER_NAME];
				new str[256];
				GetCharacterName(playerid,name);
				GetCharacterName(other,oname);
				format(str,sizeof(str),"You have offered %s a Desert Eagle for $%d wait to see if they accept.",oname,amount);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"%s has offered you a Desert Eagle for $%d (use /acceptweapon to accept the offer)",name,amount);
				SendClientMessageA(other,COLOR_FACTION,str);
				return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You do not have any of these weapons.");
		        return 1;

		    }

		}
		else if(strcmp(tmp3,"mp5",true) == 0)
		{

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MP5PACK,1))
		    {

				sellgun_sender[other] = playerid;
				sellgun_sendgun[other] = WEAPON_MP5;
				sellgun_price[other] = amount;
				new name[MAX_PLAYER_NAME];
				new oname[MAX_PLAYER_NAME];
				new str[256];
				GetCharacterName(playerid,name);
				GetCharacterName(other,oname);
				format(str,sizeof(str),"You have offered %s a MP5 for $%d wait to see if they accept.",oname,amount);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"%s has offered you a MP5 for $%d (use /acceptweapon to accept the offer)",name,amount);
				SendClientMessageA(other,COLOR_FACTION,str);
				return 1;

		    }
		    else
		    {

		        SendClientMessageA(playerid,COLOR_LIGHTRED,"You do not have any of these weapons.");
		        return 1;

		    }

		}
		else if(strcmp(tmp3,"ak47",true) == 0)
		{

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_AK47PACK,1))
		    {

				sellgun_sender[other] = playerid;
				sellgun_sendgun[other] = WEAPON_AK47;
				sellgun_price[other] = amount;
				new name[MAX_PLAYER_NAME];
				new oname[MAX_PLAYER_NAME];
				new str[256];
				GetCharacterName(playerid,name);
				GetCharacterName(other,oname);
				format(str,sizeof(str),"You have offered %s a AK47 for $%d wait to see if they accept.",oname,amount);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"%s has offered you a AK47 for $%d (use /acceptweapon to accept the offer)",name,amount);
				SendClientMessageA(other,COLOR_FACTION,str);
				return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You do not have any of these weapons.");
		        return 1;

		    }

		}
		/*else if(strcmp(tmp3,"tec9",true) == 0)
		{

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_TEC9PACK,1))
		    {

				sellgun_sender[other] = playerid;
				sellgun_sendgun[other] = WEAPON_TEC9;
				sellgun_price[other] = amount;
				new name[MAX_PLAYER_NAME];
				new oname[MAX_PLAYER_NAME];
				new str[256];
				GetCharacterName(playerid,name);
				GetCharacterName(other,oname);
				format(str,sizeof(str),"You have offered %s a TEC9 for $%d wait to see if they accept.",oname,amount);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"%s has offered you a TEC9 for $%d (use /acceptweapon to accept the offer)",name,amount);
				SendClientMessageA(other,COLOR_FACTION,str);
				return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You do not have any of these weapons.");
		        return 1;

		    }

		}*/
		else if(strcmp(tmp3,"spaz",true) == 0)
		{

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_SPAZ12PACK,1))
		    {

				sellgun_sender[other] = playerid;
				sellgun_sendgun[other] = 27;
				sellgun_price[other] = amount;
				new name[MAX_PLAYER_NAME];
				new oname[MAX_PLAYER_NAME];
				new str[256];
				GetCharacterName(playerid,name);
				GetCharacterName(other,oname);
				format(str,sizeof(str),"You have offered %s a Spaz 12 for $%d wait to see if they accept.",oname,amount);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"%s has offered you a Spaz 12 for $%d (use /acceptweapon to accept the offer)",name,amount);
				SendClientMessageA(other,COLOR_FACTION,str);
				return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You do not have any of these weapons.");
		        return 1;

		    }

		}
	 	/*else if(strcmp(tmp3,"mac10",true) == 0)
		{

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MAC10PACK,1))
		    {

				sellgun_sender[other] = playerid;
				sellgun_sendgun[other] = WEAPON_UZI;
				sellgun_price[other] = amount;
				new name[MAX_PLAYER_NAME];
				new oname[MAX_PLAYER_NAME];
				new str[256];
				GetCharacterName(playerid,name);
				GetCharacterName(other,oname);
				format(str,sizeof(str),"You have offered %s a MAC 10 for $%d wait to see if they accept.",oname,amount);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"%s has offered you a MAC 10 for $%d (use /acceptweapon to accept the offer)",name,amount);
				SendClientMessageA(other,COLOR_FACTION,str);
				return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You do not have any of these weapons.");
		        return 1;

		    }

		}*/
	 	else if(strcmp(tmp3,"rifle",true) == 0)
		{

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RIFLEPACK,1))
		    {

				sellgun_sender[other] = playerid;
				sellgun_sendgun[other] = WEAPON_RIFLE;
				sellgun_price[other] = amount;
				new name[MAX_PLAYER_NAME];
				new oname[MAX_PLAYER_NAME];
				new str[256];
				GetCharacterName(playerid,name);
				GetCharacterName(other,oname);
				format(str,sizeof(str),"You have offered %s a RIFLE for $%d wait to see if they accept.",oname,amount);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"%s has offered you a RIFLE 10 for $%d (use /acceptweapon to accept the offer)",name,amount);
				SendClientMessageA(other,COLOR_FACTION,str);
				return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You do not have any of these weapons.");
		        return 1;

		    }

		}
	 	else if(strcmp(tmp3,"shotgun",true) == 0)
		{

		    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_SHOTGUN,1))
		    {

				sellgun_sender[other] = playerid;
				sellgun_sendgun[other] = WEAPON_SHOTGUN;
				sellgun_price[other] = amount;
				new name[MAX_PLAYER_NAME];
				new oname[MAX_PLAYER_NAME];
				new str[256];
				GetCharacterName(playerid,name);
				GetCharacterName(other,oname);
				format(str,sizeof(str),"You have offered %s a Shotgun for $%d wait to see if they accept.",oname,amount);
				SendClientMessageA(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"%s has offered you a Shotgun 10 for $%d (use /acceptweapon to accept the offer)",name,amount);
				SendClientMessageA(other,COLOR_FACTION,str);
				return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You do not have any of these weapons.");
		        return 1;

		    }

		}

	}
	else
	{

		SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a weapons dealer.");
		return 1;

	}
	return 1;

}

COMMAND:acceptweapon(playerid,params[])
{

    if(sellgun_sender[playerid] > -1)
    {

		if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= sellgun_price[playerid])
		{

		    if(GetDistanceBetweenPlayers(playerid,sellgun_sender[playerid]) < 7.5)
		    {

				CharacterInfo[playerid][active_character[playerid]][cMoney] -= sellgun_price[playerid];
			    CharacterInfo[sellgun_sender[playerid]][active_character[sellgun_sender[playerid]]][cMoney] += sellgun_price[playerid];
		        CharacterInfo[sellgun_sender[playerid]][active_character[sellgun_sender[playerid]]][cWeaponPackAmount] --;
		        if(CharacterInfo[sellgun_sender[playerid]][active_character[sellgun_sender[playerid]]][cWeaponPackAmount] == 0)
		        {

		            CharacterInfo[sellgun_sender[playerid]][active_character[sellgun_sender[playerid]]][cWeaponPack] = 0;

		        }
		        switch(sellgun_sendgun[playerid])
		        {

		            case WEAPON_SNIPER:
		            {

		                if(HasItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_SNIPER,1))
		                {

		            		RemoveItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_SNIPER,1);
			                GivePlayerWeaponEx(playerid,WEAPON_SNIPER,20);

			            }

		            }
		            case WEAPON_DEAGLE:
		            {

		                if(HasItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_DEAGLEPACK,1))
		                {

			                RemoveItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_DEAGLEPACK,1);
			                GivePlayerWeaponEx(playerid,WEAPON_DEAGLE,64);

			            }

		            }
		            case WEAPON_MP5:
		            {

		                if(HasItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_MP5PACK,1))
		                {

			                RemoveItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_MP5PACK,1);
			                GivePlayerWeaponEx(playerid,WEAPON_MP5,150);

			            }

		            }
		            case WEAPON_AK47:
		            {

		                if(HasItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_AK47PACK,1))
		                {

		                	RemoveItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_AK47PACK,1);
		                	GivePlayerWeaponEx(playerid,WEAPON_AK47,180);

		                }

		            }
		            case WEAPON_TEC9:
		            {

		                if(HasItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_TEC9PACK,1))
		                {

		                	RemoveItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_TEC9PACK,1);
			                GivePlayerWeaponEx(playerid,WEAPON_TEC9,150);

			            }

		            }
		            case 27:
		            {

		                if(HasItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_SPAZ12PACK,1))
		                {

		                	RemoveItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_SPAZ12PACK,1);
		                	GivePlayerWeaponEx(playerid,27,50);

		                }

		            }
		            case WEAPON_UZI:
		            {

		            	if(HasItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_MAC10PACK,1))
		                {

                        	RemoveItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_MAC10PACK,1);
		               	 	GivePlayerWeaponEx(playerid,WEAPON_UZI,150);

		               	}

		            }
		            case WEAPON_RIFLE:
		            {

		                if(HasItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_RIFLEPACK,1))
		                {

			                RemoveItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_RIFLEPACK,1);
			                GivePlayerWeaponEx(playerid,WEAPON_RIFLE,25);

						}

           			}
           			case WEAPON_SHOTGUN:
           			{

		                if(HasItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_SHOTGUN,1))
		                {

           			   	 	RemoveItem(INVENTORY_TYPE_PLAYER,sellgun_sender[playerid],INVENTORY_SHOTGUN,1);
           			    	GivePlayerWeaponEx(playerid,WEAPON_SHOTGUN,50);

           			    }

           			}

		        }
	          	new name[MAX_PLAYER_NAME];
       			GetCharacterName(playerid,name);
       			new str[256];
       			format(str,sizeof(str),"takes out a weapon and hands it to %s",name);
       			SendEmote(sellgun_sender[playerid],str);
       			sellgun_sender[playerid] = -1;
				sellgun_sendgun[playerid] = 0;
				sellgun_price[playerid] = 0;
       			return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You are no longer near this player.");
		        sellgun_sender[playerid] = -1;
				sellgun_sendgun[playerid] = 0;
				sellgun_price[playerid] = 0;
		        return 1;

		    }

		}
		else
		{

			SendErrorMsg(playerid,"You do not have enough money to purchase this weapon.");
			sellgun_sender[playerid] = -1;
			sellgun_sendgun[playerid] = 0;
			sellgun_price[playerid] = 0;
			return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"No one has offered you weapons.");
        return 1;

    }

}

COMMAND:giveweaponlicense(playerid,params[])
{

    if(IsLaw(playerid) && duty[playerid])
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
      	if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /giveweaponlicense [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        if(GetDistanceBetweenPlayers(playerid,other) > 7.5) { SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not near this player."); return 1; }
        CharacterInfo[other][active_character[other]][cWepLic] = 1;
		new name[MAX_PLAYER_NAME];
		new oname[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		GetCharacterName(other,oname);
		new str[128];
		format(str,sizeof(str),"You have given %s a weapons license",oname);
		SendClientMessageA(playerid,COLOR_FACTION,str);
		format(str,sizeof(str),"%s has given you a weapons license",name);
		SendClientMessageA(other,COLOR_FACTION,str);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop or are not on duty.");
        return 1;

    }

}

COMMAND:stats(playerid,params[])
{

	if(character_chosen[playerid])
	{

	    new str[256];
	    new tmp[32];
	    new tmp2[32];
	    new tmp3[32];
	    new name[MAX_PLAYER_NAME];
	    new facslot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
	    GetCharacterName(playerid,name);
	    format(str,sizeof(str),"|----------Stats For: %s----------|",name);
	    SendClientMessage(playerid,COLOR_GREEN,str);
		if(CharacterInfo[playerid][active_character[playerid]][cCarLic]) { format(tmp,sizeof(tmp),"Yes"); } else { format(tmp,sizeof(tmp),"No"); }
		if(CharacterInfo[playerid][active_character[playerid]][cWepLic]) { format(tmp2,sizeof(tmp2),"Yes"); } else { format(tmp2,sizeof(tmp2),"No"); }
	    format(str,sizeof(str),"Money:[$%d] Bank Balance:[$%d] Car License:[%s] Weapons License:[%s]",CharacterInfo[playerid][active_character[playerid]][cMoney],CharacterInfo[playerid][active_character[playerid]][cBank],tmp,tmp2);
	    SendClientMessage(playerid,COLOR_WHITE,str);
	    if(!CharacterInfo[playerid][active_character[playerid]][cFaction]) { format(tmp,sizeof(tmp),"No Faction"); } else { new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]); format(tmp,sizeof(tmp),"%s",FactionInfo[slot][fName]); }
	    if(!CharacterInfo[playerid][active_character[playerid]][cFaction]) { format(tmp,sizeof(tmp),"None"); } else { format(tmp,sizeof(tmp),"%s",FactionInfo[facslot][fName]); }
	    if(!mask[playerid]) { format(tmp3,sizeof(tmp3),"No"); } else { format(tmp3,sizeof(tmp3),"Yes"); }
	    format(str,sizeof(str),"Faction:[%s] Rank:[%s] Phone Number:[%d] Mask:[%s]",tmp,tmp2,CharacterInfo[playerid][active_character[playerid]][cPhone],tmp3);
	    SendClientMessage(playerid,COLOR_WHITE,str);
	    if(!HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1)) { format(tmp,sizeof(tmp),"No"); } else { format(tmp,sizeof(tmp),"Yes"); }
	    new jname[256];
		GetJobName(CharacterInfo[playerid][active_character[playerid]][cJob],jname);
		new jcooldown = (CharacterInfo[playerid][active_character[playerid]][cJobCooldown] / 60);
		format(str,sizeof(str),"Radio:[%s] Radio Channel:[%d] Savings:[$%d] Job:[%s] New Job:[%d mins]",tmp,CharacterInfo[playerid][active_character[playerid]][cRadioChannel],CharacterInfo[playerid][active_character[playerid]][cSavings],jname,jcooldown);
		SendClientMessage(playerid,COLOR_WHITE,str);
	    if(CharacterInfo[playerid][active_character[playerid]][cPayTime] > 60)
		{
			format(tmp,sizeof(tmp),"%d mins",(CharacterInfo[playerid][active_character[playerid]][cPayTime] / 60));
		}
		else
		{
            format(tmp,sizeof(tmp),"any second now...");
		}
		if(CharacterInfo[playerid][active_character[playerid]][cHealthInsurance]) { format(tmp3,sizeof(tmp3),"Yes"); } else { format(tmp3,sizeof(tmp3),"No"); }
	    format(str,sizeof(str),"Level:[%d] Exp:[%d/%d] Payday In:[%s] Payday:[$%d] Deaths:[%d] Health Insurance:[%s]",CharacterInfo[playerid][active_character[playerid]][cLevel],CharacterInfo[playerid][active_character[playerid]][cExp],(8 * CharacterInfo[playerid][active_character[playerid]][cLevel]),tmp,(CharacterInfo[playerid][active_character[playerid]][cPayday] + 1000),CharacterInfo[playerid][active_character[playerid]][cDeaths],tmp3);
	    SendClientMessage(playerid,COLOR_WHITE,str);
	    if(dice[playerid]) { format(tmp,sizeof(tmp),"Yes"); } else { format(tmp,sizeof(tmp),"No"); }
	    if(gps[playerid]) { format(tmp2,sizeof(tmp2),"Yes"); } else { format(tmp2,sizeof(tmp2),"No"); }
	    if(rope[playerid]) { format(tmp3,sizeof(tmp3),"Yes"); } else { format(tmp3,sizeof(tmp3),"No"); }
	    new cname[64];
		if(CharacterInfo[playerid][active_character[playerid]][cCompany] > 0)
		{

		    new cslot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
		    format(cname,sizeof(cname),"%s",CompanyInfo[cslot][ciName]);

		}
		else { format(cname,sizeof(cname),"None"); }
		new lang[64];
		FetchLanguageName(CharacterInfo[playerid][active_character[playerid]][cLanguage],lang);
	    format(str,sizeof(str),"Dice:[%s] GPS:[%s] Rope:[%s] Company:[%s] Second Language:[%s]",tmp,tmp2,tmp3,cname,lang);
	    SendClientMessage(playerid,COLOR_WHITE,str);
	    new skill_name[128];
		GetSkillName(skill_name,CharacterInfo[playerid][active_character[playerid]][cSkill]);
		format(str,sizeof(str),"Skill:[%s] Skill Level:[%d]",skill_name,CharacterInfo[playerid][active_character[playerid]][cSkillLevel]);
		SendClientMessage(playerid,COLOR_WHITE,str);
	    return 1;

    }
    else
    {

        SendErrorMsg(playerid,"Please choose your character first.");
        return 1;

    }

}

COMMAND:licenses(playerid,params[])
{

	new idx = 0;
	new tmp[64];
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /licenses [playerid/player name]"); return 1; }
	new other = ReturnUser(tmp);
	if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Player not connected."); return 1; }
	if(GetDistanceBetweenPlayers(playerid,other) > 7.5) { SendClientMessageA(playerid,COLOR_LIGHTRED,"You are not near this player."); return 1; }
	new str[64];
	new ltmp[5];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"|-----Licenses for: %s-----|",name);
	SendClientMessageA(other,COLOR_WHITE,str);
	format(str,sizeof(str),"Date Of Birth: %s",CharacterInfo[playerid][active_character[playerid]][cDob]);
	SendClientMessageA(other,COLOR_WHITE,str);
	if(CharacterInfo[playerid][active_character[playerid]][cCarLic]) { format(ltmp,sizeof(ltmp),"Yes"); } else { format(ltmp,sizeof(ltmp),"No"); }
	format(str,sizeof(str),"Drivers License: %s",ltmp);
	if(CharacterInfo[playerid][active_character[playerid]][cCarLicWarnings] > 0) { new wtmp[64]; format(wtmp,sizeof(wtmp)," Warnings: %d",CharacterInfo[playerid][active_character[playerid]][cCarLicWarnings]); strins(str,wtmp,strlen(str)); }
	SendClientMessageA(other,COLOR_WHITE,str);
	if(CharacterInfo[playerid][active_character[playerid]][cWepLic]) { format(ltmp,sizeof(ltmp),"Yes"); } else { format(ltmp,sizeof(ltmp),"No"); }
	format(str,sizeof(str),"Weapons License: %s",ltmp);
	SendClientMessageA(other,COLOR_WHITE,str);
	if(CharacterInfo[playerid][active_character[playerid]][cFlyLic]) { format(ltmp,sizeof(ltmp),"Yes"); } else { format(ltmp,sizeof(ltmp),"No"); }
	format(str,sizeof(str),"Flying License: %s",ltmp);
	SendClientMessageA(other,COLOR_WHITE,str);
	new oname[MAX_PLAYER_NAME];
	GetCharacterName(other,oname);
	format(str,sizeof(str),"takes out their ID and hands it to %s",oname);
	SendEmote(playerid,str);
	return 1;

}

COMMAND:cook(playerid,params[])
{

    if(in_house[playerid] > -1)
    {

        if(!cooking[playerid])
        {

            cooking[playerid] = 1;
            SendClientMessageA(playerid,COLOR_YELLOW2,"Cooking Started!");
			SendEmote(playerid,"takes out a bowl and begins preparing a meal.");
			SendClientMessageA(playerid,COLOR_YELLOW2,"Type the name of the ingredient you want to add to your meal.");
			SendClientMessageA(playerid,COLOR_YELLOW2,"You can add up to 10 ingredients.");
			SendClientMessageA(playerid,COLOR_YELLOW2,"Ingredients: eggs, bread, meat, cheese, rice, chilli, dough");
			SendClientMessageA(playerid,COLOR_YELLOW2,"Once you have finished adding ingredients type /preparemeal to finish.");
			TogglePlayerControllable(playerid,0);
			return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are already cooking. Use /stopcook first.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a house. Cannot cook here.");
        return 1;

    }

}

COMMAND:preparemeal(playerid,params[])
{

    if(cooking[playerid])
    {

        PrepareMeal(playerid);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not cooking!");
        return 1;

    }

}

COMMAND:stopcook(playerid,params[])
{

    if(cooking[playerid])
	{

	    cooking[playerid] = 0;
		cooking_contents[playerid][0] = 0;
		cooking_contents[playerid][1] = 0;
		cooking_contents[playerid][2] = 0;
		cooking_contents[playerid][3] = 0;
		cooking_contents[playerid][4] = 0;
		cooking_contents[playerid][5] = 0;
		cooking_contents[playerid][6] = 0;
		cooking_contents[playerid][7] = 0;
		cooking_contents[playerid][8] = 0;
		cooking_contents[playerid][9] = 0;
		SendClientMessageA(playerid,COLOR_GREEN,"Cooking cancelled.");
		TogglePlayerControllable(playerid,1);
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not cooking.");
	    return 1;

	}


}

COMMAND:kick(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
		new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /kick [playerid/player name] [reason]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other) || IsPlayerNPC(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(AccountInfo[other][aAdmin] <= AccountInfo[playerid][aAdmin])
		{

			new result[256];
			FetchParamText(result,params,idx);
			if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /kick [playerid/player name] [reason]"); return 1; }
			KickPlayer(other,playerid,result);
			LogAdminAction("Kick",result,playerid,other);
			new str[128];
			format(str,sizeof(str),"You have kicked %s from the server",AccountInfo[other][aName]);
			SendClientMessageA(playerid,COLOR_LIGHTRED,str);
			new oname[MAX_PLAYER_NAME];
			GetCharacterName(other,oname);
			format(str,sizeof(str),"[Admin] %s has kicked %s Reason: %s",AccountInfo[playerid][aName],oname,result);
			SendAdminAction(str);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You cannot kick higher level admins.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:timeban(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
		new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /timeban [playerid/player name] [time(in hours)] [reason]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other) || IsPlayerNPC(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(AccountInfo[other][aAdmin] <= AccountInfo[playerid][aAdmin])
		{

			new tmp2[64];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /timeban [playerid/player name] [time(in hours)] [reason]"); return 1; }
			new t = strval(tmp2);
			if(t < 1 || t > 999999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid time parameter"); return 1; }
			new result[256];
			FetchParamText(result,params,idx);
			if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /timeban [playerid/player name] [time(in hours)] [reason]"); return 1; }
			TimeBanPlayer(other,playerid,result,t);
			LogAdminAction("Time-Ban",result,playerid,other);
			new str[128];
			format(str,sizeof(str),"You have time-banned %s from the server for %d hours",AccountInfo[other][aName],t);
			SendClientMessageA(playerid,COLOR_LIGHTRED,str);
			new name[MAX_PLAYER_NAME];
			new oname[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			GetCharacterName(other,oname);
			format(str,sizeof(str),"[Admin] %s has time-banned %s for %d hour(s) Reason: %s",name,oname,t,result);
			SendAdminAction(str);
			return 1;

    	}
		else
		{

		    SendErrorMsg(playerid,"You cannot ban higher level admins.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:aduty(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        if(aduty[playerid] == 0)
        {

            new Float:X, Float:Y, Float:Z;
            GetPlayerPos(playerid,X,Y,Z);
            aduty[playerid] = 1;
            SetPlayerSkin(playerid,217);
            SendClientMessageA(playerid,COLOR_LIGHTRED,"You are now on Admin Duty.");
            new str[MAX_PLAYER_NAME];
            format(str,sizeof(str),"[Admin]_%s",AccountInfo[playerid][aName]);
            SetPlayerName(playerid,str);
            SetPlayerColor(playerid,COLOR_LIGHTRED);
            CharacterInfo[playerid][active_character[playerid]][cSpawnX] = X;
			CharacterInfo[playerid][active_character[playerid]][cSpawnY] = Y;
			CharacterInfo[playerid][active_character[playerid]][cSpawnZ] = Z;
			CharacterInfo[playerid][active_character[playerid]][cSpawnI] = GetPlayerInterior(playerid);
			CharacterInfo[playerid][active_character[playerid]][cSpawnWorld] = GetPlayerVirtualWorld(playerid);
			SaveStats(playerid);
            return 1;

        }
        else
        {

            aduty[playerid] = 0;
			SendClientMessageA(playerid,COLOR_GREEN,"You are no longer on Admin Duty");
			SetPlayerColor(playerid,COLOR_WHITE);
			SetPlayerSkin(playerid,CharacterInfo[playerid][active_character[playerid]][cSkin]);
			SetPlayerName(playerid,CharacterInfo[playerid][active_character[playerid]][cName]);
			SetPlayerPos(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnX],CharacterInfo[playerid][active_character[playerid]][cSpawnY],CharacterInfo[playerid][active_character[playerid]][cSpawnZ]);
			SetPlayerInterior(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnI]);
			SetPlayerVirtualWorld(playerid,CharacterInfo[playerid][active_character[playerid]][cSpawnWorld]);
			return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:admins(playerid,params[])
{

	new str[128];
	new tmp[4];
    SendClientMessageA(playerid,COLOR_WHITE,"|-----Admins Online------|");
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(AccountInfo[i][aAdmin] >= ADMIN_LVL_ADMIN && !GetPVarInt(i,"adminHidden"))
	        {

	            if(aduty[i]) { format(tmp,sizeof(tmp),"Yes"); } else { format(tmp,sizeof(tmp),"No"); }
	            format(str,sizeof(str),"Admin: %s (%d) Duty: %s",AccountInfo[i][aName],i,tmp);
				SendClientMessageA(playerid,COLOR_WHITE,str);

	        }

	    }

	}
	SendClientMessage(playerid,COLOR_FACTION,"Use /assistme to request help or /report to report a player");
	return 1;

}

COMMAND:jail(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /jail [playerid/player name] [time (mins)] [reason]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other) || IsPlayerNPC(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /jail [playerid/player name] [time (mins)] [reason]"); return 1; }
		new amount = strval(tmp2);
		if(amount < 1 || amount > 999999) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Time cannot be below 1 or above 999999"); return 1; }
		new result[256];
		FetchParamText(result,params,idx);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /jail [playerid/player name] [time (mins)] [reason]"); return 1; }
		if(AccountInfo[playerid][aAdmin] >= AccountInfo[other][aAdmin])
		{

		    new t = (amount * 60);
		    new str[128];
		    format(str,sizeof(str),"You have been admin jailed for %d minutes.",amount);
            AjailPlayer(other,playerid,result,t);
			LogAdminAction("Jail",result,playerid,other);
			format(str,sizeof(str),"You have jailed %s",AccountInfo[other][aName]);
			SendClientMessageA(playerid,COLOR_LIGHTRED,str);
			new oname[MAX_PLAYER_NAME];
			GetCharacterName(other,oname);
			format(str,sizeof(str),"[Admin] %s has jailed %s for %d minutes. Reason: %s",AccountInfo[playerid][aName],oname,amount,result);
			SendAdminAction(str);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You cannot jail admins of a higher level.");
		    return 1;

		}

    }
    else
	{

	    SendErrorMsg(playerid,"You are not an admin.");
	    return 1;

	}


}

COMMAND:up(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(playerid,X,Y,Z);
        SetPlayerPos(playerid,X,Y,(Z + 2.0));
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:down(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(playerid,X,Y,Z);
        SetPlayerPos(playerid,X,Y,(Z - 2.0));
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:togooc(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

        if(ooc_status == 1)
        {

        	ooc_status = 0;
        	SendClientMessageA(playerid,COLOR_LIGHTRED,"OOC Disabled");
        	return 1;

		}
		else
		{

		    ooc_status = 1;
		    SendClientMessageA(playerid,COLOR_LIGHTRED,"OOC Enabled");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:spectate(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /spectate [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other) || AccountInfo[other][aAdmin] > AccountInfo[playerid][aAdmin]) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected or their admin level is too high."); return 1; }
		TogglePlayerSpectating(playerid,1);
		if(IsPlayerInAnyVehicle(other)) { PlayerSpectateVehicle(playerid,GetPlayerVehicleID(other)); spectate_type[playerid] = 2; }
		else { PlayerSpectatePlayer(playerid,other); spectate_type[playerid] = 1; }
		SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(other));
		SetPlayerInterior(playerid,GetPlayerInterior(other));
		SendClientMessageA(playerid,COLOR_YELLOW,"You are now spectating. Use /cancelspectate to stop spectating.");
		spectating[playerid] = other;
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:cancelspectate(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		if(spectating[playerid] > -1)
		{
			SendClientMessageA(playerid,COLOR_YELLOW,"You have cancelled spectating.");
			spectating[playerid] = -1;
			TogglePlayerSpectating(playerid,0);
			return 1;

		}
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:ahouse(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) {
			SendClientMessageA(playerid,COLOR_LIGHTRED,"Usage: /ahouse [house id] [action] [value(if required)]");
			SendClientMessageA(playerid,COLOR_LIGHTRED,"Actions: level, tp, move, interior, price, sell setrent");
			return 1;
		}
        new id = strval(tmp);
        if(id < 0 || id > sizeof(HouseInfo)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid house ID."); return 1; }
        new tmp2[64];
        tmp2 = strtok(params,idx);
        if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Usage: /ahouse [house id] [action] [value(if required)]"); return 1; }
		if(strcmp(tmp2,"level",true) == 0)
		{

			new tmp3[64];
			tmp3 = strtok(params,idx);
			if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /ahouse [house id] level [level]"); return 1; }
			new level = strval(tmp3);
			if(level < 0) { SendClientMessage(playerid,COLOR_LIGHTRED,"Level cannot be below 0"); return 1; }
			HouseInfo[id][hLevel] = level;
			new str[128];
			format(str,sizeof(str),"You have set this house's level to %d",level);
			SendClientMessage(playerid,COLOR_GREEN,str);
			
			new logstr[128];
			format(logstr,sizeof(logstr),"Changed house %d level to %d",id,level);
			logAdminEditAction(playerid,"HOUSE_EDIT",logstr);
			return 1;

		}
        if(strcmp(tmp2,"tp",true) == 0)
        {

			SetPlayerPos(playerid,HouseInfo[id][hSpawnX],HouseInfo[id][hSpawnY],HouseInfo[id][hSpawnZ]);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SendClientMessage(playerid,COLOR_GREEN,"Moved to house.");
			return 1;

        }
		if(strcmp(tmp2,"move",true) == 0)
		{

		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid,X,Y,Z);
			Delete3DTextLabel(HouseInfo[id][hPickup]);
			HouseInfo[id][hSpawnX] = X;
			HouseInfo[id][hSpawnY] = Y;
			HouseInfo[id][hSpawnZ] = Z;
			new str[256];
			if(HouseInfo[id][hOwner] == 0)
			{

			    new addr[256];
			    GetHouseAddress(id,addr);
				format(str,sizeof(str),"%s\nHouse Information\nPrice: $%d\nHouse: %d\n\nThis house is for sale!\nUse /house for a list of available actions",addr,HouseInfo[id][hPrice],HouseInfo[id][hLevel]);

			}
			else
			{

			    new addr[256];
			    GetHouseAddress(id,addr);
			    format(str,sizeof(str),"%s\nHouse Information\nOwner: %s\n\nUse /enter to enter this building",addr,HouseInfo[id][hOwnerName]);

			}
			HouseInfo[id][hPickup] = Create3DTextLabel(str, TEAM_GROVE_COLOR, HouseInfo[id][hSpawnX], HouseInfo[id][hSpawnY], HouseInfo[id][hSpawnZ], 30.0, 0, 0);
			SendClientMessageA(playerid,COLOR_GREEN,"House moved.");
			
			new logstr[128];
			format(logstr,sizeof(logstr),"Moved house %d position",id);
			logAdminEditAction(playerid,"HOUSE_EDIT",logstr);
			return 1;

		}
		else if(strcmp(tmp2,"interior",true) == 0)
		{

			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			HouseInfo[id][hInteriorX] = X;
			HouseInfo[id][hInteriorY] = Y;
			HouseInfo[id][hInteriorZ] = Z;
			HouseInfo[id][hInterior] = GetPlayerInterior(playerid);
			SendClientMessageA(playerid,COLOR_GREEN,"House interior moved.");
			
			new logstr[128];
			format(logstr,sizeof(logstr),"Changed house %d interior",id);
			logAdminEditAction(playerid,"HOUSE_EDIT",logstr);
			return 1;

		}
		else if(strcmp(tmp2,"price",true) == 0)
		{

		    new tmp3[64];
		    tmp3 = strtok(params,idx);
		    if(!strlen(tmp3)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /ahouse [house id]  price [amount]"); return 1; }
			new amount = strval(tmp3);
			if(amount < 1 || amount > 9999999) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Price cannot be below 1 or above 9999999"); return 1; }
			HouseInfo[id][hPrice] = amount;
			SendClientMessageA(playerid,COLOR_GREEN,"House price set.");
			RefreshHouseTag(id);
			
			new logstr[128];
			format(logstr,sizeof(logstr),"Changed house %d price to $%d",id,amount);
			logAdminEditAction(playerid,"HOUSE_EDIT",logstr);
			return 1;

		}
		else if(strcmp(tmp2,"sell",true) == 0)
		{

			HouseInfo[id][hOwner] = 0;
			SendClientMessageA(playerid,COLOR_GREEN,"House sold.");
			RefreshHouseTag(id);
			
			new logstr[128];
			format(logstr,sizeof(logstr),"Sold house %d",id);
			logAdminEditAction(playerid,"HOUSE_EDIT",logstr);
			return 1;

		}
        else if(strcmp(tmp2,"setrent",true) == 0)
		{

		    new tmp3[64];
		    tmp3 = strtok(params,idx);
		    if(!strlen(tmp3)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /ahouse [house id] setrent [amount]"); return 1; }
			new amount = strval(tmp3);
			if(amount < 1 || amount > 9999999) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Rent price cannot be below 1 or above 9999999"); return 1; }
			HouseInfo[id][hRentPrice] = amount;
			SendClientMessageA(playerid,COLOR_GREEN,"House rent price set.");
			
			new logstr[128];
			format(logstr,sizeof(logstr),"Set rent of house %d to $%d",id,amount);
			logAdminEditAction(playerid,"HOUSE_EDIT",logstr);
			return 1;

		}
		SendErrorMsg(playerid,"Action not found.");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a lead aministrator.");
        return 1;

    }

}

COMMAND:houseid(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

	  	new house = GetClosestHouse(playerid);
	    if(house > -1)
	    {

			new str[64];
			format(str,sizeof(str),"This house's ID is: %d",house);
			SendClientMessage(playerid,COLOR_GREEN,str);
			return 1;

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You are not near a house.");
	        return 1;

	    }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:createhouse(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(playerid,X,Y,Z);
        CreateHouse(X,Y,Z);
        SendClientMessage(playerid,COLOR_GREEN,"House Created.");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:ban(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
		new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /ban [playerid/player name] [reason]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other) || IsPlayerNPC(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(AccountInfo[other][aAdmin] <= AccountInfo[playerid][aAdmin])
		{

			new result[256];
			FetchParamText(result,params,idx);
			if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /ban [playerid/player name] [reason]"); return 1; }
			BanPlayer(other,playerid,result);
			LogAdminAction("Ban",result,playerid,other);
			new str[128];
			format(str,sizeof(str),"You have banned %s from the server",AccountInfo[other][aName]);
			SendClientMessageA(playerid,COLOR_LIGHTRED,str);
			new oname[MAX_PLAYER_NAME];
			GetCharacterName(other,oname);
			format(str,sizeof(str),"[Admin] %s has banned %s Reason: %s",AccountInfo[playerid][aName],oname,result);
			SendAdminAction(str);
			return 1;

    	}
		else
		{

		    SendErrorMsg(playerid,"You cannot ban higher level admins.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:abiz(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) {
			SendClientMessageA(playerid,COLOR_LIGHTRED,"Usage: /abiz [biz id] [action] [value(if required)]");
			SendClientMessage(playerid,COLOR_LIGHTRED,"Actions: level, info, entranceprice, tp, lock, price, vspawn, name, move");
			SendClientMessage(playerid,COLOR_LIGHTRED,"Actions: interior, sell, type");
			return 1;
		}
        new id = strval(tmp);
        if(id < 0 || id > sizeof(HouseInfo)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid house ID."); return 1; }
        new tmp2[64];
        tmp2 = strtok(params,idx);
        if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Usage: /abiz [biz id] [action] [value(if required)]"); return 1; }
        if(strcmp(tmp2,"level",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            if(!strlen(tmp3)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /abiz [bizid] level [level]"); return 1; }
            new amount = strval(tmp3);
            if(amount < 0) { SendClientMessageA(playerid,COLOR_LIGHTRED,"level cannot be below 0"); return 1; }
            BizInfo[id][bLevel] = amount;
            SendClientMessageA(playerid,COLOR_GREEN,"Business Level Set.");
            
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed business %d level to %d",id,amount);
			logAdminEditAction(playerid,"BIZ_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"info",true) == 0)
        {

            SendClientMessage(playerid,COLOR_WHITE,"Business Info");
			new str[128];
			format(str,sizeof(str),"Owner:[%d] OwnerName:[%s] Price:[$%d] Type:[%d] Bank:[$%d] EntranceFee:[$%d] ID:[%d]",
			BizInfo[id][bOwner],
			BizInfo[id][bOwnerName],
			BizInfo[id][bPrice],
			BizInfo[id][bType],
			BizInfo[id][bBank],
			BizInfo[id][bEntranceFee],
			BizInfo[id][bID]);
			SendClientMessage(playerid,COLOR_WHITE,str);
			return 1;

        }
        if(strcmp(tmp2,"entranceprice",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            if(!strlen(tmp3)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /abiz [bizid] entranceprice [price]"); return 1; }
            new amount = strval(tmp3);
            if(amount < 1 || amount > 9999999) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Price cannot be below $1 or above 9999999"); return 1; }
            BizInfo[id][bEntranceFee] = amount;
            SendClientMessageA(playerid,COLOR_GREEN,"Business Entrance Price Set.");
            
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed business %d entrance price to %d",id,amount);
			logAdminEditAction(playerid,"BIZ_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"tp",true) == 0)
        {

			SetPlayerPos(playerid,BizInfo[id][bSpawnX],BizInfo[id][bSpawnY],BizInfo[id][bSpawnZ]);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SendClientMessage(playerid,COLOR_GREEN,"You have been moved to the business.");
			return 1;

        }
        if(strcmp(tmp2,"lock",true) == 0)
        {

            if(BizInfo[id][bOpen])
            {

                BizInfo[id][bOpen] = 0;
                SendClientMessageA(playerid,COLOR_GREEN,"Business Locked.");
                return 1;

            }
            else
            {

            	BizInfo[id][bOpen] = 1;
                SendClientMessageA(playerid,COLOR_GREEN,"Business Unlocked.");
                return 1;

            }

        }
        if(strcmp(tmp2,"price",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            if(!strlen(tmp3)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /abiz [bizid] price [price]"); return 1; }
            new amount = strval(tmp3);
            if(amount < 1 || amount > 9999999) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Price cannot be below $1 or above 9999999"); return 1; }
            BizInfo[id][bPrice] = amount;
            SendClientMessageA(playerid,COLOR_GREEN,"Business Price Set.");
            
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed business %d price to %d",id,amount);
			logAdminEditAction(playerid,"BIZ_EDIT",logstr);
            return 1;

        }
		if(strcmp(tmp2,"vspawn",true) == 0)
		{

		    new Float:X, Float:Y, Float:Z, Float:R;
		    GetPlayerPos(playerid,X,Y,Z);
		    GetPlayerFacingAngle(playerid,R);
			BizInfo[id][bVX] = X;
			BizInfo[id][bVY] = Y;
			BizInfo[id][bVZ] = Z;
			BizInfo[id][bVR] = R;
			SendClientMessageA(playerid,COLOR_GREEN,"Vehicle Spawn Set.");
			
		 	new logstr[128];
			format(logstr,sizeof(logstr),"Changed business %d vehicle spawn",id);
			logAdminEditAction(playerid,"BIZ_EDIT",logstr);
			return 1;

		}
        if(strcmp(tmp2,"name",true) == 0)
        {

			new result[256];
			FetchParamText(result,params,idx);
            if(strfind(result,"~") > -1 || strfind(result,"'") > -1) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid Name, names cannot contain ~ or '"); return 0; }
            if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /abiz [biz id] name [business name]"); return 1; }
            mysql_real_escape_string(result,BizInfo[id][bName]);
            SendClientMessageA(playerid,COLOR_GREEN,"Business name set.");
            
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed business %d name to %s",id,BizInfo[id][bName]);
			logAdminEditAction(playerid,"BIZ_EDIT",logstr);
            return 1;

        }
		if(strcmp(tmp2,"move",true) == 0)
		{

		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid,X,Y,Z);
		    BizInfo[id][bSpawnX] = X;
		    BizInfo[id][bSpawnY] = Y;
		    BizInfo[id][bSpawnZ] = Z;
		    Delete3DTextLabel(BizInfo[id][bPickup]);
		    new str[256];
			if(BizInfo[id][bOwner] == 0)
			{

			    format(str,sizeof(str),"Business Information\n%s\n\nPrice: $%d\nEntrance Fee: $%d\nLevel: %d\nThis business is for sale!\nUse /biz for a list of available actions",BizInfo[id][bName],BizInfo[id][bPrice],BizInfo[id][bEntranceFee],BizInfo[id][bLevel]);

			}
			else
			{

				format(str,sizeof(str),"Business Information\n%s\n\nEntrance Fee: $%d\nUse /enter to enter this building",BizInfo[id][bName],BizInfo[id][bOwnerName],BizInfo[id][bEntranceFee]);

			}
			BizInfo[id][bPickup] = Create3DTextLabel(str, COLOR_LIGHTBLUE, BizInfo[id][bSpawnX], BizInfo[id][bSpawnY], BizInfo[id][bSpawnZ], 30.0, 0, 0);
		    SendClientMessageA(playerid,COLOR_GREEN,"Business moved.");
		    
		  	new logstr[128];
			format(logstr,sizeof(logstr),"Changed business %d position",id);
			logAdminEditAction(playerid,"BIZ_EDIT",logstr);
		    return 1;

		}
		else if(strcmp(tmp2,"interior",true) == 0)
		{

		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid,X,Y,Z);
			BizInfo[id][bInteriorX] = X;
			BizInfo[id][bInteriorY] = Y;
			BizInfo[id][bInteriorZ] = Z;
			BizInfo[id][bInterior] = GetPlayerInterior(playerid);
			SendClientMessageA(playerid,COLOR_GREEN,"Interior moved.");
			
			new logstr[128];
			format(logstr,sizeof(logstr),"Changed business %d interior",id);
			logAdminEditAction(playerid,"BIZ_EDIT",logstr);
			return 1;

		}
		else if(strcmp(tmp2,"sell",true) == 0)
		{

		    BizInfo[id][bOwner] = 0;
		    SendClientMessageA(playerid,COLOR_LIGHTRED,"Business Sold.");
		    
		  	new logstr[128];
			format(logstr,sizeof(logstr),"Sold business %d",id);
			logAdminEditAction(playerid,"BIZ_EDIT",logstr);
		    return 1;

		}
		else if(strcmp(tmp2,"type",true) == 0)
		{

			new tmp3[64];
			tmp3 = strtok(params,idx);
			if(!strlen(tmp3)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /abiz [biz id] type [type ID]"); return 1; }
			new type = strval(tmp3);
			if(type < 1) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid Type ID."); return 1; }
			BizInfo[id][bType] = type;
			SendClientMessageA(playerid,COLOR_GREEN,"Business Type Set.");
			
			new logstr[128];
			format(logstr,sizeof(logstr),"Changed business %d type to %d",id,type);
			logAdminEditAction(playerid,"BIZ_EDIT",logstr);
			return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not a lead aministrator.");
	    return 1;

	}
	return 1;

}

COMMAND:savestuff(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		new str[128];
		format(str,sizeof(str),"[SERVER] Save Sequence Started By: %s",AccountInfo[playerid][aName]);
		SendAdminBroadcast(str);
		new started = beginSaveSequence();
		if(!started)
		{

		    SendErrorMsg(playerid,"A save is already in progress.");

		}
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:goto(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /goto [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected"); return 1; }
		if(AccountInfo[other][aAdmin] <= AccountInfo[playerid][aAdmin])
		{

			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(other,X,Y,Z);
			if(!IsPlayerInAnyVehicle(playerid)) { SetPlayerPos(playerid,X,(Y + 3.0),(Z + 3.0)); } else { SetVehiclePosEx(GetPlayerVehicleID(playerid),X,(Y + 3.0),(Z + 3.0)); }
			new i = GetPlayerInterior(other);
			new v = GetPlayerVirtualWorld(other);
			SetPlayerInterior(playerid,i);
			SetPlayerVirtualWorld(playerid,v);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You cannot teleport to higher level admins.");
		    return 1;

		}

    }
    else if(AccountInfo[playerid][aAssistant])
    {

		new idx = 0;
  		new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /goto [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected"); return 1; }
		if(CharacterInfo[other][active_character[other]][cLevel] <= 4 && AccountInfo[other][aAdmin] == 0)
		{

			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(other,X,Y,Z);
			SetPlayerPos(playerid,X,(Y + 3.0),(Z + 3.0));
			new i = GetPlayerInterior(other);
			new v = GetPlayerVirtualWorld(other);
			SetPlayerInterior(playerid,i);
			SetPlayerVirtualWorld(playerid,v);
			SendTPAlert(playerid,other);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You cannot teleport players above level 4 or admins.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:gethere(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /gethere [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other) || IsPlayerNPC(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected"); return 1; }
		if(AccountInfo[other][aAdmin] <= AccountInfo[playerid][aAdmin])
		{


			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			if(!IsPlayerInAnyVehicle(other)) { SetPlayerPos(other,X,(Y + 3.0),(Z + 3.0)); } else { SetVehiclePosEx(GetPlayerVehicleID(other),X,(Y + 3.0),(Z + 3.0)); }
			SetPlayerVirtualWorld(other,GetPlayerVirtualWorld(playerid));
			SetPlayerInterior(other,GetPlayerInterior(playerid));
			return 1;


		}
		else
		{

		    SendErrorMsg(playerid,"You cannot teleport higher level admins.");
		    return 1;

		}

    }
	else if(AccountInfo[playerid][aAssistant])
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /tphere [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected"); return 1; }
		if(CharacterInfo[other][active_character[other]][cLevel] <= 4 && AccountInfo[other][aAdmin] == 0)
		{

			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			SetPlayerPos(other,X,(Y + 3.0),(Z + 3.0));
			SetPlayerVirtualWorld(other,GetPlayerVirtualWorld(playerid));
			SetPlayerInterior(other,GetPlayerInterior(playerid));
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You cannot teleport to players above level 4 or admins.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:interiorid(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
	{

		new inter = GetClosestInterior(playerid);
		new str[128];
		format(str,sizeof(str),"Interiorid: %d",inter);
		SendClientMessage(playerid,COLOR_GREEN,str);
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
	    return 1;

	}

}

COMMAND:ainterior(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Usage: /aInterior [iouse id] [action] [value(if required)]"); return 1; }
        new id = strval(tmp);
        if(id < 0 || id > sizeof(InteriorInfo)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid Interior ID."); return 1; }
        new tmp2[64];
        tmp2 = strtok(params,idx);
        if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Usage: /aInterior [iouse id] [action] [value(if required)]"); return 1; }
		if(strcmp(tmp2,"move",true) == 0)
		{

		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid,X,Y,Z);
			if(InteriorInfo[id][iPickup] > 0) { DestroyPickup(InteriorInfo[id][iPickup]); }
			InteriorInfo[id][iPickup] = CreatePickup(1239,2,X,Y,Z);
			InteriorInfo[id][iSpawnX] = X;
			InteriorInfo[id][iSpawnY] = Y;
			InteriorInfo[id][iSpawnZ] = Z;
			SendClientMessageA(playerid,COLOR_GREEN,"Interior moved.");
			return 1;

		}
		else if(strcmp(tmp2,"interior",true) == 0)
		{

			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			InteriorInfo[id][iInteriorX] = X;
			InteriorInfo[id][iInteriorY] = Y;
			InteriorInfo[id][iInteriorZ] = Z;
			InteriorInfo[id][iInterior] = GetPlayerInterior(playerid);
			SendClientMessageA(playerid,COLOR_GREEN,"Interior interior moved.");
			return 1;

		}
		else if(strcmp(tmp2,"faction",true) == 0)
		{

			new tmp3[32];
			tmp3 = strtok(params,idx);
			InteriorInfo[id][iFaction] = strval(tmp3);
			SendClientMessageA(playerid,COLOR_GREEN,"Faction set.");
			return 1;

		}
		else if(strcmp(tmp2,"locked",true) == 0)
		{

			new tmp3[32];
			tmp3 = strtok(params,idx);
			InteriorInfo[id][iLock] = strval(tmp3);
			SendClientMessageA(playerid,COLOR_GREEN,"Variable set.");
			return 1;

		}
		SendErrorMsg(playerid,"Action not found.");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a lead aministrator.");
        return 1;

    }

}

COMMAND:sethp(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /sethp [playerid/player name] [hp]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /sethp [playerid/player name] [hp]"); return 1; }
		new Float:hp;
		hp = floatstr(tmp2);
		SetPlayerHealth(other,hp);
		SendClientMessageA(playerid,COLOR_GREEN,"Players health set.");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:slap(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /slap [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(AccountInfo[other][aAdmin] > AccountInfo[playerid][aAdmin]) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot slap higher level admins."); return 1; }
        if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(other,X,Y,Z);
        SetPlayerPos(other,X,Y,(Z + 3.0));
        SendClientMessageA(other,COLOR_LIGHTRED,"You have been slapped.");
        PlayerPlaySound(other,1190,0.0,0.0,0.0);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:setadmin(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /setadmin [playerid/player name] [level]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /setadmin [playerid/player name] [level]"); return 1; }
		new lvl = strval(tmp2);
		if(lvl < 0 || lvl > 4) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid level."); return 1; }
		new str[128];
		AccountInfo[other][aAdmin] = lvl;
		format(str,sizeof(str),"Administrator %s has set your admin level to %d",AccountInfo[playerid][aName],lvl);
		SendClientMessageA(other,COLOR_YELLOW,str);
		format(str,sizeof(str),"You have set %s's administrator level to %d",AccountInfo[other][aName],lvl);
		SendClientMessageA(playerid,COLOR_YELLOW,str);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a lead admin.");
        return 1;

    }

}

COMMAND:togspeedo(playerid,params[])
{

    if(speedo_active[playerid]) { TextDrawHideForPlayer(playerid,speedo_txt[playerid]); speedo_active[playerid] = false; SendClientMessageA(playerid,COLOR_GREEN,"Speedo hidden."); return 1; }
    else if(!speedo_active[playerid]) { TextDrawShowForPlayer(playerid,speedo_txt[playerid]); speedo_active[playerid] = true; SendClientMessageA(playerid,COLOR_GREEN,"Speedo shown."); return 1; }
    return 1;

}

COMMAND:report(playerid,params[])
{

	new result[256];
	FetchParamText(result,params,0);
	if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /report [report text]"); return 1; }
	new str[256];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"[Admin Report] %s: %s",name,result);
	SendAdminBroadcast(str);
	SendClientMessageA(playerid,COLOR_YELLOW,"Your report has been submitted.");
	return 1;

}

COMMAND:lockpick(playerid,params[])
{

	if(!IsInAuctionHouse(playerid))
	{

	    if(toolkit[playerid])
	    {

	        if(unlock_cooldown[playerid] == 0)
	        {

	            new house = GetClosestHouse(playerid);
		        new veh = GetClosestVehicle(playerid);
		        new slot = (veh > -1) ? GetVehicleSlot(veh) : -1;
		        if(slot > -1)
		        {

		            if(VehicleInfo[slot][vLocked])
					{

					    new unlock_chance = 75;
						if(VehicleInfo[slot][vLock] == 0) { unlock_chance = 80; }
						if(VehicleInfo[slot][vLock] == 1) { unlock_chance = 85; }
						if(VehicleInfo[slot][vLock] == 2) { unlock_chance = 90; }
						if(VehicleInfo[slot][vLock] == 3) { unlock_chance = 92; }
						if(VehicleInfo[slot][vLock] == 4) { unlock_chance = 95; }
						if(duty[playerid] && IsLaw(playerid)) { unlock_chance = 50; }
					    new chance = random(100);
					    if(chance > unlock_chance)
					    {

					        UnlockVehicle(veh);
					        SendEmote(playerid,"lockpicks a nearby vehicle.");
							return 1;

						}
						else
						{
							new Float:X, Float:Y, Float:Z;
					        GetPlayerPos(playerid,X,Y,Z);
					        new str[256];
					    	switch(VehicleInfo[slot][vLock])
					    	{

					    	    case 0:
					    	    {

									SetPlayerPos(playerid,X,Y,Z);
									SendEmote(playerid,"attempts to unlock a nearby vehicle. But Fails.");

					    	    }
					    	    case 1:
					    	    {

					    	        SetPlayerPos(playerid,X,Y,Z);
									SendServerEmote(str,X,Y,Z,30.0,0);
									StartAlarm(veh);
									SendEmote(playerid,"attempts to unlock a nearby vehicle. But Fails.");

					    	    }
					    	    case 2:
					    	    {

					    	    	SetPlayerPos(playerid,X,Y,Z);
									SendServerEmote(str,X,Y,Z,60.0,0);
									StartAlarm(veh);
									SendEmote(playerid,"attempts to unlock a nearby vehicle. But Fails.");

					    	    }
					    	    case 3:
					    	    {

					    	    	SetPlayerPos(playerid,X,Y,Z);
					    	        SendEmote(playerid,"attempts to unlock a nearby vehicle. But gets tazed by the vehicle lock.");
									SetPlayerDrunkLevel(playerid,4999);
									GameTextForPlayer(playerid,"~r~TAZED!!!!",5000,5);
									StartAlarm(veh);
									new zone[128];
							    	new cstr[128];
						            GetZone(X, Y, zone, sizeof(zone));
							        format(cstr,sizeof(cstr),"[Car Alarm] %s",zone);
							        SendCopMsg(cstr);

					    	    }
					    	    case 4:
					    	    {

					    	    	SetPlayerPos(playerid,X,Y,Z);
					    	        SendEmote(playerid,"attempts to unlock a nearby vehicle. But gets tazed by the vehicle lock.");
									SetPlayerDrunkLevel(playerid,4999);
									GameTextForPlayer(playerid,"~r~TAZED!!!!",5000,5);
									StartAlarm(veh);
									new other = IsCharacterOnline(VehicleInfo[slot][vOwner]);
									new str2[128]; new vname[64];
									GetVehicleNameByModel(GetVehicleModel(veh),vname);
									format(str2,sizeof(str2),"[Car Alarm] Someone has just attempted to break into your %s",vname);
									SendClientMessage(other,COLOR_YELLOW,str2);
									PlayerPlaySound(other,1149,0.0,0.0,0.0);
									new zone[128];
							    	new cstr[128];
						            GetZone(X, Y, zone, sizeof(zone));
							        format(cstr,sizeof(cstr),"[Car Alarm] %s",zone);
							        SendCopMsg(cstr);

					    	    }

					    	}
					    	unlock_cooldown[playerid] = 31;
					    	return 1;
						}
					}
					else
					{

					    SendErrorMsg(playerid,"This vehicle is not locked.");
					    return 1;

					}

		        }
				else if(house > -1)
				{

					if(HouseInfo[house][hLocked])
					{

						new chance = GetHouseLockpickChance(house);
						new attempt = random(100);
						if(attempt > chance)
						{

						    HouseInfo[house][hLocked] = 0;
						    SendEmote(playerid,"uses some tools to break into the nearby house.");
						    return 1;

						}
						else
						{

						    SendEmote(playerid,"tries to unlock the door to the nearby house, but fails.");
						    SendHouseAlarm(house);
						    unlock_cooldown[playerid] = 31;
						    return 1;

						}

					}
					else
					{

					    SendErrorMsg(playerid,"This house is not locked.");
					    return 1;

					}

			 	}
			 	else
			 	{

			 	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a house / vehicle.");
			 	    return 1;

			 	}

			}
			else
			{

			    SendErrorMsg(playerid,"Wait 30 seconds between lockpick attempts.");
			    return 1;

			}

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You do not have a toolkit.");
	        return 1;

	    }

	}
	else
	{

	    SendErrorMsg(playerid,"You cannot do that here.");
	    return 1;

	}

}

COMMAND:rentcar(playerid,params[])
{


    if(InRentCar(playerid))
    {

        if(renting_car[playerid] != GetPlayerVehicleID(playerid))
        {

			if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 300)
			{

			    renting_car[playerid] = GetPlayerVehicleID(playerid);
			    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 300;
				SendClientMessageA(playerid,COLOR_GREEN,"You are now renting this vehicle. You can now use /engine.");
				return 1;

			}
			else
			{

			    SendErrorMsg(playerid,"You do not have $300");
			    return 1;

			}

        }
        else
        {

            SendErrorMsg(playerid,"You are already renting this vehicle.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a rentable vehicle.");
        return 1;

    }

}

COMMAND:acceptcharge(playerid,params[])
{

	new idx = 0;
	new tmp[64];
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /acceptcharge [vehicle slot (/v list)]"); return 1; }
	new slot = strval(tmp);
	if(slot < 1) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Invalid vehicle slot."); return 1; }
	AcceptVehicleCharge(playerid,slot);
	return 1;

}

COMMAND:help(playerid,params[])
{

    if(character_chosen[playerid])
    {

		SendClientMessage(playerid,COLOR_GREEN,"|-----What do you need help with?-----|");
		SendClientMessage(playerid,COLOR_WHITE,"Phone: /call /hangup /pickup | Chat: /(o)ooc /b /(s)hout /(w)hisper /low /toggle | Vehicles: /(v)ehicles /(vinv)entory /vtake /vstore /lockpick /togspeedo");
		SendClientMessage(playerid,COLOR_WHITE,"Inventory: /(inv)entory /dropitem | Radio: /r /radiocontrol | Vehicle Radio: /radio /radiostations");
		SendClientMessage(playerid,COLOR_WHITE,"Events: /nascar /derby | Animations: /animlist | Money: /pay /cheque | Bank: /deposit /withdraw /savings /depositsavings");
		SendClientMessage(playerid,COLOR_WHITE,"NPCs: /talk /takeerrand /cancelerrand | Advertising: /ad /pad | Notes: /note | Death: /giveup | Assistance: /assistme /report");
		SendClientMessage(playerid,COLOR_WHITE,"Language: /language /buylanguage");
		SendClientMessage(playerid,COLOR_LIGHTBLUE,"For help with your job please use /jobhelp - If you need any further assistance please use /assistme");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"Please choose your character first.");
        return 1;

	}

}

COMMAND:jobhelp(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cJob])
    {

	    switch(CharacterInfo[playerid][active_character[playerid]][cJob])
		{

			case JOB_FARMER:
			{

				SendClientMessage(playerid,COLOR_GREEN,"|-----Farmer-----|");
		        SendClientMessage(playerid,COLOR_WHITE,"You are a farmer, your job is to harvest crops from the farm!");
				SendClientMessage(playerid,COLOR_WHITE,"Commands: /startfarming /cancelfarming");

			}
			case JOB_PIZZA:
			{

			    SendClientMessage(playerid,COLOR_GREEN,"|-----Pizza Boy-----|");
		        SendClientMessage(playerid,COLOR_WHITE,"You are a pizza boy, your job is to sell pizzas to the obese people of Los Santos!");
				SendClientMessage(playerid,COLOR_WHITE,"Commands: /startpizza /cancelpizza");

			}
		    case JOB_DEALER:
		    {

		        SendClientMessage(playerid,COLOR_GREEN,"|-----Weapons Dealer-----|");
		        SendClientMessage(playerid,COLOR_WHITE,"You are a weapons dealer, your job is to sell weapons to the citizens of Los Santos!");
				SendClientMessage(playerid,COLOR_WHITE,"Commands: /sellweapon");

		    }
		    case JOB_SMUGGLE:
		    {

			  	SendClientMessage(playerid,COLOR_GREEN,"|-----Weapons Smuggler-----|");
		        SendClientMessage(playerid,COLOR_WHITE,"You are a weapons smuggler, your job is to sell weapon materials to the weapons dealers of Los Santos!");
				SendClientMessage(playerid,COLOR_WHITE,"Commands: /smuggle /sellmats");

		    }
		    case JOB_SWEEPER:
		    {

		    	SendClientMessage(playerid,COLOR_GREEN,"|-----Street Sweeper-----|");
		        SendClientMessage(playerid,COLOR_WHITE,"You are a Street Sweeper, your job is to drive the street sweepers around Los Santos cleaning up used condoms and empty cartons of coolade.");
				SendClientMessage(playerid,COLOR_WHITE,"Commands: /startsweep /cancelsweep");

		    }
		    case JOB_DELIVER:
		    {

		     	SendClientMessage(playerid,COLOR_GREEN,"|-----Delivery Man-----|");
		        SendClientMessage(playerid,COLOR_WHITE,"You are a Delivery Man, your job is to deliver coolade and condoms to the citizens of Los Santos.");
				SendClientMessage(playerid,COLOR_WHITE,"Commands: /startdelivery /stopdelivery");

		    }
		    case JOB_MECHANIC:
		    {

		        SendClientMessage(playerid,COLOR_GREEN,"|-----Mechanic-----|");
		        SendClientMessage(playerid,COLOR_WHITE,"You are a Mechanic, your job is to repair and respray citizens vehicles.");
				SendClientMessage(playerid,COLOR_WHITE,"Commands: /repair /respray");

		    }
		    case JOB_GARBAGE:
		    {

		        SendClientMessage(playerid,COLOR_GREEN,"|-----Garbage Man-----|");
		        SendClientMessage(playerid,COLOR_WHITE,"You are a Garbage Man, your job is to pick up the dirty nappies and filthy condom containers from the citizens houses.");
				SendClientMessage(playerid,COLOR_WHITE,"Commands: /startrun /cancelrun");

		    }
		    case JOB_TRUCKER:
		    {

		        SendClientMessage(playerid,COLOR_GREEN,"|-----Trucker-----|");
		        SendClientMessage(playerid,COLOR_WHITE,"You are a Trucker, your job is to deliver excentric items to the people of San Andreas.");
				SendClientMessage(playerid,COLOR_WHITE,"Commands: /starttrucking /canceltruck");

		    }

		}

    }
    else
    {

		SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have a job.");
		return 1;

    }
	return 1;

}

COMMAND:take(playerid,params[])
{

	new idx = 0;
    if(IsLaw(playerid) && duty[playerid])
	{

	    new tmp[64];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /take [playerid/player name] [weapons/driverslicense/weaponlicense/flyinglicense]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnectedEx(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
	    if(GetDistanceBetweenPlayers(playerid,other) <= 7.5)
	    {

	        if(!IsPlayerInAnyVehicle(other))
	        {

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    if(strcmp(tmp2,"driverslicense",true) == 0)
			    {

			        if(CharacterInfo[other][active_character[other]][cCarLic])
			        {
						CharacterInfo[other][active_character[other]][cCarLic] = 0;
						CharacterInfo[other][active_character[other]][cCarLicWarnings] = 0;
						new str[128];
						new name[MAX_PLAYER_NAME];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes %s's drivers license.",name);
						SendEmote(playerid,str);
						return 1;
					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"This person does not have a drivers license.");
					    return 1;

					}

			    }
			    else if(strcmp(tmp2,"weaponlicense",true) == 0)
			    {

					if(CharacterInfo[other][active_character[other]][cWepLic])
					{
						CharacterInfo[other][active_character[other]][cWepLic] = 0;
						new str[128];
						new name[MAX_PLAYER_NAME];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes %s's weapons license.",name);
						SendEmote(playerid,str);
						return 1;
					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"This person does not have a weapons license.");
					    return 1;

					}

			    }
			    else if(strcmp(tmp2,"flyinglicense",true) == 0)
			    {

					if(CharacterInfo[other][active_character[other]][cFlyLic])
					{
						CharacterInfo[other][active_character[other]][cFlyLic] = 0;
						new str[128];
						new name[MAX_PLAYER_NAME];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes %s's flying license.",name);
						SendEmote(playerid,str);
						return 1;
					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"This person does not have a flying license.");
					    return 1;

					}

			    }
			    else if(strcmp(tmp2,"weapons",true) == 0)
			    {

					ResetPlayerWeaponsEx(other);
					new str[128];
					new name[MAX_PLAYER_NAME];
					GetCharacterName(other,name);
					format(str,sizeof(str),"takes %s's weapons.",name);
					SendEmote(playerid,str);
					return 1;

			    }

	        }
	        else
	        {

	            SendErrorMsg(playerid,"Get them out of the vehicle first.");
	            return 1;

	        }

		}
		else
		{

		    SendErrorMsg(playerid,"You are not near this player.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not a cop or are not on duty.");
	    return 1;

	}
	return 1;

}

COMMAND:blockpm(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] > 0)
    {

        if(block_pm[playerid] == 0)
        {

	        block_pm[playerid] = 1;
	        SendClientMessageA(playerid,COLOR_GREEN,"PMs Blocked.");
	        return 1;

		}
		else
		{

		    block_pm[playerid] = 0;
		    SendClientMessageA(playerid,COLOR_GREEN,"PMs Unblocked.");
		    return 1;

		}


    }
    else
    {

        SendErrorMsg(playerid,"You are not anadmin.");
        return 1;

    }

}

COMMAND:a(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= 1)
    {

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /a [admin chat]"); return 1; }
		new str[256];
		format(str,sizeof(str),"[Admin Chat] %s: %s",AccountInfo[playerid][aName],result);
		SendAdminBroadcast(str);
		return 1;
    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

	}


}

COMMAND:ao(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= 1)
    {

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"USAGE: /(ao)oc [OOC Chat]"); return 1; }
		new str[256];
		format(str,sizeof(str),"[Admin OOC] %s (%d): %s",AccountInfo[playerid][aName],playerid,result);
		new col = COLOR_LIGHTRED;
		for(new i = 0; i < MAX_PLAYERS; i ++)
		{

		    if(IsPlayerConnectedEx(i))
		    {

				SendClientMessageA(i,col,str);

		    }

		}
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:ad(playerid,params[])
{

	return cmd_advertisment(playerid,params);

}

COMMAND:advertisment(playerid,params[])
{

	if(InAdShop(playerid))
	{

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(ad)vertisment [ad text]"); return 1; }
		if(strlen(result) > 128) { SendClientMessage(playerid,COLOR_LIGHTRED,"Advertisment length cannot be above 128 characters."); return 1; }
		new price = (7 * strlen(result));
		if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
		{

			if(ad_cooldown > 0) { SendClientMessage(playerid,COLOR_LIGHTRED,"Advertisments can only be made once every 90 seconds. Please wait."); return 1; }
			if(!IsIp(result))
			{

			    CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
			    BizInfo[in_biz[playerid]][bBank] += price;
			    SendAd(playerid,result);
			    new str[128];
			    SendClientMessage(playerid,COLOR_GREEN,"|-----[Advertisment Bill]-----|");
			    format(str,sizeof(str),"Number Of Characters: %d",strlen(result));
			    SendClientMessage(playerid,COLOR_GREEN,str);
			    SendClientMessage(playerid,COLOR_GREEN,"Rate: $7 per character");
				format(str,sizeof(str),"Your Total: $%d",price);
				SendClientMessage(playerid,COLOR_GREEN,str);
			    return 1;

			}
			else
			{

			    SendErrorMsg(playerid,"Invalid Advertisment Text. IP Address Found.");
			    return 1;

			}


		}
		else
		{

		    SendErrorMsg(playerid,"You do not have enough money to purchase this advertisment.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in an advertisment business.");
	    return 1;

	}

}

COMMAND:pad(playerid,params[])
{

	return cmd_padvertisment(playerid,params);

}

COMMAND:padvertisment(playerid,params[])
{

	if(InAdShop(playerid))
	{

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(pad)vertisment [ad text]"); return 1; }
		if(strlen(result) > 128) { SendClientMessage(playerid,COLOR_LIGHTRED,"Advertisment length cannot be above 128 characters."); return 1; }
		new price = (10 * strlen(result));
		if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
		{

			if(ad_cooldown > 0) { SendClientMessage(playerid,COLOR_LIGHTRED,"Advertisments can only be made once every 90 seconds. Please wait."); return 1; }
			if(!IsIp(result))
			{

			    CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
			    BizInfo[in_biz[playerid]][bBank] += price;
			    SendPrivateAd(playerid,result);
			    new str[128];
			    SendClientMessage(playerid,COLOR_GREEN,"|-----[Private Advertisment Bill]-----|");
			    format(str,sizeof(str),"Number Of Characters: %d",strlen(result));
			    SendClientMessage(playerid,COLOR_GREEN,str);
			    SendClientMessage(playerid,COLOR_GREEN,"Rate: $10 per character");
				format(str,sizeof(str),"Your Total: $%d",price);
				SendClientMessage(playerid,COLOR_GREEN,str);
			    return 1;

			}
			else
			{

			    SendErrorMsg(playerid,"Invalid Advertisment Text. IP Address Found.");
			    return 1;

			}


		}
		else
		{

		    SendErrorMsg(playerid,"You do not have enough money to purchase this advertisment.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in an advertisment business.");
	    return 1;

	}

}

COMMAND:radiocontrol(playerid,params[])
{

    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1))
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /radiocontrol [action] [value(if required)]"); SendClientMessage(playerid,COLOR_YELLOW2,"[Actions] setchannel, setauth, channelauth, deletechannel, buychannel"); return 1; }
        if(strcmp(tmp,"deletechannel",true) == 0)
		{

			new tmp2[64];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /radiocontrol deletechannel [channel]"); return 1; }
			new channel = strval(tmp2);
			if(channel < 1 || channel > 1000) { SendClientMessage(playerid,COLOR_YELLOW2,"Channel cannot be below 1 or above 1000"); return 1; }
			if(IsChannelOwner(playerid,channel))
			{

				SendClientMessage(playerid,COLOR_YELLOW2,"Channel Deleted.");
				DeleteChannel(channel);
				return 1;

			}
			else
			{

			    SendClientMessage(playerid,COLOR_YELLOW2,"You do not own this channel.");
			    return 1;

			}

		}
        if(strcmp(tmp,"channelauth",true) == 0)
        {

			new tmp2[64];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /radiocontrol channelauth [channel] [password]"); return 1; }
			new channel = strval(tmp2);
			if(channel < 1 || channel > 1000) { SendClientMessage(playerid,COLOR_YELLOW2,"Channel cannot be below 1 or above 1000"); return 1; }
			new result[256];
			FetchParamText(result,params,idx);
			if(!strlen(result)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /radiocontrol channelauth [channel] [password]"); return 1; }
			if(strlen(result) > 16) { SendClientMessage(playerid,COLOR_YELLOW2,"Password cannot be above 16 characters."); return 1; }
			if(IsChannelOwner(playerid,channel))
			{

				new slot = FetchChannelSlot(channel);
				mysql_real_escape_string(result,RadioInfo[slot][rPassword]);
				new str[128];
				format(str,sizeof(str),"You have set the password for channel %d to %s",channel,result);
				SendClientMessage(playerid,COLOR_YELLOW2,str);
				UpdateChannel(channel);
				return 1;

			}
			else
			{

			    SendClientMessage(playerid,COLOR_YELLOW2,"You do not own this channel.");
			    return 1;

			}

        }
        if(strcmp(tmp,"buychannel",true) == 0)
        {

            if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 7500)
            {

                new tmp2[64];
				tmp2 = strtok(params,idx);
				if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /radiocontrol buychannel [channel]"); return 1; }
				new channel = strval(tmp2);
				if(channel < 1 || channel > 1000) { SendClientMessage(playerid,COLOR_YELLOW2,"Channel cannot be below 1 or above 1000."); return 1; }
				if(ChannelAvailalbe(channel))
				{

				    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 7500;
					SetChannelOwner(channel,playerid);
					new str[128];
					format(str,sizeof(str),"You have bough channel %d for $7500",channel);
					SendClientMessage(playerid,COLOR_YELLOW2,str);
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_YELLOW2,"This radio channel has already been reserved. Please choose another one.");
				    return 1;

				}

            }
            else
            {

                SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $7500");
                return 1;

            }

        }
        if(strcmp(tmp,"setauth",true) == 0)
        {

			new result[256];
			FetchParamText(result,params,idx);
			if(!strlen(result)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /radiocontrol setauth [password]"); return 1; }
			if(strlen(result) > 16) { SendClientMessage(playerid,COLOR_YELLOW2,"Password cannot be longer than 16 characters."); return 1; }
			mysql_real_escape_string(result,CharacterInfo[playerid][active_character[playerid]][cRadioAuth]);
			SendClientMessage(playerid,COLOR_YELLOW2,"Radio Password Set.");
			return 1;

        }
        if(strcmp(tmp,"setchannel",true) == 0)
        {

            new tmp2[64];
            tmp2 = strtok(params,idx);
            if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /radiocontrol setchannel [1 - 1000]"); return 1; }
            new chan = strval(tmp2);
            if(chan < 1 || chan > 1000) { SendClientMessage(playerid,COLOR_YELLOW2,"Invalid Radio Channel. (1 - 1000)"); return 1; }
			ConnectRadio(playerid,chan);
			return 1;

        }

    }
    else
    {

        SendClientMessage(playerid,COLOR_YELLOW2,"You do not have a radio.");
        return 1;

    }
    return 1;

}

COMMAND:r(playerid,params[])
{

    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_RADIO,1))
    {

        if(CharacterInfo[playerid][active_character[playerid]][cRadioChannel] > 0)
        {

			new result[256];
			FetchParamText(result,params,0);
			if(!strlen(result)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /r [radio talk]"); return 1; }
			new str[256]; new name[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			format(str,sizeof(str),"[Radio] %s: %s",name,result);
			SendRadioTalk(playerid,str);
            return 1;

        }
        else
        {

            SendClientMessage(playerid,COLOR_YELLOW2,"You have not set your radio channel.");
            return 1;

        }

    }
    else
    {

        SendClientMessage(playerid,COLOR_YELLOW2,"You do not have radio.");
        return 1;

    }

}

COMMAND:tie(playerid,params[])
{

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{

		new idx = 0;
	    new tmp[64];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /tie [playerid/player name]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		new veh = GetPlayerVehicleID(playerid);
		if(GetPlayerVehicleID(other) == veh)
		{

		    rope[playerid] = 0;
		    TogglePlayerControllable(other,0);
			GameTextForPlayer(other,"~r~TIED!",5000,5);
			tied[other] = 1;
			new name[MAX_PLAYER_NAME];
			new str[128];
			GetCharacterName(other,name);
			format(str,sizeof(str),"takes out a rope and ties up %s",name);
			SendEmote(playerid,str);
			format(str,sizeof(str),"You have tied up %s use /untie to untie this person.",name);
			SendClientMessage(playerid,COLOR_FACTION,str);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"This player is not in your vehicle.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a vehicle, or are not the driver.");
	    return 1;

	}


}

COMMAND:untie(playerid,params[])
{

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{

		new idx = 0;
	    new tmp[64];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /tie [playerid/player name]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		new veh = GetPlayerVehicleID(playerid);
		if(GetPlayerVehicleID(other) == veh)
		{

		    TogglePlayerControllable(other,1);
			GameTextForPlayer(other,"~g~UNTIED!",5000,5);
			tied[other] = 0;
			new name[MAX_PLAYER_NAME];
			new str[128];
			GetCharacterName(other,name);
			format(str,sizeof(str),"untiest %s",name);
			SendEmote(playerid,str);
			format(str,sizeof(str),"You have untied %s.",name);
			SendClientMessage(playerid,COLOR_FACTION,str);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"This player is not in your vehicle.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a vehicle, or are not the driver.");
	    return 1;

	}


}

COMMAND:freeze(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /freeze [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        if(AccountInfo[playerid][aAdmin] >= AccountInfo[other][aAdmin])
        {

            TogglePlayerControllable(other,0);
            SendClientMessage(playerid,COLOR_GREEN,"Player Frozen.");
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"This admin's level is too high, cannot freeze.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:thaw(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /thaw [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        if(AccountInfo[playerid][aAdmin] >= AccountInfo[other][aAdmin])
        {

            TogglePlayerControllable(other,1);
            SendClientMessage(playerid,COLOR_GREEN,"Player Thawed.");
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"This admin's level is too high, cannot thaw.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:mark(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(playerid,X,Y,Z);
        for(new i = 0; i < 10; i ++)
        {

            if(mark[playerid][i][0] == 0 && mark[playerid][i][1] == 0 && mark[playerid][i][2] == 0)
            {

                mark[playerid][i][0] = X;
                mark[playerid][i][1] = Y;
                mark[playerid][i][2] = Z;
                mark[playerid][i][3] = GetPlayerInterior(playerid);
                mark[playerid][i][4] = GetPlayerVirtualWorld(playerid);
                new str[128];
                format(str,sizeof(str),"Mark %d set.",i);
                SendClientMessage(playerid,COLOR_GREEN,str);
                return 1;

            }

        }
		SendClientMessage(playerid,COLOR_LIGHTRED,"No Marks Available (/clearmarks)");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:clearmarks(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        for(new i = 0; i < 10; i ++)
        {

            mark[playerid][i][0] = 0.0;
            mark[playerid][i][1] = 0.0;
            mark[playerid][i][2] = 0.0;
            mark[playerid][i][3] = 0;
            mark[playerid][i][4] = 0;

        }
        SendClientMessage(playerid,COLOR_LIGHTRED,"Marks Cleared.");
        return 1;

    }
    else
 	{

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

	}

}

COMMAND:tpmark(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /tpmark [mark id]"); return 1; }
		new id = strval(tmp);
		if(id < 0 || id > 9) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid mark id."); return 1; }
		SetPlayerPos(playerid,mark[playerid][id][0],mark[playerid][id][1],mark[playerid][id][2]);
		SetPlayerInterior(playerid,floatround(mark[playerid][id][3]));
		SetPlayerVirtualWorld(playerid,floatround(mark[playerid][id][4]));
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:tpvehicle(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /tpvehicle [vehicle ID]"); return 1; }
        new veh = strval(tmp);
        if(veh < 0 || veh > MAX_VEHICLES) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid vehicle ID"); return 1; }
        new Float:X, Float:Y, Float:Z;
        GetVehiclePos(veh,X,Y,Z);
		SetPlayerPos(playerid,X,(Y + 3.0),(Z + 3.0));
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:givemoney(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /givemoney [playerid/player name] [amount]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /givemoney [playerid/player name] [amount]"); return 1; }
        new amount = strval(tmp2);
        if(amount < 1 || amount > 999999999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid amount."); return 1; }
        CharacterInfo[other][active_character[other]][cMoney] += amount;
		new str[128];
		format(str,sizeof(str),"You have given this player $%d",amount);
		SendClientMessage(playerid,COLOR_GREEN,str);
		new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		GetCharacterName(other,oname);
		format(str,sizeof(str),"[Admin Cmd] %s has given %s $%d",name,oname,amount);
		SendAdminBroadcast(str);
		new logstr[128];
		format(logstr,sizeof(logstr),"Gave character %d $%d",CharacterInfo[other][active_character[other]][cID],amount);
		logAdminEditAction(playerid,"PLAYER_MONEY",logstr);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:makeassistant(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /makeassistant [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		AccountInfo[other][aAssistant] = 1;
		new str[128];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(other,name);
		format(str,sizeof(str),"You have made %s an assistant.",name);
		SendClientMessage(playerid,COLOR_FACTION,str);
		GetCharacterName(playerid,name);
		format(str,sizeof(str),"%s has made you an assistant.",name);
		SendClientMessage(other,COLOR_FACTION,str);
		return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:removeassistant(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /removeassistant [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		AccountInfo[other][aAssistant] = 0;
		new str[128];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(other,name);
		format(str,sizeof(str),"You have removed %s an assistant.",name);
		SendClientMessage(playerid,COLOR_FACTION,str);
		GetCharacterName(playerid,name);
		format(str,sizeof(str),"%s has removed your assistant status.",name);
		SendClientMessage(other,COLOR_FACTION,str);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:assistants(playerid,params[])
{

    SendClientMessage(playerid,COLOR_WHITE,"|-----Assistants-----|");
    new str[128];
    for(new i = 0; i < MAX_PLAYERS; i ++)
    {

		if(IsPlayerConnectedEx(i))
		{

		    if(AccountInfo[i][aAssistant] > 0)
		    {

				format(str,sizeof(str),"Assistant: %s (%d)",AccountInfo[i][aName],i);
		        SendClientMessage(playerid,COLOR_WHITE,str);

		    }

		}

    }
    return 1;

}

COMMAND:atravel(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

	    new
			Float:fPX, Float:fPY, Float:fPZ,
			Float:fVX, Float:fVY, Float:fVZ,
			Float:object_x, Float:object_y, Float:object_z;

		const
			Float:fScale = 20.0;

		GetPlayerCameraPos(playerid, fPX, fPY, fPZ);
		GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);

		if(fVZ < 0.0) { fVZ = 0.0; }

		object_x = fPX + floatmul(fVX, fScale);
		object_y = fPY + floatmul(fVY, fScale);
		object_z = fPZ + floatmul(fVZ, fScale);

		SetPlayerPosFindZ(playerid, object_x, object_y, object_z);
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
	    return 1;

	}

}

COMMAND:bizid(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        new biz = GetClosestBiz(playerid);
        if(biz > -1)
        {

            new str[128];
            format(str,sizeof(str),"Biz ID: %d",biz);
            SendClientMessage(playerid,COLOR_GREEN,str);
            return 1;

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a business.");
            return 1;

        }

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:restartserver(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] == ADMIN_LVL_LEAD)
    {

        print("Initalizing Server Restart.");
        CallLocalFunction("cmd_savestuff","is",playerid,"1");
        active_player_saves = active_players;
        for(new i = 0; i < MAX_PLAYERS; i ++)
        {

            if(IsPlayerConnectedEx(i) && !IsPlayerNPC(i))
			{

				SaveLocation(i);
				TogglePlayerControllable(i,0);
				GameTextForPlayer(i,"~r~SERVER RESTART",5000,5);
				SendClientMessage(i,COLOR_LIGHTRED,"Server Restarting. Please re-connect.");
				Kick(i);

			}

        }
        server_restarting = 1;
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a lead admin.");
        return 1;

    }

}

COMMAND:gate(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
	{

	    new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
	    for(new i = 0; i < sizeof(object_data); i ++)
	    {

	        if(IsPlayerInRangeOfPoint(playerid,object_data[i][6],object_data[i][0],object_data[i][1],object_data[i][2]))
	        {

	            if(FactionInfo[slot][fID] == object_data_id[i][1])
	            {

	            	ToggleGate(i);
	            	//if(!gate_reset[i]) gate_reset[i] = 6;

				}

	        }

	    }

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a faction, or near a personal gate.");
	    return 1;

	}
	return 1;

}

COMMAND:setskin(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
	{

		new idx = 0;
	    new tmp[64];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setskin [playerid/player name] [skin id]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
	    new tmp2[64];
	    tmp2 = strtok(params,idx);
	    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setskin [playerid/player name] [skin id]"); return 1; }
	    new skin = strval(tmp2);
		if(IsValidSkin(skin)) {

		    SetPlayerSkin(other,skin);
		    SendClientMessage(playerid,COLOR_GREEN,"Skin Set.");
		    return 1;

		}
		else { SendErrorMsg(playerid,"Invalid skin."); return 1; }

	}
	else
	{

	    SendErrorMsg(playerid,"You are not a supervisor.");
	    return 1;

	}

}

COMMAND:createbiz(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(playerid,X,Y,Z);
        CreateBiz(X,Y,Z);
        SendClientMessage(playerid,COLOR_GREEN,"House Biz.");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:vworld(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        new str[128];
        format(str,sizeof(str),"Your VWORLD: %d",GetPlayerVirtualWorld(playerid));
        SendClientMessage(playerid,COLOR_GREEN,str);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:id(playerid,params[])
{

	new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /id [player name]"); return 1; }
    new other = ReturnUser(tmp);
    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
    new str[128];
    new name[MAX_PLAYER_NAME];
    GetCharacterName(other,name);
    format(str,sizeof(str),"ID for: %s (%d)",name,other);
	SendClientMessage(playerid,COLOR_GREEN,str);
	return 1;

}

COMMAND:interiorvars(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
	{

	    new str[128];
	    format(str,sizeof(str),"House: %d",in_house[playerid]);
	    SendClientMessage(playerid,COLOR_GREEN,str);
	    format(str,sizeof(str),"Biz: %d",in_biz[playerid]);
	    SendClientMessage(playerid,COLOR_GREEN,str);
	    format(str,sizeof(str),"Interior: %d",in_interior[playerid]);
	    SendClientMessage(playerid,COLOR_GREEN,str);
	    format(str,sizeof(str),"Train: %d",in_train[playerid]);
	    SendClientMessage(playerid,COLOR_GREEN,str);
	    return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not an admin.");
	    return 1;

	}

}

COMMAND:fmembers(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

		ShowFacMembers(playerid,CharacterInfo[playerid][active_character[playerid]][cFaction]);
        return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a faction.");
        return 1;

    }

}

COMMAND:account(playerid,params[])
{

	new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /account [playerid/player name]"); return 1; }
	new other = ReturnUser(tmp);
	if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
    new str[128];
    format(str,sizeof(str),"Account name for %d: %s",other,AccountInfo[other][aName]);
    SendClientMessage(playerid,COLOR_GREEN,str);
    return 1;

}

COMMAND:infovar(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        new str[128];
        format(str,sizeof(str),"INFOTXT_EXPIRE: %d",infotxt_expire[playerid]);
        SendClientMessage(playerid,COLOR_GREEN,str);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:towrentcars(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
	{

	    for(new i = 0; i < MAX_VEHICLES; i ++)
	    {

	        if(IsRentCar(i) && !IsAnyPlayerInVehicle(i)) { SetVehicleToRespawn(i); }

	    }
	    SendClientMessage(playerid,COLOR_GREEN,"Rentable vehicles respawned.");
	    return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not an admin.");
	    return 1;

	}

}

COMMAND:assistme(playerid,params[])
{

	new result[256];
	FetchParamText(result,params,0);
    if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /assistme [help text]"); return 1; }
    SendAssistantNote(playerid,result);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Your message has been sent.");
    return 1;

}

COMMAND:ac(playerid,params[])
{

    if(AccountInfo[playerid][aAssistant] || AccountInfo[playerid][aAdmin])
    {

		new result[256];
		FetchParamText(result,params,0);
		if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /ac [assitant chat]"); return 1; }
		SendAssistantChat(playerid,result);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an assistant.");
        return 1;

    }

}

COMMAND:note(playerid,params[])
{

	new idx = 0;
    if(note_cmd_cooldown[playerid] == 0)
    {
	    if(character_chosen[playerid])
	    {

	        new tmp[64];
	        tmp = strtok(params,idx);
	        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /note [action] [value(if required)]"); SendClientMessage(playerid,COLOR_YELLOW2,"[Actions] create, delete, edit, give, read, list"); return 1; }
			if(strcmp(tmp,"create",true) == 0)
			{

				new result[256];
				FetchParamText(result,params,idx);
				if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /note create [note text]"); return 1; }
				OnPlayerCreateNote(playerid,result);
			    note_cmd_cooldown[playerid] = 10;
				return 1;

			}
			else if(strcmp(tmp,"list",true) == 0)
			{

			    ShowNoteList(playerid);
			    return 1;

			}
			else if(strcmp(tmp,"delete",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /note delete [note #] (/note list)"); return 1; }
			    new slot = strval(tmp2);
			    if(slot < 0 || slot >= MAX_NOTES) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: Invalid note slot."); return 1; }
			    if(NoteSlotTaken(playerid,slot))
			    {

			        NoteInfo[playerid][slot][nActive] = 0;
					strdel(NoteInfo[playerid][slot][nText],0,strlen(NoteInfo[playerid][slot][nText]));
					SendClientMessage(playerid,COLOR_YELLOW2,"Note deleted.");
					DeleteNote(playerid,slot);
					note_cmd_cooldown[playerid] = 10;
					return 1;

			    }
			    else
			    {

			        SendErrorMsg(playerid,"This note slot is not occupied.");
			        return 1;

			    }

			}
			else if(strcmp(tmp,"edit",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /note edit [note #] [new text]"); return 1; }
			    new slot = strval(tmp2);
			    if(slot < 0 || slot >= MAX_NOTES) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: Invalid note slot."); return 1; }
				new result[256];
				FetchParamText(result,params,idx);
				if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /note edit [note #] [new text]"); return 1; }
				if(NoteSlotTaken(playerid,slot))
				{

				    mysql_real_escape_string(result,NoteInfo[playerid][slot][nText]);
					new str[256];
					format(str,sizeof(str),"Note text edited to: %s",result);
				    SendClientMessageA(playerid,COLOR_YELLOW2,str);
				    SaveNote(playerid,slot);
				    note_cmd_cooldown[playerid] = 10;
				    return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_YELLOW2,"Note slot is not occupied. Cannot edit.");
				    return 1;

				}

			}
			else if(strcmp(tmp,"read",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /note read [note #]"); return 1; }
			    new slot = strval(tmp2);
			    if(slot < 0 || slot >= MAX_NOTES) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: Invalid note slot."); return 1; }
			    if(NoteSlotTaken(playerid,slot))
				{

					new str[256];
					format(str,sizeof(str),"Note %d: %s",slot,NoteInfo[playerid][slot][nText]);
					SendClientMessageA(playerid,COLOR_YELLOW2,str);
				    return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_YELLOW2,"Note slot is not occupied. Cannot read.");
				    return 1;

				}

			}
			else if(strcmp(tmp,"give",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /note edit [note #] [playerid/player name]"); return 1; }
			    new slot = strval(tmp2);
			    if(slot < 0 || slot >= MAX_NOTES) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: Invalid note slot."); return 1; }
			    if(NoteSlotTaken(playerid,slot))
				{

		            new tmp3[64];
					tmp3 = strtok(params,idx);
					if(!strlen(tmp3)) {  SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /note edit [note #] [playerid/player name]"); return 1; }
					new other = ReturnUser(tmp3);
					if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
					if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
					{

						new res = OnPlayerCreateNote(other,NoteInfo[playerid][slot][nText]);
						if(res)
						{

							NoteInfo[playerid][slot][nActive] = 0;
							strdel(NoteInfo[playerid][slot][nText],0,strlen(NoteInfo[playerid][slot][nText]));
						    new str[256];
						    new name[MAX_PLAYER_NAME];
							GetCharacterName(other,name);
							format(str,sizeof(str),"takes out a note and hands it to %s",name);
						    SendEmote(playerid,str);
						   	DeleteNote(playerid,slot);
						   	note_cmd_cooldown[playerid] = 10;
						    return 1;

						}
						else
						{

						    SendErrorMsg(playerid,"This player does not have any more space to carry this note.");
						    return 1;

						}

					}
					else
					{

					    SendErrorMsg(playerid,"You are not near this player.");
					    return 1;

					}

				}
				else
				{

				    SendClientMessage(playerid,COLOR_YELLOW2,"Note slot is not occupied. Cannot give.");
				    return 1;

				}

			}
			SendErrorMsg(playerid,"Unknown action.");
			return 1;

	    }
	    else
	    {

	        SendErrorMsg(playerid,"Please choose your character first.");
	        return 1;

	    }
    }
    else
    {

        SendErrorMsg(playerid,"Please wait 10 seconds between note commands.");
        return 1;

    }

}

COMMAND:gov(playerid,params[])
{

    if(IsLaw(playerid) && duty[playerid] || IsMedic(playerid) && duty[playerid] || IsGov(playerid))
    {

        if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_SUPER || CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD)
        {

			new result[256];
			FetchParamText(result,params,0);
			if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /gov [gov text]"); return 1; }
			new str[256];
			new name[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			format(str,sizeof(str),"[Government] %s %s: %s",CharacterInfo[playerid][active_character[playerid]][cRankName],name,result);
			SendGovMessage(str);
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"Message Sent.");
			return 1;

        }
        else
		{

		    SendErrorMsg(playerid,"You do not have permission to do this.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop/medic or are not on duty.");
        return 1;

    }

}

COMMAND:giveup(playerid,params[])
{

    if(death_mode[playerid])
    {

        if(death_cooldown[playerid] == 0)
        {

			SetPlayerHealth(playerid,0);
			return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You cannot use /giveup yet.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in death mode.");
        return 1;

    }

}

COMMAND:cpr(playerid,params[])
{

	new near_injured = NearInjured(playerid);
	if(near_injured > -1)
	{

	    if(cpr_cooldown[near_injured] == 0)
	    {

			SetPlayerFacingPlayer(playerid,near_injured);
			ApplyAnimation(playerid,"MEDIC","CPR",4.0,0,0,0,0,1);
			new name[MAX_PLAYER_NAME];
			new str[128];
			GetCharacterName(near_injured,name);
			format(str,sizeof(str),"performs CPR on %s",name);
			SendEmote(playerid,str);
			new Float:hp;
			GetPlayerHealth(near_injured,hp);
			hp = (hp + 5.0);
			SetPlayerHealth(near_injured,hp);
			cpr_cooldown[near_injured] = 120;
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"CPR cannot be performed on this person yet.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not near an injured person.");
	    return 1;

	}

}

COMMAND:defib(playerid,params[])
{

	if(IsMedic(playerid) && duty[playerid])
    {

        if(InAmbulance(playerid))
        {

			new idx = 0;
            new tmp[64];
            tmp = strtok(params,idx);
            if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /defib [playerid/player name]"); return 1; }
            new other = ReturnUser(tmp);
            if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
            if(GetPlayerVehicleID(other) != GetPlayerVehicleID(playerid)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in your ambulance."); return 1; }
            if(!death_mode[other]) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in death mode.");  return 1; }
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot defib people as a driver."); return 1; }
            if(defib_cooldown[other] == 0)
            {

                new Float:hp;
                GetPlayerHealth(other,hp);
				hp = (hp + 25.0);
                SetPlayerHealth(other,hp);
				new name[MAX_PLAYER_NAME];
				GetCharacterName(other,name);
				new str[128];
				format(str,sizeof(str),"takes out some shock paddles and uses them on %s",name);
				SendEmote(playerid,str);
				defib_cooldown[other] = 120;
				return 1;

            }
            else
            {

                SendErrorMsg(playerid,"Injured people can only be defibed once every 2 minutes.");
                return 1;

            }

        }
        else
        {

            SendErrorMsg(playerid,"You are not in an ambulance.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a medic or are not on duty.");
        return 1;

    }

}

COMMAND:heal(playerid,params[])
{

    if(IsMedic(playerid) && duty[playerid])
    {

        if(IsPlayerInRangeOfPoint(playerid,75.0,1158.02209473, -2523.12890625, 1117.96269226))
        {

			new idx = 0;
            new tmp[64];
            tmp = strtok(params,idx);
            if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /heal [playerid/player name]"); return 1; }
            new other = ReturnUser(tmp);
            if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
            if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
            {

                death_mode[other] = 0;
				death_cooldown[other] = 0;
			    death_respawn_time[other] = 0;
			    cpr_cooldown[other] = 0;
			    death_hploss[other] = 0;
			    defib_cooldown[other] = 0;
			    SetCameraBehindPlayer(other);
				TogglePlayerControllable(other,1);
			    SetPlayerHealth(other,100);
			    new name[MAX_PLAYER_NAME];
			    new str[128];
			    GetCharacterName(other,name);
			    format(str,sizeof(str),"You have healed %s",name);
			    SendClientMessage(playerid,COLOR_FACTION,str);
			    GetCharacterName(playerid,name);
			    format(str,sizeof(str),"%s has healed you.",name);
			    SendClientMessage(other,COLOR_FACTION,str);
			    return 1;


            }
            else
            {

                SendErrorMsg(playerid,"You are not near this player.");
                return 1;

            }

        }
        else
        {

            SendErrorMsg(playerid,"You are not in the hospital.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a medic or are not on duty.");
        return 1;

    }

}

COMMAND:stretcher(playerid,params[])
{

    if(IsMedic(playerid) && duty[playerid])
    {

        if(InAmbulance(playerid))
        {

			new idx = 0;
			new tmp[64];
			tmp = strtok(params,idx);
			if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /stretcher [playerid/player name]"); return 1; }
			new other = ReturnUser(tmp);
			if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
			if(IsPlayerInAnyVehicle(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is already in a vehicle."); return 1; }
			if(!InAmbulance(playerid)) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in an ambulance."); return 1; }
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) { SendClientMessage(playerid,COLOR_LIGHTRED,"You must be the driver to do this."); return 1; }
			if(death_mode[other])
			{

			    if(!AnyoneInAmbulance(GetPlayerVehicleID(playerid)))
			    {

			        PutPlayerInVehicle(other,GetPlayerVehicleID(playerid),3);
			        new name[MAX_PLAYER_NAME];
			        GetCharacterName(other,name);
					new str[128];
					format(str,sizeof(str),"puts %s onto a stretcher and wheels them into the back of the ambulance.",name);
					SendEmote(playerid,str);
					TogglePlayerControllable(other,1);
					SetCameraBehindPlayer(other);
					return 1;

			    }
			    else
			    {

			        SendErrorMsg(playerid,"You already have someone in your ambulance.");
			        return 1;

			    }

			}
			else
			{

			    SendErrorMsg(playerid,"This player is not in death mode.");
			    return 1;

			}

        }
        else
        {

            SendErrorMsg(playerid,"You are not in an ambulance.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a medic, or are not on duty.");
        return 1;

    }

}

COMMAND:buyseeds(playerid,params[])
{

    if(IsPlayerInRangeOfPoint(playerid,7.5,-1094.9161,-1620.8561,76.3672))
	{

		new idx = 0;
	    new tmp[64];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /buyseeds [weed/heroin/coke] [amount]"); return 1; }
	    new tmp2[64];
	    tmp2 = strtok(params,idx);
	    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /buyseeds [weed/heroin/coke] [amount]"); return 1; }
	    new amount = strval(tmp2);
	    if(amount < 1 || amount > 999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid amount."); return 1; }
	    if(strcmp(tmp,"coke",true) == 0)
	    {

	        new rate = (250 * amount);
			if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= rate)
			{

				if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_COKESEED,amount))
		        {

			    	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_COKESEED,amount);
			    	if(rec)
			    	{

			    	    CharacterInfo[playerid][active_character[playerid]][cMoney] -= rate;
			    	    return 1;

	                }
	                else
	                {

						return 1;

	                }

				}
				else
				{

				    SendErrorMsg(playerid,"You cannot carry anymore items.");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You do not have enough money. ($250 per seed)");
			    return 1;

			}

		}
	    if(strcmp(tmp,"heroin",true) == 0)
	    {

	        new rate = (400 * amount);
			if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= rate)
			{

				if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_HEROINSEED,amount))
		        {

			    	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_HEROINSEED,amount);
			    	if(rec)
			    	{

			    	    CharacterInfo[playerid][active_character[playerid]][cMoney] -= rate;
			    	    return 1;

	                }
	                else
	                {

						return 1;

	                }

				}
				else
				{

				    SendErrorMsg(playerid,"You cannot carry anymore items.");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You do not have enough money. ($400 per seed)");
			    return 1;

			}

		}
	    if(strcmp(tmp,"weed",true) == 0)
	    {

	        new rate = (200 * amount);
			if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= rate)
			{

				if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEEDSEED,amount))
		        {

			    	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEEDSEED,amount);
			    	if(rec)
			    	{

			    	    CharacterInfo[playerid][active_character[playerid]][cMoney] -= rate;
			    	    return 1;

	                }
	                else
	                {

						return 1;

	                }

				}
				else
				{

				    SendErrorMsg(playerid,"You cannot carry anymore items.");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You do not have enough money. ($200 per seed)");
			    return 1;

			}

		}
		SendErrorMsg(playerid,"Uknown seed.");
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not near the seed collection point.");
	    return 1;

	}

}



COMMAND:inv(playerid,params[])
{

	return cmd_inventory(playerid,params);

}

COMMAND:inventory(playerid,params[])
{

    ShowInventory(playerid,playerid);
    return 1;

}

COMMAND:plantseed(playerid,params[])
{

    if(IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot do this while in a vehicle."); return 1; }
    if(in_interior[playerid] == -1 && AccountInfo[playerid][aJailTime] == 0 && CharacterInfo[playerid][active_character[playerid]][cJailTime] == 0 && in_house[playerid] == -1 && in_biz[playerid] == -1)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /plantseed [weed/heroin/coke]"); return 1; }
        if(strcmp(tmp,"weed",true) == 0)
        {

            if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_WEEDSEED,1))
            {

                PlantDrug(playerid,DRUG_WEED);
                return 1;

            }
            else
            {

                SendErrorMsg(playerid,"You do not have any Cannabis Seeds.");
                return 1;

            }

        }
        if(strcmp(tmp,"heroin",true) == 0)
        {

            if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_HEROINSEED,1))
            {

                PlantDrug(playerid,DRUG_HEROIN);
                return 1;

            }
            else
            {

                SendErrorMsg(playerid,"You do not have any Cannabis Seeds.");
                return 1;

            }

        }
        if(strcmp(tmp,"coke",true) == 0)
        {

            if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_COKESEED,1))
            {

                PlantDrug(playerid,DRUG_COKE);
                return 1;

            }
            else
            {

                SendErrorMsg(playerid,"You do not have any Cannabis Seeds.");
                return 1;

            }

        }

    }
    else
    {

        SendErrorMsg(playerid,"You cannot plant seeds here.");
        return 1;

    }
    return 1;

}

COMMAND:drugs(playerid,params[])
{

	new idx = 0;
	new tmp[64];
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /drugs [action] [value(if required)]"); SendClientMessage(playerid,COLOR_YELLOW2,"[Actions] gather, destroy"); return 1; }
	if(strcmp(tmp,"destroy",true) == 0)
	{

		new slot = GetClosestDrug(playerid);
		if(slot > -1)
		{

		    DrugInfo[slot][dTime] = 0;
            DrugInfo[slot][dType] = 0;
			F_DestroyObject(DrugInfo[slot][dObject]);
			DrugInfo[slot][dObject] = 0;
			SendEmote(playerid,"takes out some pliers and removes a nearby plant.");
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You are not near any drugs.");
		    return 1;

		}

	}
	if(strcmp(tmp,"gather",true) == 0)
	{

	    new slot = GetClosestDrug(playerid);
	    if(slot > -1)
	    {

	        if((gettime() - DrugInfo[slot][dTime]) > (3600 * 12))
			{

                GatherDrug(playerid,slot);
                return 1;

			}
			else
			{

			    SendErrorMsg(playerid,"This plant is not ready to gather yet.");
			    return 1;

			}

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You are not near a drug plant.");
	        return 1;

	    }

	}
	return 1;

}

COMMAND:tow(playerid,params[])
{

    if ((IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
	 	{

             new Float:pX,Float:pY,Float:pZ;
             GetPlayerPos(playerid,pX,pY,pZ);
             new Float:vX,Float:vY,Float:vZ;
             new Found=0;
             new vid=0;
             while((vid<MAX_VEHICLES)&&(!Found))
             {
         		vid++;
                GetVehiclePos(vid,vX,vY,vZ);
                if  ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
                {
            		Found=1;
                    if  (!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
                    {

                    	AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
                    	return 1;

                    }

                }
            }

		}
		else
    	{

    	    SendErrorMsg(playerid,"You are not in a tow truck, or are not the driver.");
    	    return 1;

    	}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not in a tow truck, or are not the driver.");
	    return 1;

	}
	return 1;


}

COMMAND:savings(playerid,params[])
{

    if(IsInBank(playerid))
    {

        if(CharacterInfo[playerid][active_character[playerid]][cSavings] > 0)
        {

            ShowPlayerDialog(playerid,DIALOG_TAKESAVE,DIALOG_STYLE_MSGBOX,"Are you sure?","You are about to take all of your savings out. Are you sure you wish to continue?","Confirm","Cancel");
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You do not have any savings.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in the bank.");
        return 1;

    }

}

COMMAND:depositsavings(playerid,params[])
{

    if(IsInBank(playerid))
    {

		new idx = 0;
		new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /depositsavings [amount]"); return 1; }
		new amount = strval(tmp);
		if(amount < 1000) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot deposit less than $1000 at a time"); return 1; }
		if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= amount)
		{

		    if((CharacterInfo[playerid][active_character[playerid]][cSavings] + amount) > 50000) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot deposit anymore money into your savings account."); return 1; }
			CharacterInfo[playerid][active_character[playerid]][cMoney] -= amount;
			new tax = floatround((amount * 0.05));
			new orig = amount;
			amount -= tax;
			CharacterInfo[playerid][active_character[playerid]][cSavings] += amount;
			if(in_biz[playerid] > -1) { BizInfo[in_biz[playerid]][bBank] += tax; }
			new str[128];
			SendClientMessage(playerid,COLOR_WHITE,"|-----Bank Slip-----|");
			format(str,sizeof(str),"Savings Deposit: $%d",orig);
			SendClientMessage(playerid,COLOR_WHITE,str);
			format(str,sizeof(str),"Tax: $%d",tax);
			SendClientMessage(playerid,COLOR_WHITE,str);
			format(str,sizeof(str),"New Savings: $%d",CharacterInfo[playerid][active_character[playerid]][cSavings]);
			SendClientMessage(playerid,COLOR_WHITE,str);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You do not have this much money.");
		    return 1;

		}

    }
	else
	{

	    SendErrorMsg(playerid,"You are not in the bank.");
	    return 1;

	}

}

COMMAND:rb(playerid,params[])
{

	return cmd_roadblock(playerid,params);

}

COMMAND:roadblock(playerid,params[])
{

    if(IsLaw(playerid) && duty[playerid] || IsMedic(playerid) && duty[playerid])
    {

        new Float:X, Float:Y, Float:Z, Float:R;
        GetPlayerPos(playerid,X,Y,Z);
        GetPlayerFacingAngle(playerid,R);
		new slot = GetNextRoadblock();
		if(slot > -1)
		{

        	roadblock[slot] = CreateObject(978,X,Y,Z-0.2,0,0,R);
        	roadblock_pos[slot][0] = X;
        	roadblock_pos[slot][1] = Y;
        	roadblock_pos[slot][2] = Z;
        	return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"Maximum number of roadblocks deployed.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop/medic, or are not on duty.");
        return 1;

    }

}

COMMAND:drb(playerid,params[])
{

	return cmd_destroyroadblock(playerid,params);

}

COMMAND:destroyroadblock(playerid,params[])
{

   	if(IsLaw(playerid) && duty[playerid] || IsMedic(playerid) && duty[playerid])
    {

        new slot = GetClosestRoadblock(playerid);
        if(slot > -1)
        {

            DestroyObject(roadblock[slot]);
			roadblock[slot] = 0;
			return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not near a roadblock.");
            return 1;

        }

	}
    else
    {

        SendErrorMsg(playerid,"You are not a cop/medic, or are not on duty.");
        return 1;

    }

}

COMMAND:w(playerid,params[])
{

	return cmd_whisper(playerid,params);

}

COMMAND:whisper(playerid,params[])
{

	new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(w)hisper [playerid/player name] [whisper text]"); return 1; }
    new other = ReturnUser(tmp);
    if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
	new result[256];
	FetchParamText(result,params,idx);
    if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(w)hisper [playerid/player name] [whisper text]"); return 1; }
    if(GetDistanceBetweenPlayers(playerid,other) < 2.5)
    {

        new name[MAX_PLAYER_NAME];
		new str[256];
     	GetCharacterNameEx(playerid,name);
		format(str,sizeof(str),"[Whisper] %s: %s",name,result);
		SendClientMessage(other,COLOR_YELLOW,str);
		SendClientMessage(playerid,COLOR_YELLOW,str);
		return 1;

    }
    else
	{

        SendErrorMsg(playerid,"You are not near this player.");
        return 1;

    }


}

COMMAND:low(playerid,params[])
{

	new result[256];
	FetchParamText(result,params,0);
    if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /low [text]"); return 1; }
    new str[256];
    new name[MAX_PLAYER_NAME];
    GetCharacterNameEx(playerid,name);
    format(str,sizeof(str),"[Low] %s: %s",name,result);
    SendLocalICMessage(playerid,str,7.5);
    return 1;

}

COMMAND:starttrucking(playerid,params[])
{

    if(InTruck(playerid) && CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_TRUCKER)
    {

		if(trucking[playerid] == 0)
		{

		    if(IsPlayerInRangeOfPoint(playerid,20.0,-80.8870,-1125.8657,1.6744))
		    {

		        OnPlayerStartTrucking(playerid);
		        return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You are not at the trucking depot.");
		        return 1;

		    }

		}
		else
		{

		    SendErrorMsg(playerid,"You are already in a Trucking Run.");
        	return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not a trucker, or are not in a truck.");
        return 1;

    }

}

COMMAND:canceltruck(playerid,params[])
{

    if(trucking[playerid])
    {

        GameTextForPlayer(playerid,"~r~Trucking Mission Cancelled",5000,5);
		trucking[playerid] = 0;
		trucking_mission[playerid] = 0;
		trucking_stage[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a trucking mission.");
        return 1;

    }

}

COMMAND:passitem(playerid,params[])
{

	new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /passitem [playerid/player name] [inventory slot] [amount] (/inventory)"); return 1; }
    new other = ReturnUser(tmp);
    if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_YELLOW2,"This player is not connected."); return 1; }
    if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
    {

        new tmp2[64];
        tmp2 = strtok(params,idx);
        if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /passitem [playerid/player name] [inventory slot] [amount] (/inventory)"); return 1; }
        new slot = strval(tmp2);
        if(slot < 1 || slot > MAX_INVENTORY) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid Slot ID."); return 1; }
        slot = (slot - 1);
        new tmp3[64];
        tmp3 = strtok(params,idx);
        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /passitem [playerid/player name] [inventory slot] [amount] (/inventory)"); return 1; }
        new amount = strval(tmp3);
        if(InventoryInfo[playerid][slot][inItem] > 0)
        {

            if(InventoryInfo[playerid][slot][inAmount] >= amount)
            {

	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,other,InventoryInfo[playerid][slot][inItem],amount))
	            {

					new res = GiveItem(INVENTORY_TYPE_PLAYER,other,InventoryInfo[playerid][slot][inItem],amount);
					if(res)
					{

					    new item[128];
					    new name[MAX_PLAYER_NAME];
					    new str[256];
					    GetCharacterNameEx(other,name);
					    GetItemName(InventoryInfo[playerid][slot][inItem],item);
					    format(str,sizeof(str),"takes out some %s and hands it to %s",item,name);
					    SendEmote(playerid,str);
					  	RemoveItem(INVENTORY_TYPE_PLAYER,playerid,InventoryInfo[playerid][slot][inItem],amount);
					    return 1;

					}
					else
					{

					    SendErrorMsg(playerid,"This player is not ready to recieve an item.");
					    return 1;

					}

	            }
	            else
          		{

	                SendErrorMsg(playerid,"This player cannot carry this!");
	                return 1;

	            }

			}
			else
			{

			    SendErrorMsg(playerid,"You do not have enough of this item.");
			    return 1;

			}

        }
        else
        {

            SendErrorMsg(playerid,"You do not have anything in that slot.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not near this player.");
        return 1;

    }


}

COMMAND:dropitem(playerid,params[])
{

	new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /dropitem [inventory slot] (/inventory)"); return 1; }
    new slot = strval(tmp);
    if(slot < 1 || slot > MAX_INVENTORY) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid Slot ID."); return 1; }
    slot = (slot - 1);
    if(InventoryInfo[playerid][slot][inItem] > 0)
    {

        new item[128];
        GetItemName(InventoryInfo[playerid][slot][inItem],item);
		new str[256];
		format(str,sizeof(str),"drops some %s on the floor.",item);
		SendEmote(playerid,str);
		InventoryInfo[playerid][slot][inItem] = -1;
		InventoryInfo[playerid][slot][inAmount] = 0;
		SavePlayerInventory(playerid);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"This slot is empty");
        return 1;

    }

}

COMMAND:vinv(playerid,params[])
{

	return cmd_vinventory(playerid,params);

}

COMMAND:vinventory(playerid,params[])
{

    if(!IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a vehicle."); return 1; }
	new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
	if(slot > -1)
	{

		ShowVehicleInventory(playerid,slot);
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You cannot do that in this vehicle.");
	    return 1;

	}

}

COMMAND:vstore(playerid,params[])
{

	new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /vstore [inventory slot] [amount]"); return 1; }
    new islot = strval(tmp);
    if(islot < 1 || islot > 10) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid Inventory Slot."); return 1; }
	islot = (islot - 1);
	if(InventoryInfo[playerid][islot][inItem] == -1) { SendClientMessage(playerid,COLOR_LIGHTRED,"There is nothing in this slot."); return 1; }
	new tmp2[64];
	tmp2 = strtok(params,idx);
	if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /vstore [inventory slot] [amount]"); return 1; }
	new amount = strval(tmp2);
	if(amount < 1 || amount > InventoryInfo[playerid][islot][inAmount]) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid amount."); return 1; }
    if(!IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a vehicle."); return 1; }
	new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
	if(slot > -1)
	{

	    if(CanHaveItem(INVENTORY_TYPE_VEHICLE,slot,InventoryInfo[playerid][islot][inItem],amount))
	    {

			new res = GiveItem(INVENTORY_TYPE_VEHICLE,slot,InventoryInfo[playerid][islot][inItem],amount);
			if(res)
			{

                new item[128];
                GetItemName(InventoryInfo[playerid][islot][inItem],item);
                InventoryInfo[playerid][islot][inAmount] -= amount;
				if(InventoryInfo[playerid][islot][inAmount] == 0) { InventoryInfo[playerid][islot][inItem] = -1; }
                new str[256];
                format(str,sizeof(str),"stores some %s in their car.",item);
                SendEmote(playerid,str);
                SavePlayerInventory(playerid);

			}
			else
			{

			    SendErrorMsg(playerid,"This vehicle is not ready to recieve items.");
			    return 1;

			}
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"Nothing else can be stored in this vehicle.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You cannot do that in this vehicle.");
	    return 1;

	}

}

COMMAND:vtake(playerid,params[])
{

	new idx = 0;
	if(!IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a vehicle."); return 1; }
	new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /vtake [inventory slot] [amount]"); return 1; }
    new islot = strval(tmp);
    if(islot < 1 || islot > 10) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid Inventory Slot."); return 1; }
	islot = (islot - 1);
	if(VehicleInventory[slot][islot][vinItem] == -1) { SendClientMessage(playerid,COLOR_LIGHTRED,"There is nothing in this slot."); return 1; }
	new tmp2[64];
	tmp2 = strtok(params,idx);
	if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /vtake [inventory slot] [amount]"); return 1; }
	new amount = strval(tmp2);
	if(amount < 1 || amount > VehicleInventory[slot][islot][vinAmount]) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid amount."); return 1; }
	if(slot > -1)
	{

		new res = GiveItem(INVENTORY_TYPE_PLAYER,playerid,VehicleInventory[slot][islot][vinItem],amount);
		if(res)
		{

            new item[128];
            GetItemName(VehicleInventory[slot][islot][vinItem],item);
            new str[256];
            format(str,sizeof(str),"takes some %s from their car.",item);
            SendEmote(playerid,str);
            VehicleInventory[slot][islot][vinAmount] -= amount;
			if(VehicleInventory[slot][islot][vinAmount] == 0) { VehicleInventory[slot][islot][vinItem] = -1; }
			SaveVehicleInventory(VehicleInfo[slot][vVehicle],islot);

		}
		else
		{

		    SendErrorMsg(playerid,"This vehicle is not ready to recieve items.");
		    return 1;

		}
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You cannot do that in this vehicle.");
	    return 1;

	}

}

COMMAND:cellin(playerid,params[])
{

	cl_RemovePhone(playerid);
    return 1;

}

COMMAND:cellout(playerid,params[])
{

	cl_GivePhone(playerid);
    return 1;

}

COMMAND:handsup(playerid,params[])
{

    in_anim[playerid] = 1;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
    return 1;

}

COMMAND:drunk(playerid,params[])
{

    in_anim[playerid] = 1;
	ApplyAnimation(playerid,"PED","WALK_DRUNK",4.0,1,1,1,0,0,1);
	return 1;

}

COMMAND:bomb(playerid,params[])
{

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0,1); // Place Bomb
	return 1;

}

COMMAND:laugh(playerid,params[])
{

    SendEmote(playerid,"bursts into laughter.");
	in_anim[playerid] = 1;
    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0,1); // Laugh
    SetTimerEx("StopTalk", 1500, false, "i", playerid);
  	return 1;

}

COMMAND:crossarms(playerid,params[])
{

	in_anim[playerid] = 1;
    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1,1); // Arms crossed
	return 1;

}

COMMAND:cover(playerid,params[])
{

	in_anim[playerid] = 1;
    ApplyAnimation(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0,1); // Taking Cover
	return 1;

}

COMMAND:wave(playerid,params[])
{

    in_anim[playerid] = 1;
	ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0,1); // Wave
	return 1;

}

COMMAND:crack(playerid,params[])
{

    in_anim[playerid] = 1;
	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0,1); // Dieing of Crack
	return 1;

}

COMMAND:smoke(playerid,params[])
{

    in_anim[playerid] = 1;
	ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0,1); // Smoke
	return 1;

}

COMMAND:groundsit(playerid,params[])
{

    in_anim[playerid] = 1;
	ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0,1); // Sit
	return 1;

}

COMMAND:fucku(playerid,params[])
{

    in_anim[playerid] = 1;
	ApplyAnimation(playerid,"PED","fucku",4.0,0,1,1,1,0,1);
	SetTimerEx("StopTalk", 1000, false, "i", playerid);
 	return 1;

}

COMMAND:sit(playerid,params[])
{

    in_anim[playerid] = 1;
    ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,1,1,1,0,1);
	return 1;

}

COMMAND:facehit(playerid,params[])
{

    ApplyAnimation(playerid,"PED","gas_cwr",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:gwalk1(playerid,params[])
{

    in_anim[playerid] = 1;
    ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,0,0,1);
    return 1;

}

COMMAND:gwalk2(playerid,params[])
{

    in_anim[playerid] = 1;
    ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,0,0,1);
    return 1;

}

COMMAND:guard(playerid,params[])
{

    in_anim[playerid] = 1;
	ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1,1);
	return 1;

}

COMMAND:stopanim(playerid,params[])
{

	in_anim[playerid] = 0;
	SetTimerEx("StopTalk", 100, false, "i", playerid);
	return 1;

}

COMMAND:facepalm(playerid,params[])
{

    SendEmote(playerid,"lowers their face into their palm");
    ApplyAnimation(playerid,"MISC","plyr_shkhead",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:stoptraffic(playerid,params[])
{

	ApplyAnimation(playerid,"POLICE","CopTraf_Stop",4.1,0,1,1,0,0,1);
	return 1;

}

COMMAND:kickdoor(playerid,params[])
{

    ApplyAnimation(playerid,"POLICE","Door_Kick",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:facelay(playerid,params[])
{

    in_anim[playerid] = 1;
	ApplyAnimation(playerid,"PED","FLOOR_hit_f",4.1,0,1,1,1,1,1);
	return 1;

}

COMMAND:point(playerid,params[])
{

    ApplyAnimation(playerid,"ON_LOOKERS","point_loop",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:cheer(playerid,params[])
{

    SendEmote(playerid,"cheers with joy");
    ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:injured(playerid,params[])
{

    in_anim[playerid] = 1;
    ApplyAnimation(playerid,"CRACK","crckidle1",4.1,0,1,1,1,1,1);
    return 1;

}

COMMAND:gsign1(playerid,params[])
{

    ApplyAnimation(playerid,"GHANDS","gsign1",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:gsign2(playerid,params[])
{

    ApplyAnimation(playerid,"GHANDS","gsign1LH",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:gsign3(playerid,params[])
{

    ApplyAnimation(playerid,"GHANDS","gsign3",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:yeah(playerid,params[])
{

    SendEmote(playerid,"appears insanely happy");
    ApplyAnimation(playerid,"CLOTHES","CLO_Buy",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:kiss(playerid,params[])
{

    ApplyAnimation(playerid,"KISSING","Playa_Kiss_02",4.1,0,1,1,0,0,1);
    return 1;

}

COMMAND:aimgun(playerid,params[])
{

    ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1,1);
    return 1;

}

COMMAND:lean(playerid,params[])
{

    ApplyAnimation(playerid,"GANGS","leanIDLE",4.1,0,1,1,1,1,1);
    return 1;

}

COMMAND:vomit(playerid,params[])
{

    ApplyAnimation(playerid,"FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0, 1);
    return 1;

}

COMMAND:taphand(playerid,params[])
{

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{

		ApplyAnimation(playerid,"CAR", "Tap_hand", 4.1, 0, 0, 0, 1, 0, 1);
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a vehicle, or are not the driver.");
	    return 1;

	}

}

COMMAND:stretch(playerid,params[])
{

	ApplyAnimation(playerid,"PLAYIDLES", "stretch", 4.1, 0, 0, 0, 0, 0, 1);
    return 1;

}

COMMAND:animlist(playerid,params[])
{

    SendClientMessage(playerid,COLOR_GREEN,"|-----Animations----|");
    SendClientMessage(playerid,COLOR_WHITE,"Anim: /stopanim, /guard, /gwalk2, /gwalk1, /facehit, /sit, /fucku, /groundsit, /smoke, /facepalm");
    SendClientMessage(playerid,COLOR_WHITE,"Anim: /crack, /wave, /cover, /crossarms, /laugh, /bomb, /drunk, /cellout, /cellin, /handsup, /stoptraffic");
    SendClientMessage(playerid,COLOR_WHITE,"Anim: /kickdoor, /facelay, /point, /cheer, /injured, /gsign1, /gsign2, /gsign3, /yeah, /dance, /kiss");
    SendClientMessage(playerid,COLOR_WHITE,"Anim: /aimgun, /lean, /vomit, /taphand, /stretch");
    SendClientMessage(playerid,COLOR_LIGHTRED,"Use /stopanim to stop an animation.");
    return 1;

}

COMMAND:saveplayer(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /saveplayer [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        SaveStats(other);
        SendClientMessage(playerid,COLOR_GREEN,"Player stats saved.");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:saveweapons(playerid,params[])
{

	new idx = 0;
	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /saveplayer [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        SaveWeapons(other);
        SendClientMessage(playerid,COLOR_GREEN,"Player weapons saved.");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:sendafk(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /saveplayer [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        afk_reset[other] = 1;
        SaveStats(other);
        SendClientMessage(playerid,COLOR_GREEN,"Player sent to AFK screen.");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

	}

}

COMMAND:charity(playerid,params[])
{

	new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /charity [amount]"); return 1; }
	new amount = strval(tmp);
	if(amount < 1 || amount > CharacterInfo[playerid][active_character[playerid]][cMoney]) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid amount."); return 1; }
	CharacterInfo[playerid][active_character[playerid]][cMoney] -= amount;
	new str[128];
	new name[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	format(str,sizeof(str),"[Charity] %s has just given $%d to charity.",name,amount);
	SendAdminBroadcast(str);
	format(str,sizeof(str),"~p~Thanks for your donation~n~ ~n~~w~You have given $%d to charity.",amount);
	TextDrawSetString(infotxt[playerid],str);
	TextDrawShowForPlayer(playerid,infotxt[playerid]);
	infotxt_expire[playerid] = 11;
	PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
	return 1;

}

COMMAND:agiveweapon(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /agiveweapon [playerid/player name] [weapon] [ammo]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        new tmp2[64];
        tmp2 = strtok(params,idx);
        if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /agiveweapon [playerid/player name] [weapon] [ammo]"); return 1; }
        new weapon = strval(tmp2);
        new tmp3[64];
        tmp3 = strtok(params,idx);
        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /agiveweapon [playerid/player name] [weapon] [ammo]"); return 1; }
		new ammo = strval(tmp3);
		if(weapon > 0 && weapon < 47)
		{

		    if(int_in_array(weapon, banned_weapons) > -1) { SendClientMessage(playerid,COLOR_LIGHTRED,"This is a banned weapon. Cannot be given."); return 1; }
		    GivePlayerWeaponEx(other,weapon,ammo);
		    SendClientMessage(playerid,COLOR_GREEN,"Weapon Given.");
		    new str[128];
			new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME], wname[64];
			GetCharacterName(playerid,name);
			GetCharacterName(other,oname);
			GetWeaponName(weapon,wname,sizeof(wname));
			format(str,sizeof(str),"[Admin Cmd] %s has given %s a %s",name,oname,wname);
			SendAdminBroadcast(str);
		    return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"Invalid Weapon ID.");
		    return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:accent(playerid,params[])
{

	new idx = 0;
	new result[256];
	FetchParamText(result,params,idx);
	if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /accent [accent]"); return 1; }
	if(strlen(result) > 16) { SendClientMessage(playerid,COLOR_LIGHTRED,"Accent cannot be larger than 16 characters."); return 1; }
	format(accent[playerid],16,"%s Accent",result);
	new str[256];
	format(str,sizeof(str),"~p~Accent~n~ ~n~~w~Your accent has been set to ~n~ ~n~~p~%s~n~ ~n~use ~p~/clearaccent~w~ to remove your accent",accent[playerid]);
	TextDrawSetString(infotxt[playerid],str);
	TextDrawShowForPlayer(playerid,infotxt[playerid]);
	infotxt_expire[playerid] = 11;
	PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
	return 1;

}

COMMAND:clearaccent(playerid,params[])
{

    strdel(accent[playerid],0,strlen(accent[playerid]));
    SendClientMessage(playerid,COLOR_LIGHTRED,"Accent Cleared.");
    return 1;

}

COMMAND:aclothes(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
    {

        new tmpo[10][64];
        tmpo[0] = strtok(params,idx);
        if(!strlen(tmpo[0])) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /aclothes [object] [slot] [offsetX] [offsetY] [offsetZ] [offsetRX] [offsetRY] [offsetRZ] [bone] [size]"); return 1; }
        tmpo[1] = strtok(params,idx);
        tmpo[2] = strtok(params,idx);
        tmpo[3] = strtok(params,idx);
        tmpo[4] = strtok(params,idx);
        tmpo[5] = strtok(params,idx);
        tmpo[6] = strtok(params,idx);
        tmpo[7] = strtok(params,idx);
        tmpo[8] = strtok(params,idx);
        tmpo[9] = strtok(params,idx);
        new objecto = strval(tmpo[0]);
        new sloto = strval(tmpo[1]);
        new Float:oox = floatstr(tmpo[2]);
        new Float:ooy = floatstr(tmpo[3]);
        new Float:ooz = floatstr(tmpo[4]);
        new Float:oorx = floatstr(tmpo[5]);
        new Float:oory = floatstr(tmpo[6]);
        new Float:oorz = floatstr(tmpo[7]);
        new boneo = strval(tmpo[8]);
        new Float:size = floatstr(tmpo[9]);
        SetPlayerAttachedObject(playerid, sloto, objecto, boneo, oox, ooy, ooz, oorx, oory, oorz, size, size, size);
        SendClientMessage(playerid,COLOR_WHITE,"Created.");
		globaltmpo[playerid] = tmpo;
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a lead admin.");
        return 1;

    }

}

COMMAND:asaveclothes(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
    {

        new objecto = strval(globaltmpo[playerid][0]);
        new sloto = strval(globaltmpo[playerid][1]);
        new Float:oox = floatstr(globaltmpo[playerid][2]);
        new Float:ooy = floatstr(globaltmpo[playerid][3]);
        new Float:ooz = floatstr(globaltmpo[playerid][4]);
        new Float:oorx = floatstr(globaltmpo[playerid][5]);
        new Float:oory = floatstr(globaltmpo[playerid][6]);
        new Float:oorz = floatstr(globaltmpo[playerid][7]);
        new boneo = strval(globaltmpo[playerid][8]);
		new Float:size = floatstr(globaltmpo[playerid][9]);
        new fname[256];
        format(fname,sizeof(fname),"aobjects/%d.ini",objecto);
		if(!dini_Exists(fname)) { dini_Create(fname); } else { dini_Remove(fname); }
		dini_IntSet(fname,"slot",sloto);
		dini_IntSet(fname,"bone",boneo);
		dini_FloatSet(fname,"x",oox);
		dini_FloatSet(fname,"y",ooy);
		dini_FloatSet(fname,"z",ooz);
		dini_FloatSet(fname,"rx",oorx);
		dini_FloatSet(fname,"ry",oory);
		dini_FloatSet(fname,"rz",oorz);
		dini_FloatSet(fname,"size",size);
		if(!dini_Exists(fname)) { SendClientMessage(playerid,COLOR_LIGHTRED,"Skin Failed."); return 1; }
		SendClientMessage(playerid,COLOR_YELLOW,"Object Offset Saved.");
		return 1;

    }
    else
    {

		SendErrorMsg(playerid,"You are not a lead admin.");
		return 1;

	}

}

COMMAND:aclearclothes(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
	{

		for(new i = 0; i < 5; i ++)
		{

		    if(IsPlayerAttachedObjectSlotUsed(playerid,i))
		    {

			    RemovePlayerAttachedObject(playerid,i);

			}

		}
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a lead admin.");
        return 1;

    }

}

COMMAND:rentroom(playerid,params[])
{

    if(InHotel(playerid))
    {

        if(CharacterInfo[playerid][active_character[playerid]][cHotel] == 0)
        {

	        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 100)
	        {

	            ShowPlayerDialog(playerid,DIALOG_HOTEL,DIALOG_STYLE_MSGBOX,"Do you want to live here?","You are about to rent a hotel room for $100. The hotel requires a $100 deposit followed by\n$100 per payday. Are you sure you would like to rent a room?","Confirm","Cancel");
	            return 1;

	        }
	        else
	        {

				SendErrorMsg(playerid,"You do not have $100");
				return 1;

	        }

		}
		else
		{

			SendErrorMsg(playerid,"You already rent a hotel room.");
			return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a hotel.");
        return 1;

    }

}

COMMAND:cancelroom(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cHotel] > 0)
    {

        CharacterInfo[playerid][active_character[playerid]][cHotel] = 0;
        SendClientMessage(playerid,COLOR_GREEN,"You have cancelled your hotel room.");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not renting a hotel room.");
        return 1;

    }

}

COMMAND:clothes(playerid,params[])
{

	new tmp[64];
	new idx = 0;
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /clothes [action] [value(if required)]"); SendClientMessage(playerid,COLOR_YELLOW2,"Actions: list, equip, unequip, buy, position"); return 1;  }
	if(!HasCooldown(playerid,COOLDOWN_CLOTHES))
	{

	    if(strcmp(tmp,"unequip",true) == 0)
	    {

	        new tmp2[32];
	        tmp2 = strtok(params,idx);
			new slot = strval(tmp2);
			if(slot < 0 || slot > 999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid slot ID."); return 1; }
			new index = cl_FetchPlayerObjectSlotOffset(playerid,slot);
			if(index > -1)
			{

				cl_RemoveClothing(playerid,index,1);
				SendClientMessage(playerid,COLOR_GREEN,"Item un-equipped.");
				SetCooldown(playerid,COOLDOWN_CLOTHES,10);
				return 1;

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"This item is not equipped!");
			    return 1;

			}

	    }
	    if(strcmp(tmp,"position",true) == 0)
	    {

	        if(InClothesStore(playerid) || in_house[playerid] > -1)
	        {

	            cl_SetPlayerAmmending(playerid);
	            SetCooldown(playerid,COOLDOWN_CLOTHES,10);
	            return 1;

	        }
	        else
	        {

				SendErrorMsg(playerid,"You are not in a clothing store / house.");

	        }

	    }
	    if(strcmp(tmp,"buy",true) == 0)
	    {

			if(InClothesStore(playerid))
			{

	        	cl_PutPlayerInDressingRoom(playerid);
	        	SetCooldown(playerid,COOLDOWN_CLOTHES,10);
		        return 1;

		  	}
		  	else
		  	{

		  	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a clothes store!");
		  	    return 1;

		  	}

	    }
	    if(strcmp(tmp,"equip",true) == 0)
	    {

			new tmp2[64];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /clothes equip [slot] (/clothes list)"); return 1; }
			new slot = strval(tmp2);
			if(slot < 1 || slot > 999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid slot ID."); return 1; }
			new str[256];
			format(str,sizeof(str),"SELECT * FROM rp_clothing WHERE owner = '%d'",CharacterInfo[playerid][active_character[playerid]][cID]);
			mysql_query(str,player_threads[playerid],QUERY_EQUIPCLOTHING);
			cl_equipping[playerid] = slot;
	        return 1;

	    }
		if(strcmp(tmp,"list",true) == 0)
		{

		    new str[128];
		    format(str,sizeof(str),"SELECT * FROM rp_clothing WHERE owner = '%d'",CharacterInfo[playerid][active_character[playerid]][cID]);
			mysql_query(str,player_threads[playerid],QUERY_CHECKCLOTHES);
			return 1;

		}
		SetCooldown(playerid,COOLDOWN_CLOTHES,10);
		SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown Action");
		return 1;

	}
	else
	{

	    SendMsg(playerid,COLOR_LIGHTRED,"Please wait %d seconds before attempting to do a clothes command again.",GetCooldownLevel(playerid,COOLDOWN_CLOTHES));
	    return 1;

	}

}

COMMAND:dropdrink(playerid,params[])
{

    if(drinking[playerid] > 0)
    {

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        SendEmote(playerid,"drops their drink.");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not drinking");
        return 1;

    }

}

COMMAND:warnlicense(playerid,params[])
{

    if(IsLaw(playerid) && duty[playerid])
    {

		new idx = 0;
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /warnlicense [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp2);
		if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(CharacterInfo[other][active_character[other]][cCarLic])
		{
			if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
			{

				CharacterInfo[other][active_character[other]][cCarLicWarnings] ++;
				new name[MAX_PLAYER_NAME];
				GetCharacterName(other,name);
				new str[128];
				format(str,sizeof(str),"issues %s with a drivers license warning",name);
				SendEmote(playerid,str);
				if(CharacterInfo[other][active_character[other]][cCarLicWarnings] >= 6)
				{

				    CharacterInfo[other][active_character[other]][cCarLic] = 0;
				    SendClientMessage(other,COLOR_YELLOW,"Your license has reached 6 warnings! It has been automaticlly revoked.");
				    CharacterInfo[other][active_character[other]][cCarLicWarnings] = 0;

				}
				return 1;

			}
			else
			{

			    SendErrorMsg(playerid,"You are not near this player.");
			    return 1;

			}

		}
		else
		{

		    SendErrorMsg(playerid,"This player does not have a drivers license.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop or are not on duty.");
        return 1;

    }

}

COMMAND:interview(playerid,params[])
{

	if(IsNews(playerid))
	{

		new idx = 0;
	    new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /interview [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(interview[playerid] == -1 && interview[other] == -1)
		{

			interview_offer[other] = playerid;
			new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name); GetCharacterName(other,oname);
			new str[256];
			format(str,sizeof(str),"[Interview] %s has offered to do an interview with you. Use /acceptinterview to accept.",name);
			SendClientMessage(other,COLOR_FACTION,str);
			format(str,sizeof(str),"[Interview] You have offered to do an interview with %s. Wait to see if they accept.",oname);
			SendClientMessage(playerid,COLOR_FACTION,str);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"You or the other person is already in an interview.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not a news reporter.");
	    return 1;

	}

}

COMMAND:cancelinterview(playerid,params[])
{

    if(interview[playerid] > -1)
    {

        new str[256];
        new name[MAX_PLAYER_NAME];
        GetCharacterName(playerid,name);
        SendClientMessage(playerid,COLOR_FACTION,"[Interview] You have ended the interview.");
        format(str,sizeof(str),"[Interview] %s has ended the interview.",name);
        SendClientMessage(interview[playerid],COLOR_FACTION,str);
        interview[interview[playerid]] = -1;
        interview[playerid] = -1;
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in an interview.");
        return 1;

    }

}

COMMAND:acceptinterview(playerid,params[])
{

    if(interview_offer[playerid] > -1)
	{

	    new str[256];
	    new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
	    GetCharacterName(playerid,name); GetCharacterName(interview_offer[playerid],oname);
		format(str,sizeof(str),"[Interview] You have accepted %s's interview request.",oname);
		SendClientMessage(playerid,COLOR_FACTION,str);
		format(str,sizeof(str),"[Interview] %s has accepted your interview request.",name);
		SendClientMessage(interview_offer[playerid],COLOR_FACTION,str);
	    interview[playerid] = interview_offer[playerid];
	    interview[interview_offer[playerid]] = playerid;
	    interview_offer[playerid] = -1;
	    return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"No one has offered you an interview.");
	    return 1;

	}

}

COMMAND:toggle(playerid,params[])
{

	new idx = 0;
	new tmp[64];
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /toggle [news/ooc/phone/nascar/connection/derby/callerid/armor]"); return 1; }
	/*if(strcmp(tmp,"armor",true) == 0)
	{

	  	if(armor_display_tog[playerid] == 1)
	    {

	        armor_display_tog[playerid] = 0;
	        SendClientMessage(playerid,COLOR_GREEN,"You have disabled ARMOR");
	        if(armor_display_enabled[playerid])
	        {

	        	armor_display_enabled[playerid] = 0;
        		RemovePlayerAttachedObject(playerid, 9); // armour

	        }
	        return 1;

	    }
	    else
	    {

	        armor_display_tog[playerid] = 1;
	        SendClientMessage(playerid,COLOR_GREEN,"You have enabled ARMOR");
	        return 1;

	    }

	}*/
	if(strcmp(tmp,"callerid",true) == 0)
	{

	  	if(tog_callerid[playerid] == 1)
	    {

	        tog_callerid[playerid] = 0;
	        SendClientMessage(playerid,COLOR_GREEN,"You have disabled CALLERID");
	        return 1;

	    }
	    else
	    {

	        tog_callerid[playerid] = 1;
	        SendClientMessage(playerid,COLOR_GREEN,"You have enabled CALLERID");
	        return 1;

	    }

	}
	if(strcmp(tmp,"derby",true) == 0)
	{

	    if(tog_derby[playerid] == 1)
	    {

	        tog_derby[playerid] = 0;
	        SendClientMessage(playerid,COLOR_GREEN,"You have disabled DERBY news");
	        return 1;

	    }
	    else
	    {

	        tog_derby[playerid] = 1;
	        SendClientMessage(playerid,COLOR_GREEN,"You have enabled DERBY news");
	        return 1;

	    }

	}
	if(strcmp(tmp,"connection",true) == 0)
	{

	    if(tog_con[playerid] == 1)
	    {

	        tog_con[playerid] = 0;
	        SendClientMessage(playerid,COLOR_GREEN,"You have enabled connection messages");
	        return 1;

	    }
	    else
	    {

	        tog_con[playerid] = 1;
	        SendClientMessage(playerid,COLOR_GREEN,"You have disabled connection messages");
	        return 1;

	    }

	}
	if(strcmp(tmp,"nascar",true) == 0)
	{

	    if(tog_nascar[playerid] == 1)
	    {

	        tog_nascar[playerid] = 0;
	        SendClientMessage(playerid,COLOR_GREEN,"You have disabled NASCAR news");
	        return 1;

	    }
	    else
	    {

	        tog_nascar[playerid] = 1;
	        SendClientMessage(playerid,COLOR_GREEN,"You have enabled NASCAR news");
	        return 1;

	    }

	}
	if(strcmp(tmp,"phone",true) == 0)
	{

	    if(tog_phone[playerid] == 1)
	    {

	        tog_phone[playerid] = 0;
	        SendEmote(playerid,"turns their phone off.");
	        return 1;

	    }
	    else
	    {

	        tog_phone[playerid] = 1;
	        SendEmote(playerid,"turns their phone on.");
	        return 1;

	    }

	}
	if(strcmp(tmp,"ooc",true) == 0)
	{

	    if(tog_ooc[playerid] == 1)
	    {

	        tog_ooc[playerid] = 0;
	        SendClientMessage(playerid,COLOR_GREEN,"OOC Enabled.");
	        return 1;

	    }
	    else
	    {

	        tog_ooc[playerid] = 1;
	        SendClientMessage(playerid,COLOR_GREEN,"OOC Disabled.");
	        return 1;

	    }

	}
	if(strcmp(tmp,"news",true) == 0)
	{

	    if(tog_news[playerid] == 1)
	    {

	        tog_news[playerid] = 0;
	        SendClientMessage(playerid,COLOR_GREEN,"News Enabled.");
	        return 1;

	    }
	    else
	    {

	        tog_news[playerid] = 1;
	        SendClientMessage(playerid,COLOR_GREEN,"News Disabled.");
	        return 1;

	    }

	}
	return 1;

}

COMMAND:sleep(playerid,params[])
{

    if(in_house[playerid] > -1 || InHotel(playerid))
    {

		if(in_house[playerid] > -1)
		{

			if(IsHouseOwner(playerid,in_house[playerid]) || IsRentingHouse(playerid,in_house[playerid]))
			{

			    if(!sleeping[playerid])
			    {

					PutInSleep(playerid);
					TextDrawSetString(infotxt[playerid],"~p~Sleeping~n~ ~n~~w~You are now asleep. Your health will slowely~n~regenerate while sleeping. To stop sleeping press ~p~any key");
					TextDrawShowForPlayer(playerid,infotxt[playerid]);
					infotxt_expire[playerid] = 11;
					PlayerPlaySound(playerid,1149,0.0,0.0,0.0);
					return 1;

			    }
			    else
			    {

			        SendErrorMsg(playerid,"You are already sleeping.");
			        return 1;

			    }

			}
			else
			{

			    SendErrorMsg(playerid,"You are not renting or do not own this house.");
			    return 1;

			}

		}
		else if(InHotel(playerid))
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cHotel] == in_biz[playerid])
		    {

			    if(!sleeping[playerid])
			    {

					PutInSleep(playerid);
					TextDrawSetString(infotxt[playerid],"~p~Sleeping~n~ ~n~~w~You are now asleep. Your health will slowely~n~regenerate while sleeping. To stop sleeping press ~p~any key");
					TextDrawShowForPlayer(playerid,infotxt[playerid]);
					infotxt_expire[playerid] = 11;
					PlayerPlaySound(playerid,1149,0.0,0.0,0.0);
					return 1;

			    }
			    else
			    {

			        SendErrorMsg(playerid,"You are already sleeping.");
			        return 1;

			    }

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You are not renting from this hotel.");
		        return 1;

		    }

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a house / hotel.");
        return 1;

    }
    return 1;

}

COMMAND:tpvehiclehere(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

        new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /tpvehiclehere [vehicleid]"); return 1; }
		new veh = strval(tmp);
		if(veh < 0 || veh > MAX_VEHICLES) { SendErrorMsg(playerid,"Invalid Vehicle ID."); return 1; }
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid,X,Y,Z);
		SetVehiclePosEx(veh,X,(Y + 2.0),(Z + 2.0));
		SendClientMessage(playerid,COLOR_GREEN,"Vehicle Moved.");
		LinkVehicleToInterior(veh,GetPlayerVehicleID(playerid));
		SetVehicleVirtualWorld(veh,GetPlayerVirtualWorld(playerid));
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:entervehicle(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

        new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /entervehiclehere [vehicleid]"); return 1; }
		new veh = strval(tmp);
		if(veh < 0 || veh > MAX_VEHICLES) { SendErrorMsg(playerid,"Invalid Vehicle ID."); return 1; }
		PutPlayerInVehicle(playerid,veh,0);
		SendClientMessage(playerid,COLOR_GREEN,"Vehicle Entered.");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:dance(playerid,params[])
{

	new idx = 0;
    if(!IsPlayerInAnyVehicle(playerid))
    {
	    new tmp[64];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /dance [1-4]"); return 1; }
	    new dance = strval(tmp);
	    if(dance < 1 || dance > 4) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /dance [1-4]"); return 1; }
	    new current_action = GetPlayerSpecialAction(playerid);
		if(current_action != SPECIAL_ACTION_NONE && current_action != SPECIAL_ACTION_DANCE1 && current_action != SPECIAL_ACTION_DANCE2 && current_action != SPECIAL_ACTION_DANCE3 && current_action != SPECIAL_ACTION_DANCE4) { old_action[playerid] = current_action; }
		if(dance == 1)
		{

            dancing[playerid] = 1;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);

		}
		else if(dance == 2)
        {

            dancing[playerid] = 1;
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);

        }
        else if(dance == 3)
        {

            dancing[playerid] = 1;
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);

        }
        else if(dance == 4)
        {

            dancing[playerid] = 1;
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);

        }
	    GameTextForPlayer(playerid,"~y~Press ~p~~k~~PED_FIREWEAPON~ ~y~to stop",5000,5);
	    return 1;
    }
    else
    {

        SendErrorMsg(playerid,"You cannot do this while in a vehicle.");
        return 1;

    }


}

COMMAND:moveto(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

        new Float:tmp[3];
        tmp[0] = floatstr(strtok(params,idx));
        tmp[1] = floatstr(strtok(params,idx));
        tmp[2] = floatstr(strtok(params,idx));
        SetPlayerPos(playerid,tmp[0],tmp[1],tmp[2]);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:sb(playerid,params[])
{

	return cmd_seatbelt(playerid,params);

}

COMMAND:seatbelt(playerid,params[])
{

    if(IsPlayerInAnyVehicle(playerid))
    {

    	if(!IsABike(GetVehicleModel(GetPlayerVehicleID(playerid))))
	    {

			if(seatbelt[playerid])
			{

			    SendEmote(playerid,"un-fastens their seatbelt.");
				seatbelt[playerid] = 0;
				return 1;

			}
			else
			{

			    SendEmote(playerid,"fastens their seatbelt.");
			    seatbelt[playerid] = 1;
			    return 1;

			}

		}
	    else
	    {

	        SendErrorMsg(playerid,"Bikes do not have seatbelts!");
	        return 1;

	    }


    }
    else
    {

        SendErrorMsg(playerid,"You are not in a vehicle.");
        return 1;

    }

}

COMMAND:radio(playerid,params[])
{

	new idx = 0;
    if(!Audio_IsClientConnected(playerid)) { SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have the Audio Mod or are not connected. You can get the audio mod @ ucp.countrysidegaming.com"); return 1; }
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) { SendErrorMsg(playerid,"You are not in a vehicle or are not the driver."); return 1; }
	if(radio_cooldown[playerid] == 0)
	{

	    new tmp[64];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /radio [action] [value(if required)]");
	        SendClientMessage(playerid,COLOR_YELLOW2,"Actions: set, stop, volume");
			mysql_query("SELECT * FROM rp_radio_stations ORDER BY radioID",player_threads[playerid],QUERY_REQ_STATIONS);
			radio_cooldown[playerid] = 10;
			return 1;
		}
		else if(strcmp(tmp,"set",true) == 0)
		{

		    new tmp2[64];
		    tmp2 = strtok(params,idx);
		    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /radio set [station id (/radio)]"); return 1; }
		    new id = strval(tmp2);
		    if(id < 0 || id > 9999999999) { SendErrorMsg(playerid,"Invalid Radio ID"); return 1; }
			new str[256];
			format(str,sizeof(str),"SELECT * FROM rp_radio_stations WHERE radioID = '%d' LIMIT 1",id);
			mysql_query(str,player_threads[playerid],QUERY_SET_STATION);
			radio_cooldown[playerid] = 10;
			return 1;

		}
		else if(strcmp(tmp,"stop",true) == 0)
		{

		    Audio_Stop(playerid,radio_handle[playerid]);
		    SendClientMessage(playerid,COLOR_YELLOW2,"Radio Station Stopped.");
		    strdel(vehicle_radio[GetPlayerVehicleID(playerid)],0,strlen(vehicle_radio[GetPlayerVehicleID(playerid)]));
	       	SyncRadioPassengersOff(GetPlayerVehicleID(playerid));
	       	vehicle_radioid[GetPlayerVehicleID(playerid)] = 0;
	       	SendEmote(playerid,"turns the radio off.");
		    return 1;

		}
		else if(strcmp(tmp,"volume",true) == 0 || strcmp(tmp,"vol",true) == 0)
		{

		    new tmp2[64];
		    tmp2 = strtok(params,idx);
			new vol = strval(tmp2);
			if(vol < 1 || vol > 100) { SendErrorMsg(playerid,"Invalid volume"); return 1; }
			Audio_SetVolume(playerid,radio_handle[playerid],vol);
			radio_volume[playerid] = vol;
			new str[128];
			format(str,sizeof(str),"Radio volume set to %d",vol);
			SendClientMessage(playerid,COLOR_YELLOW2,str);
			vehicle_radio_volume[GetPlayerVehicleID(playerid)] = vol;
			SyncPlayerRadioVolume(GetPlayerVehicleID(playerid));
			SendEmote(playerid,"adjusts the radio volume.");
			return 1;

		}
		SendErrorMsg(playerid,"Action not found.");
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"Please wait 10 seconds between radio commands.");
	    return 1;

	}

}

COMMAND:localrespawn(playerid,params[])
{


    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        new Float:X, Float:Y, Float:Z;
        for(new i = 0; i < MAX_VEHICLES; i ++)
        {

            GetVehiclePos(i,X,Y,Z);
            if(IsPlayerInRangeOfPoint(playerid,60.0,X,Y,Z))
            {

				if(!IsAnyPlayerInVehicle(i))
				{

				    SetVehicleToRespawn(i);

				}

            }

        }
        new str[256];
        format(str,sizeof(str),"[AdminCmd] %s has respawned all vehicles near them.",AccountInfo[playerid][aName]);
        SendAdminBroadcast(str);
        SendClientMessage(playerid,COLOR_GREEN,"Nearby vehicle have been respawned.");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:respawnallcars(playerid,params[])
{


    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

        new Float:X, Float:Y, Float:Z;
        for(new i = 0; i < MAX_VEHICLES; i ++)
        {

            GetVehiclePos(i,X,Y,Z);
            if(IsPlayerInRangeOfPoint(playerid,60000000000.0,X,Y,Z))
            {

				if(!IsAnyPlayerInVehicle(i))
				{

				    SetVehicleToRespawn(i);

				}

            }

        }
        new str[256];
        format(str,sizeof(str),"[AdminCmd] %s has respawned all vehicles.",AccountInfo[playerid][aName]);
        SendAdminBroadcast(str);
        SendClientMessage(playerid,COLOR_GREEN,"Nearby vehicle have been respawned.");
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:viewcars(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /viewcars [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        new name[MAX_PLAYER_NAME];
        new str[128];
        new vname[64];
        GetCharacterName(other,name);
        format(str,sizeof(str),"|---------Vehicles For: %s----------|",name);
        SendClientMessage(playerid,COLOR_YELLOW2,str);
        new count = 1;
		for(new i = 0; i < MAX_RP_VEHICLES; i ++)
		{

			if(VehicleInfo[i][vOwner] == CharacterInfo[other][active_character[other]][cID])
			{

				GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
				new col = COLOR_YELLOW2;
				if(VehicleInfo[i][vDeathTime] == 0)
				{

					format(str,sizeof(str),"Slot #%d: Vehicle:[%s] Insurances:[%d] Mileage:[%d] Lock Level:[%d] Times Destroyed:[%d] ID:[%d]",count,vname,VehicleInfo[i][vInsurance],VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vVehicle]);

				}
				else
				{

				    col = COLOR_LIGHTRED;
				    new redeemstr[64];
				    if(VehicleInfo[i][vDeathTime] > 60) { format(redeemstr,sizeof(redeemstr),"%d mins",(VehicleInfo[i][vDeathTime] / 60)); } else { format(redeemstr,sizeof(redeemstr),"less than a minute!"); }
				    format(str,sizeof(str),"Slot #%d: Vehicle:[%s] Insurances:[%d] Mileage:[%d] Lock Level:[%d] Times Destroyed:[%d] Time To Redeem:[%s]",count,vname,VehicleInfo[i][vInsurance],VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],redeemstr);

				}
				count ++;
				SendClientMessage(playerid,col,str);

			}

		}
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:oldvehicle(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        new str[128];
        format(str,sizeof(str),"Old Vehicle: %d",old_vehicle[playerid]);
        SendClientMessage(playerid,COLOR_GREEN,str);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:charstats(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /charstats [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        new str[128];
        new name[MAX_PLAYER_NAME];
        GetCharacterName(other,name);
        format(str,sizeof(str),"|----------Stats for: %s----------|",name);
        SendClientMessage(playerid,COLOR_WHITE,str);
		format(str,sizeof(str),"CharID:[%d] Money:[$%d] Skin:[%d] SpawnX:[%f] SpawnY:[%f] SpawnZ:[%f] SpawnR:[%f]",
		CharacterInfo[other][active_character[other]][cID],
		CharacterInfo[other][active_character[other]][cMoney],
		CharacterInfo[other][active_character[other]][cSkin],
		CharacterInfo[other][active_character[other]][cSpawnX],
		CharacterInfo[other][active_character[other]][cSpawnY],
		CharacterInfo[other][active_character[other]][cSpawnZ],
		CharacterInfo[other][active_character[other]][cSpawnR]);
        SendClientMessage(playerid,COLOR_WHITE,str);
        format(str,sizeof(str),"Renting:[%d] Faction:[%d] Phone:[%d] Bank:[$%d] Job:[%d] Payday:[%d] FactionPems:[%d]",
		CharacterInfo[other][active_character[other]][cRenting],
		CharacterInfo[other][active_character[other]][cFaction],
		CharacterInfo[other][active_character[other]][cPhone],
		CharacterInfo[other][active_character[other]][cBank],
		CharacterInfo[other][active_character[other]][cJob],
		CharacterInfo[other][active_character[other]][cPayday],
		CharacterInfo[other][active_character[other]][cFactionPermissions]);
        SendClientMessage(playerid,COLOR_WHITE,str);
		format(str,sizeof(str),"Rank:[%s] JailTime:[%d] CarLic:[%d] WepLic:[%d] PayTime:[%d] Level:[%d] Exp:[%d] SpawnWorld:[%d]",
		CharacterInfo[other][active_character[other]][cRankName],
		CharacterInfo[other][active_character[other]][cJailTime],
		CharacterInfo[other][active_character[other]][cCarLic],
		CharacterInfo[other][active_character[other]][cWepLic],
		CharacterInfo[other][active_character[other]][cPayTime],
		CharacterInfo[other][active_character[other]][cLevel],
		CharacterInfo[other][active_character[other]][cExp],
		CharacterInfo[other][active_character[other]][cSpawnWorld]);
		SendClientMessage(playerid,COLOR_WHITE,str);
		format(str,sizeof(str),"RadioChan:[%d] JobCool:[%d] Addict:[%d] AddictLvl:[%d] Savings:[$%d] FlyLic:[%d]",
		CharacterInfo[other][active_character[other]][cRadioChannel],
		CharacterInfo[other][active_character[other]][cJobCooldown],
		CharacterInfo[other][active_character[other]][cAddiction],
		CharacterInfo[other][active_character[other]][cAddictionLevel],
		CharacterInfo[other][active_character[other]][cSavings],
		CharacterInfo[other][active_character[other]][cFlyLic]);
		SendClientMessage(playerid,COLOR_WHITE,str);
		format(str,sizeof(str),"DutySkin:[%d] Duplicate:[%d] Employed:[%d] Hotel:[%d] CarLicWarns:[%d]",
		CharacterInfo[other][active_character[other]][cDutySkin],
		CharacterInfo[other][active_character[other]][cDuplicate],
		CharacterInfo[other][active_character[other]][cEmployed],
		CharacterInfo[other][active_character[other]][cHotel],
		CharacterInfo[other][active_character[other]][cCarLicWarnings]);
		SendClientMessage(playerid,COLOR_WHITE,str);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }


}

COMMAND:editplayer(playerid,params[])
{

	new idx = 0;
   	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) {
			SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /editplayer [playerid/player name] [variable] [new value]");
			SendClientMessage(playerid,COLOR_LIGHTRED,"Actions: language, companyperms, company, deaths, carlicwarns, hotel, employed, duplicate");
			SendClientMessage(playerid,COLOR_LIGHTRED,"Actions: dutyskin, flylic, jobcool, paytime, weplic, carlic, jailtime, factionperms");
			SendClientMessage(playerid,COLOR_LIGHTRED,"Actions: payday, job, phone, faction, renting, money, level");
			return 1;
		}
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        new tmp2[64];
        tmp2 = strtok(params,idx);
        if(strcmp(tmp2,"language",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cLanguage] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
        	new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d language to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"companyperms",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cCompanyPerms] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d CompanyPerms to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"company",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cCompany] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d company to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"deaths",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cDeaths] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d deaths to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"carlicwarns",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cCarLicWarnings] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d carlicwarns to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
       	if(strcmp(tmp2,"hotel",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cHotel] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d hotel to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"employed",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cEmployed] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d employed to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
     	if(strcmp(tmp2,"duplicate",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cDuplicate] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d duplicate to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
       	if(strcmp(tmp2,"dutyskin",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cDutySkin] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d dutyskin to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"flylic",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cFlyLic] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
        	new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d flylic to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"jobcool",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cJobCooldown] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d jobcool to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"paytime",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cPayTime] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d paytime to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"weplic",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cWepLic] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d weplic to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"carlic",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cCarLic] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
        	new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d carlic to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"jailtime",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cJailTime] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d jailtime to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"factionperms",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cFactionPermissions] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
        	new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d factionperms to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"payday",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cPayday] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d payday to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"job",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cJob] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d job to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"phone",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cPhone] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
        	new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d phone to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"faction",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cFaction] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
        	new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d faction to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"renting",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cRenting] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
            new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d renting to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
        if(strcmp(tmp2,"money",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cMoney] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
        	new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d cash to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }
		if(strcmp(tmp2,"level",true) == 0)
        {

            new tmp3[64];
            tmp3 = strtok(params,idx);
            new val = strval(tmp3);
            CharacterInfo[other][active_character[other]][cLevel] = val;
            SendClientMessage(playerid,COLOR_GREEN,"Variable changed.");
        	new logstr[128];
			format(logstr,sizeof(logstr),"Changed character %d level to %d",CharacterInfo[other][active_character[other]][cID],val);
			logAdminEditAction(playerid,"PLAYER_EDIT",logstr);
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor");
        return 1;

    }
    return 0;

}

COMMAND:editvehicle(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		new idx = 0;
        if(!IsPlayerInAnyVehicle(playerid)) { SendErrorMsg(playerid,"You are not in a vehicle."); return 1; }
        new veh = GetPlayerVehicleID(playerid);
		new slot = GetVehicleSlot(veh);
		if(slot > -1)
		{

		    new tmp[64];
		    tmp = strtok(params,idx);
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /editvehicle [action] [value(if required)]");
				SendClientMessage(playerid,COLOR_LIGHTRED,"ACTIONS: color1, color2, owner, fuel, mileage, insurnace, lock, destroyed, faction, clearmods, repair, company");
				return 1;
			}
			if(strcmp(tmp,"company",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new owner = strval(tmp2);
				VehicleInfo[slot][vCompany] = owner;
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d company to %d",VehicleInfo[slot][vID],owner);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"repair",true) == 0)
			{

			    RepairVehicleEx(veh);
			    SendClientMessage(playerid,COLOR_GREEN,"Update made.");
			    return 1;

			}
			if(strcmp(tmp,"clearmods",true) == 0)
			{

				strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
				SetVehicleToRespawn(veh);
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Cleared vehicle %d mods",VehicleInfo[slot][vID]);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"faction",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new owner = strval(tmp2);
				VehicleInfo[slot][vFaction] = owner;
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d faction to %d",VehicleInfo[slot][vID],owner);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"destroyed",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new owner = strval(tmp2);
				VehicleInfo[slot][vDestroyed] = owner;
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d destroyed to %d",VehicleInfo[slot][vID],owner);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"lock",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new owner = strval(tmp2);
				VehicleInfo[slot][vLock] = owner;
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d lock to %d",VehicleInfo[slot][vID],owner);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"insurance",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new owner = strval(tmp2);
				VehicleInfo[slot][vInsurance] = owner;
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d insurance to %d",VehicleInfo[slot][vID],owner);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"mileage",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new owner = strval(tmp2);
				VehicleInfo[slot][vMileage] = owner;
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d mileage to %d",VehicleInfo[slot][vID],owner);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"fuel",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new owner = strval(tmp2);
				VehicleInfo[slot][vFuel] = owner;
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d fuel to %d",VehicleInfo[slot][vID],owner);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"owner",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new owner = strval(tmp2);
				VehicleInfo[slot][vOwner] = owner;
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d owner to %d",VehicleInfo[slot][vID],owner);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"color1",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new color = strval(tmp2);
			    if(color < 0 || color > 126) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Color ID cannot be below 0 or above 126"); return 1; }
				VehicleInfo[slot][vColor1] = color;
				ChangeVehicleColor(veh,color,VehicleInfo[slot][vColor2]);
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d color1 to %d",VehicleInfo[slot][vID],color);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			if(strcmp(tmp,"color2",true) == 0)
			{

			    new tmp2[64];
			    tmp2 = strtok(params,idx);
			    new color = strval(tmp2);
			    if(color < 0 || color > 126) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Color ID cannot be below 0 or above 126"); return 1; }
				VehicleInfo[slot][vColor2] = color;
				ChangeVehicleColor(veh,VehicleInfo[slot][vColor1],color);
				SendClientMessage(playerid,COLOR_GREEN,"Update made.");
				new logstr[128];
				format(logstr,sizeof(logstr),"Changed vehicle %d color2 to %d",VehicleInfo[slot][vID],color);
				logAdminEditAction(playerid,"VEHICLE_EDIT",logstr);
				return 1;

			}
			SendErrorMsg(playerid,"Action not found.");
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"This vehicle cannot be edited.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:setinterior(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        new tmp[64];
        tmp = strtok(params,idx);
		new other = -1;
        if(strlen(tmp))
        {

			other = ReturnUser(tmp);
			if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected"); return 1; }

        }
        else
        {

            other = playerid;

        }
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setinterior [playerid(optional)] [interiorid]"); return 1; }
		new interior = strval(tmp2);
		SetPlayerInterior(other,interior);
		SendClientMessage(playerid,COLOR_GREEN,"Interior set.");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:setworld(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        new tmp[64];
        tmp = strtok(params,idx);
		new other = -1;
        if(strlen(tmp))
        {

			other = ReturnUser(tmp);
			if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected"); return 1; }

        }
        else
        {

            other = playerid;

        }
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setworld [playerid(optional)] [worldid]"); return 1; }
		new interior = strval(tmp2);
		SetPlayerVirtualWorld(other,interior);
		SendClientMessage(playerid,COLOR_GREEN,"World set.");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:storeweapon(playerid,params[])
{

	new idx = 0;
    if(IsPlayerInAnyVehicle(playerid))
    {

		new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
		if(slot > -1)
		{

		    if(VehicleWeaponSlotsAvailable(slot))
		    {

		        new tmp[64];
		        tmp = strtok(params,idx);
		        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /storeweapon [weapon]"); SendClientMessage(playerid,COLOR_YELLOW2,"Weapons: bat, shovel, sdpistol, deagle, shotgun, combatshotgun, smg, ak47, m4, sniper"); return 1; }
		        if(strcmp(tmp,"rifle",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_RIFLE))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,6,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_RIFLE,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_RIFLE;
						vehicle_weapon_ammo[slot][weapon_slot] = wdata[1];
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a Rifle in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"sniper",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_SNIPER))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,6,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_SNIPER,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_SNIPER;
						vehicle_weapon_ammo[slot][weapon_slot] = wdata[1];
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a Sniper in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"m4",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_M4))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,5,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_M4,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_M4;
						vehicle_weapon_ammo[slot][weapon_slot] = wdata[1];
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a M4 in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"ak47",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_AK47))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,5,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_AK47,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_AK47;
						vehicle_weapon_ammo[slot][weapon_slot] = wdata[1];
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a AK47 in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		     	if(strcmp(tmp,"smg",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_MP5))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,4,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_MP5,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_MP5;
						vehicle_weapon_ammo[slot][weapon_slot] = wdata[1];
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a SMG in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"combatshotgun",true) == 0)
		        {

		            if(HasWeapon(playerid,27))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,3,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,27,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = 27;
						vehicle_weapon_ammo[slot][weapon_slot] = wdata[1];
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a combat combat shotgun in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"shotgun",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_SHOTGUN))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,3,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_SHOTGUN,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_SHOTGUN;
						vehicle_weapon_ammo[slot][weapon_slot] = wdata[1];
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a shotgun in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"deagle",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_DEAGLE))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,2,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_DEAGLE,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_DEAGLE;
						vehicle_weapon_ammo[slot][weapon_slot] = wdata[1];
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a deagle in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"sdpistol",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_SILENCED))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,2,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_SILENCED,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_SILENCED;
						vehicle_weapon_ammo[slot][weapon_slot] = wdata[1];
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a sdpistol in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"shovel",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_SHOVEL))
		            {

						SetPlayerAmmo(playerid,WEAPON_SHOVEL,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_SHOVEL;
						vehicle_weapon_ammo[slot][weapon_slot] = 1;
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a shovel in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have this weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"bat",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_BAT))
		            {

						SetPlayerAmmo(playerid,WEAPON_BAT,0);
						new weapon_slot = FetchNextVehicleWeaponSlot(slot);
						vehicle_weapons[slot][weapon_slot] = WEAPON_BAT;
						vehicle_weapon_ammo[slot][weapon_slot] = 1;
						new vname[64];
						GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
						new str[128];
						format(str,sizeof(str),"stores a bat in the %s",vname);
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have this weapon.");
		                return 1;

		            }

		        }

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You cannot put anymore weapons into this vehicle");
		        return 1;

		    }

		}
		else
		{

		    SendErrorMsg(playerid,"Weapons cannot be stored in this vehicle.");
		    return 1;

		}

    }
    else if(in_house[playerid] > -1)
    {

  		new slot = in_house[playerid];
		if(slot > -1)
		{

		    if(HouseWeaponSlotsAvailable(slot))
		    {

				new tmp[64];
		        tmp = strtok(params,idx);
		        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /storeweapon [weapon]"); SendClientMessage(playerid,COLOR_YELLOW2,"Weapons: bat, shovel, sdpistol, deagle, shotgun, combatshotgun, smg, ak47, m4, sniper"); return 1; }
		        if(strcmp(tmp,"sniper",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_SNIPER))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,6,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_SNIPER,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = WEAPON_SNIPER;
						house_weapon_ammo[slot][weapon_slot] = wdata[1];
						new str[128];
						format(str,sizeof(str),"stores a Sniper in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"m4",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_M4))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,5,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_M4,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = WEAPON_M4;
						house_weapon_ammo[slot][weapon_slot] = wdata[1];
						new str[128];
						format(str,sizeof(str),"stores a M4 in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"ak47",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_AK47))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,5,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_AK47,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = WEAPON_AK47;
						house_weapon_ammo[slot][weapon_slot] = wdata[1];
						new str[128];
						format(str,sizeof(str),"stores a AK47 in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		     	if(strcmp(tmp,"smg",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_MP5))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,4,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_MP5,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = WEAPON_MP5;
						house_weapon_ammo[slot][weapon_slot] = wdata[1];
						new str[128];
						format(str,sizeof(str),"stores a SMG in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"combatshotgun",true) == 0)
		        {

		            if(HasWeapon(playerid,27))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,3,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,27,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = 27;
						house_weapon_ammo[slot][weapon_slot] = wdata[1];
						new str[128];
						format(str,sizeof(str),"stores a combat combat shotgun in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"shotgun",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_SHOTGUN))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,3,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_SHOTGUN,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = WEAPON_SHOTGUN;
						house_weapon_ammo[slot][weapon_slot] = wdata[1];
						new str[128];
						format(str,sizeof(str),"stores a shotgun in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"deagle",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_DEAGLE))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,2,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_DEAGLE,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = WEAPON_DEAGLE;
						house_weapon_ammo[slot][weapon_slot] = wdata[1];
						new str[128];
						format(str,sizeof(str),"stores a deagle in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"sdpistol",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_SILENCED))
		            {

						new wdata[2];
						GetPlayerWeaponData(playerid,2,wdata[0],wdata[1]);
						SetPlayerAmmo(playerid,WEAPON_SILENCED,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = WEAPON_SILENCED;
						house_weapon_ammo[slot][weapon_slot] = wdata[1];
						new str[128];
						format(str,sizeof(str),"stores a sdpistol in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"shovel",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_SHOVEL))
		            {

						SetPlayerAmmo(playerid,WEAPON_SHOVEL,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = WEAPON_SHOVEL;
						house_weapon_ammo[slot][weapon_slot] = 1;
						new str[128];
						format(str,sizeof(str),"stores a shovel in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have this weapon.");
		                return 1;

		            }

		        }
		        if(strcmp(tmp,"bat",true) == 0)
		        {

		            if(HasWeapon(playerid,WEAPON_BAT))
		            {

						SetPlayerAmmo(playerid,WEAPON_BAT,0);
						new weapon_slot = FetchNextHouseWeaponSlot(slot);
						house_weapons[slot][weapon_slot] = WEAPON_BAT;
						house_weapon_ammo[slot][weapon_slot] = 1;
						new str[128];
						format(str,sizeof(str),"stores a bat in the house");
						SendEmote(playerid,str);
						return 1;

		            }
		            else
		            {

		                SendErrorMsg(playerid,"You do not have this weapon.");
		                return 1;

		            }

		        }

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You cannot put anymore weapons into this house");
		        return 1;

		    }

		}
		else
		{

		    SendErrorMsg(playerid,"Weapons cannot be stored in this house.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a vehicle/house.");
        return 1;

    }
    return 1;

}

COMMAND:takeweapon(playerid,params[])
{

	new idx = 0;
    if(IsPlayerInAnyVehicle(playerid))
    {

		new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
		if(slot > -1)
		{

			new tmp[32];
			tmp = strtok(params,idx);
			if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /takeweapon [weapon slot] (/vinventory)"); return 1; }
			new wslot = strval(tmp);
			if(wslot < 1 || wslot > MAX_VEH_WEAPONS) { SendErrorMsg(playerid,"Invalid weapon slot."); return 1; }
			wslot --;
			if(vehicle_weapons[slot][wslot] == 0 || vehicle_weapon_ammo[slot][wslot] == 0) { SendErrorMsg(playerid,"There is nothing in this slot."); return 1; }
			new wname[64];
			GetWeaponName(vehicle_weapons[slot][wslot],wname,sizeof(wname));
			GivePlayerWeaponEx(playerid,vehicle_weapons[slot][wslot],vehicle_weapon_ammo[slot][wslot]);
			vehicle_weapons[slot][wslot] = 0;
			vehicle_weapon_ammo[slot][wslot] = 0;
			new str[128];
			new vname[64];
			GetVehicleNameByModel(GetVehicleModel(GetPlayerVehicleID(playerid)),vname);
			format(str,sizeof(str),"takes a %s from the %s",wname,vname);
			SendEmote(playerid,str);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"Items cannot be stored in this vehicle.");
		    return 1;

		}

    }
    else if(in_house[playerid] > -1)
    {

		new slot = in_house[playerid];
        if(slot > -1)
		{

			new tmp[32];
			tmp = strtok(params,idx);
			if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /takeweapon [weapon slot] (/vinventory or /hinventory)"); return 1; }
			new wslot = strval(tmp);
			if(wslot < 1 || wslot > MAX_HOUSE_WEAPONS) { SendErrorMsg(playerid,"Invalid weapon slot."); return 1; }
			wslot --;
			if(house_weapons[slot][wslot] == 0 || house_weapon_ammo[slot][wslot] == 0) { SendErrorMsg(playerid,"There is nothing in this slot."); return 1; }
			new wname[64];
			GetWeaponName(house_weapons[slot][wslot],wname,sizeof(wname));
			GivePlayerWeaponEx(playerid,house_weapons[slot][wslot],house_weapon_ammo[slot][wslot]);
			house_weapons[slot][wslot] = 0;
			house_weapon_ammo[slot][wslot] = 0;
			new str[128];
			format(str,sizeof(str),"takes a %s from the house",wname);
			SendEmote(playerid,str);
			return 1;

		}
		else
		{

		    SendErrorMsg(playerid,"Items cannot be stored in this house.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a vehicle/house");
        return 1;

    }

}

COMMAND:carvars(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        if(!IsPlayerInAnyVehicle(playerid)) { SendErrorMsg(playerid,"You are not in a vehicle."); return 1; }
        new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
        if(slot > -1)
        {
	        new str[128];
	        new engineon = (IsEngineOn(GetPlayerVehicleID(playerid))) ? 1 :0;
	        SendClientMessage(playerid,COLOR_WHITE,"|---------Vehicle Stats----------|");
	        format(str,sizeof(str),"VID:[%d] Model:[%d] Color1:[%d] Color2:[%d] Owner:[%d] ID:[%d]",
	        VehicleInfo[slot][vID],
	        VehicleInfo[slot][vModel],
	        VehicleInfo[slot][vColor1],
	        VehicleInfo[slot][vColor2],
	        VehicleInfo[slot][vOwner],
	        VehicleInfo[slot][vVehicle]);
	        SendClientMessage(playerid,COLOR_WHITE,str);
	        format(str,sizeof(str),"Fuel:[%d] Mileage:[%d] Insurance:[%d] Lock:[%d] Locked:[%d] Destroyed:[%d]",
	        VehicleInfo[slot][vFuel],
	        VehicleInfo[slot][vMileage],
	        VehicleInfo[slot][vInsurance],
	        VehicleInfo[slot][vLock],
	        VehicleInfo[slot][vLocked],
	        VehicleInfo[slot][vDestroyed]);
	        SendClientMessage(playerid,COLOR_WHITE,str);
	        format(str,sizeof(str),"Faction:[%d] OwnerName:[%s] Plate:[%s] Paintjob:[%d] Company:[%d] Engine:[%d]",
	        VehicleInfo[slot][vFaction],
	        VehicleInfo[slot][vOwnerName],
	        VehicleInfo[slot][vPlate],
	        VehicleInfo[slot][vPaintjob],
			VehicleInfo[slot][vCompany],
			engineon);
	        SendClientMessage(playerid,COLOR_WHITE,str);
			return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"This cannot be done on this vehicle.");
		    return 1;

		}

	}
	else
	{

	    SendErrorMsg(playerid,"You are not an admin.");
	    return 1;

	}

}

COMMAND:announce(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		new result[256];
		FetchParamText(result,params,idx);
        if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /announce [announce text]"); return 1; }
        result = str_replace("~"," ",result);
        if(strlen(result) > 64) { strins(result,"~n~",64); }
        TextDrawSetString(announcetxt,result);
        TextDrawShowForAll(announcetxt);
        announcetxt_expire = 15;
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not admin.");
        return 1;

    }

}

COMMAND:agive(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
	{

        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /agive [playerid/player name] [item] [amount]"); return 1; }
        new tmp2[64];
        tmp2 = strtok(params,idx);
        if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /agive [playerid/player name] [item] [amount]"); return 1; }
        new tmp3[64];
        tmp3 = strtok(params,idx);
        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /agive [playerid/player name] [item] [amount]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnected(other)) { SendErrorMsg(playerid,"This player is not connected."); return 1; }
        GiveItem(INVENTORY_TYPE_PLAYER,other,strval(tmp2),strval(tmp3));
        SendClientMessage(playerid,COLOR_GREEN,"Item Given.");
        return 1;

    }
    else
	{

	    SendErrorMsg(playerid,"You are not a supervisor.");
	    return 1;

	}

}

COMMAND:setbadge(playerid,params[])
{

	new idx = 0;
    if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_SUPER || CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD)
    {

        if(IsGov(playerid) || IsLaw(playerid) || IsMedic(playerid))
        {

	        new tmp[64];
	        tmp = strtok(params,idx);
	        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setbadge [playerid/player name] [badge number]"); return 1; }
	        new other = ReturnUser(tmp);
	        if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
			new tmp2[64];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setbadge [playerid/player name] [badge number]"); return 1; }
			new badge = strval(tmp2);
			if(badge < 1 || badge > 99999999) { SendErrorMsg(playerid,"Invalid badge number"); return 1; }
			new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME], str[128];
			GetCharacterName(playerid,name); GetCharacterName(other,oname);
			format(str,sizeof(str),"%s has set your badge number to %d",name,badge);
			SendClientMessage(other,COLOR_FACTION,str);
			format(str,sizeof(str),"You have set %s's badge number to %d",oname,badge);
			SendClientMessage(playerid,COLOR_FACTION,str);
			CharacterInfo[other][active_character[other]][cBadge] = badge;
			return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not a medic/cop/gov");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You do not have permission to do this.");
        return 1;

    }

}

COMMAND:cancelpizza(playerid,params[])
{

    if(pizza_mission[playerid] > -1)
    {

        SendClientMessage(playerid,COLOR_GREEN,"Pizza Mission Cancelled.");
		pizza_mission[playerid] = -1;
		pizza_mission_time[playerid] = 0;
		pizza_mission_distance[playerid] = 0.0;
		pizza_mission_num[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a pizza mission.");
        return 1;

    }

}

COMMAND:directory(playerid,params[])
{

    SendClientMessage(playerid,COLOR_WHITE,"Directory:");
    SendClientMessage(playerid,COLOR_WHITE,"{808080}Mechanic: {FFFFFF}555");
    SendClientMessage(playerid,COLOR_WHITE,"{808080}Taxi: {FFFFFF}123");
    SendClientMessage(playerid,COLOR_WHITE,"{808080}SAN: {FFFFFF}726");
    SendClientMessage(playerid,COLOR_WHITE,"{808080}LSPD: {FFFFFF}119");
    SendClientMessage(playerid,COLOR_LIGHTRED,"Emergency: 911");
    return 1;

}

COMMAND:playsound(playerid,params[])
{

	new idx = 0;
    new tmp[32];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /playsound [soundid]"); return 1; }
    if(AccountInfo[playerid][aAdmin] >= 1)
    {

        new sound = strval(tmp);
        PlayerPlaySound(playerid,sound,0.0,0.0,0.0);
        SendClientMessage(playerid,COLOR_GREEN,"Sound Playing");
        return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin");
        return 1;

    }

}

COMMAND:chop(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cChopCooldown] == 0)
    {

        if(IsPlayerInAnyVehicle(playerid))
        {

			new veh = GetPlayerVehicleID(playerid);
			new slot = GetVehicleSlot(veh);
			if(slot > -1)
			{
				if(VehicleInfo[slot][vOwner] > 0 && VehicleInfo[slot][vFaction] == 0)
				{

				    if(CharacterInfo[playerid][active_character[playerid]][cID] != VehicleInfo[slot][vOwner])
				    {

						if(IsPlayerInRangeOfPoint(playerid,12.5,2310.1265,-74.9731,26.1919))
						{

							if(!IsPlane(GetVehicleModel(GetPlayerVehicleID(playerid))) && !IsHeli(GetVehicleModel(GetPlayerVehicleID(playerid))))
							{

							    if(seatbelt[playerid]) seatbelt[playerid] = 0;
								TogglePlayerControllable(playerid,0);
								SetPlayerProgressBar(playerid,PROGRESS_BAR_CHOP,30);
								SendClientMessage(playerid,COLOR_YELLOW2,"Chopping vehicle, please wait...");
								return 1;

							}
							else
							{

							    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot chop planes and helicopters.");
							    return 1;

							}

						}
						else
						{

						    SendErrorMsg(playerid,"You are not at a chop shop");
						    return 1;

						}

					}
					else
					{

					    SendErrorMsg(playerid,"You cannot chop your own vehicle!");
					    return 1;

					}

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"That vehicle cannot be sold here. (faction vehicle/un-owned vehicle)");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"This vehicle cannot be chopped");
			    return 1;

			}

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a vehicle!");
            return 1;

        }

    }
    else
    {

		new str[128];
		new timeleft = (CharacterInfo[playerid][active_character[playerid]][cChopCooldown] / 60);
		if(timeleft > 0)
		{

			format(str,sizeof(str),"You cannot chop another vehicle for %d minute(s)",timeleft);

		}
		else
		{

			format(str,sizeof(str),"You cannot chop another vehicle for %d second(s)",CharacterInfo[playerid][active_character[playerid]][cChopCooldown]);

		}
        SendErrorMsg(playerid,str);
        return 1;

    }

}

COMMAND:startpizza(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_PIZZA)
    {

        if(IsPlayerInRangeOfPoint(playerid,20.0,2321.5996,72.1651,26.4802))
        {

            if(pizza_mission[playerid] == -1)
            {

				if(IsInPizzaBoy(playerid))
				{

					new str[256];
					format(str,sizeof(str),"~p~Pizza Boy~n~ ~n~~w~Move to all the checkpoints as fast as you can~n~The faster you deliver the pizza, the more money you make!");
					TextDrawSetString(infotxt[playerid],str);
					TextDrawShowForPlayer(playerid,infotxt[playerid]);
					infotxt_expire[playerid] = 11;
					SendPizzaMission(playerid);
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a pizza boy");
				    return 1;

				}

            }
            else
            {

                SendClientMessage(playerid,COLOR_LIGHTRED,"You are already in a pizza mission, use /cancelpizza to stop.");
                return 1;

            }

        }
        else
        {

            SendErrorMsg(playerid,"You are not at the Pizza Stack");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a pizza boy");
        return 1;

    }

}

COMMAND:re(playerid,params[])
{

	return cmd_reply(playerid,params);

}

COMMAND:reply(playerid,params[])
{

	new idx = 0;
	new result[256];
	FetchParamText(result,params,idx);
	if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /(re)ply [message]"); return 1; }
	if(!IsPlayerConnectedEx(reply_to[playerid])) { SendClientMessage(playerid,COLOR_LIGHTRED,"Player no longer connected"); return 1; }
	new other = reply_to[playerid];
	if(!block_pm[other] || AccountInfo[playerid][aAdmin] > 0)
	{
		new name[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		new name2[MAX_PLAYER_NAME];
		GetCharacterName(other,name2);
		new str[256];
		format(str,sizeof(str),"[PM] To: %s(%d): %s",name2,other,result);
		SendClientMessageA(playerid,COLOR_YELLOW2,str);
		format(str,sizeof(str),"[PM] From: %s(%d): %s",name,playerid,result);
		SendClientMessageA(other,COLOR_YELLOW2,str);
		LogPM(name,name2,result,playerid);
		if(reply_to[other] != playerid) { SendClientMessage(other,COLOR_YELLOW2,"use /(re)ply [message] to quick-reply to this PM."); }
		reply_to[other] = playerid;
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"This person has blocked PMs.");
	    return 1;

	}

}

COMMAND:badge(playerid,params[])
{

	new idx = 0;
	if(IsGov(playerid) || IsLaw(playerid) || IsMedic(playerid))
   	{

   	    new tmp[64];
   	    tmp = strtok(params,idx);
   	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /badge [playerid/player name]"); return 1; }
   	    new other = ReturnUser(tmp);
   	    if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
   	    if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
   	    {

			new str[128];
			new name[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			format(str,sizeof(str),"|----------%s's badge----------|",name);
			SendClientMessage(other,COLOR_PURPLE,str);
			format(str,sizeof(str),"{808080}Name: {FFFFFF}%s",name);
			SendClientMessage(other,COLOR_WHITE,str);
			format(str,sizeof(str),"{808080}Agency: {FFFFFF}%s",FactionInfo[GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction])][fName]);
			SendClientMessage(other,COLOR_WHITE,str);
			format(str,sizeof(str),"{808080}Rank: {FFFFFF}%s",CharacterInfo[playerid][active_character[playerid]][cRankName]);
			SendClientMessage(other,COLOR_WHITE,str);
			format(str,sizeof(str),"{808080}Badge Number: {FFFFFF}%d",CharacterInfo[playerid][active_character[playerid]][cBadge]);
			SendClientMessage(other,COLOR_WHITE,str);
			GetCharacterName(other,name);
			format(str,sizeof(str),"shows their badge to %s",name);
			SendEmote(playerid,str);
			return 1;

   	    }
   	    else
   	    {

   	        SendErrorMsg(playerid,"You are not near this player.");
   	        return 1;

   	    }

   	}
   	else
   	{

   	    SendErrorMsg(playerid,"You are not a medic/cop/gov");
   	    return 1;

   	}

}

COMMAND:cheque(playerid,params[])
{

	new idx = 0;
	new tmp[32];
	tmp = strtok(params,idx);
	if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /cheque [action] [value(if required)]"); SendClientMessage(playerid,COLOR_YELLOW2,"Actions: list, write, cash"); return 1; }
	if(strcmp(tmp,"list",true) == 0)
	{

		new str[256];
		format(str,sizeof(str),"SELECT * FROM rp_cheques WHERE reciever = '%d' ORDER BY id ASC",CharacterInfo[playerid][active_character[playerid]][cID]);
		mysql_query(str,player_threads[playerid],QUERY_VIEW_CHEQUES);
		return 1;

	}
	if(strcmp(tmp,"cash",true) == 0)
	{

	    if(IsInBank(playerid))
	    {

		    new tmp2[32];
			tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /cheque cash [cheque ID (/cheque list)]"); return 1; }
			new id = strval(tmp2);
			if(id < 1) { SendClientMessage(playerid,COLOR_LIGHTRED,"Cheque ID cannot be below 1"); return 1; }
			CashCheque(playerid,id);
			return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a bank.");
		    return 1;

		}

	}
	if(strcmp(tmp,"write",true) == 0)
	{

		new tmp2[32];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /cheque write [playerid/player name] [amount]"); return 1; }
		new other = ReturnUser(tmp2);
		new tmp3[32];
		tmp3 = strtok(params,idx);
		if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /cheque write [playerid/player name] [amount]"); return 1; }
		new amount = strval(tmp3);
		if(amount < 1000 || amount > 100000000) { SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 1000 or above 100000000"); return 1; }
		if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
		{

			if(other != playerid)
			{

				GiveCheque(playerid,other,amount);
				return 1;

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot write yourself a cheque.");
			    return 1;

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near this player.");
			return 1;

		}

	}
	return 1;

}

COMMAND:setdrunk(playerid,params[])
{

	new idx = 0;
    new tmp[32];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setdrunk [playerid/player name] [drunk level]"); return 1; }
    new other = ReturnUser(tmp);
    if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
    new tmp2[32];
    tmp2 = strtok(params,idx);
    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setdrunk [playerid/player name] [drunk level]"); return 1; }
    new amount = strval(tmp2);
    if(amount < 0 || amount > 50000) { SendClientMessage(playerid,COLOR_LIGHTRED,"Level cannot be below 0 or above 50000"); return 1; }
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        if(AccountInfo[other][aAdmin] <= AccountInfo[playerid][aAdmin])
        {

	        SetPlayerDrunkLevel(other,amount);
	        SendClientMessage(playerid,COLOR_GREEN,"Drunk Level Set");
	        return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot do this to higher level admins.");
		    return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
        return 1;

    }

}

COMMAND:setarmor(playerid,params[])
{

	new idx = 0;
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

	    new tmp[32];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setarmor [playerid/player name] [drunk level]"); return 1; }
	    new other = ReturnUser(tmp);
	    if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
	    new tmp2[32];
	    tmp2 = strtok(params,idx);
	    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /setarmor [playerid/player name] [drunk level]"); return 1; }
	    new amount = strval(tmp2);
	    if(amount < 0) { SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 0"); return 1; }
	    SetPlayerArmour(other,amount);
	    SendClientMessage(playerid,COLOR_GREEN,"Armor set.");
	    return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:dice(playerid,params[])
{

    if(dice[playerid])
    {

        new result = (random(5) + 1);
        new str[128];
        format(str,sizeof(str),"rolls a dice... It lands on %d",result);
        SendEmote(playerid,str);
        return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You do not have a dice.");
        return 1;

    }

}

COMMAND:bet(playerid,params[])
{

    if(IsInBettingShop(playerid))
    {

		ShowRace(playerid);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a betting shop.");
        return 1;

    }

}

COMMAND:cancelbet(playerid,params[])
{

    if(racing_sys_writing[playerid] > -1)
    {

        racing_sys_writing[playerid] = -1;
        TogglePlayerControllable(playerid,1);
        PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
        SendClientMessage(playerid,COLOR_YELLOW,"Bet Cancelled.");
        return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not placing a bet.");
        return 1;

    }

}

COMMAND:impound(playerid,params[])
{

    if(IsLaw(playerid) && duty[playerid])
    {

        if(IsPlayerInAnyVehicle(playerid))
        {

            new veh = GetPlayerVehicleID(playerid);
            new slot = GetVehicleSlot(veh);
            if(slot > -1)
            {

                if(VehicleInfo[slot][vFaction] == 0 && VehicleInfo[slot][vOwner] > 0)
                {

                    if(IsPlayerInRangeOfPoint(playerid,25.0,-491.3537,-565.5520,24.5645))
                    {

						ImpoundVehicle(playerid,veh);
						return 1;

					}
					else
					{

					    SendErrorMsg(playerid,"You are not at the impound lot.");
					    return 1;

					}

                }
                else
                {

                    SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle cannot be impounded (facion/un-owned)");
                    return 1;

                }

            }
            else
            {

                SendErrorMsg(playerid,"This vehicle cannot be impounded.");
                return 1;

            }

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a vehicle.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop or are not on duty.");
        return 1;

    }

}

COMMAND:unimpound(playerid,params[])
{

	if(IsPlayerInRangeOfPoint(playerid,7.5,-491.3537,-565.5520,24.5645))
	{

		new idx = 0;
	    new tmp[32];
	    tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /unimpound [vehicle # (/v list)]"); return 1; }
		new slot = strval(tmp);
		if(slot < 1) { SendClientMessage(playerid,COLOR_LIGHTRED,"Slot cannot be below 1"); return 1; }
		UnimpoundVehicle(playerid,slot);
	    return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not at the impound lot.");
	    return 1;

	}

}

COMMAND:knock(playerid,params[])
{

	new house = GetClosestHouse(playerid);
	if(house > -1 && in_house[playerid] == -1)
	{

		SendServerEmote("**KNOCK** **KNOCK** Someone is knocking at the door.", HouseInfo[house][hInteriorX], HouseInfo[house][hInteriorY], HouseInfo[house][hInteriorZ], 30.0, house);
		SendEmote(playerid,"knocks on the door.");
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a house door.");
	    return 1;

	}

}

COMMAND:drivethru(playerid,params[])
{

    if(IsAtDriveThru(playerid) > -1)
    {

        if(IsPlayerInAnyVehicle(playerid))
        {

			new str[256];
			format(str,sizeof(str),"Small Meal [$5]\nMedium Meal [$10]\nLarge Meal [$15]\nSuper Sized Meal [$25]");
			ShowPlayerDialog(playerid,DIALOG_FOOD,DIALOG_STYLE_LIST,"Choose your meal...",str,"Confirm","Cancel");
			return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a vehicle.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not at a drive-thru");
        return 1;

    }

}

COMMAND:insurance(playerid,params[])
{

	new idx = 0;
    new tmp[32];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /insurance [insurance type]"); SendClientMessage(playerid,COLOR_YELLOW2,"Types: health"); return 1; }
    if(strcmp(tmp,"health",true) == 0)
    {

     	if(IsPlayerInRangeOfPoint(playerid,75.0,1139.8163,-2530.5461,1113.8143))
        {

            if(!CharacterInfo[playerid][active_character[playerid]][cHealthInsurance])
            {

                new deaths = CharacterInfo[playerid][active_character[playerid]][cDeaths];
				new price = (HP_INSURANCE_BASEPRICE * (deaths + 1));
				if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
				{

					new str[256];
					format(str,sizeof(str),"You are about to purchase health insurance for\n\n$%d\n\n on death you will not need to pay funeral bills.\n Your health insurance will be void the next time you die. Health insurance increases in price upon death.\n Are you sure you wish to continue?",price);
					ShowPlayerDialog(playerid,DIALOG_CONFIRMHP,DIALOG_STYLE_MSGBOX,"Are you sure you want health insurance?",str,"Yes","No");
					TogglePlayerControllable(playerid,0);
					return 1;

				}
				else
				{

				    new str[128];
				    format(str,sizeof(str),"You do not have $%d to purchase health insurance.",price);
				    SendClientMessage(playerid,COLOR_LIGHTRED,str);
				    return 1;

				}

            }
            else
            {

                SendClientMessage(playerid,COLOR_LIGHTRED,"You already have health insurance!");
                return 1;

            }

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"You must be inside the hospital to purchase health insurance.");
            return 1;

        }

    }
    SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown action");
    return 1;

}

COMMAND:startsweep(playerid,params[])
{

	if(InSweeper(playerid) && CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_SWEEPER)
	{

	    if(IsPlayerInRangeOfPoint(playerid,30.0,1324.5885,287.9557,20.0452))
	    {

	        if(sweeper_sys_run[playerid] == -1)
	        {

	    		OnPlayerStartSweeper(playerid);
			    return 1;

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You are already on a sweeper mission.");
			    return 1;

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at the depo.");
		    return 1;

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a Sweeper.");
	    return 1;

	}

}

COMMAND:cancelsweep(playerid,params[])
{

    if(sweeper_sys_run[playerid] > -1)
    {

        sweeper_sys_run[playerid] = -1;
        sweeper_sys_stage[playerid] = 0;
        DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid,COLOR_GREEN,"Sweeping run cancelled.");
        return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not on a sweeper run.");
        return 1;

    }

}

COMMAND:evict(playerid,params[])
{

	new idx = 0;
	if(tenant_cooldown[playerid] == 0)
	{

	    new tmp[32];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /evict [tenant # (view tenants in /house)]"); return 1; }
	    new tid = strval(tmp);
	    if(tid < 1 || tid > 100000) { SendClientMessage(playerid,COLOR_LIGHTRED,"Tenant ID cannot be below 1"); return 1; }
	    new house = GetClosestHouse(playerid);
		if(house > -1)
		{

		    if(IsHouseOwner(playerid,house))
		    {

				evicting_tenant[playerid] = tid;
				new str[256];
				format(str,sizeof(str),"SELECT id,name FROM rp_characters WHERE renting = '%d' ORDER BY id DESC",HouseInfo[house][hID]);
				mysql_query(str,player_threads[playerid],QUERY_EVICT);
				tenant_cooldown[playerid] = 10;
				return 1;

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You do not own this house.");
		        return 1;

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near your house.");
		    return 1;

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"Please wait 10 seconds before attempting to evict a tenant.");
	    return 1;

	}

}

COMMAND:fix(playerid,params[])
{

	if(toolkit[playerid])
 	{

		if(IsPlayerInAnyVehicle(playerid))
		{

		    new Float:hp;
		    new veh = GetPlayerVehicleID(playerid);
		    GetVehicleHealth(veh,hp);
		    if(hp < 500)
		    {

		       	SetPlayerProgressBar(playerid,PROGRESS_BAR_FIX,30);
				new vname[MAX_PLAYER_NAME];
				GetVehicleNameByModel(GetVehicleModel(veh),vname);
				new str[128];
				format(str,sizeof(str),"begins repairing the %s",vname);
				SendEmote(playerid,str);
				TogglePlayerControllable(playerid,0);
				SetProgressBarValue(progress_bar[playerid],0.0);
				ShowProgressBarForPlayer(playerid,progress_bar[playerid]);
				return 1;

		    }
		    else
		    {

		        SendErrorMsg(playerid,"This vehicle does not need to be repaired.");
		        return 1;

		    }

		}
		else
		{

		    SendErrorMsg(playerid,"You are not in a vehicle.");
		    return 1;

		}

 	}
 	else
 	{

 	    SendErrorMsg(playerid,"You do not have a toolkit.");
 	    return 1;

 	}

}

COMMAND:coin(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 1)
	{

	    new result = random(100);
		new str[128];
	    if(result < 50) { format(str,sizeof(str),"flips a coin, it lands on heads"); }
	    else { format(str,sizeof(str),"flips a coin, it lands on tails"); }
	    SendEmote(playerid,str);
	    return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have any money.");
	    return 1;

	}

}

COMMAND:apb(playerid,params[])
{

	new idx = 0;
    if((IsLaw(playerid) && duty[playerid]))
    {

        if(InCopCar(playerid) || (IsPlayerInRangeOfPoint(playerid,50.0,246.6959,118.3634,1003.2188) && duty[playerid]))
        {

            new tmp[32];
            tmp = strtok(params,idx);
            if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /apb [action] [value(if required)]"); SendClientMessage(playerid,COLOR_YELLOW2,"Actions: create, delete, list, read"); return 1; }
			if(strcmp(tmp,"list",true) == 0)
			{

				mysql_query("SELECT id,suspect FROM rp_apb WHERE truncated = 0 ORDER BY id DESC LIMIT 20",player_threads[playerid],QUERY_APB);
				return 1;

			}
			if(strcmp(tmp,"read",true) == 0)
			{

				new tmp2[32];
				tmp2 = strtok(params,idx);
				if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /apb read [apb #(/apb list)]"); return 1; }
				new apb = strval(tmp2);
				if(apb < 1 || apb > 99999999) { SendClientMessage(playerid,COLOR_LIGHTRED,"APB # cannot be below 1"); return 1; }
				new str[256];
				format(str,sizeof(str),"SELECT * FROM rp_apb WHERE id = '%d' AND truncated = 0 LIMIT 1",apb);
				mysql_query(str,player_threads[playerid],QUERY_APB_READ);
				return 1;

			}
			if(strcmp(tmp,"create",true) == 0)
			{

				new result[256];
				FetchParamText(result,params,idx);
				if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /apb create [suspect/vehicle] || [crime]"); return 1; }
				ProcessAPB(playerid,result);
				return 1;

			}
			if(strcmp(tmp,"delete",true) == 0)
			{

				new tmp2[32];
				tmp2 = strtok(params,idx);
				if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /apb delete [apb #]"); return 1; }
				new apb = strval(tmp2);
				if(apb < 1 || apb > 9999999999) { SendClientMessage(playerid,COLOR_LIGHTRED,"APB # cannot be below 1"); return 1; }
				new str[256];
				format(str,sizeof(str),"UPDATE rp_apb SET truncated = 1 WHERE id = '%d'",apb);
				mysql_query(str,player_threads[playerid]);
				SendClientMessage(playerid,COLOR_LIGHTRED,"APB Removed.");
				return 1;

			}
			SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown Action.");
			return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a cop car/PD building");
            return 1;

        }

    }
    else
    {

		SendErrorMsg(playerid,"You are not a cop or are not on duty");
		return 1;

    }

}

COMMAND:trace(playerid,params[])
{

	new idx = 0;
    if(IsLaw(playerid) && duty[playerid])
    {

        if(trace_cooldown[playerid] == 0)
        {

            new tmp[32];
            tmp = strtok(params,idx);
            if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /trace [phone number]"); return 1; }
            new number = strval(tmp);
            if(number < 1 || number > 9999999999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid phone number."); return 1; }
            for(new i = 0; i < MAX_PLAYERS; i ++)
            {

                if(IsPlayerConnectedEx(i))
                {

					if(CharacterInfo[i][active_character[i]][cPhone] == number)
					{

					    if(GetPlayerInterior(i) == 0 && tog_phone[i] == 1)
					    {

					    	new Float:X, Float:Y, Float:Z;
       						GetPlayerPos(i,X,Y,Z);
       						SetPlayerCheckpoint(playerid,X,Y,Z,5.0);
       						SendClientMessage(playerid,COLOR_YELLOW,"Trace Complete. Marked on your GPS.");
       						trace_cooldown[playerid] = 60;
       						cp_target[playerid] = 1;
       						return 1;

					    }
					    else
					    {

					        SendClientMessage(playerid,COLOR_LIGHTRED,"A connection could not be established.");
					        return 1;

					    }

					}

                }

            }
            SendClientMessage(playerid,COLOR_LIGHTRED,"A connection could not be established.");
            return 1;


        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"Please wait 60 seconds between trace attempts.");
            return 1;

        }

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a cop or are not on duty.");
        return 1;

    }

}

COMMAND:startengineer(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_ENG && InUtility(playerid))
    {

        if(IsPlayerInRangeOfPoint(playerid,30.0,2770.6843,-1628.5165,12.1775))
        {

            if(engineer_sys_run[playerid] == -1)
            {

				OnPlayerStartEngineer(playerid);
				SendClientMessage(playerid,COLOR_YELLOW,"Use /cancelengineer to stop doing repairs.");
				return 1;

			}
			else
			{

			    SendErrorMsg(playerid,"You are already on an engineer job");
			    return 1;

			}

        }
        else
        {

            SendErrorMsg(playerid,"You are not at the engineering depot.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not an engineer or you are not in a utility van!");
        return 1;

	}

}

COMMAND:cancelengineer(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_ENG && engineer_sys_run[playerid] > -1)
    {

		DisablePlayerCheckpoint(playerid);
		if(engineer_sys_object[playerid] > -1) { DestroyPlayerObject(playerid,engineer_sys_object[playerid]); }
		engineer_sys_run[playerid] = -1;
		SendClientMessage(playerid,COLOR_GREEN,"Engineer run cancelled.");
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an engineer or you are not on a run.");
	    return 1;

	}

}

COMMAND:wire(playerid,params[])
{

	new idx = 0;
    if(IsInBank(playerid))
    {

        new tmp[32];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /wire [playerid/player name] [amount]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        new tmp2[32];
        tmp2 = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /wire [playerid/player name] [amount]"); return 1; }
        new amount = strval(tmp2);
        if(amount < 1 || amount > 2000000) { SendClientMessage(playerid,COLOR_LIGHTRED,"Transfers cannot be below $1 or above $2000000"); return 1; }
        if(CharacterInfo[playerid][active_character[playerid]][cBank] >= amount)
        {

            CharacterInfo[playerid][active_character[playerid]][cBank] -= amount;
            CharacterInfo[other][active_character[other]][cBank] += amount;
            new str[256];
			new name[MAX_PLAYER_NAME];
			GetCharacterName(playerid,name);
			format(str,sizeof(str),"[Transfer] %s has trasnfered $%d to your bank account.",name,amount);
			SendClientMessage(other,COLOR_YELLOW,str);
			GetCharacterName(other,name);
			format(str,sizeof(str),"[Transfer] You have transfered $%d to %s",amount,name);
			SendClientMessage(playerid,COLOR_YELLOW,str);
			LogPayment(playerid,other,amount);
			return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You do not have this much in your bank.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a bank.");
        return 1;

    }

}

COMMAND:dropweapons(playerid,params[])
{

    ResetPlayerWeaponsEx(playerid);
    SendEmote(playerid,"drops his weapons on the floor.");
    return 1;

}

COMMAND:sellhouse(playerid,params[])
{

	new idx = 0;
    new house = GetClosestHouse(playerid);
    if(house == -1) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a house."); return 1; }
    if(!IsHouseOwner(playerid,house)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This is not your house!"); return 1; }
    new tmp[32];
	tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /sellhouse [playerid/player name] [price]"); return 1; }
    new other = ReturnUser(tmp);
    if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
    if(GetDistanceBetweenPlayers(playerid,other) <= 7.5)
    {

        if(other != playerid)
        {

			if(CharacterInfo[other][active_character[other]][cLevel] >= HouseInfo[house][hLevel])
			{

				if(NumOfHouses(other) < 3)
				{

			        new tmp2[32];
					tmp2 = strtok(params,idx);
			        if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /sellhouse [playerid/player name] [price]"); return 1; }
			        new amount = strval(tmp2);
			        if(amount < 1 || amount > 9999999999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Price cannot be below $1"); return 1; }
			        new str[128];
			        new name[MAX_PLAYER_NAME];
			        GetCharacterName(other,name);
			        format(str,sizeof(str),"takes out a house-deed and asks %s to sign it.",name);
			        SendEmote(playerid,name);
					format(str,sizeof(str),"You have offered your house to %s for $%d wait to see if they accept",name,amount);
					SendClientMessage(playerid,COLOR_FACTION,str);
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"%s has offered you their house for $%d, use /accepthouse to accept",name,amount);
					SendClientMessage(other,COLOR_LIGHTBLUE,str);
					house_offer[other] = playerid;
					house_offer_price[other] = amount;
					house_offer_house[other] = house;
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"This player already owns 3 houses.");
					return 1;

				}

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not a high enough level to have this house.");
			    return 1;

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot sell your house to yourself.");
		    return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near this player.");
        return 1;

    }

}

COMMAND:accepthouse(playerid,params[])
{

    if(house_offer[playerid] > -1)
    {

        new other = house_offer[playerid];
        if(GetDistanceBetweenPlayers(playerid,other) <= 7.5)
        {

            if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= house_offer_price[playerid])
            {

                CharacterInfo[playerid][active_character[playerid]][cMoney] -= house_offer_price[playerid];
                CharacterInfo[other][active_character[other]][cMoney] += house_offer_price[playerid];
                HouseInfo[house_offer_house[playerid]][hOwner] = CharacterInfo[playerid][active_character[playerid]][cID];
				GetCharacterName(playerid,HouseInfo[house_offer_house[playerid]][hOwnerName]);
				RefreshHouseTag(house_offer_house[playerid]);
				new str[128];
				new name[MAX_PLAYER_NAME];
				GetCharacterName(playerid,name);
				format(str,sizeof(str),"%s has accepted your house offer for $%d",name,house_offer_price[playerid]);
				SendClientMessage(other,COLOR_FACTION,str);
				GetCharacterName(other,name);
				format(str,sizeof(str),"You have accepted %s's house offer for $%d",name,house_offer_price[playerid]);
				SendClientMessage(playerid,COLOR_FACTION,str);
				format(str,sizeof(str),"signs the deed and hands it to %s",name);
				SendEmote(playerid,str);
				house_offer[playerid] = -1;
				house_offer_house[playerid] = -1;
				house_offer_price[playerid] = 0;
				return 1;

            }
            else
            {

                SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have that much money.");
				house_offer[playerid] = -1;
				house_offer_price[playerid] = 0;
				return 1;

            }

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are no longer near this player.");
			house_offer[playerid] = -1;
			house_offer_price[playerid] = 0;
			return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"No one has offered you a house.");
        return 1;

    }

}

COMMAND:nascar(playerid,params[])
{

    if(nascar_sys_open)
    {

        if(IsPlayerInRangeOfPoint(playerid,7.5,2695.8445,-1704.9447,11.8438))
        {

            new num = FetchNumNascarDrivers();
            if(num < 6)
            {

                if(!nascar_sys_started)
                {

                    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 2000)
                    {

                        if(!vehicle_creating)
                        {

                            SaveWeapons(playerid);
	                        CharacterInfo[playerid][active_character[playerid]][cMoney] -= 2000;
	                        nascar_sys_driver[playerid] = 1;
	                        vehicle_creating = 1;
							new tmp = CreateVehicle(494,nascar_sys_spawns[num][0],nascar_sys_spawns[num][1],nascar_sys_spawns[num][2],nascar_sys_spawns[num][3],random(126),random(126),-1);
							vehicle_creating = 0;
							LinkVehicleToInterior(tmp,7);
							SetPlayerInterior(playerid,7);
							PutPlayerInVehicle(playerid,tmp,0);
							SendClientMessage(playerid,TEAM_GROVE_COLOR,"[NASCAR] You have entered the race for $2000! The race begins shortly, prepare yourself!");
							TogglePlayerControllable(playerid,0);
							new name[MAX_PLAYER_NAME];
							GetCharacterName(playerid,name);
							new str[128];
							format(str,sizeof(str),"[NASCAR] Driver %s has just entered the NASCAR race!",name);
							SendNascarNews(str);
							crash_detection_disabled[playerid] = 1;
							nascar_sys_entrants ++;
							return 1;

						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"Another vehicle has just been spawned, please re-try");
						    return 1;

						}

                    }
                    else
                    {

                        SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $2000 to enter the race with!");
                        return 1;

                    }

                }
                else
                {

                    SendClientMessage(playerid,COLOR_LIGHTRED,"The race has already started. Please come back later.");
                    return 1;

                }

            }
            else
         	{

                SendClientMessage(playerid,COLOR_LIGHTRED,"There are already 6 nascar drivers in this race. Please wait until the next one.");
                return 1;

            }

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at the stadium.");
            return 1;

        }

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"NASCAR is currentlly closed. Please wait until it is opened by an admin.");
        return 1;

    }

}

COMMAND:derby(playerid,params[])
{

	if(derby_sys_open)
    {

        if(IsPlayerInRangeOfPoint(playerid,7.5,2695.8445,-1704.9447,11.8438))
        {

            new num = FetchNumDerbyDrivers();
            if(num < 10)
            {

                if(!derby_sys_started)
                {

                    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 1000)
                    {

                        if(!vehicle_creating)
                        {

                            SaveWeapons(playerid);
	                        CharacterInfo[playerid][active_character[playerid]][cMoney] -= 1000;
	                        derby_sys_driver[playerid] = 1;
	                        vehicle_creating = 1;
							new tmp = CreateVehicle(504,derby_sys_spawns[num][0],derby_sys_spawns[num][1],derby_sys_spawns[num][2],derby_sys_spawns[num][3],random(126),random(126),-1);
							vehicle_creating = 0;
							LinkVehicleToInterior(tmp,16);
							SetPlayerInterior(playerid,16);
							PutPlayerInVehicle(playerid,tmp,0);
							SendClientMessage(playerid,TEAM_GROVE_COLOR,"[DERBY] You have entered the derby for $1000! The derby begins shortly, prepare yourself!");
							TogglePlayerControllable(playerid,0);
							new name[MAX_PLAYER_NAME];
							GetCharacterName(playerid,name);
							new str[128];
							format(str,sizeof(str),"[DERBY] Driver %s has just entered the Demolition Derby!",name);
							SendDerbyNews(str);
							crash_detection_disabled[playerid] = 1;
							derby_sys_entrants ++;
							return 1;

						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"Another vehicle has just been spawned, please re-try");
						    return 1;

						}

                    }
                    else
                    {

                        SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $1000 to enter the race with!");
                        return 1;

                    }

                }
                else
                {

                    SendClientMessage(playerid,COLOR_LIGHTRED,"The derby has already started. Please come back later.");
                    return 1;

                }

            }
            else
         	{

                SendClientMessage(playerid,COLOR_LIGHTRED,"There are already 10 derby drivers in this derby. Please wait until the next one.");
                return 1;

            }

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at the stadium.");
            return 1;

        }

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"DERBY is currentlly closed. Please wait until it is opened by an admin.");
        return 1;

    }

}

COMMAND:opennascar(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		nascar_sys_open = 1;
		SendClientMessage(playerid,COLOR_GREEN,"NASCAR has been opened!");
		SendNascarNews("[NASCAR] A NASCAR race has just opened at the Los Santos Stadium!");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:openderby(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		derby_sys_open = 1;
		SendClientMessage(playerid,COLOR_GREEN,"DERBY has been opened!");
		SendDerbyNews("[DERBY] A DERBY has just opened at the Los Santos Stadium!");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:closenascar(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		nascar_sys_open = 0;
		nascar_sys_started = 0;
		nascar_sys_countdown = 0;
		nascar_sys_place = 1;
		nascar_sys_entrants = 0;
		for(new i = 0; i < MAX_VEHICLES; i ++)
		{

		    if(IsPlayerConnectedEx(i))
		    {

		        if(nascar_sys_driver[i]) { OnPlayerLeaveNascar(i); }

		    }

		}
		SendClientMessage(playerid,COLOR_GREEN,"NASCAR has been closed!");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:closederby(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		derby_sys_open = 0;
		derby_sys_started = 0;
		derby_sys_countdown = 0;
		derby_sys_entrants = 0;
		for(new i = 0; i < MAX_VEHICLES; i ++)
		{

		    if(IsPlayerConnectedEx(i))
		    {

		        if(derby_sys_driver[i]) { OnPlayerLeaveDerby(i); }

		    }

		}
		SendClientMessage(playerid,COLOR_GREEN,"Derby has been closed!");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:startnascar(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		if(nascar_sys_open)
		{

			nascar_sys_started = 1;
			nascar_sys_countdown = 10;
			for(new i = 0; i < MAX_PLAYERS; i ++)
			{

			    if(IsPlayerConnectedEx(i))
			    {

			        if(nascar_sys_driver[i])
			        {

			            SendClientMessage(i,TEAM_GROVE_COLOR,"[NASCAR] The race will start in 10 seconds! Prepare yourself!");

			        }

			    }

			}
			SendNascarNews("[NASCAR] A NASCAR race has just started at the Los Santos Stadium!");
			SendClientMessage(playerid,COLOR_GREEN,"The countdown has been started.");
			return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"Open the race first.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:startderby(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		if(derby_sys_open)
		{

			derby_sys_started = 1;
			derby_sys_countdown = 10;
			for(new i = 0; i < MAX_PLAYERS; i ++)
			{

			    if(IsPlayerConnectedEx(i))
			    {

			        if(nascar_sys_driver[i])
			        {

			            SendClientMessage(i,TEAM_GROVE_COLOR,"[DERBY] The derby will start in 10 seconds! Prepare yourself!");

			        }

			    }

			}
			SendNascarNews("[DERBY] A DERBY has just started at the Los Santos Stadium!");
			SendClientMessage(playerid,COLOR_GREEN,"The countdown has been started.");
			return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"Open the race first.");
		    return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:fdeposit(playerid,params[])
{

	new idx = 0;
	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

        if(IsInBank(playerid))
        {

			new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
			new tmp[32];
			tmp = strtok(params,idx);
			if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /fdeposit [amount]"); return 1; }
			new amount = strval(tmp);
			if(amount < 1 || amount > 9999999999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid deposit amount."); return 1; }
			if(CharacterInfo[playerid][active_character[playerid]][cMoney] < amount) { SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have this much money."); return 1; }
			CharacterInfo[playerid][active_character[playerid]][cMoney] -= amount;
			FactionInfo[slot][fBank] += amount;
			new str[128];
			format(str,sizeof(str),"You have deposited $%d into the faction bank.",amount);
			SendClientMessage(playerid,COLOR_FACTION,str);
			return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a bank.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a faction.");
        return 1;

    }

}

COMMAND:smuggle(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_SMUGGLE)
    {

		SetPlayerCheckpoint(playerid,-550.7075,2593.8193,53.9348,2.0);
		new str[256];
		format(str,sizeof(str),"~p~Smuggling Mission~n~ ~n~~w~Move to the ~p~checkpoint~w~ to get your materials~n~ ~n~Use ~p~/cancelsmuggle~w~ to cancel the mission");
		TextDrawSetString(infotxt[playerid],str);
		TextDrawShowForPlayer(playerid,infotxt[playerid]);
		infotxt_expire[playerid] = 11;
		cp_target[playerid] = 1;
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not a weapons smuggler.");
        return 1;

    }

}

COMMAND:fbank(playerid,params[])
{

    if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

        if(IsInBank(playerid))
        {

            if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD)
            {

                new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
                new str[128];
                format(str,sizeof(str),"Faction Bank Balance: $%d",FactionInfo[slot][fBank]);
				SendClientMessage(playerid,COLOR_FACTION,str);
				return 1;

            }
            else
            {

                SendClientMessage(playerid,COLOR_LIGHTRED,"You are not the leader of your faction.");
                return 1;

            }

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a bank.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a faction.");
        return 1;

    }

}

COMMAND:fwithdraw(playerid,params[])
{

	new idx = 0;
	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

        if(IsInBank(playerid))
        {

            if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] == FAC_PERM_LEAD)
            {

			    new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
				new tmp[32];
				tmp = strtok(params,idx);
				if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /fwithdraw [amount]"); return 1; }
				new amount = strval(tmp);
				if(amount < 1 || amount > FactionInfo[slot][fBank]) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid amount or there is not this much in your bank."); return 1; }
				FactionInfo[slot][fBank] -= amount;
				CharacterInfo[playerid][active_character[playerid]][cMoney] += amount;
				new str[128];
				format(str,sizeof(str),"You have withdrawn $%d from your faction bank.",amount);
				SendClientMessage(playerid,COLOR_FACTION,str);
				return 1;

	      	}
            else
            {

                SendClientMessage(playerid,COLOR_LIGHTRED,"You are not the leader of your faction.");
                return 1;

            }

        }
        else
        {

            SendErrorMsg(playerid,"You are not in a bank.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a faction.");
        return 1;

    }

}

COMMAND:buymats(playerid,params[])
{

	new idx = 0;
	if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_SMUGGLE)
    {

        if(IsPlayerInRangeOfPoint(playerid,7.5,-550.7075,2593.8193,53.9348))
        {

            new tmp[32];
            tmp = strtok(params,idx);
            if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /buymats [amount]"); return 1; }
            new amount = strval(tmp);
            if(amount < 1 || amount > 10) { SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be less than 1 or more than 10."); return 1; }
            new price = (3000 * amount);
            if(CharacterInfo[playerid][active_character[playerid]][cMoney] < price) { SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money."); return 1; }
	        if(CanHaveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,amount))
	        {

		    	new rec = GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,amount);
		    	if(rec)
		    	{

					new str[128];
					format(str,sizeof(str),"You have bought %d mats for $%d",amount,price);
					SendClientMessage(playerid,COLOR_GREEN,str);
					CharacterInfo[playerid][active_character[playerid]][cMoney] -= price;
					return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You cannot carry anymore items!");
			    return 1;

			}


        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at the weapons smuggle point.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a weapons smuggler.");
        return 1;

    }
    return 1;

}

COMMAND:sellmats(playerid,params[])
{

	new idx = 0;
	if(CharacterInfo[playerid][active_character[playerid]][cJob] == JOB_SMUGGLE)
    {

        new tmp[32];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /sellmats [playerid/player name] [deagle/mp5/ak47/spaz/rifle/shotgun]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        if(other == playerid) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot sell mats to yourself."); return 1; }
        if(GetDistanceBetweenPlayers(playerid,other) > 7.5) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near this player."); return 1; }
        new tmp2[32];
        tmp2 = strtok(params,idx);
        if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /sellmats [playerid/player name] [deagle/mp5/ak47/spaz/rifle/shotgun/sniper]"); return 1; }
        if(strcmp(tmp2,"sniper",true) == 0)
        {

			if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,15))
			{

	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_SNIPER,1))
	            {

	                new rec = GiveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_SNIPER,1);
	                if(rec)
	                {

						new name[MAX_PLAYER_NAME]; new str[128];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes out some weapons pieces and hands them to %s",name);
						SendEmote(playerid,str);
                        RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,15);
						return 1;

	                }

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"This player cannot carry anymore items.");
	                return 1;

	            }

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have 15 materials.");
			    return 1;

			}

        }
        if(strcmp(tmp2,"shotgun",true) == 0)
        {

			if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,2))
			{

	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_SHOTGUN,1))
	            {

	                new rec = GiveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_SHOTGUN,1);
	                if(rec)
	                {

						new name[MAX_PLAYER_NAME]; new str[128];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes out some weapons peices and hands them to %s",name);
						SendEmote(playerid,str);
                        RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,2);
						return 1;

	                }

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"This player cannot carry anymore items.");
	                return 1;

	            }

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have 2 materials.");
			    return 1;

			}

        }
        if(strcmp(tmp2,"rifle",true) == 0)
        {

			if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,3))
			{

	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_RIFLEPACK,1))
	            {

	                new rec = GiveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_RIFLEPACK,1);
	                if(rec)
	                {

						new name[MAX_PLAYER_NAME]; new str[128];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes out some weapons peices and hands them to %s",name);
						SendEmote(playerid,str);
						RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,3);
						return 1;

	                }

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"This player cannot carry anymore items.");
	                return 1;

	            }

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have 3 materials.");
			    return 1;

			}

        }

        /*if(strcmp(tmp2,"mac10",true) == 0)
        {

    		if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,4))
			{

	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_MAC10PACK,1))
	            {

	                new rec = GiveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_MAC10PACK,1);
	                if(rec)
	                {

						new name[MAX_PLAYER_NAME]; new str[128];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes out some weapons peices and hands them to %s",name);
						SendEmote(playerid,str);
						RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,4);
						return 1;

	                }

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"This player cannot carry anymore items.");
	                return 1;

	            }

	      	}
	      	else
	      	{

	      	    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have 4 materials.");
	      	    return 1;

	      	}

        }*/

        if(strcmp(tmp2,"spaz",true) == 0)
        {

           	if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,5))
			{

	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_SPAZ12PACK,1))
	            {

	                new rec = GiveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_SPAZ12PACK,1);
	                if(rec)
	                {

						new name[MAX_PLAYER_NAME]; new str[128];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes out some weapons peices and hands them to %s",name);
						SendEmote(playerid,str);
						RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,5);
						return 1;

	                }

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"This player cannot carry anymore items.");
	                return 1;

	            }

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have 5 materials.");
			    return 1;

			}

        }

        if(strcmp(tmp2,"mp5",true) == 0)
        {

	       	if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,6))
			{

	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_MP5PACK,1))
	            {

	                new rec = GiveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_MP5PACK,1);
	                if(rec)
	                {

						new name[MAX_PLAYER_NAME]; new str[128];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes out some weapons peices and hands them to %s",name);
						SendEmote(playerid,str);
						RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,6);
						return 1;

	                }

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"This player cannot carry anymore items.");
	                return 1;

	            }

	      	}
	      	else
	      	{

	      	    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have 6 materials.");
	      	    return 1;

	      	}

        }

        if(strcmp(tmp2,"ak47",true) == 0)
        {

    	   	if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,8))
			{

	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_AK47PACK,1))
	            {

	                new rec = GiveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_AK47PACK,1);
	                if(rec)
	                {

						new name[MAX_PLAYER_NAME]; new str[128];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes out some weapons peices and hands them to %s",name);
						SendEmote(playerid,str);
						RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,8);
						return 1;

	                }

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"This player cannot carry anymore items.");
	                return 1;

	            }

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have 8 materials.");
			    return 1;

			}

        }

        if(strcmp(tmp2,"deagle",true) == 0)
        {

           	if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,1))
			{

	            if(CanHaveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_DEAGLEPACK,1))
	            {

	                new rec = GiveItem(INVENTORY_TYPE_PLAYER,other,INVENTORY_DEAGLEPACK,1);
	                if(rec)
	                {

						new name[MAX_PLAYER_NAME]; new str[128];
						GetCharacterName(other,name);
						format(str,sizeof(str),"takes out some weapons peices and hands them to %s",name);
						SendEmote(playerid,str);
						RemoveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_MATS,1);
						return 1;

	                }

	            }
	            else
	            {

	                SendClientMessage(playerid,COLOR_LIGHTRED,"This player cannot carry anymore items.");
	                return 1;

	            }
            }
            else
            {

                SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have 1 materials");
                return 1;

            }

        }

        SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown weapon name.");
        return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a weapons smuggler.");
        return 1;

    }

}

COMMAND:reloadmodels(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
    {

        if(!vehicle_creating)
        {

            vehicle_creating = 1;
            DestroyBuyVehicles();
			LoadVehicleModels();
			SendClientMessage(playerid,COLOR_LIGHTRED,"Vehicle models re-loading.");
			return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"A vehicle is already being created. Please re-try in a second.");
		    return 1;

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a Lead Admin.");
	    return 1;

	}

}

COMMAND:reloadfactions(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
    {

		SaveFactions();
		LoadFactions();
		SendClientMessage(playerid,COLOR_GREEN,"Factions Reloaded.");
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a lead admin.");
	    return 1;

	}

}

COMMAND:resetcreating(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        vehicle_creating = 0;
        SendClientMessage(playerid,COLOR_GREEN,"Vehicle Creating Reset.");
        return 1;

    }
    return 1;

}

COMMAND:gps(playerid,params[])
{

	if(gps_cooldown[playerid] == 0)
	{

	    if(gps[playerid])
	    {

	        ShowPlayerDialog(playerid,DIALOG_GPS,DIALOG_STYLE_LIST,"Where would you like to go?","Closest Bank\nClosest Fast-Food\nClosest 24/7\nClosest Dealership\nClosest Car Upgrade\nClosest Aircraft Dealership\nClosest Boat Dealership\nClosest Gas Station\nClosest Ammunation\nClosest Post Office\nClosest Bar\nClosest Advertisment Agency\nClosest Hotel\nClosest Clothes Shop\nClosest Betting Shop\nDMV\nLS Stadium","Confirm","Cancel");
	        return 1;

	    }
	    else
	    {

	        SendErrorMsg(playerid,"You do not have a GPS.");
	        return 1;

	    }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"Please wait 60 seconds between GPS commands.");
	    return 1;

	}

}

COMMAND:train(playerid,params[])
{

	new idx = 0;
	if(IsInGym(playerid))
    {

        new tmp[32];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /train [boxing/kungfu/dirty]"); return 1; }
        if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 2500)
        {

			if(strcmp(tmp,"boxing",true) == 0)
			{

			    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 2500;
			    SetPlayerFightingStyle(playerid,FIGHT_STYLE_BOXING);
			    SendClientMessage(playerid,COLOR_YELLOW,"You have trained in Boxing!");
				BizInfo[in_biz[playerid]][bBank] += 2500;
				CharacterInfo[playerid][active_character[playerid]][cFstyle] = FIGHT_STYLE_BOXING;
			    return 1;

			}
			if(strcmp(tmp,"kungfu",true) == 0)
			{

			    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 2500;
			    SetPlayerFightingStyle(playerid,FIGHT_STYLE_KUNGFU);
			    SendClientMessage(playerid,COLOR_YELLOW,"You have trained in Kung Fu!");
			    BizInfo[in_biz[playerid]][bBank] += 2500;
			    CharacterInfo[playerid][active_character[playerid]][cFstyle] = FIGHT_STYLE_KUNGFU;
			    return 1;

			}
			if(strcmp(tmp,"dirty",true) == 0)
			{

			    CharacterInfo[playerid][active_character[playerid]][cMoney] -= 2500;
			    SetPlayerFightingStyle(playerid,FIGHT_STYLE_ELBOW);
			    SendClientMessage(playerid,COLOR_YELLOW,"You have trained in Dirty!");
			    BizInfo[in_biz[playerid]][bBank] += 2500;
			    CharacterInfo[playerid][active_character[playerid]][cFstyle] = FIGHT_STYLE_ELBOW;
			    return 1;

			}
			SendErrorMsg(playerid,"Unkown Action");
			return 1;

        }
        else
        {

			SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $2500 to train.");
			return 1;

		}

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a gym");
        return 1;

    }

}

COMMAND:camera(playerid,params[])
{

	if(IsNews(playerid) && InNewsVan(playerid))
    {

        GivePlayerWeaponEx(playerid,43,100);
        SendEmote(playerid,"retrieves a camera from the News Van");
        return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not SAN or you are not in a news van.");
        return 1;

    }

}

COMMAND:revive(playerid,params[])
{

	new idx = 0;
	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

        new tmp[32];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /revive [playerid/player name]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
        if(death_mode[other])
        {

            SetPlayerHealth(other,100);
            death_mode[other] = 0;
            TogglePlayerControllable(other,1);
            ClearAnimations(other);
            death_cooldown[other] = 0;
            new name[MAX_PLAYER_NAME];
            GetCharacterName(other,name);
            SetCameraBehindPlayer(other);
            new str[128];
            format(str,sizeof(str),"You have revived %s",name);
            SendClientMessage(playerid,COLOR_YELLOW,str);
            return 1;

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in death mode.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin");
        return 1;

    }

}

COMMAND:hinv(playerid,params[])
{

	return cmd_houseinventory(playerid,params);

}

COMMAND:houseinventory(playerid,params[])
{

	new idx = 0;
	if(in_house[playerid] > -1)
    {

        new tmp[32];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /houseinventory [action] [value(if required)]"); SendClientMessage(playerid,COLOR_YELLOW2,"Actions: list, take, store"); return 1; }
        if(strcmp(tmp,"take",true) == 0)
        {

            new tmp2[32];
            tmp2 = strtok(params,idx);
            if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /houseinventory take [inventory slot (/houseinventory)]"); return 1; }
            new slot = strval(tmp2);
            if(slot < 1 || slot > GetHouseInventorySlots(in_house[playerid])) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid Slot."); return 1; }
            slot --;
            TakeHouseItem(playerid,slot);
            return 1;

        }
        if(strcmp(tmp,"list",true) == 0)
        {

            ShowHouseItems(playerid);
            return 1;

        }
        if(strcmp(tmp,"store",true) == 0)
        {

            new tmp2[32];
            tmp2 = strtok(params,idx);
            if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /houseinventory store [inventory slot (/inventory)]"); return 1; }
            new slot = strval(tmp2);
            if(slot < 1 || slot > GetHouseInventorySlots(in_house[playerid])) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid Slot."); return 1; }
            slot --;
            StoreHouseItem(playerid,slot);
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a house.");
        return 1;

    }
    return 1;

}

COMMAND:togtp(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		togtp[playerid] = !togtp[playerid];
		SendClientMessage(playerid,COLOR_FACTION,"TP Logging Toggled.");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }

}

COMMAND:buycompanycar(playerid,params[])
{

	new idx = 0;
	if(CharacterInfo[playerid][active_character[playerid]][cCompany] > 0)
    {

		if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] == COMP_PERMS_LEADER)
		{

		    new vehicle = vehicle_showroom_position[playerid];
		    new price = VehicleModelInfo[vehicle][vmPrice];
		    if(CanBuyVehicle(playerid))
		    {

				if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
				{

					new tmp[32], tmp2[32];
					tmp = strtok(params,idx);
					tmp2 = strtok(params,idx);
					if(!strlen(tmp) || !strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /buycompanycar [color1] [color2]"); return 1; }
					new col1 = strval(tmp); new col2 = strval(tmp2);
					if(col1 < 0 || col1 > 126) { SendClientMessage(playerid,COLOR_LIGHTRED,"Color cannot be below 0 or above 126"); return 1; }
					if(col2 < 0 || col2 > 126) { SendClientMessage(playerid,COLOR_LIGHTRED,"Color cannot be below 0 or above 126"); return 1; }
					buy_forcompany[playerid] = 1;
					tmp_carcolor1[playerid] = col1;
					tmp_carcolor2[playerid] = col2;
					PurchaseVehicle(playerid,vehicle);
					return 1;

				}
				else
 				{

 				    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have enough money to purhcase this vehicle.");
 				    return 1;

				}

			}
			else
			{

			    SendClientMessageA(playerid,COLOR_LIGHTRED,"You cannot purchase this vehicle.");
			    return 1;

			}

		}
		else
		{

		    SendErrorMsg(playerid,"You are not the leader of your company.");
		    return 1;

		}

    }
    else
	{

	    SendErrorMsg(playerid,"You are not in a company.");
	    return 1;

	}

}

COMMAND:company(playerid,params[])
{

	new idx = 0;
    if(CharacterInfo[playerid][active_character[playerid]][cCompany] > 0)
    {

        new tmp[32];
		tmp = strtok(params,idx);
		if(!strlen(tmp))
		{

			SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /company [action] [value(if required)]");
			SendClientMessage(playerid,COLOR_YELLOW2,"Actions: finance, invite, uninvite, setrank, setperms, work, members, setpay, withdraw, deposit, tow, refuel");
			SendClientMessage(playerid,COLOR_YELLOW2,"Actions: logs, stop, repair");
			new tmpslot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
			if(CompanyInfo[tmpslot][ciType] == COMP_TYPE_OIL) { SendClientMessage(playerid,COLOR_YELLOW2,"Actions: survey, oilprice, sellrig"); }
			return 1;

		}
		if(strcmp(tmp,"repair",true) == 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] >= COMP_PERMS_SUPER)
		    {

		        new price = FetchCompanyRepairPrice(CharacterInfo[playerid][active_character[playerid]][cCompany]);
				new str[128];
				format(str,sizeof(str),"{FFFFFF}You are about to repair all company vehicles for {FF0000}$%d\n {FFFFFF}Are you sure you wish to continue?",price);
                SendConfirmationMsg(playerid,str,DIALOG_COMPREPAIR,0);
				return 1;

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a company supervisor.");
				return 1;

		    }

		}
		if(strcmp(tmp,"stop",true) == 0)
		{

		    if(company_work[playerid] > 0)
		    {

				DisablePlayerCheckpoint(playerid);
				company_work[playerid] = 0;
				company_work_stage[playerid] = 0;
				carrying_oil[playerid] = 0;
				SendClientMessage(playerid,COLOR_GREEN,"Job Cancelled.");
				return 1;

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not on a company job.");
		        return 1;

		    }

		}
		if(strcmp(tmp,"sellrig",true) == 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] == COMP_PERMS_LEADER)
		    {

		        new tmp2[32];
		        tmp2 = strtok(params,idx);
		        if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /company sellrig [playerid/player name] [price]"); return 1; }
		        new other = ReturnUser(tmp2);
		        if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		        new tmp3[32];
		        tmp3 = strtok(params,idx);
		        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /company sellrig [playerid/player name] [price]"); return 1; }
		        new price = strval(tmp3);
		        if(price < 1 || price > 99999999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid price, cannot be below $1"); return 1; }
				if(GetDistanceBetweenPlayers(playerid,other) <= 7.5)
				{

				    new rig = NearestRig(playerid);
				    if(rig > -1)
				    {

				        if(oil_rig_owners[rig] == CharacterInfo[playerid][active_character[playerid]][cCompany])
				        {

				            if(CharacterInfo[other][active_character[other]][cCompanyPerms] == COMP_PERMS_LEADER)
				            {

				                if(CharacterInfo[playerid][active_character[playerid]][cCompany] != CharacterInfo[other][active_character[other]][cCompany])
				                {

									new slot = FetchCompanySlot(CharacterInfo[other][active_character[other]][cCompany]);
									if(CompanyInfo[slot][ciType] == COMP_TYPE_OIL)
									{

									    new str[128];
									    new name[MAX_PLAYER_NAME];
									    new zone[128];
									    GetZone(oil_rigs[rig][0],oil_rigs[rig][1],zone,sizeof(zone));
									    GetCharacterName(playerid,name);
									    format(str,sizeof(str),"{FFFFFF}%s has offered you the {FF0000}%s oil rig{FFFFFF} for {FF0000}$%d\n{FFFFFF}Would you like to accept?",name,zone,price);
									    SendConfirmationMsg(other,str,DIALOG_ACCEPTRIG,0);
										GetCharacterName(other,name);
										format(str,sizeof(str),"You have offered %s this oil rig.",name);
										SendClientMessage(playerid,COLOR_YELLOW2,str);
										oil_offer[other] = playerid;
										oil_offer_price[other] = price;
										oil_offer_rig[other] = rig;
										return 1;

									}
									else
									{

									    SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in an oil company.");
									    return 1;

									}

				                }
				                else
				                {

				                    SendClientMessage(playerid,COLOR_LIGHTRED,"This person is in your company.");
				                    return 1;

				                }

				            }
				            else
				            {

				                SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not the leader of their company.");
				                return 1;

				            }

				        }
				        else
				        {

				            SendClientMessage(playerid,COLOR_LIGHTRED,"You do not own this rig.");
				            return 1;

				        }

				    }
				    else
				    {

				        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near an oil rig.");
				        return 1;

				    }

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near this player.");
				    return 1;

				}


		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not the company leader.");
		        return 1;

			}

		}
		if(strcmp(tmp,"oilprice",true) == 0)
		{

			new str[128];
			format(str,sizeof(str),"The current oil price is {FF0000}$%d {FFFFFF} per gallon.",oil_price);
			SendClientMessage(playerid,COLOR_WHITE,str);
			return 1;

		}
		if(strcmp(tmp,"survey",true) == 0)
		{

		    new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
		    if(CompanyInfo[slot][ciType] == COMP_TYPE_OIL)
		    {

				if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] >= COMP_PERMS_SUPER)
				{

				    new rig = NearestRig(playerid);
				    if(rig > -1)
				    {

						if(!IsRigOwned(rig))
						{

		        			SendEmote(playerid,"takes out a sensor and presses it to the ground in search of oil");
							SendEmote(playerid,"checks the reading on the sensor, it shows posotive!");
							SendConfirmationMsg(playerid,"{FFFFFF}You have stuck oil! There is oil at this location\nwould you like to place an oil rig here for {FF0000}$75000{FFFFFF}?",DIALOG_BUYRIG,0);
							return 1;

						}
						else
						{

						    SendClientMessage(playerid,COLOR_LIGHTRED,"There is already a rig at this location.");
						    return 1;

						}

				    }
				    else
				    {

						SendEmote(playerid,"takes out a sensor and presses it to the ground in search of oil");
						SendEmote(playerid,"checks the reading on the sensor, it shows negative");
						return 1;

				    }

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
				    return 1;

				}

			}
			else
			{

			    SendErrorMsg(playerid,"You are not in an oil company.");

			}

		}
		if(strcmp(tmp,"logs",true) == 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] >= COMP_PERMS_SUPER)
		    {

				if(worklog_cooldown[playerid] == 0)
				{

					new company = CharacterInfo[playerid][active_character[playerid]][cCompany];
					new str[256];
					format(str,sizeof(str),"SELECT name,pay,type FROM rp_work_logs WHERE company = '%d' ORDER BY id DESC LIMIT 10",company);
					mysql_query(str,player_threads[playerid],QUERY_WORKLOGS);
					worklog_cooldown[playerid] = 10;
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You can only view logs once every 10 seconds.");
				    return 1;

				}

		    }
		    else
		    {

				SendErrorMsg(playerid,"You are not a company supervisor.");
				return 1;

		    }

		}
		if(strcmp(tmp,"refuel",true) == 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] >= COMP_PERMS_SUPER)
		    {

		        new price = FetchCompanyRefuelPrice(CharacterInfo[playerid][active_character[playerid]][cCompany]);
		        new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
				new str[128];
				if(CompanyInfo[slot][ciBank] >= price)
				{

					new msg[128];
					format(msg,sizeof(msg),"You are about to re-fuel all company vehicles for {FF0000}$%d{FFFFFF}\n are you sure to wish to continue?",price);
					SendConfirmationMsg(playerid,msg,DIALOG_FUELCOMPANY,0);
					return 1;

				}
				else
				{

				    format(str,sizeof(str),"Your company does not have $%d to refuel all vehicles.",price);
					SendClientMessage(playerid,COLOR_LIGHTRED,str);
					return 1;

				}

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a company supervisor.");
		        return 1;

		    }

		}
		if(strcmp(tmp,"tow",true) == 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] >= COMP_PERMS_SUPER)
		    {

				TowCompanyCars(CharacterInfo[playerid][active_character[playerid]][cCompany]);
				new str[128];
				new name[MAX_PLAYER_NAME];
				GetCharacterName(playerid,name);
				format(str,sizeof(str),"[Company] %s has respawned empty company vehicles.",name);
				SendCompanyMsg(CharacterInfo[playerid][active_character[playerid]][cCompany],str);
				return 1;

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a company supervisor.");
		        return 1;

		    }

		}
		if(strcmp(tmp,"deposit",true) == 0)
		{

		    if(IsInBank(playerid))
		    {

	            new tmp2[32];
	            tmp2 = strtok(params,idx);
	            if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /company deposit [amount]"); return 1; }
				new amount = strval(tmp2);
				new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
				if(amount < 1 || amount > CharacterInfo[playerid][active_character[playerid]][cMoney]) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid deposit amount."); return 1; }
				CompanyInfo[slot][ciBank] += amount;
				CharacterInfo[playerid][active_character[playerid]][cMoney] -= amount;
				new str[128];
				format(str,sizeof(str),"You have deposited $%d into the company bank",amount);
				SendClientMessage(playerid,COLOR_YELLOW2,str);
				return 1;

	        }
	        else
	        {

	            SendErrorMsg(playerid,"You are not in a bank.");

	        }


		}
		if(strcmp(tmp,"withdraw",true) == 0)
		{

		    if(IsInBank(playerid))
		    {

		        if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] == COMP_PERMS_LEADER)
		        {

		            new tmp2[32];
		            tmp2 = strtok(params,idx);
		            if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /company withdraw [amount]"); return 1; }
					new amount = strval(tmp2);
					new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
					if(amount < 1 || amount > CompanyInfo[slot][ciBank]) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid withdraw amount."); return 1; }
					CompanyInfo[slot][ciBank] -= amount;
					CharacterInfo[playerid][active_character[playerid]][cMoney] += amount;
					new str[128];
					format(str,sizeof(str),"You have withdrawn $%d from the company bank",amount);
					SendClientMessage(playerid,COLOR_YELLOW2,str);
					return 1;

		        }

		    }
		    else
		    {

		        SendErrorMsg(playerid,"You are not in a bank.");
		        return 1;

		    }

		}
		if(strcmp(tmp,"setpay",true) == 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] == COMP_PERMS_LEADER)
		    {

				new tmp2[32];
				tmp2 = strtok(params,idx);
				if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /company setpay [1 - 40]"); return 1; }
				new amount = strval(tmp2);
				if(amount < 1 || amount > 40) { SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 1 or above 40"); return 1; }
				new slot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
				CompanyInfo[slot][ciPayRate] = amount;
				new str[128];
				format(str,sizeof(str),"You have set the payrate to %d percent",amount);
				SendClientMessage(playerid,COLOR_YELLOW2,str);
				return 1;

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not the leader of this company.");
		        return 1;

		    }

		}
		if(strcmp(tmp,"members",true) == 0)
		{

		    if(!HasCooldown(playerid,COOLDOWN_COMPMEMBERS))
		    {

			    ShowCompanyMembers(playerid);
			    SetCooldown(playerid,COOLDOWN_COMPMEMBERS,30);
			    return 1;

			}
			else
			{

			    new timeleft = GetCooldownLevel(playerid,COOLDOWN_COMPMEMBERS);
			    SendMsg(playerid,COLOR_LIGHTRED,"You cannot use this command for %d more seconds",timeleft);
			    return 1;

			}

		}
		if(strcmp(tmp,"work",true) == 0)
		{

		    if(IsInCompanyJobVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {

		        if(!company_work[playerid])
		        {

					SendCompanyJob(playerid);
					return 1;

		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"You already in a work mission.");
		            return 1;

		        }

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a company work vehicle.");
		        return 1;

		    }

		}
		if(strcmp(tmp,"setperms",true) == 0)
		{

			new tmp2[32];
	        tmp2 = strtok(params,idx);
	        if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /company setperms [playerid/player name] [member/supervisor/leader]"); return 1; }
	        new other = ReturnUser(tmp2);
	        if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
	        if(CharacterInfo[other][active_character[other]][cCompany] == CharacterInfo[playerid][active_character[playerid]][cCompany])
	        {

		        if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] == COMP_PERMS_LEADER)
		        {
			        new tmp3[32];
			        tmp3 = strtok(params,idx);
			        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /company setperms [playerid/player name] [member/supervisor/leader]"); return 1; }
			        if(strcmp(tmp3,"member",true) == 0)
			        {

			            CharacterInfo[other][active_character[other]][cCompanyPerms] = COMP_PERMS_MEMBER;
			            new name[MAX_PLAYER_NAME]; new str[128];
			            GetCharacterName(playerid,name);
			            format(str,sizeof(str),"%s has set your company permissions to MEMBER",name);
			            SendClientMessage(other,COLOR_YELLOW2,str);
			            GetCharacterName(other,name);
			            format(str,sizeof(str),"You have set %s's company permissions to MEMBER",name);
			            SendClientMessage(playerid,COLOR_YELLOW2,str);
			            return 1;

			        }
					if(strcmp(tmp3,"supervisor",true) == 0)
			        {

			            CharacterInfo[other][active_character[other]][cCompanyPerms] = COMP_PERMS_SUPER;
			            new name[MAX_PLAYER_NAME]; new str[128];
			            GetCharacterName(playerid,name);
			            format(str,sizeof(str),"%s has set your company permissions to SUPERVISOR",name);
			            SendClientMessage(other,COLOR_YELLOW2,str);
			            GetCharacterName(other,name);
			            format(str,sizeof(str),"You have set %s's company permissions to SUPERVISOR",name);
			            SendClientMessage(playerid,COLOR_YELLOW2,str);
			            return 1;

			        }
			        if(strcmp(tmp3,"leader",true) == 0)
			        {

			            CharacterInfo[other][active_character[other]][cCompanyPerms] = COMP_PERMS_LEADER;
			            new name[MAX_PLAYER_NAME]; new str[128];
			            GetCharacterName(playerid,name);
			            format(str,sizeof(str),"%s has set your company permissions to LEADER",name);
			            SendClientMessage(other,COLOR_YELLOW2,str);
			            GetCharacterName(other,name);
			            format(str,sizeof(str),"You have set %s's company permissions to LEADER",name);
			            SendClientMessage(playerid,COLOR_YELLOW2,str);
			            return 1;

			        }
					SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown permission set.");
					return 1;

		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"You are not the leader of the company.");
		            return 1;

		        }

	        }
		    else
		    {

				SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in your company.");
				return 1;

		    }

		}
		if(strcmp(tmp,"setrank",true) == 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] == COMP_PERMS_LEADER)
		    {

		        new tmp2[32];
		        tmp2 = strtok(params,idx);
		        if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /company setrank [playerid/player name] [rank name]"); return 1; }
		        new other = ReturnUser(tmp2);
		        if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		        if(CharacterInfo[other][active_character[other]][cCompany] == CharacterInfo[playerid][active_character[playerid]][cCompany])
		        {

					new result[256];
					FetchParamText(result,params,idx);
					if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /company setrank [playerid/player name] [rank name]"); return 1; }
		            format(CharacterInfo[other][active_character[other]][cCompanyRank],32,"%s",result);
		            new str[128];
		            new name[MAX_PLAYER_NAME];
		            GetCharacterName(playerid,name);
		            format(str,sizeof(str),"%s has set your company rank to %s",name,result);
		            SendClientMessage(other,COLOR_YELLOW2,str);
					GetCharacterName(other,name);
					format(str,sizeof(str),"You have set %s's company rank to %s",name,result);
					SendClientMessage(playerid,COLOR_YELLOW2,str);
					return 1;

		        }
		        else
		        {

					SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in your company.");
					return 1;

		        }

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not the leader of this company.");
		        return 1;

		    }

		}
		if(strcmp(tmp,"uninvite",true) == 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] >= COMP_PERMS_SUPER)
		    {

				new tmp2[32];
				tmp2 = strtok(params,idx);
				if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /company uninvite [playerid/playerid]"); return 1; }
				new other = ReturnUser(tmp2);
				if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
				if(CharacterInfo[other][active_character[other]][cCompany] == CharacterInfo[playerid][active_character[playerid]][cCompany])
				{

				    CharacterInfo[other][active_character[other]][cCompany] = 0;
				    CharacterInfo[other][active_character[other]][cCompanyPerms] = 0;
				    strdel(CharacterInfo[other][active_character[other]][cCompanyRank],0,strlen(CharacterInfo[other][active_character[other]][cCompanyRank]));
					new name[MAX_PLAYER_NAME];
					new str[128];
					GetCharacterName(other,name);
					format(str,sizeof(str),"You have removed %s from the company.",name);
					SendClientMessage(playerid,COLOR_YELLOW2,str);
					GetCharacterName(playerid,name);
					format(str,sizeof(str),"%s has removed you from the company.",name);
					SendClientMessage(other,COLOR_YELLOW2,str);
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not in your company.");
				    return 1;

				}

		    }
		    else
		    {

		        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a company supervisor or leader.");
		        return 1;

		    }

		}
		if(strcmp(tmp,"invite",true) == 0)
		{

		    if(CharacterInfo[playerid][active_character[playerid]][cCompanyPerms] == COMP_PERMS_LEADER)
		    {

				new tmp2[32];
				tmp2 = strtok(params,idx);
				if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /company invite [playerid/player name]"); return 1; }
				new other = ReturnUser(tmp2);
				if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
				if(CharacterInfo[other][active_character[other]][cCompany] == 0)
				{

				    if(CharacterInfo[other][active_character[other]][cLevel] >= 3)
				    {

						company_inviter[other] = playerid;
						new name[MAX_PLAYER_NAME];
						new str[128];
						new cslot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
						GetCharacterName(playerid,name);
						format(str,sizeof(str),"%s has invited you to %s (use /acceptcompany to join)",name,CompanyInfo[cslot][ciName]);
						SendClientMessage(other,COLOR_YELLOW2,str);
						GetCharacterName(other,name);
						format(str,sizeof(str),"You have invited %s to join the company",name);
						SendClientMessage(playerid,COLOR_YELLOW2,str);
						return 1;

					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not level 2, they cannot join your company");
					    return 1;

					}

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"This player is already in a company.");
				    return 1;

				}

		    }
			else
			{

			    SendErrorMsg(playerid,"You are not a company leader.");
			    return 1;

			}

		}
		if(strcmp(tmp,"finance",true) == 0)
		{

		    new str[256];
		    new cslot = FetchCompanySlot(CharacterInfo[playerid][active_character[playerid]][cCompany]);
		    format(str,sizeof(str),"Bank Balance: $%d\nTotal income from work: $%d\nTotal number of jobs complete: %d",CompanyInfo[cslot][ciBank],CompanyInfo[cslot][ciJobMoney],CompanyInfo[cslot][ciJobsComplete]);
		    ShowPlayerDialog(playerid,999,DIALOG_STYLE_MSGBOX,"Company Finances",str,"Close","");
		    return 1;

		}
		SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown action.");
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a company.");
        return 1;

    }

}

COMMAND:acceptcompany(playerid,params[])
{

	if(company_inviter[playerid] > -1)
	{

	    new str[128];
	    new name[MAX_PLAYER_NAME];
	    GetCharacterName(playerid,name);
	    format(str,sizeof(str),"%s has accepted your company invite",name);
	    SendClientMessage(company_inviter[playerid],COLOR_YELLOW2,str);
		GetCharacterName(company_inviter[playerid],name);
		format(str,sizeof(str),"You have accepted %s's company invite",name);
		SendClientMessage(playerid,COLOR_YELLOW2,str);
		CharacterInfo[playerid][active_character[playerid]][cCompany] = CharacterInfo[company_inviter[playerid]][active_character[company_inviter[playerid]]][cCompany];
		company_inviter[playerid] = -1;
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You have not been invited to a company.");
	    return 1;

	}

}

COMMAND:spikestrip(playerid,params[])
{

	if(IsLaw(playerid) && duty[playerid])
	{

	    if(GetPlayerInterior(playerid) == 0)
	    {

	        if(!IsPlayerInAnyVehicle(playerid))
	        {

	            new Float:A, Float:X, Float:Y, Float:Z;
	            GetPlayerFacingAngle(playerid,A);
	            GetPlayerPos(playerid,X,Y,Z);
	            CreateStrip(X,Y,Z,A);
	            SendEmote(playerid,"lays down a spike strip.");
	            return 1;

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_LIGHTRED,"Get out of your vehicle first.");
	            return 1;

	        }

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot place a spike-strip indoors.");
	        return 1;

	    }

	}
	else
	{

	    SendErrorMsg(playerid,"You are not a cop or are not on duty.");
	    return 1;

	}

}

COMMAND:removestrip(playerid,params[])
{

	if(IsLaw(playerid) && duty[playerid])
	{

	    if(GetPlayerInterior(playerid) == 0)
	    {

	        if(!IsPlayerInAnyVehicle(playerid))
	        {

                DeleteClosestStrip(playerid);
	            return 1;

	        }
	        else
	        {

	            SendClientMessage(playerid,COLOR_LIGHTRED,"Get out of your vehicle first.");
	            return 1;

	        }

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot remove a spike-strip indoors.");
	        return 1;

	    }

	}
	else
	{

	    SendErrorMsg(playerid,"You are not a cop or are not on duty.");
	    return 1;

	}

}

COMMAND:sr(playerid,params[])
{

	new idx = 0;
	if(last_text[playerid] > -1)
    {

        if(IsPlayerConnectedEx(last_text[playerid]))
        {

			new result[256];
			FetchParamText(result,params,idx);
			if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /sr [message]"); return 1; }
			SendSMS(playerid,CharacterInfo[last_text[playerid]][active_character[last_text[playerid]]][cPhone],result);
			return 1;

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"This player is no longer connected.");
            last_text[playerid] = -1;
            return 1;

        }

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"No one has text you.");
        return 1;

    }

}

COMMAND:refresh(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
    {

        Refresh();
        SendClientMessage(playerid,COLOR_WHITE,"Commiting refresh");
        return 1;

    }
    return 0;

}

COMMAND:reloadcompanies(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
    {

        reloading_companies = 1;
        SaveCompanies();
        SendClientMessage(playerid,COLOR_WHITE,"Companies reloading.");
        return 1;

    }
    else
	{

		SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
		return 1;

    }

}

COMMAND:tpvehicleuid(playerid,params[])
{

	new idx = 0;
	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        new tmp[32];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /tpvehicleuid [Vehicle UID]"); return 1; }
        new uid = strval(tmp);
        if(uid < 1 || uid > 5000) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid UID."); return 1; }
        for(new i = 0; i < MAX_RP_VEHICLES; i ++)
		{

            if(VehicleInfo[i][vModel] > 0)
            {

                if(!VehicleInfo[i][vImpounded])
                {

					if(VehicleInfo[i][vID] == uid)
					{

					    new Float:X, Float:Y, Float:Z;
					    GetVehiclePos(VehicleInfo[i][vVehicle],X,Y,Z);
					    SetPlayerPos(playerid,X,Y,Z);
					    SetPlayerInterior(playerid,0);
					    SetPlayerVirtualWorld(playerid,0);
					    return 1;

					}

                }

            }

        }
        SendClientMessage(playerid,COLOR_LIGHTRED,"Unable to find vehicle, or it is impounded.");
        return 1;

    }
    else
    {

		SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
		return 1;

    }

}

COMMAND:g(playerid,params[])
{

	if(NearOpenableGate(playerid))
	{

		ShowPlayerDialog(playerid,DIALOG_GATE,DIALOG_STYLE_PASSWORD,"Gate Password","{FFFFFF}Enter the correct password to pass through this gate","Confirm","Cancel");
		return 1;

	}
	else
	{

		SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near one of your gates.");
		return 1;

	}

}

COMMAND:c(playerid,params[])
{

	new idx = 0;
    if(CharacterInfo[playerid][active_character[playerid]][cCompany] > 0)
    {

		new result[256];
		FetchParamText(result,params,idx);
		if(!strlen(result)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /c [company chat]"); return 1; }
		new str[256];
		new name[MAX_PLAYER_NAME];
		GetCharacterName(playerid,name);
		format(str,sizeof(str),"[Company Chat] %s %s: %s",CharacterInfo[playerid][active_character[playerid]][cCompanyRank],name,result);
		SendCompanyMsg(CharacterInfo[playerid][active_character[playerid]][cCompany],str);
		return 1;

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a company.");
        return 1;

    }

}

COMMAND:clearstrips(playerid,params[])
{

	if(IsLaw(playerid) && duty[playerid])
    {

        if(CharacterInfo[playerid][active_character[playerid]][cFactionPermissions] >= FAC_PERM_SUPER)
        {

            DeleteAllStrip();
            new str[128];
            new name[MAX_PLAYER_NAME];
            GetCharacterName(playerid,name);
            format(str,sizeof(str),"[Faction] %s %s has removed all spike-strips.",CharacterInfo[playerid][active_character[playerid]][cRankName],name);
            SendFactionMessage(CharacterInfo[playerid][active_character[playerid]][cFaction],str);
            return 1;

        }
        else
        {

            SendErrorMsg(playerid,"You are not a supervisor.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a cop or are not on duty.");
        return 1;

    }

}

COMMAND:resetspawnvar(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {

		vehicle_creating = 0;
		SendClientMessage(playerid,COLOR_WHITE,"Var Reset");
		return 1;

    }
    return 0;

}

COMMAND:savevehicles(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		SendClientMessage(playerid,COLOR_WHITE,"Saving Vehicles");
		SaveVehicles();
		return 1;

    }
    return 0;

}

COMMAND:restarttimers(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
	{

	    for(new i = 0; i < sizeof(timers); i ++)
	    {

			KillTimer(timers[i]);

	    }
		StartTimers();
		SendClientMessage(playerid,COLOR_WHITE,"Timers restarted.");
		return 1;

	}
	else
	{

	    SendErrorMsg(playerid,"You are not a supervisor.");
	    return 1;

	}

}

COMMAND:stockmarket(playerid,params[])
{

	if(InStockMarket(playerid))
	{

		TextDrawShowForPlayer(playerid,stocktitle);
		TextDrawShowForPlayer(playerid,stockcontent);
		SendClientMessage(playerid,COLOR_YELLOW,"Use /stock buy to purchase some stocks.");
		SendClientMessage(playerid,COLOR_YELLOW,"Use your FIRE key to hide this box.");
		displaying_stock[playerid] = 1;
		return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a stock market.");
	    return 1;

	}

}

COMMAND:refreshstock(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_LEAD)
    {

    	RefreshStockMarket();
		SendClientMessage(playerid,COLOR_WHITE,"Stock market refreshed.");
		return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a lead admin.");
        return 1;

    }

}

COMMAND:stock(playerid,params[])
{

	new idx = 0;
    if(!InStock(playerid)) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a stock market."); return 1; }
    if(!HasCooldown(playerid,COOLDOWN_STOCK))
    {
		new tmp[32];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /stock [action] [value(if required)]"); SendClientMessage(playerid,COLOR_YELLOW2,"Actions: list,buy,sell"); return 1; }
		SetCooldown(playerid,COOLDOWN_STOCK,10);
		if(strcmp(tmp,"sell",true) == 0)
		{

		    new tmp2[32];
		    tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /stock sell [stock #(/stock list)]"); return 1; }
			new item = strval(tmp2);
			if(item > 0)
			{

			    SellStock(playerid,item);
			    return 1;

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid stock #");
			    return 1;

			}

		}
		if(strcmp(tmp,"list",true) == 0)
		{

			new str[256];
			format(str,sizeof(str),"SELECT type,amount FROM rp_stock WHERE owner = '%d' LIMIT 50",CharacterInfo[playerid][active_character[playerid]][cID]);
			mysql_query(str,player_threads[playerid],QUERY_STOCK_LIST);
			return 1;

		}
		if(strcmp(tmp,"buy",true) == 0)
		{

		    new tmp2[32];
		    tmp2 = strtok(params,idx);
		    if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /stock buy [vehicle/food/mod/store/bar/ad/bank] [amount]"); return 1; }
		    if(strcmp(tmp2,"bank",true) == 0)
		    {

		        new tmp3[32];
		        tmp3 = strtok(params,idx);
		        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /stock buy [vehicle/food/mod/store/bar/ad/bank] [amount]"); return 1; }
		        new amount = strval(tmp3);
		        if(amount > 0)
		        {

					if(stock_value[STOCK_BANK] > 0)
					{

					    new price = ((stock_value[STOCK_BANK] * amount) + 50);
					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
					    {

					        BuyStock(playerid,STOCK_BANK,amount);
					        return 1;

					    }
					    else
					    {

							SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d",price);
							return 1;

						}


					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot buy stocks when their value is so low.");
					    return 1;

					}
		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 1");
		            return 1;

		        }

		    }
		    if(strcmp(tmp2,"ad",true) == 0)
		    {

		        new tmp3[32];
		        tmp3 = strtok(params,idx);
		        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /stock buy [vehicle/food/mod/store/bar/ad/bank] [amount]"); return 1; }
		        new amount = strval(tmp3);
		        if(amount > 0)
		        {

					if(stock_value[STOCK_AD] > 0)
					{

					    new price = ((stock_value[STOCK_AD] * amount) + 50);
					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
					    {

					        BuyStock(playerid,STOCK_AD,amount);
					        return 1;

					    }
					    else
					    {

							SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d",price);
							return 1;

						}


					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot buy stocks when their value is so low.");
					    return 1;

					}
		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 1");
		            return 1;

		        }

		    }
		    if(strcmp(tmp2,"bar",true) == 0)
		    {

		        new tmp3[32];
		        tmp3 = strtok(params,idx);
		        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /stock buy [vehicle/food/mod/store/bar/ad/bank] [amount]"); return 1; }
		        new amount = strval(tmp3);
		        if(amount > 0)
		        {

					if(stock_value[STOCK_DRINK] > 0)
					{

					    new price = ((stock_value[STOCK_DRINK] * amount) + 50);
					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
					    {

					        BuyStock(playerid,STOCK_DRINK,amount);
					        return 1;

					    }
					    else
					    {

							SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d",price);
							return 1;

						}


					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot buy stocks when their value is so low.");
					    return 1;

					}
		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 1");
		            return 1;

		        }

		    }
		    if(strcmp(tmp2,"store",true) == 0)
		    {

		        new tmp3[32];
		        tmp3 = strtok(params,idx);
		        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /stock buy [vehicle/food/mod/store/bar/ad/bank] [amount]"); return 1; }
		        new amount = strval(tmp3);
		        if(amount > 0)
		        {

					if(stock_value[STOCK_STORE] > 0)
					{

					    new price = ((stock_value[STOCK_STORE] * amount) + 50);
					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
					    {

					        BuyStock(playerid,STOCK_STORE,amount);
					        return 1;

					    }
					    else
					    {

							SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d",price);
							return 1;

						}

					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot buy stocks when their value is so low.");
					    return 1;

					}

		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 1");
		            return 1;

		        }

		    }
		    if(strcmp(tmp2,"mod",true) == 0)
		    {

		        new tmp3[32];
		        tmp3 = strtok(params,idx);
		        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /stock buy [vehicle/food/mod/store/bar/ad/bank] [amount]"); return 1; }
		        new amount = strval(tmp3);
		        if(amount > 0)
		        {

					if(stock_value[STOCK_MOD] > 0)
					{

					    new price = ((stock_value[STOCK_MOD] * amount) + 50);
					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
					    {

					        BuyStock(playerid,STOCK_MOD,amount);
					        return 1;

					    }
					    else
					    {

							SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d",price);
							return 1;

						}


					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot buy stocks when their value is so low.");
					    return 1;

					}
		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 1");
		            return 1;

		        }

		    }
		    if(strcmp(tmp2,"food",true) == 0)
		    {

		        new tmp3[32];
		        tmp3 = strtok(params,idx);
		        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /stock buy [vehicle/food/mod/store/bar/ad/bank] [amount]"); return 1; }
		        new amount = strval(tmp3);
		        if(amount > 0)
		        {

					if(stock_value[STOCK_FOOD] > 0)
					{

					    new price = ((stock_value[STOCK_FOOD] * amount) + 50);
					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
					    {

					        BuyStock(playerid,STOCK_FOOD,amount);
					        return 1;

					    }
					    else
					    {

							SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d",price);
							return 1;

						}


					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot buy stocks when their value is so low.");
					    return 1;

					}
		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 1");
		            return 1;

		        }

		    }
		    if(strcmp(tmp2,"vehicle",true) == 0)
		    {

		        new tmp3[32];
		        tmp3 = strtok(params,idx);
		        if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /stock buy [vehicle/food/mod/store/bar/ad/bank] [amount]"); return 1; }
		        new amount = strval(tmp3);
		        if(amount > 0)
		        {

					if(stock_value[STOCK_VEHICLE] > 0)
					{

					    new price = ((stock_value[STOCK_VEHICLE] * amount) + 50);
					    if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= price)
					    {

					        BuyStock(playerid,STOCK_VEHICLE,amount);
					        return 1;

					    }
					    else
					    {

							SendMsg(playerid,COLOR_LIGHTRED,"You do not have $%d",price);
							return 1;

						}


					}
					else
					{

					    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot buy stocks when their value is so low.");
					    return 1;

					}
		        }
		        else
		        {

		            SendClientMessage(playerid,COLOR_LIGHTRED,"Amount cannot be below 1");
		            return 1;

		        }

		    }
			SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown stock type.");
			return 1;

		}
		SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown action.");
		return 1;
	}
	else
	{

	    SendMsg(playerid,COLOR_LIGHTRED,"You cannot use another stock command for %d seconds",GetCooldownLevel(playerid,COOLDOWN_STOCK));
	    return 1;

	}


}

COMMAND:firepos(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        new slot = fetchNextFireSlot();
        if(slot > -1)
        {

            new Float:X, Float:Y, Float:Z;
            GetPlayerPos(playerid,X,Y,Z);
            fire_sys_pos[slot][0] = X;
            fire_sys_pos[slot][1] = Y;
            fire_sys_pos[slot][2] = (Z - 2.0);
            SendMsg(playerid,COLOR_GREEN,"Fire position %d saved.",slot);
            return 1;

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"No fire slots available.");
            return 1;

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:startfires(playerid,params[])
{

    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

		IgniteFires();
		SendClientMessage(playerid,COLOR_GREEN,"Fires Ignited.");
		return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a supervisor.");
        return 1;

    }

}

COMMAND:removefires(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_SUPER)
    {

        RemoveFires();
        SendClientMessage(playerid,COLOR_GREEN,"Fires Removed");
        return 1;

   	}
   	else
   	{

   	    SendErrorMsg(playerid,"You are not a supervisor.");
   	    return 1;

   	}

}

COMMAND:ringtone(playerid,params[])
{

	new idx = 0;
	if(character_chosen[playerid])
    {

        if(!HasCooldown(playerid,COOLDOWN_RINGTONE))
        {

        	if(Audio_IsClientConnected(playerid))
	        {

		        new tmp[32];
				tmp = strtok(params,idx);
				if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /ringtone [action] [value(if required)]"); return 1; }
				if(strcmp(tmp,"set",true) == 0)
				{

					new tmp2[32];
					tmp2 = strtok(params,idx);
					if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /ringtone set [ringtone #(/ringtone list)]"); return 1; }
					new ringtone = strval(tmp2);
					if(ringtone < 1) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid ringtone #"); return 1; }
					listen_ringtone[playerid] = ringtone;
					new str[256];
					format(str,sizeof(str),"SELECT stream,name FROM rp_ringtones ORDER BY name");
					mysql_query(str,player_threads[playerid],QUERY_SET_RINGTONE);
					return 1;

				}
				if(strcmp(tmp,"listen",true) == 0)
				{

					new tmp2[32];
					tmp2 = strtok(params,idx);
					if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /ringtone listen [ringtone #(/ringtone list)]"); return 1; }
					new ringtone = strval(tmp2);
					if(ringtone < 1) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid ringtone #"); return 1; }
					listen_ringtone[playerid] = ringtone;
					new str[256];
					format(str,sizeof(str),"SELECT stream,name FROM rp_ringtones ORDER BY name");
					mysql_query(str,player_threads[playerid],QUERY_LISTEN_RINGTONE);
					return 1;

				}
				if(strcmp(tmp,"list",true) == 0)
				{

			        ShowRingtones(playerid);
			        return 1;

				}
				SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown action.");
				return 1;

			}
			else
			{

			    SendErrorMsg(playerid,"You do not have the Audio Mod.");
			    return 1;

			}

		}
		else
		{

		    SendMsg(playerid,COLOR_LIGHTRED,"You cannot use a ringone command for %d more seconds",GetCooldownLevel(playerid,COOLDOWN_RINGTONE));
		    return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"Choose your character first first.");
        return 1;

    }

}

COMMAND:boombox(playerid,params[])
{

	if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{

	    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_BOOMBOX,1))
	    {

			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !death_mode[playerid])
			{

			    if(!HasPlacedBoomBox(playerid))
			    {

				    new Float:X, Float:Y, Float:Z, Float:R;
				    GetPlayerPos(playerid,X,Y,Z);
				    GetPosInFrontOfPlayer(playerid, X, Y, 1.5);
				    GetPlayerFacingAngle(playerid,R);
				    CreateBoomBox(playerid,X,Y,Z,R);
				    SendClientMessage(playerid,COLOR_YELLOW2,"You have placed a Boom Box here, use /tuneboombox to tune it.");
				    CallLocalFunction("cmd_bomb","is",playerid,"1");
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You have already placed a Boom Box somewhere, please remove your old one first.");
				    return 1;

				}

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot do that at the moment.");
			    return 1;

			}

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have a boom box.");
	        return 1;

	    }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot place that here.");
	    return 1;

	}

}

COMMAND:tuneboombox(playerid,params[])
{

	new idx = 0;
	new box = GetClosestBoomBox(playerid,7.5);
	if(box > -1)
	{

	    new tmp[32];
	    tmp = strtok(params,idx);
	    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /tuneboombox [radio station # (/radiostations)]"); return 1; }
	    new id = strval(tmp);
	    if(id < 1 || id > 99999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid radio ID"); return 1; }
	    if(!HasCooldown(playerid,COOLDOWN_BOOMBOX))
	    {

			changing_boombox[playerid] = box;
			new str[256];
			format(str,sizeof(str),"SELECT URL FROM rp_radio_stations WHERE radioID = '%d' LIMIT 1",id);
		    mysql_query(str,player_threads[playerid],QUERY_TUNE_BOOMBOX);
		    SetCooldown(playerid,COOLDOWN_BOOMBOX,10);
		    return 1;

		}
		else
		{

		    SendMsg(playerid,COLOR_LIGHTRED,"You cannot use this command again for another %d seconds",GetCooldownLevel(playerid,COOLDOWN_BOOMBOX));
		    return 1;

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a boom box");
	    return 1;

	}

}

COMMAND:radiostations(playerid,params[])
{

	if(!HasCooldown(playerid,COOLDOWN_RADIOSTATIONS))
    {

    	mysql_query("SELECT * FROM rp_radio_stations ORDER BY radioID",player_threads[playerid],QUERY_REQ_STATIONS);
	    SetCooldown(playerid,COOLDOWN_RADIOSTATIONS,10);
	    return 1;

	}
	else
	{

	    SendMsg(playerid,COLOR_LIGHTRED,"You cannot use this command for another %d seconds",GetCooldownLevel(playerid,COOLDOWN_RADIOSTATIONS));
	    return 1;

	}

}

COMMAND:pickupboombox(playerid,params[])
{

	if(!HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_BOOMBOX,1))
    {

        new box = GetClosestBoomBox(playerid,7.5);
        if(box > -1)
        {

            BoomBoxInfo[box][boUsed] = 0;
            BoomBoxInfo[box][boX] = 0.0;
            BoomBoxInfo[box][boY] = 0.0;
            BoomBoxInfo[box][boZ] = 0.0;
			strdel(BoomBoxInfo[box][boStream],0,strlen(BoomBoxInfo[box][boStream]));
			BoomBoxInfo[box][boPlacer] = 0;
			DestroyObject(BoomBoxInfo[box][boObject]);
			GiveItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_BOOMBOX,1);
            RefreshBoomBoxListeners(box);
            SendEmote(playerid,"picks up and turns off a nearby Boom Box");
            CallLocalFunction("cmd_bomb","is",playerid,"1");
            return 1;

        }
        else
        {

            SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a boom box.");
            return 1;

        }

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry more than 1 boom box at a time.");
        return 1;

    }

}

COMMAND:language(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cLanguage])
    {

        if(active_language[playerid] == -1)
        {

	        active_language[playerid] = CharacterInfo[playerid][active_character[playerid]][cLanguage];
	        new name[64];
			FetchLanguageName(active_language[playerid],name);
			new str[128];
			format(str,sizeof(str),"You are now speaking in %s",name);
			SendClientMessage(playerid,COLOR_GREEN,str);
			return 1;

		}
		else
		{

		    active_language[playerid] = -1;
		    SendClientMessage(playerid,COLOR_GREEN,"You are now speaking English.");
		    return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You don't know a second language.");
        return 1;

    }

}

COMMAND:buylanguage(playerid,params[])
{

	if(InLibrary(playerid))
	{

		ShowPlayerDialog(playerid,DIALOG_LANGUAGE,DIALOG_STYLE_LIST,"Choose a language to learn...","Spanish [$5000]\nItalian [$5000]\nChinese [$5000]\nGerman [$5000]\n French [$5000]","Confirm","Cancel");
		SendClientMessage(playerid,COLOR_YELLOW,"Choose a language...");
		return 1;

	}
	else
	{

		SendErrorMsg(playerid,"You are not in a library");
		return 1;

	}

}

COMMAND:unban(playerid,params[])
{

	new idx = 0;
	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

		new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /unban [account name]"); return 1; }
		new clean_tmp[64];
		mysql_real_escape_string(tmp,clean_tmp);
		new str[256];
		format(str,sizeof(str),"SELECT id FROM rp_users WHERE name = '%s'",clean_tmp);
		mysql_query(str,player_threads[playerid],QUERY_UNBAN);
		format(unbanning_player[playerid],MAX_PLAYER_NAME,"%s",clean_tmp);
		return 1;

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not an admin.");
        return 1;

    }

}

COMMAND:factionhelp(playerid,params[])
{

	new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

        switch(FactionInfo[slot][fType])
        {

            case FAC_TYPE_LAW:
            {

                SendClientMessage(playerid,COLOR_GREEN,"|-----Law Enforcement Faction-----|");
                SendClientMessage(playerid,COLOR_WHITE,"Commands: /mdc /arrest /frisk /take /giveweaponlicense /ticket /tazer /(m)egaphone");
                SendClientMessage(playerid,COLOR_WHITE,"Commands: /duty /uodduty /swatduty /medicduty /impound /(f)action /spikestrip /removestrip");
                return 1;

            }
            case FAC_TYPE_NEWS:
            {

                SendClientMessage(playerid,COLOR_GREEN,"|-----News Faction-----|");
                SendClientMessage(playerid,COLOR_WHITE,"Commands: /broadcast /interview /(f)action");
                return 1;

            }
            case FAC_TYPE_GENERAL:
            {

                SendClientMessage(playerid,COLOR_GREEN,"|-----Criminal Faction-----|");
                SendClientMessage(playerid,COLOR_WHITE,"Commands: /gunrun /(f)action");
                return 1;

            }

        }

    }
    else
    {

        SendErrorMsg(playerid,"You are not in a faction");
        return 1;

    }
    return 1;

}

COMMAND:gunrun(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cFaction] > 0)
    {

        new faction = CharacterInfo[playerid][active_character[playerid]][cFaction];
        new slot = GetFactionSlot(CharacterInfo[playerid][active_character[playerid]][cFaction]);
        if(FactionInfo[slot][fType] == FAC_TYPE_GENERAL)
        {

            if((gettime() - faction_gunrun_cooldowns[faction]) >= 10800)
            {

                if(!IsFactionMemberDoingGunRun(faction))
                {

					gunrun[playerid] = 1;
					SetPlayerCheckpoint(playerid,263.2529,2895.9214,10.5391,3.0);
					SendClientMessage(playerid,COLOR_GREEN,"Move to the checkpoint to perform a gunrun.");
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"A member of your faction is already doing a gun run!");
				    return 1;

				}

            }
            else
            {

                SendClientMessage(playerid,COLOR_LIGHTRED,"Your faction has done a gun run within the past 3 hours, please wait before doing another.");
                return 1;

            }

        }
        else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a criminal faction.");
		    return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a faction.");
        return 1;

    }

}

COMMAND:buyskill(playerid,params[])
{

	new idx = 0;
	if(InLibrary(playerid))
	{

		new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_YELLOW2,"USAGE: /buyskill [skill]"); SendClientMessage(playerid,COLOR_YELLOW2,"Skills: miner, manufacturer, mechanic, fisherman"); SendClientMessage(playerid,COLOR_YELLOW,"Skills cost $2500"); return 1; }
		if(CharacterInfo[playerid][active_character[playerid]][cMoney] < 2500) { SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $2500"); return 1; }
		if(strcmp(tmp,"fisherman",true) == 0)
		{

		    learning_skill[playerid] = SKILL_FISHER;
		    if(!CharacterInfo[playerid][active_character[playerid]][cSkill])
		    {

		        SendClientMessage(playerid,COLOR_YELLOW2,"Learning skill.. Please wait..");
                SetPlayerProgressBar(playerid,PROGRESS_BAR_LEARNSKILL,30);
				return 1;

		    }
		    else
		    {

		        SendConfirmationMsg(playerid,"{FF3333}WARNING: {FFFFFF}Learning this skill will {FF3333}destroy{FFFFFF} your current skill, are you sure you wish to continue?",CONFIRM_TYPE_LEARNSKILL,0);
		        return 1;

		    }

		}
		if(strcmp(tmp,"miner",true) == 0)
		{

		    learning_skill[playerid] = SKILL_MINER;
		    if(!CharacterInfo[playerid][active_character[playerid]][cSkill])
		    {

		        SendClientMessage(playerid,COLOR_YELLOW2,"Learning skill.. Please wait..");
                SetPlayerProgressBar(playerid,PROGRESS_BAR_LEARNSKILL,30);
				return 1;

		    }
		    else
		    {

		        SendConfirmationMsg(playerid,"{FF3333}WARNING: {FFFFFF}Learning this skill will {FF3333}destroy{FFFFFF} your current skill, are you sure you wish to continue?",CONFIRM_TYPE_LEARNSKILL,0);
		        return 1;

		    }

		}
		if(strcmp(tmp,"manufacturer",true) == 0)
		{

		    learning_skill[playerid] = SKILL_MANUFACTER;
		    if(!CharacterInfo[playerid][active_character[playerid]][cSkill])
		    {

		        SendClientMessage(playerid,COLOR_YELLOW2,"Learning skill.. Please wait..");
                SetPlayerProgressBar(playerid,PROGRESS_BAR_LEARNSKILL,30);
				return 1;

		    }
		    else
		    {

		        SendConfirmationMsg(playerid,"{FF3333}WARNING: {FFFFFF}Learning this skill will {FF3333}destroy{FFFFFF} your current skill, are you sure you wish to continue?",CONFIRM_TYPE_LEARNSKILL,0);
		        return 1;

		    }

		}
		if(strcmp(tmp,"mechanic",true) == 0)
		{

		    learning_skill[playerid] = SKILL_MECHANIC;
		    if(!CharacterInfo[playerid][active_character[playerid]][cSkill])
		    {

		        SendClientMessage(playerid,COLOR_YELLOW2,"Learning skill.. Please wait..");
                SetPlayerProgressBar(playerid,PROGRESS_BAR_LEARNSKILL,30);
				return 1;

		    }
		    else
		    {

		        SendConfirmationMsg(playerid,"{FF3333}WARNING: {FFFFFF}Learning this skill will {FF3333}destroy{FFFFFF} your current skill, are you sure you wish to continue?",CONFIRM_TYPE_LEARNSKILL,0);
		        return 1;

		    }

		}
		SendClientMessage(playerid,COLOR_LIGHTRED,"Unknown skill.");
	    return 1;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a library.");
	    return 1;

	}

}

COMMAND:mine(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cSkill] == SKILL_MINER)
    {
	    if(!HasCooldown(playerid,COOLDOWN_MINE))
	    {

	        if(!HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_METAL,10))
	        {

	            if(!mining[playerid])
	            {

			        new pos = random(sizeof(mining_pos));
					SetPlayerCheckpoint(playerid,mining_pos[pos][0],mining_pos[pos][1],mining_pos[pos][2],2.5);
					SendClientMessage(playerid,COLOR_GREEN,"Move to the checkpoint to mine.");
					SetCooldown(playerid,COOLDOWN_MINE,20);
					mining[playerid] = 1;
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You are already mining.");
				    return 1;

				}

			}
			else
			{

				SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot carry anymore metal!");
				return 1;

			}

	    }
	    else
	    {

	        SendMsg(playerid,COLOR_LIGHTRED,"Please wait %d seconds before performing this command again.",GetCooldownLevel(playerid,COOLDOWN_MINE));
	        return 1;

	    }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a miner.");
	    return 1;

	}

}

COMMAND:convertmetal(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cSkill] == SKILL_MANUFACTER)
    {

        if(IsPlayerInRangeOfPoint(playerid,10.0,2138.2322,-102.7895,3.8547))
        {

			if(!HasCooldown(playerid,COOLDOWN_MANUFACTER))
			{

			    if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_METAL,1))
			    {

				    SetPlayerProgressBar(playerid,PROGRESS_BAR_METAL,10);
					SetCooldown(playerid,COOLDOWN_MANUFACTER,20);
					SendEmote(playerid,"begins shaping peices of metal");
					TogglePlayerControllable(playerid,0);
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have any metal.");
				    return 1;

				}

			}
			else
			{

			    SendMsg(playerid,COLOR_LIGHTRED,"Please wait %d seconds before doing this command again",GetCooldownLevel(playerid,COOLDOWN_MANUFACTER));
			    return 1;

			}

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not at the manufacturing plant, marked on your map.");
		    SetPlayerCheckpoint(playerid,2138.2322,-102.7895,3.8547,2.5);
		    cp_target[playerid] = 1;
		    return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a manufacturer");
        return 1;

    }

}

COMMAND:repaircar(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cSkill] == SKILL_MECHANIC)
   	{

   	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
   	    {

			if(HasItem(INVENTORY_TYPE_PLAYER,playerid,INVENTORY_CARPART,4))
			{

				new Float:hp;
				GetVehicleHealth(GetPlayerVehicleID(playerid),hp);
				if(hp < 900)
				{
					SetPlayerProgressBar(playerid,PROGRESS_BAR_REPAIR,60);
					SendEmote(playerid,"begins repairing the vehicle.");
					TogglePlayerControllable(playerid,0);
					return 1;

				}
				else
				{

				    SendClientMessage(playerid,COLOR_LIGHTRED,"This vehicle does not need to be repaired.");
				    return 1;

				}

			}
			else
			{

			    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have 4 car parts.");
			    return 1;

			}

   	    }
   	    else
   	    {

   	        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not driving a vehicle.");
   	        return 1;

   	    }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have the mechanic skill..");
	    return 1;

	}

}

COMMAND:skillhelp(playerid,params[])
{

	if(CharacterInfo[playerid][active_character[playerid]][cSkill] > 0)
    {

        switch(CharacterInfo[playerid][active_character[playerid]][cSkill])
        {

			case SKILL_FISHER:
			{

              	SendClientMessage(playerid,COLOR_GREEN,"|----Fisherman----|");
                SendClientMessage(playerid,COLOR_WHITE,"As a fisherman, you can fish for fish to sell at the market, the higher the skill the more chance you have of catching a fish.");
                SendClientMessage(playerid,COLOR_WHITE,"Commands: /fish");
                return 1;

			}
            case SKILL_MECHANIC:
            {

                SendClientMessage(playerid,COLOR_GREEN,"|----Mechanic Skill----|");
                SendClientMessage(playerid,COLOR_WHITE,"As a mechanic you can repair vehicles, the higher your skill the more you can repair. To repair vehicles, you need car parts.");
                SendClientMessage(playerid,COLOR_WHITE,"Commands: /repaircar");
                return 1;

            }
            case SKILL_MINER:
            {

                SendClientMessage(playerid,COLOR_GREEN,"|----Miner Skill----|");
                SendClientMessage(playerid,COLOR_WHITE,"As a miner you can mine for metal!");
                SendClientMessage(playerid,COLOR_WHITE,"Commands: /mine");
                return 1;

            }
            case SKILL_MANUFACTER:
            {

                SendClientMessage(playerid,COLOR_GREEN,"|----Manufacturer Skill----|");
                SendClientMessage(playerid,COLOR_WHITE,"As a manufacturer you can convert metal to car parts!");
                SendClientMessage(playerid,COLOR_WHITE,"Commands: /convertmetal");
                return 1;

            }

        }

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have a skill.");
        return 1;

    }
    return 1;

}

COMMAND:arrsave(playerid,params[])
{

	if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_ADMIN)
    {

	    new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid,X,Y,Z);
	    new str[256];
	    format(str,sizeof(str),"{%f,%f,%f},\n",X,Y,Z);
	    new File:file = fopen("coords.txt",io_append);
	    fwrite(file,str);
	    fclose(file);
	    SendClientMessage(playerid,COLOR_WHITE,"Saved.");
	    return 1;

	}
	return 0;

}

COMMAND:siren(playerid,params[])
{

	if(InCopCar(playerid))
    {

        new veh = GetPlayerVehicleID(playerid);
        if(!vehicle_siren_state[veh])
        {

  			vehicle_siren_object[veh] = CreateObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
  			vehicle_siren_state[veh] = 1;
  			AttachObjectToVehicle(vehicle_siren_object[veh], veh, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
  			return 1;

  		}
  		else
  		{

			DestroyObject(vehicle_siren_object[veh]);
			vehicle_siren_state[veh] = 0;
  			return 1;

  		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not in a cop car.");
        return 1;

    }

}

COMMAND:cuff(playerid,params[])
{

	new idx = 0;
	if(IsLaw(playerid) && duty[playerid])
    {

		new tmp[32];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /cuff [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(GetDistanceBetweenPlayers(playerid,other) > 7.5) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near this player."); return 1; }
		if(playerid == other) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot cuffs yourself."); return 1; }
		if(!cuffed[other])
		{

		    SetPlayerSpecialAction(other,SPECIAL_ACTION_CUFFED);
		    new name[MAX_PLAYER_NAME];
		    GetCharacterName(other,name);
		    new str[128];
		    format(str,sizeof(str),"takes out a pair of handcuffs and cuffs %s");
			SendEmote(playerid,str);
			cuffed[other] = 1;
			cl_SetClothing(other,CLOTHING_MISC,19418,6,-0.011000, 0.028000, -0.022000, -15.600012, -33.699977,-81.700035, 0.891999, 1.000000, 1.168000);
			return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"This player is already cuffed, use /uncuff to uncuff them.");
		    return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a cop or are not duty.");
        return 1;

    }

}

COMMAND:uncuff(playerid,params[])
{

	new idx = 0;
    if(IsLaw(playerid) && duty[playerid])
    {

		new tmp[32];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USAGE: /uncuff [playerid/player name]"); return 1; }
		new other = ReturnUser(tmp);
		if(!IsPlayerConnectedEx(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not connected."); return 1; }
		if(GetDistanceBetweenPlayers(playerid,other) > 7.5) { SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near this player."); return 1; }
		if(playerid == other) { SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot cuffs yourself."); return 1; }
		if(cuffed[other])
		{

		    SetPlayerSpecialAction(other,SPECIAL_ACTION_NONE);
		    new name[MAX_PLAYER_NAME];
		    GetCharacterName(other,name);
		    new str[128];
		    format(str,sizeof(str),"removes the handcuffs binding %s's wrists",name);
			SendEmote(playerid,str);
			cuffed[other] = 0;
			cl_RemoveClothing(other,CLOTHING_MISC);
			return 1;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"This player is not cuffed, use /cuff to cuff them.");
		    return 1;

		}

    }
    else
    {

        SendClientMessage(playerid,COLOR_LIGHTRED,"You are not a cop or are not duty.");
        return 1;

    }

}

COMMAND:backup(playerid) // Jordan v1.3
{
	if(IsLaw(playerid) && duty[playerid])
	{
	    for(new i = 0; i <= MAX_PLAYERS; i++)
	    {
	        if(IsLaw(playerid) && duty[playerid])
	        {
	            SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid) | 0x000000FF);
	            SetTimer("RemovePlayerBlip", 30000, 0);
	        }
	    }
	    new str[128];
	    new name[MAX_PLAYER_NAME+1];
	    GetPlayerName(playerid, name, sizeof(name));
	    format(str,sizeof(str),"[DISPATCH] %s %s is requesting immediate assistance. A waypoint to him has been placed on your GPS.", CharacterInfo[playerid][active_character[playerid]][cRankName], name);
     	SendCopMsg(str);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED,"You are not a cop or are not on duty.");
	    return 1;
	}
	return 1;
}

COMMAND:acceptreport(playerid,params[])
{
    if(AccountInfo[playerid][aAdmin] >= ADMIN_LVL_TRAIN)
    {
		new idx = 0;
	    new tmp[32];
		tmp = strtok(params,idx);
        GetPlayerName(params
        new str[64];
        format(str,sizeof(str),"[Admin Cmd] %s has accepted %s's report.",name,);
		SendAdminBroadcast(str);
    }
    else
    {

        SendErrorMsg(playerid,"You are not an admin.");
        return 1;

    }
	return 1;
}

COMMAND:denyreport(playerid,params[])
{

	return 1;
}

forward RemovePlayerBlip(playerid); // Jordan v1.3
public RemovePlayerBlip(playerid)
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsLaw(playerid) && duty[playerid])
		{
			SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid) | 0xFFFFFF00);
		}
	}
	return 1;
}

stock SendCheatAlert(playerid,type,extra)
{

	if(ac_cooldown[playerid] == 0)
	{
		switch(type)
		{

		    case CHEAT_SPEEDHACK:
		    {

		        new name[MAX_PLAYER_NAME];
		        GetCharacterName(playerid,name);
		        new str[256];
		        format(str,sizeof(str),"[WARNING] %s (%d) is travelling at %d MPH (Possible speed hacker)",name,playerid,extra);
		        SendAdminBroadcast(str);

		    }
		    case CHEAT_JETPACK:
		    {

		    	new name[MAX_PLAYER_NAME];
		        GetCharacterName(playerid,name);
		        new str[256];
		        format(str,sizeof(str),"[WARNING] %s (%d) has a jetpack!",name,playerid);
		        SendAdminBroadcast(str);

		    }
		    case CHEAT_WEAPONS:
		    {

		        if(extra != 46 && extra)
		        {
			    	new name[MAX_PLAYER_NAME];
			        GetCharacterName(playerid,name);
			        new str[256];
			        new wname[64];
			        GetWeaponName(extra,wname,sizeof(wname));
			        format(str,sizeof(str),"[WARNING] %s (%d) has just recieved a %s in an un-expected fashion!",name,playerid,wname);
			        SendAdminBroadcast(str);
			     }

		    }
		    case CHEAT_AMMO:
		    {

		    	new name[MAX_PLAYER_NAME];
		        GetCharacterName(playerid,name);
		        new str[256];
		        format(str,sizeof(str),"[WARNING] %s (%d) has just recieved ammunition in an un-expected fashion!",name,playerid,extra);
		        SendAdminBroadcast(str);

		    }

		}
		ac_cooldown[playerid] = 60;
	}

}

/*stock GenerateWeaponSum(playerid)
{

	new sum = 0;
	for(new i = 0; i < 13; i ++)
	{

		new weapon, ammo;
	    GetPlayerWeaponData(playerid,i,weapon,ammo);
	    sum += weapon;

	}
	return sum;

}

stock GenerateAmmoSum(playerid)
{

	new sum = 0;
	for(new i = 0; i < 13; i ++)
	{

		new weapon, ammo;
	    GetPlayerWeaponData(playerid,i,weapon,ammo);
	    sum += ammo;

	}
	return sum;

}*/

stock ResetPlayerWeaponsEx(playerid)
{

	for(new i = 0;  i < 13; i ++) { cheat_weapons[playerid][i] = 0; cheat_ammo[playerid][i] = 0; }
	ResetPlayerWeapons(playerid);

}

stock InFarmerVehicle(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid)) return false;
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 532) return true;
	return false;

}

stock RefreshFarmingStage(playerid)
{

	if(farming_stage[playerid] == 0)
	{

	    new point = random(sizeof(farming_pos));
		SetPlayerCheckpoint(playerid,farming_pos[point][0],farming_pos[point][1],farming_pos[point][2],5.0);
		farming_stage[playerid] = 1;

	}
	else
	{

	    SetPlayerCheckpoint(playerid,1934.3685,175.4802,37.9878,5.0);
	    farming_stage[playerid] = 0;

	}

}

stock PayFarmer(playerid)
{

	new pay = (random(10) + 10);
	new extrapay = (CharacterInfo[playerid][active_character[playerid]][cEmployed]) ? (5 * CharacterInfo[playerid][active_character[playerid]][cEmployed]) : 0;
	CharacterInfo[playerid][active_character[playerid]][cPayday] += (pay + extrapay);
	new str[128];
	format(str,sizeof(str),"~g~Farmer Drop-off Complete~n~~y~$%d~w~ added to paycheck",(pay + extrapay));
	GameTextForPlayer(playerid,str,5000,1);

}

stock DisableNeonsAndSirens(vehicleid)
{

	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{

	    if(VehicleInfo[slot][vNeon])
	    {

	        RemoveNeons(vehicleid);

	    }

	}
	if(vehicle_siren_state[vehicleid])
	{

		DestroyObject(vehicle_siren_object[vehicleid]);
		vehicle_siren_state[vehicleid] = 0;

	}

}

stock RefreshSprayPos(playerid)
{

	new veh = GetPlayerVehicleID(playerid);
	new slot = GetVehicleSlot(veh);
	if(slot > -1)
	{

		new col1 = VehicleInfo[slot][vColor1];
		new col2 = VehicleInfo[slot][vColor2];
		if(spraying_vehicle[playerid] == 1)
		{

			ChangeVehicleColor(veh,spraying_vehicle_color[playerid],col2);

		}
		else
		{

		    ChangeVehicleColor(veh,col1,spraying_vehicle_color[playerid]);

		}

	}

}

stock IsAtAuctionHouse(playerid)
{

	new biz = GetClosestBiz(playerid);
	if(biz == -1) return false;
	if(BizInfo[biz][bType] == BIZ_TYPE_VAUCTION) return true;
	return false;

}

stock CanHaveMoreSales(bizid)
{

	new total = 0;
	for(new i = 0; i < MAX_RP_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vSelling] == bizid) total ++;

	}
	return (total < 5) ? true : false;

}

stock ProcessVehicleAuction(playerid,biz,vehicleid,price)
{

	if(CharacterInfo[playerid][active_character[playerid]][cMoney] >= 2000)
	{

		if(!vehicle_creating)
		{

		    vehicle_creating = 1;
			new slot = GetVehicleSlot(vehicleid);
			CharacterInfo[playerid][active_character[playerid]][cMoney] -= 2000;
			BizInfo[biz][bBank] += 2000;
			DestroyVehicle(vehicleid);
			new Float:X, Float:Y, Float:Z, Float:R;
			new nextid = GetNextAuctionPosId(biz);
			GetNextAuctionPos(biz,X,Y,Z,R);
			VehicleInfo[slot][vSelling] = biz;
			VehicleInfo[slot][vLocked] = 1;
			VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],X,Y,Z,R,VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
			VehicleInfo[slot][vSelling] = biz;
			VehicleInfo[slot][vSellingPrice] = price;
			VehicleInfo[slot][vSellingExpire] = (gettime() + (60 * 60 * 24 * 3));
			if(strlen(VehicleInfo[slot][vPlate]) && !VehicleInfo[slot][vImpounded]) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
			LinkVehicleToInterior(VehicleInfo[slot][vVehicle],18);
			SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle],(biz + 2000));
			SendClientMessage(playerid,COLOR_GREEN,"Your used vehicle sale has been created, it will expire in 3 days. You will be informed when your sale has been finalised.");
			new Float:X2, Float:Y2;
			GetPosInFrontOfVehicle(VehicleInfo[slot][vVehicle], X2, Y2, 5.0);
			used_vehicle_pickups[biz][nextid] = CreatePickup(1239,2,X2,Y2,Z,(biz + 2000));
			used_vehicle_slots[biz][nextid] = slot;
			sync_attribs[VehicleInfo[slot][vVehicle]] = 1;
			vehicle_creating = 0;

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"Another vehicle is curentlly processing, please try again.");

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have $2000");

	}

}

stock GetNextAuctionPosId(bizid)
{

	for(new i = 0; i < 5; i ++)
	{

		if(used_vehicle_slots[bizid][i] == -1)
		{

		    return i;

		}

	}
	return -1;

}

stock GetNextAuctionPos(bizid,&Float:X,&Float:Y,&Float:Z,&Float:R,offset=-1)
{

	new total = (offset == -1) ? GetNextAuctionPosId(bizid) : offset;
	if(total < 5)
	{

    	X = used_veh_pos[total][0];
        Y = used_veh_pos[total][1];
        Z = used_veh_pos[total][2];
        R = used_veh_pos[total][3];

	}
	return true;

}

stock IsInAuctionHouse(playerid)
{

	new biz = in_biz[playerid];
 	if(biz == -1) return false;
 	if(BizInfo[biz][bType] == BIZ_TYPE_VAUCTION) return true;
 	return false;

}

stock GetClosestSellVehicle(playerid)
{

	if(in_biz[playerid] == -1) return -1;
	new winner = -1;
	new Float:winning_distance = 9999.0;
	for(new a = 0; a < 5; a ++)
	{

	    new Float:distance = GetDistanceToPoint(playerid,used_veh_pos[a][0],used_veh_pos[a][1],used_veh_pos[a][2]);
        if(distance < winning_distance && distance < 7.5)
		{

			winner = a;
			winning_distance = distance;

		}
    }
    return (winner > -1) ? used_vehicle_slots[in_biz[playerid]][winner] : -1;

}

stock qs_ConnectQuests()
{

	for(new i = 0; i < MAX_QUESTS; i ++)
	{

	    new str[128];
	    format(str,sizeof(str),"npc_quest_%d",i);
	    ConnectNPC(str,"npcidle");

	}

}

stock qs_InitNPC(npcid)
{

	new slot = qs_FetchNextNPCSlot();
	if(slot == -1 && !qs_npc_assigned[npcid])
	{

		Kick(npcid);

	}
	else if(!qs_npc_assigned[npcid])
	{

	    qs_npc_assigned[npcid] = 1;
	    qs_npc_processed[slot] = 1;
		qs_npc_ids[slot] = npcid;
		/*Move to staging area*/
		SetPlayerPos(npcid,qs_npc_locations[slot][0],qs_npc_locations[slot][1],qs_npc_locations[slot][2]);
		SetPlayerFacingAngle(npcid,qs_npc_locations[slot][3]);
		/*End move to staging area*/
		/*Assign name to NPC*/
		new tmp[128];
		format(tmp,sizeof(tmp),"%s [/talk]",qs_npc_names[slot]);
		qs_npc_labels[slot] = Create3DTextLabel(tmp, COLOR_LIGHTRED, qs_npc_locations[slot][0],qs_npc_locations[slot][1],qs_npc_locations[slot][2],15.0,0,0);
		Attach3DTextLabelToPlayer(qs_npc_labels[slot],npcid,0.0,0.0,0.5);
		/*End assign name to NPC*/
		/*Set NPC Skin*/
		SetPlayerSkin(npcid,qs_npc_skins[slot]);
		/*End set NPC skin*/

	}

}

stock qs_FetchNextNPCSlot()
{

	new returnVal = -1;
	for(new i = 0; i < MAX_QUESTS; i ++)
	{

		if(!qs_npc_processed[i])
		{

			returnVal = i;

		}

	}
	return returnVal;

}

stock qs_ProcessNPCIntro(playerid)
{

	new npc = qs_GetClosestQuest(playerid);
	if(npc > -1)
	{

		if(!qs_HasCompletedQuest(playerid,npc))
		{

		    SetPlayerFacingPlayer(qs_npc_ids[npc], playerid);
		    ApplyAnimation(qs_npc_ids[npc],"PED","IDLE_CHAT",4.0,0,0,0,1,1,1);
			new str[256];
			format(str,sizeof(str),"~p~%s~n~ ~n~~w~%s~n~ ~n~Use ~p~/takeerrand ~w~to do this errand!",qs_npc_names[npc],qs_intro_text[npc]);
			TextDrawSetString(infotxt[playerid],str);
			TextDrawShowForPlayer(playerid,infotxt[playerid]);
			infotxt_expire[playerid] = 11;
			qs_RunQuestIntroEvent(playerid,npc);

		}
		else
		{

		    SendClientMessage(playerid,COLOR_LIGHTRED,"You have already completed this persons errands.");

		}

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a errand giver!");

	}

}

stock qs_HasCompletedQuest(playerid,quest)
{

	new fname[128];
	format(fname,sizeof(fname),"missions/missions_%d.ini",CharacterInfo[playerid][active_character[playerid]][cID]);
	new quest_str[32];
	format(quest_str,sizeof(quest_str),"%d",quest);
	return dini_Isset(fname,quest_str);

}

stock qs_GetClosestQuest(playerid)
{

	new Float:winning_distance = 9999.0;
	new winner = -1;
	for(new i = 0; i < MAX_QUESTS; i ++)
	{

		if(IsPlayerNPC(qs_npc_ids[i]) && IsPlayerConnected(qs_npc_ids[i]))
		{

			new Float:distance = GetDistanceToPoint(playerid,qs_npc_locations[i][0],qs_npc_locations[i][1],qs_npc_locations[i][2]);
			if(distance < winning_distance && distance < 7.5)
			{

			    winning_distance = distance;
				winner = i;

			}

		}

	}
	return winner;

}

stock qs_ProcessNPCStart(playerid)
{

	new npc = qs_GetClosestQuest(playerid);
	if(npc > -1)
	{

	    if(!qs_HasCompletedQuest(playerid,npc))
	    {

			qs_OnQuestEvent(playerid,npc,QUESTEVENT_START);
			return 1;

	    }
	    else
	    {

	        SendClientMessage(playerid,COLOR_LIGHTRED,"You have already completed this persons errands.");
	        return 1;

	    }

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"You are not near a errand giver.");
	    return 1;

	}

}

qs_OnQuestEvent(playerid,quest,event)
{

	switch(event)
	{

	    case QUESTEVENT_START:
	    {

			SendClientMessage(playerid,COLOR_GREEN,qs_start_msgs[quest]);
			SetPlayerCheckpoint(playerid,qs_targets[quest][0][0],qs_targets[quest][0][1],qs_targets[quest][0][2],3.0);
			qs_inquest[playerid] = quest;
			qs_queststage[playerid] = 1;

	    }
	    case QUESTEVENT_UPDATE:
	    {

			if(qs_queststage[playerid] == 1)
			{

			   	SetPlayerCheckpoint(playerid,qs_targets[quest][1][0],qs_targets[quest][1][1],qs_targets[quest][1][2],3.0);
			   	SendStrMsg(playerid,COLOR_GREEN,"Return to %s",qs_npc_names[quest]);
			   	qs_queststage[playerid] = 2;
				qs_RunQuestAction(playerid,quest);

			}
			else if(qs_queststage[playerid] == 2)
			{

				CharacterInfo[playerid][active_character[playerid]][cMoney] += qs_rewards[quest];
				qs_inquest[playerid] = -1;
				qs_queststage[playerid] = 0;
				SendClientMessage(playerid,COLOR_GREEN,qs_finalmsg[quest]);
				SendStrMsg(playerid,COLOR_GREEN,"You have recieved $%d for doing this quest...",qs_rewards[quest]);
				qs_SetQuestComplete(playerid,quest);
				DisablePlayerCheckpoint(playerid);

			}

	    }

	}

}

stock qs_RunQuestIntroEvent(playerid,quest)
{

	switch(quest)
	{

	    case 1://Agent Johnson Voice
	    {

	        PlayerPlaySound(playerid,7604,0.0,0.0,0.0);

	    }

	}

}

stock qs_RunQuestAction(playerid,quest)
{

	switch(quest)
	{

	    case 0://LV Gas Station
	    {

	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0,1);
			SetTimerEx("BlowUpGasStation",4000,0,"%i",1);
			GameTextForPlayer(playerid,"~p~You hear a beeping sound... ~r~RUN!",5000,5);

	    }
	    case 1://Agent Johnson Burnt House
	    {

	        SendEmote(playerid,"leans down and sets some fabric on fire!");
	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0,1);
	        qs_tmp_objects[playerid][0] = F_CreateObject(18690, 2362.9751,-1643.0211,15.4764, 0.0,0.0,0.0, 0.0, true);
	        qs_tmp_objects[playerid][1] = F_CreateObject(18690, 2367.3020,-1639.6914,15.7275, 0.0,0.0,0.0, 0.0, true);
	        qs_tmp_objects[playerid][2] = F_CreateObject(18690, 2359.1038,-1638.9196,15.8390, 0.0,0.0,0.0, 0.0, true);
	        qs_tmp_objects[playerid][3] = F_CreateObject(18690, 2359.5479,-1643.1423,11.5157, 0.0,0.0,0.0, 0.0, true);
	        qs_tmp_objects[playerid][4] = F_CreateObject(18690, 2366.0801,-1643.1429,11.5393, 0.0,0.0,0.0, 0.0, true);
	        SetTimerEx("qs_ResetQuestObjects",10000,0,"%i",playerid);

	    }
	    case 2://Dumping Body Mission
	    {

	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0,1);
	        SendEmote(playerid,"dumps a few packages into the water");

	    }

	}

}

public BlowUpGasStation()
{

	CreateExplosion(2114.8650,919.2989,10.8203,1,50.0);

}

stock qs_SetQuestComplete(playerid,questid)
{

	new id = CharacterInfo[playerid][active_character[playerid]][cID];
	new str[128];
	new queststr[32];
	format(str,sizeof(str),"missions/missions_%d.ini",id);
	if(!dini_Exists(str)) dini_Create(str);
	format(queststr,sizeof(queststr),"%d",questid);
	dini_Set(str,queststr,"1");

}

public qs_ResetQuestObjects(playerid)
{

	for(new i = 0; i < 5; i ++)
	{

	    if(qs_tmp_objects[playerid][i] > 0) F_DestroyObject(qs_tmp_objects[playerid][i]);
	    qs_tmp_objects[playerid][i] = -1;

	}

}

stock cl_DressPlayer(playerid)
{

	new str[256];
	format(str,sizeof(str),"SELECT * FROM rp_clothing WHERE owner = '%d' AND equip = 1",CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_DRESS_PLAYER);

}

stock cl_GivePhone(playerid)
{

    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	if(CharacterInfo[playerid][active_character[playerid]][cPhoneModel] > 0)
	{

	    cl_SetClothing(playerid,CLOTHING_PHONE,CharacterInfo[playerid][active_character[playerid]][cPhoneModel],6,cl_phoneoffset[0],cl_phoneoffset[1],cl_phoneoffset[2],cl_phoneoffset[3],cl_phoneoffset[4],cl_phoneoffset[5],1.0,1.0,1.0);

	}

}

stock cl_RemovePhone(playerid)
{

    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	cl_RemoveClothing(playerid,CLOTHING_PHONE);

}

stock cl_SetClothing(playerid,type,objectid,bone,Float:offsetx,Float:offsety,Float:offsetz2,Float:offsetrx,Float:offsetry,Float:offsetrz,Float:sizex,Float:sizey,Float:sizez)
{

	switch(type)
	{

	    case CLOTHING_PLAYER:
	    {

	        new slot = cl_FetchNextClothingSlot(playerid);
	        if(slot > -1)
	        {

	            cl_clothingslots[playerid][slot] = cl_equipping[playerid];
	            return SetPlayerAttachedObject(playerid,slot,objectid,bone,offsetx,offsety,offsetz2,offsetrx,offsetry,offsetrz,sizex,sizey,sizez);

	        }
	        else
	        {

	            return false;

	        }

	    }
	    case CLOTHING_WEAPON:
	    {

			if(IsPlayerAttachedObjectSlotUsed(playerid,MAX_PLAYERCLOTHING)) return false;
	   	 	return SetPlayerAttachedObject(playerid,MAX_PLAYERCLOTHING,objectid,bone,offsetx,offsety,offsetz2,offsetrx,offsetry,offsetrz,sizex,sizey,sizez);

	    }
	    case CLOTHING_PHONE:
     	{

	        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 1))) return false;
	        return SetPlayerAttachedObject(playerid,(MAX_PLAYERCLOTHING + 1),objectid,bone,offsetx,offsety,offsetz2,offsetrx,offsetry,offsetrz,sizex,sizey,sizez);

	    }
	    case CLOTHING_HIDEWEAPON:
	    {

	        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 2))) return false;
	        return SetPlayerAttachedObject(playerid,(MAX_PLAYERCLOTHING + 2),objectid,bone,offsetx,offsety,offsetz2,offsetrx,offsetry,offsetrz,sizex,sizey,sizez);

	    }
	    case CLOTHING_MISC:
	    {

	        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 3))) return false;
	        return SetPlayerAttachedObject(playerid,(MAX_PLAYERCLOTHING + 3),objectid,bone,offsetx,offsety,offsetz2,offsetrx,offsetry,offsetrz,sizex,sizey,sizez);

	    }
	    case CLOTHING_HIDEWEAPONTWO:
	    {

	        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 4))) return false;
	        return SetPlayerAttachedObject(playerid,(MAX_PLAYERCLOTHING + 4),objectid,bone,offsetx,offsety,offsetz2,offsetrx,offsetry,offsetrz,sizex,sizey,sizez);

	    }

	}
	return false;

}

stock cl_FetchNextClothingSlot(playerid)
{

	for(new i = 0; i < MAX_PLAYERCLOTHING; i ++)
	{

		if(!IsPlayerAttachedObjectSlotUsed(playerid,i)) return i;

	}
	return -1;

}

stock cl_PutPlayerInDressingRoom(playerid)
{

	SetPlayerPos(playerid,257.5994,-41.5218,1002.0234);
	SetPlayerFacingAngle(playerid,90.0);
	SetPlayerInterior(playerid,14);
	TogglePlayerControllable(playerid,0);
	cl_ShowClothingMenu(playerid);
	SetPlayerVirtualWorld(playerid,playerid);
	SetPlayerCameraPos(playerid,(257.5994 - 1.0),-41.5218,(1002.0234 + 0.7));
	SetPlayerCameraLookAt(playerid,257.5994,-41.5218,(1002.0234 + 0.7));
	cl_RemoveAllClothing(playerid);

}

stock cl_ShowClothingMenu(playerid)
{

	switch(cl_menulevel[playerid])
	{

	    case 0:
	    {

			ShowPlayerDialog(playerid,DIALOG_CLOTHINGTOP,DIALOG_STYLE_LIST,"Please choose a category...","Masks\nWatches\nHats\nGlasses","Confirm","Cancel");

	    }
	    case 1:
	    {

	        new str[1024];
			new count = 0;
	        for(new i = 0; i < sizeof(cl_clothingitems); i ++)
	        {

	            if(cl_clothingitems[i][2] == cl_menutype[playerid])
	            {

	                new tmp[32];
	                format(tmp,sizeof(tmp),"Item #%d\n",count);
	                strins(str,tmp,strlen(str));
	                count ++;

	            }

	        }
	        ShowPlayerDialog(playerid,DIALOG_CLOTHINGBOT,DIALOG_STYLE_LIST,"What would you like to try on?",str,"Confirm","Back");

	    }

	}

}

stock cl_RemovePlayerFromDressingRoom(playerid)
{

	new biz = in_biz[playerid];
	SetPlayerPos(playerid,BizInfo[biz][bInteriorX],BizInfo[biz][bInteriorY],BizInfo[biz][bInteriorZ]);
	SetPlayerInterior(playerid,BizInfo[biz][bInterior]);
	SetPlayerVirtualWorld(playerid,(biz + 2000));
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid,1);

}

stock cl_SetPlayerAmmendingClothing(playerid,slot,endcallback[],clothesid=-1)
{

	format(cl_editcallback[playerid],256,"%s",endcallback);
	EditAttachedObject(playerid,slot);
	if(clothesid > -1)
	{

		new Float:X, Float:Y, Float:Z, Float:X2, Float:Y2;
		GetPlayerPos(playerid,X,Y,Z);
		GetPosInFrontOfPlayer(playerid,X2,Y2,1.0);
		new type = cl_clothingitems[clothesid][2];
		SetPlayerCameraPos(playerid,(X2 + cl_clothing_cams[type][0]),(Y2 + cl_clothing_cams[type][1]),(Z + cl_clothing_cams[type][2]));
		SetPlayerCameraLookAt(playerid,X,Y,(Z + cl_clothing_cams[type][2]));

	}

}

public cl_OnEditAmmendClothes(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{

	if(response == 1)
	{

	    new str[1024];
	    format(str,sizeof(str),"UPDATE rp_clothing SET x = '%f', y = '%f', z = '%f', rx = '%f', ry = '%f', rz = '%f', scalex = '%f', scaley = '%f', scalez = '%f' WHERE id = '%d' AND owner = '%d' LIMIT 1",
	    fOffsetX,
	    fOffsetY,
	    fOffsetZ,
		fRotX,
		fRotY,
		fRotZ,
		fScaleX,
		fScaleY,
		fScaleZ,
		cl_editinguid[playerid],
		CharacterInfo[playerid][active_character[playerid]][cID]);
		mysql_query(str,player_threads[playerid]);
		cl_RemoveAllClothing(playerid);
		cl_ShowPersonalClothingMenu(playerid);
		SendClientMessage(playerid,COLOR_GREEN,"Position saved!");

	}
	else
	{

	    SendClientMessage(playerid,COLOR_GREEN,"Reposition cancelled.");
	    cl_RemoveAllClothing(playerid);
		cl_ShowPersonalClothingMenu(playerid);

	}

}

public cl_OnEditShowroomClothes(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{

	if(response == 1)
	{

        SendConfirmationMsg(playerid,"You have finished placing your item, would you like to purchase it?",CONFIRM_TYPE_BUYCLOTHES,0);
        cl_tmpplacement_pos[playerid][0] = fOffsetX;
        cl_tmpplacement_pos[playerid][1] = fOffsetY;
        cl_tmpplacement_pos[playerid][2] = fOffsetZ;
        cl_tmpplacement_pos[playerid][3] = fRotX;
        cl_tmpplacement_pos[playerid][4] = fRotY;
        cl_tmpplacement_pos[playerid][5] = fRotZ;
        cl_tmpplacement_pos[playerid][6] = fScaleX;
        cl_tmpplacement_pos[playerid][7] = fScaleY;
        cl_tmpplacement_pos[playerid][8] = fScaleZ;
        cl_tmpplacement_data[playerid][0] = index;
        cl_tmpplacement_data[playerid][1] = boneid;

	}
	else
	{

	    SendClientMessage(playerid,COLOR_LIGHTRED,"Positioning Cancelled.");
	    cl_RemoveAllClothing(playerid);
		cl_ShowClothingMenu(playerid);

	}

}

cl_SetPlayerAmmending(playerid)
{

	SetPlayerPos(playerid,257.5994,-41.5218,1002.0234);
	SetPlayerFacingAngle(playerid,90.0);
	SetPlayerInterior(playerid,14);
	TogglePlayerControllable(playerid,0);
	cl_ShowPersonalClothingMenu(playerid);
	SetPlayerVirtualWorld(playerid,playerid);
	SetPlayerCameraPos(playerid,(257.5994 - 1.0),-41.5218,(1002.0234 + 0.7));
	SetPlayerCameraLookAt(playerid,257.5994,-41.5218,(1002.0234 + 0.7));
	cl_RemoveAllClothing(playerid);

}

cl_ShowPersonalClothingMenu(playerid)
{

	new str[256];
	format(str,sizeof(str),"SELECT name FROM rp_clothing WHERE owner = '%d'",CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_AMMEND_LIST);

}

stock cl_RemoveAllClothing(playerid,save=false)
{

	for(new i = 0; i < 10; i ++)
	{

	    if(IsPlayerAttachedObjectSlotUsed(playerid,i)) RemovePlayerAttachedObject(playerid,i);

	}
	if(save)
	{

	    new query[256];
	    mysql_query("UPDATE rp_clothing SET equip = 0 WHERE owner = '%d'",CharacterInfo[playerid][active_character[playerid]][cID]);
	    mysql_query(query,player_threads[playerid]);
	    for(new a = 0; a < MAX_PLAYERCLOTHING; a ++) { cl_clothingslots[playerid][a] = 0; }

	}

}

stock cl_RemoveFromPersonalAmmend(playerid)
{

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid,1);
	if(in_house[playerid] > -1)
	{

	    SetPlayerVirtualWorld(playerid,in_house[playerid]);
	    SetPlayerPos(playerid,HouseInfo[in_house[playerid]][hInteriorX],HouseInfo[in_house[playerid]][hInteriorY],HouseInfo[in_house[playerid]][hInteriorZ]);
	    SetPlayerInterior(playerid,HouseInfo[in_house[playerid]][hInterior]);

	}
	else if(in_biz[playerid] > -1)
	{

	    SetPlayerVirtualWorld(playerid,(in_biz[playerid] + 2000));
	    SetPlayerPos(playerid,BizInfo[in_biz[playerid]][bInteriorX],BizInfo[in_biz[playerid]][bInteriorY],BizInfo[in_biz[playerid]][bInteriorZ]);
	    SetPlayerInterior(playerid,BizInfo[in_biz[playerid]][bInterior]);

	}

}

stock cl_FetchObjectSlotFromObjectId(objectid)
{

	for(new i = 0; i < sizeof(cl_clothingitems); i ++)
	{

	    if(cl_clothingitems[i][0] == objectid)
	    {

	        return i;

	    }

	}
	return -1;

}

cl_RemoveClothing(playerid,type,slotortype=0)//0 = type 1 = slot
{

	if(slotortype == 0)
	{

		switch(type)
		{

		    case CLOTHING_WEAPON:
		    {

				if(IsPlayerAttachedObjectSlotUsed(playerid,MAX_PLAYERCLOTHING)) RemovePlayerAttachedObject(playerid,MAX_PLAYERCLOTHING);

		    }
		    case CLOTHING_PHONE:
	     	{

		        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 1))) RemovePlayerAttachedObject(playerid,(MAX_PLAYERCLOTHING + 1));

		    }
		    case CLOTHING_HIDEWEAPON:
		    {

		        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 2))) RemovePlayerAttachedObject(playerid,(MAX_PLAYERCLOTHING + 2));

		    }
		    case CLOTHING_MISC:
		    {

		        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 3))) RemovePlayerAttachedObject(playerid,(MAX_PLAYERCLOTHING + 3));

		    }
		    case CLOTHING_HIDEWEAPONTWO:
		    {

		        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 4))) RemovePlayerAttachedObject(playerid,(MAX_PLAYERCLOTHING + 4));

		    }

		}

	}
	else
	{

	    RemovePlayerAttachedObject(playerid,type);
	    new str[256];
	    format(str,sizeof(str),"UPDATE rp_clothing SET equip = 0 WHERE id = '%d' AND owner = '%d' LIMIT 1",cl_clothingslots[playerid][type],CharacterInfo[playerid][active_character[playerid]][cID]);
	    mysql_query(str,player_threads[playerid]);
	    cl_clothingslots[playerid][type] = 0;

	}

}

stock cl_FetchPlayerObjectSlotOffset(playerid,offset)
{

	for(new i = 0; i < MAX_PLAYERCLOTHING; i ++)
	{

		if(cl_clothingslots[playerid][i] == offset) return i;

	}
	return -1;

}

stock cl_SlotUsed(playerid,type)
{

	switch(type)
	{

	    case CLOTHING_WEAPON:
	    {

			if(IsPlayerAttachedObjectSlotUsed(playerid,MAX_PLAYERCLOTHING)) return true;
	    }
	    case CLOTHING_PHONE:
     	{

	        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 1))) return true;

	    }
	    case CLOTHING_HIDEWEAPON:
	    {

	        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 2))) return true;

	    }
	    case CLOTHING_MISC:
	    {

	        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 3))) return true;

	    }
	    case CLOTHING_HIDEWEAPONTWO:
	    {

	        if(IsPlayerAttachedObjectSlotUsed(playerid,(MAX_PLAYERCLOTHING + 4))) return true;

	    }

	}
	return false;

}

stock IsPushbike(model)
{

	return (model == 509 || model == 481 || model == 510) ? true : false;

}

stock RefreshMarketPrices()
{

	for(new i = 0; i < MAX_MARKETPRICES; i ++)
	{

	    mk_prices[i] = (random(100) + 124);

	}
	print("Refreshing Market Prices...");

}

public RemoveMiscClothing(playerid)
{

	cl_RemoveClothing(playerid,CLOTHING_MISC);

}

public OnPlayerGotJacked(playerid,jackerid,vehicleid)
{

	if(seatbelt[playerid]) seatbelt[playerid] = 0;
	new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
	GetCharacterName(playerid,name);
	GetCharacterName(jackerid,oname);
	new str[128];
	format(str,sizeof(str),"[WARNING] %s has just pulled %s from the vehicle",oname,name);
	SendAdminBroadcast(str);

}

stock CloseAllCells()
{

	for(new i = 0; i < MAX_CELLS; i ++)
	{

		object_data_status[i] = 1;
		ToggleGate(i);

	}

}

stock OpenAllCells()
{

	for(new i = 0; i < MAX_CELLS; i ++)
	{

		object_data_status[i] = 0;
		ToggleGate(i);

	}

}

stock FetchNextCell()
{

	for(new i = 0; i < MAX_CELLS; i ++)
	{

		if(PrisonInfo[i][pExpire] < gettime())
		{

			return i;

		}

	}
	return -1;

}

stock SavePrisons()
{

	new str[256];
	for(new i = 0; i < MAX_CELLS; i ++)
	{

	    format(str,sizeof(str),"UPDATE rp_prison SET owner = '%d', expire = '%d' WHERE id = '%d' LIMIT 1",
	    PrisonInfo[i][pOwner],
	    PrisonInfo[i][pExpire],
	    PrisonInfo[i][pID]);
	    mysql_query(str,QUERY_SAVE_PRISON);

	}
	print("Prison saved.");
	SendAdminBroadcast("[SERVER] Prison Successfully Saved");
	if(server_restarting) {
	    saved_vars ++;
	    CheckRestartState();
	}

}

stock LoadPrisons()
{

	mysql_query("SELECT * FROM rp_prison",QUERY_LOAD_PRISON,QUERY_LOAD_PRISON);

}

stock HasCell(playerid)
{

	for(new i = 0; i < MAX_CELLS; i ++)
	{

	    if(PrisonInfo[i][pOwner] == CharacterInfo[playerid][active_character[playerid]][cID] && PrisonInfo[i][pExpire] > gettime())
	    {

	        return true;

	    }

	}
	return false;

}

stock FetchPlayerCell(playerid)
{

	for(new i = 0; i < MAX_CELLS; i ++)
	{

	    if(PrisonInfo[i][pOwner] == CharacterInfo[playerid][active_character[playerid]][cID] && PrisonInfo[i][pExpire] > gettime())
	    {

	        return i;

	    }

	}
	return -1;

}

stock IssueFine(suspect,issuer[],reason[],amount)
{

	new str[256];
	new clean_issuer[256], clean_reason[256];
	mysql_real_escape_string(issuer,clean_issuer);
	mysql_real_escape_string(reason,clean_reason);
	format(str,sizeof(str),"INSERT INTO rp_fines (suspect,issuer,reason,amount) VALUES ('%d','%s','%s','%d')",
	CharacterInfo[suspect][active_character[suspect]][cID],
	clean_issuer,
	clean_reason,
	amount);
	mysql_query(str,player_threads[suspect]);

}

stock ShowPlayerTickets(playerid)
{

	new str[256];
	format(str,sizeof(str),"SELECT * FROM rp_fines WHERE suspect = '%d' AND paid = 0",CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_FETCH_TICKETS);

}

stock ViewTicket(playerid,slot)
{

	SetPVarInt(playerid,"ticket_slot",slot);
	new str[256];
	format(str,sizeof(str),"SELECT * FROM rp_fines WHERE suspect = '%d' AND paid = 0",CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_VIEW_TICKETS);

}

stock PayTicket(playerid,slot)
{

	SetPVarInt(playerid,"ticket_slot",slot);
	new str[256];
	format(str,sizeof(str),"SELECT * FROM rp_fines WHERE suspect = '%d' AND paid = 0",CharacterInfo[playerid][active_character[playerid]][cID]);
	mysql_query(str,player_threads[playerid],QUERY_PAY_TICKET);

}

stock ShowPrisoners(playerid)
{

	SendClientMessage(playerid,COLOR_FACTION,"|---------Prisoners----------|");
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerConnectedEx(i))
	    {

	        if(CharacterInfo[i][active_character[i]][cJailTime] > 1)
	        {

		        new name[MAX_PLAYER_NAME];
		        GetCharacterName(i,name);
		        new str[128];
		        new bailstr[128];
		        if(CharacterInfo[i][active_character[i]][cBail] > 0) { format(bailstr,sizeof(bailstr),"$%d",CharacterInfo[i][active_character[i]][cBail]); } else { format(bailstr,sizeof(bailstr),"Not Available."); }
		        format(str,sizeof(str),"%s (%d) bail: %s",name,i,bailstr);
		        SendClientMessage(playerid,COLOR_WHITE,str);

		  	}

	    }

	}
	SendClientMessage(playerid,COLOR_FACTION,"Use /paybail [playerid/player name] to pay someones bail.");

}

stock SendPrisonAnnouncement(str[])
{

	for(new i = 0; i < MAX_PLAYERS; i ++)
	{

	    if(IsPlayerInRangeOfPoint(i,200.0, 154.89, 1433.04, 12.67) || IsPlayerInRangeOfPoint(i,150.0,1796.80, -1548.17, 5687.70))
	    {

	        SendClientMessageA(i,COLOR_YELLOW,str);

	    }

	}

}

stock WeaponsCheck(playerid) {

	new weapons[13][2];
	for(new a = 0; a < 13; a ++)
	{

	    GetPlayerWeaponData(playerid,a,weapons[a][0],weapons[a][1]);
	    if(int_in_array(weapons[a][0],banned_weapons) > -1 && weapons[a][1] > 0 && weapons[a][0] != 0) { printf("ILLEGAL WEAPON BAN, Had weapon: %d Ammo: %d",weapons[a][0],weapons[a][1]); BannedWeaponsRemoval(playerid); }
	    if(weapons[a][0] != cheat_weapons[playerid][a] && weapons[a][1] > 0)
	    {

	        SendCheatAlert(playerid,CHEAT_WEAPONS,weapons[a][0]);
	        SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid weapon detected, weapons reset.");
	        ResetPlayerWeaponsEx(playerid);

	    }
	    else if(weapons[a][1] > cheat_ammo[playerid][a] && weapons[a][1] > 0)
	    {

	    	SendCheatAlert(playerid,CHEAT_AMMO,0);
	    	SendClientMessage(playerid,COLOR_LIGHTRED,"Invalid weapon detected, weapons reset.");
	        ResetPlayerWeaponsEx(playerid);

	    }

	}

}

iswheelmodel(modelid) {

	new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

	foreach(wheelmodels, I) {

		if (modelid == wheelmodels[I])
			return true;

	}

	return false;
}

IllegalCarNitroIde(carmodel) {

	new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

	foreach(illegalvehs, I) {

		if (carmodel == illegalvehs[I])
			return true;

	}

	return false;
}

stock islegalcarmod(vehicleide, componentid) {

	new modok = false;

	if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

		new nosblocker = IllegalCarNitroIde(vehicleide);

		if (!nosblocker)
			modok = true;

	} else {

		for(new I = 0; I < sizeof(legalmods); I ++) {

			if (legalmods[I][0] == vehicleide) {

				for(new J = 1; J < 22; J++) {
					if (legalmods[I][J] == componentid)
						modok = true;
				}
			}
		}
	}
	return modok;
}

stock ReSetVehiclePosEx(veh)
{

    vpos[veh][0] = 0.0;
    vpos[veh][1] = 0.0;
    vpos[veh][2] = 0.0;
    vpos[veh][3] = 0.0;

}

stock SetVehiclePosEx(vehicleid,Float:X, Float:Y, Float:Z)
{

	vpos[vehicleid][0] = X;
	vpos[vehicleid][1] = Y;
	vpos[vehicleid][2] = Z;
	SetVehiclePos(vehicleid,X,Y,Z);

}

stock setEnviroment() {
	if(dini_Exists("config.ini")) {
		server_enviroment = dini_Int("config.ini","enviroment");
	} else {
	    dini_Create("config.ini");
	    dini_IntSet("config.ini","enviroment",1);
	}
}

stock connectToMysql() {
	if(server_enviroment == ENVIROMENT_DEV) {
	   	mysql_connect("37.59.28.180","Tyrell1_20666","Tyrell1_20666","Shawntae1");
		if(mysql_ping() == -1) { print("Unable to connect to MySQL server... Quitting"); SendRconCommand("exit"); } else { print("Connected to MySQL server"); }
		print("Server Enviroment: DEV");
	} else if (server_enviroment == ENVIROMENT_LIVE) {
	   	mysql_connect("37.59.28.180","Tyrell1_20666","Tyrell1_20666","Shawntae1");
		if(mysql_ping() == -1) { print("Unable to connect to MySQL server... Quitting"); SendRconCommand("exit"); } else { print("Connected to MySQL server"); }
		print("Server Enviroment: LIVE");
	} else {
	    print("Unknown server enviroment, quitting.");
	    SendRconCommand("exit");
	}
}

stock beginSaveSequence() {

	if(active_house_save == 0 && active_biz_save == 0)
	{
	    SaveHouses();//1
	    SaveBizes();//2
	    SaveVehicles();//3
	    SaveInteriors();//4
	    SaveDrugs();//5
	    SaveFactions();//6
	    SaveCompanies();//7
	    SaveRigs();//8
	    SavePrisons();//9
	    return true;
	}
	return false;

}

stock logAdminEditAction(playerid,key[],log[])
{

	new str[512];
	new clean_key[128];
	new clean_log[256];
	mysql_real_escape_string(key,clean_key);
	mysql_real_escape_string(log,clean_log);
	format(str,sizeof(str),"INSERT INTO rp_admin_action_logs (admin,action_key,action_log) VALUES ('%d','%s','%s')",AccountInfo[playerid][aID],clean_key,clean_log);
	mysql_query(str,player_threads[playerid]);

}

stock clearHouseInventory(houseid)
{

	for(new i = 0; i < MAX_HOUSE_INVENTORY; i ++)
	{
	
		HouseInventoryInfo[houseid][i][hiItem] = -1;
		HouseInventoryInfo[houseid][i][hiAmount] = 0;
		
	}

}

WasteDeAMXersTime()
{
    new b;
    #emit load.pri b
    #emit stor.pri b
}
